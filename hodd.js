(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([[888], {
    8875: function(t, n, r) {
        var i, s, a;
        a = {
            canUseDOM: s = !!("undefined" != typeof window && window.document && window.document.createElement),
            canUseWorkers: "undefined" != typeof Worker,
            canUseEventListeners: s && !!(window.addEventListener || window.attachEvent),
            canUseViewport: s && !!window.screen
        },
        void 0 !== (i = (function() {
            return a
        }
        ).call(n, r, n, t)) && (t.exports = i)
    },
    6230: function(t) {
        t.exports = "object" == typeof self ? self.FormData : window.FormData
    },
    3454: function(t, n, r) {
        "use strict";
        var i, s;
        t.exports = (null == (i = r.g.process) ? void 0 : i.env) && "object" == typeof (null == (s = r.g.process) ? void 0 : s.env) ? r.g.process : r(7663)
    },
    6840: function(t, n, r) {
        (window.__NEXT_P = window.__NEXT_P || []).push(["/_app", function() {
            return r(3847)
        }
        ])
    },
    8813: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/Logo.84b43c3d.svg",
            height: 44,
            width: 64
        }
    },
    5931: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/SettingsUnFill light.6f812d34.svg",
            height: 25,
            width: 24
        }
    },
    6686: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/SettingsUnFill.810de71f.svg",
            height: 25,
            width: 24
        }
    },
    6340: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/TopicUnFill light.bdd6827b.svg",
            height: 25,
            width: 24
        }
    },
    4645: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/back light.d0e92a6c.svg",
            height: 24,
            width: 24
        }
    },
    3160: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/back.845b66cb.svg",
            height: 24,
            width: 24
        }
    },
    6777: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/cross.2e7ea9b0.svg",
            height: 16,
            width: 16
        }
    },
    1584: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/crossLight.75ec5fe8.svg",
            height: 16,
            width: 16
        }
    },
    7283: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/Cross-sign.0cf5b86d.svg",
            height: 24,
            width: 24
        }
    },
    1522: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/aboutUs-icon.712db6c3.svg",
            height: 13,
            width: 28
        }
    },
    4068: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/blockAction.2e0d0972.svg",
            height: 20,
            width: 20
        }
    },
    7862: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/blockActionLight.c9ef3969.svg",
            height: 20,
            width: 21
        }
    },
    2607: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/circle_orange.178e1040.svg",
            height: 24,
            width: 24
        }
    },
    5098: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/circle_white.edb3b163.svg",
            height: 24,
            width: 24
        }
    },
    4625: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/delete-bin.2080b31e.svg",
            height: 21,
            width: 21
        }
    },
    8154: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/delete-binlight.3985deb8.svg",
            height: 21,
            width: 21
        }
    },
    394: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/name_status_ok.8d9fb804.svg",
            height: 16,
            width: 16
        }
    },
    7344: function(t, n) {
        "use strict";
        n.Z = {
            src: "/_next/static/media/name_status_wrong.7f2cd473.svg",
            height: 16,
            width: 16
        }
    },
    1615: function(t, n, r) {
        "use strict";
        r.d(n, {
            e: function() {
                return l
            },
            u: function() {
                return c
            }
        });
        var i = r(6154)
          , s = r(4015)
          , a = r(8362)
          , o = r(3925);
        let l = i.Z.create({
            baseURL: a.Z.apiUrl,
            timeout: 1e4
        });
        l.defaults.headers.common["Content-Type"] = "application/json";
        let u = () => {
            let t = localStorage.getItem("userData");
            if (t)
                try {
                    let n = JSON.parse(t)
                      , r = n.accessToken;
                    return r || null
                } catch (i) {
                    console.error("Error parsing userData:", i)
                }
            return null
        }
          , c = t => {
            let n = t || u();
            n ? l.defaults.headers.common.Authorization = "Bearer ".concat(n) : delete l.defaults.headers.common.Authorization
        }
        ;
        l.interceptors.response.use(t => t.data, async t => {
            if (t.response) {
                if (401 === t.response.status) {
                    let n = await s.Z.getUserData();
                    if (!n.accessToken)
                        return;
                    try {
                        let r = await (0,
                        o.YV)({
                            refreshToken: n.refreshToken,
                            deviceId: ""
                        })
                          , {accessToken: i, refreshToken: a, expirationTime: l} = r.data;
                        if (403 === r.data.code)
                            throw Error("Error in refreshToken Logging Out");
                        n.accessToken = i,
                        n.refreshToken = a,
                        n.expirationTime = l,
                        localStorage.setItem("userData", JSON.stringify(n)),
                        window.location.reload()
                    } catch (u) {
                        403 === u.response.data.code && (s.Z.signOut(),
                        window.location.reload())
                    }
                } else
                    403 === t.response.status && (s.Z.signOut(),
                    window.location.reload())
            } else
                t.request;
            return Promise.reject(t)
        }
        )
    },
    7263: function(t, n, r) {
        "use strict";
        r.d(n, {
            Z: function() {
                return u
            }
        });
        var i = r(5893);
        r(7294);
        var s = r(7851)
          , a = {
            src: "/_next/static/media/ei_spinner-3.85e87d0c.svg",
            height: 111,
            width: 111
        }
          , o = {
            src: "/_next/static/media/white-spinner.b9f82ccb.svg",
            height: 111,
            width: 111
        };
        let l = t => {
            let {height: n=80, className: r, isWhite: l=!1} = t
              , u = l ? null == o ? void 0 : o.src : null == a ? void 0 : a.src;
            return (0,
            i.jsx)("div", {
                className: "flex justify-center items-center ".concat("h-".concat(n)),
                children: (0,
                i.jsx)("img", {
                    src: u,
                    alt: "Loading...",
                    className: (0,
                    s.m)("animate-spin h-14 w-14", r)
                })
            })
        }
        ;
        var u = l
    },
    5490: function(t, n, r) {
        "use strict";
        r.d(n, {
            Z: function() {
                return B
            }
        });
        var i = r(5893)
          , s = r(7294)
          , a = r(3253)
          , o = r.n(a)
          , l = r(3160)
          , u = r(4645)
          , c = r(6777)
          , d = r(1584)
          , h = r(5675)
          , f = r.n(h)
          , p = {
            src: "/_next/static/media/secured.aa67a073.svg",
            height: 16,
            width: 14
        }
          , g = {
            src: "/_next/static/media/securedLight.19e40e70.svg",
            height: 16,
            width: 15
        }
          , m = {
            src: "/_next/static/media/us.bedaf2df.svg",
            height: 18,
            width: 24
        }
          , y = r(8813)
          , _ = {
            src: "/_next/static/media/india.1b45e873.svg",
            height: 18,
            width: 24
        }
          , v = {
            src: "/_next/static/media/dropArrow.ecae9505.svg",
            height: 13,
            width: 12
        }
          , E = {
            src: "/_next/static/media/dropArrowLight.7479683f.svg",
            height: 13,
            width: 12
        }
          , b = r(3509)
          , C = function(t) {
            let {options: n, selectedOption: r, onSelect: a} = t
              , [o,l] = (0,
            s.useState)(!1)
              , u = (0,
            s.useRef)(null)
              , {resolvedTheme: c} = (0,
            b.Z)()
              , d = () => {
                l(!o)
            }
              , h = (t, n) => {
                n.stopPropagation(),
                a(t),
                l(!1)
            }
              , p = t => {
                t.stopPropagation(),
                d()
            }
              , g = t => {
                u.current && !u.current.contains(t.target) && l(!1)
            }
            ;
            return (0,
            i.jsxs)("div", {
                className: "relative",
                onClick: g,
                children: [(0,
                i.jsxs)("div", {
                    className: "bg-transparent text-white pl-4 pr-2 py-2 rounded-xl cursor-pointer flex items-center font-normal text-base",
                    onClick: d,
                    children: [(0,
                    i.jsx)("img", {
                        src: r.image,
                        className: "h-6 w-6 mr-2",
                        alt: r.text
                    }), (0,
                    i.jsx)("span", {
                        className: "white text-dark-primary-black dark:text-primary-white",
                        children: r.value
                    }), (0,
                    i.jsx)("span", {
                        className: "ml-2 cursor-pointer text-sm",
                        onClick: p,
                        children: (0,
                        i.jsx)(f(), {
                            src: "dark" === c ? v : E,
                            alt: "back"
                        })
                    })]
                }), o && (0,
                i.jsxs)("div", {
                    ref: u,
                    className: "absolute mt-4 w-56 border border-gray-300 rounded-lg shadow-lg font-normal text-base border-[rgba(250,250,250,0.12)] bg-white dark:bg-gradient-to-b from-[#3E2627] to-[#13151F] p-2.5",
                    children: [(0,
                    i.jsx)("div", {
                        className: "text-15 dark:text-primary-white text-dark-primary-black px-4 text-left",
                        children: "Select a country"
                    }), n.map(t => (0,
                    i.jsx)("div", {
                        className: "px-4 pb-2 mt-6 hover:bg-gray-100 cursor-pointer",
                        onClick: n => h(t, n),
                        children: (0,
                        i.jsxs)("div", {
                            className: "flex items-center justify-between dark:text-white text-dark-primary-black",
                            children: [(0,
                            i.jsxs)("div", {
                                className: "flex items-center",
                                children: [(0,
                                i.jsx)("img", {
                                    src: t.image,
                                    className: "h-6 w-6 mr-2",
                                    alt: t.text
                                }), (0,
                                i.jsx)("span", {
                                    children: t.text
                                })]
                            }), (0,
                            i.jsx)("span", {
                                className: "ml-2 text-right",
                                children: t.value
                            })]
                        })
                    }, t.value))]
                })]
            })
        }
          , S = r(7851)
          , A = function(t) {
            let {onNext: n, onGenderSelect: r} = t
              , [a,o] = (0,
            s.useState)(null)
              , [l,u] = (0,
            s.useState)("")
              , c = () => {
                a ? (r(a),
                n()) : u("Please select a gender.")
            }
            ;
            return (0,
            i.jsxs)("div", {
                className: "mt-12",
                children: [(0,
                i.jsx)("div", {
                    children: [{
                        id: "Female",
                        label: "Female"
                    }, {
                        id: "Male",
                        label: "Male"
                    }, {
                        id: "Others",
                        label: "Others"
                    }].map(t => (0,
                    i.jsx)("div", {
                        className: (0,
                        S.m)("rounded-[3.25rem] border-[0.5px] text-dark-primary-black dark:text-primary-white w-60 h-14 cursor-pointer p-2 flex items-center justify-center mx-auto mb-4 mt-2 bg-[#F6F6F6] dark:bg-black/10", a !== t.id && "border-[#e6e6e6] dark:border-[rgba(136,136,136,0.24)]", a === t.id ? "border-primary text-primary dark:text-primary bg-[#FDF4F2]" : ""),
                        onClick() {
                            o(t.id),
                            u("")
                        },
                        children: t.label
                    }, t.id))
                }), l && (0,
                i.jsx)("div", {
                    className: "error-message",
                    children: l
                }), (0,
                i.jsx)("div", {
                    className: "absolute bottom-14 left-0 w-full bg-transparent p-4 -z-10",
                    children: (0,
                    i.jsx)("button", {
                        className: "relative rounded-full border-[1.5px] border-primary h-12 px-5 bg-primary mt-5 cursor-pointer text-lg text-primary-white",
                        style: {
                            width: "50%",
                            marginTop: "46px"
                        },
                        disabled: !a,
                        onClick: c,
                        children: "Next"
                    })
                })]
            })
        }
          , N = function(t) {
            let {onNext: n, onSaveUserData: r, professionOptions: a} = t
              , [o,l] = (0,
            s.useState)(null)
              , [u,c] = (0,
            s.useState)("")
              , d = () => {
                o ? r(o) : c("Please select a profession.")
            }
            ;
            return (0,
            i.jsxs)("div", {
                className: "mt-12",
                children: [(0,
                i.jsx)("div", {
                    children: a.map(t => (0,
                    i.jsx)("div", {
                        className: (0,
                        S.m)("rounded-[3.25rem] border-[0.5px] border-[#bfbfbf]/25 text-dark-primary-black dark:text-primary-white w-60 h-14 cursor-pointer p-2 flex items-center justify-center mx-auto mb-4 mt-2 bg-[#F6F6F6] dark:bg-black/10", o !== t.value && "border-[#e6e6e6] dark:border-[rgba(136,136,136,0.24)]", o === t.value ? "border-primary text-primary dark:text-primary bg-[#FDF4F2]" : ""),
                        onClick() {
                            l(t.value),
                            c("")
                        },
                        children: t.label
                    }, t.value))
                }), u && (0,
                i.jsx)("div", {
                    className: "error-message",
                    children: u
                }), (0,
                i.jsx)("div", {
                    className: "modal-footer-login",
                    children: (0,
                    i.jsx)("button", {
                        className: (0,
                        S.m)("rounded-full border-[1.5px] border-primary h-12 px-5 bg-primary mt-5 cursor-pointer text-lg disabled:opacity-50 text-primary-white"),
                        style: {
                            width: "50%",
                            marginTop: "46px"
                        },
                        disabled: !o,
                        onClick: d,
                        children: "Next"
                    })
                })]
            })
        }
          , T = r(3925);
        r(3782);
        var I = r(2602)
          , O = r(6144)
          , w = r(9213);
        function k(t) {
            let {setView: n} = t
              , [r,a] = (0,
            s.useState)([])
              , [o,l] = (0,
            s.useState)([])
              , [u,c] = (0,
            s.useState)(!1)
              , {logEvent: d} = (0,
            O.Z)();
            (0,
            s.useEffect)( () => {
                let t = async () => {
                    try {
                        let t = await (0,
                        T.ZS)();
                        l(t.data)
                    } catch (n) {
                        console.error("Error fetching topics:", n)
                    }
                }
                ;
                t()
            }
            , []);
            let h = async () => {
                c(!0);
                try {
                    await (0,
                    T.Tp)(r),
                    n("welcome"),
                    d(w.TB.Web_User_Topics_Selected)
                } catch (t) {
                    console.log("Error in Following topics", t)
                } finally {
                    c(!1)
                }
            }
              , f = t => {
                a(n => n.includes(t.id) ? n.filter(n => n !== t.id) : [...n, t.id])
            }
            ;
            return (0,
            i.jsxs)("div", {
                className: "mt-6",
                children: [(0,
                i.jsx)("div", {
                    className: "sm:max-h-[280px] max-h-[60vh] overflow-y-scroll",
                    children: (0,
                    i.jsx)("div", {
                        className: "space-y-8",
                        children: null == o ? void 0 : o.map(t => (0,
                        i.jsx)(I.Z, {
                            genre: t,
                            handleTopicClick: f,
                            selectedTopics: r
                        }, null == t ? void 0 : t.label))
                    })
                }), (0,
                i.jsx)("div", {
                    children: (0,
                    i.jsx)("button", {
                        className: "rounded-full font-semibold border-[1.5px] border-primary h-12 px-5 bg-primary mt-5 cursor-pointer text-lg disabled:opacity-50 disabled:cursor-not-allowed text-primary-white",
                        style: {
                            width: "50%"
                        },
                        onClick: h,
                        disabled: r.length < 3 || u,
                        children: "Continue"
                    })
                })]
            })
        }
        var U = r(394)
          , R = r(7344)
          , M = r(5174)
          , P = r(6866)
          , L = function(t) {
            let {onStart: n} = t
              , [r,a] = (0,
            s.useState)("")
              , [o,l] = (0,
            s.useState)(!1)
              , [u,c] = (0,
            s.useState)("")
              , [d,h] = (0,
            s.useState)("")
              , [f,p] = (0,
            s.useState)([])
              , [g,m] = (0,
            s.useState)("")
              , {updateUserInfo: y} = (0,
            P.Z)()
              , {setUserProperties: _} = (0,
            O.Z)();
            (0,
            s.useEffect)( () => {
                let t = localStorage.getItem("userData");
                if (t) {
                    let n = JSON.parse(t);
                    h(n.userName),
                    a(n.profileImage)
                }
                S()
            }
            , []);
            let v = async t => {
                try {
                    let n = await (0,
                    M.T3)(t);
                    l(null == n ? void 0 : n.isUsernameExists),
                    c(null == n ? void 0 : n.Message)
                } catch (r) {}
            }
              , E = t => {
                let {value: n} = t.target;
                /^[a-zA-Z0-9]+$/.test(n) || "" === n ? (h(n),
                v(n),
                c("")) : c("Only letters and numbers are allowed")
            }
              , b = async t => {
                let r = JSON.parse(localStorage.getItem("userData"))
                  , i = {
                    aboutMe: (null == r ? void 0 : r.aboutMe) || "",
                    designation: (null == r ? void 0 : r.designation) || "",
                    gender: (null == r ? void 0 : r.gender) || "",
                    profession: (null == r ? void 0 : r.profession) || "",
                    profileImage: (null == r ? void 0 : r.profileImage) || "",
                    userName: t || ""
                };
                try {
                    let s = await (0,
                    T.WY)(i);
                    200 === s.code || 200 === s.status ? (r.userName = t,
                    localStorage.setItem("userData", JSON.stringify(r)),
                    _({
                        userName: r.userName
                    }),
                    y(),
                    n()) : console.log("Request failed with status: " + s.status)
                } catch (a) {
                    console.log("Error in changeUserName", a)
                }
            }
              , C = t => {
                h(t),
                v(t),
                m(t)
            }
              , S = async () => {
                try {
                    var t;
                    let n = await (0,
                    T.yt)();
                    n && (null == n ? void 0 : null === (t = n.data) || void 0 === t ? void 0 : t.suggestedName) && p(n.data.suggestedName)
                } catch (r) {
                    console.error("Error fetching suggested names:", r)
                }
            }
            ;
            return (0,
            i.jsxs)(i.Fragment, {
                children: [(0,
                i.jsxs)("div", {
                    className: "px-8",
                    children: [(0,
                    i.jsx)("div", {
                        className: "flex flex-col gap-y-2 sm:gap-y-4",
                        children: (0,
                        i.jsx)("p", {
                            className: "text-secondary-gray-light dark:text-[#BFBFBF] text-xl sm:text-xl font-normal text-center py-3",
                            children: "Choose an anonymous identity."
                        })
                    }), (0,
                    i.jsxs)("div", {
                        className: "mt-8 sm:mt-12 border-b border-primary flex gap-x-2 sm:gap-x-4 pb-2",
                        children: [(0,
                        i.jsx)("img", {
                            src: r,
                            alt: "profile-image",
                            className: "w-8 sm:w-10 aspect-square"
                        }), (0,
                        i.jsx)("input", {
                            autoComplete: "off",
                            value: d,
                            autoFocus: !0,
                            className: "outline-none text-xl sm:text-2xl font-semibold focus:caret-primary text-primary bg-transparent",
                            name: "userName",
                            placeholder: "Username",
                            onChange: E
                        })]
                    }), (0,
                    i.jsxs)("div", {
                        className: "flex justify-between mt-1 sm:mt-2",
                        children: [(0,
                        i.jsx)("p", {
                            className: "text-secondary-gray-light dark:text-secondary-gray text-xs font-normal",
                            children: o ? "".concat(u) : "This is your current username"
                        }), (0,
                        i.jsx)("img", {
                            src: o ? null === R.Z || void 0 === R.Z ? void 0 : R.Z.src : null === U.Z || void 0 === U.Z ? void 0 : U.Z.src,
                            alt: "name-status"
                        })]
                    })]
                }), (0,
                i.jsx)("div", {
                    className: "flex justify-center mt-12",
                    children: (0,
                    i.jsx)("div", {
                        className: "overflow-auto",
                        style: {
                            whiteSpace: "nowrap"
                        },
                        children: f.map(t => (0,
                        i.jsx)("button", {
                            className: "flex-1 lg:mx-2 mx-1 text-center border-[0.5px] border-solid rounded-[24px] px-4 py-2 text-md font-normal ".concat(g === t ? "bg-primary text-primary-white border-primary" : "border-primary text-primary"),
                            onClick: () => C(t),
                            children: t
                        }, t))
                    })
                }), (0,
                i.jsx)("div", {
                    className: "text-secondary-gray-light dark:text-secondary-gray py-4 text-base font-normal opacity-80",
                    children: "You can choose one of these"
                }), (0,
                i.jsx)("div", {
                    className: "absolute bottom-14 left-0 w-full bg-transparent p-4 -z-10",
                    children: (0,
                    i.jsx)("button", {
                        className: "rounded-full border-primary border-[1.5px] h-12 px-5 bg-primary mt-5 cursor-pointer font-semibold text-lg disabled:opacity-40 text-primary-white",
                        style: {
                            width: "50%"
                        },
                        onClick: () => b(d),
                        disabled: o,
                        children: "Let's go"
                    })
                })]
            })
        }
          , D = r(7263)
          , x = r(1163)
          , F = r(1852)
          , H = r(2920)
          , j = r(8212);
        function G(t) {
            let {value: n, valueLength: r, onChange: a} = t
              , o = (0,
            s.useMemo)( () => {
                let t = n.split("")
                  , i = [];
                for (let s = 0; s < r; s++) {
                    let a = t[s];
                    j.Oo.test(a) ? i.push(a) : i.push("")
                }
                return i
            }
            , [n, r])
              , l = t => {
                let n = t.nextElementSibling;
                n && n.focus()
            }
              , u = t => {
                let n = t.previousElementSibling;
                n && n.focus()
            }
              , c = (t, i) => {
                let s = t.target
                  , o = s.value.trim()
                  , u = j.Oo.test(o);
                if (!u && "" !== o)
                    return;
                let c = s.nextElementSibling;
                if (!u && c && "" !== c.value)
                    return;
                o = u ? o : " ";
                let d = o.length;
                if (1 === d) {
                    let h = n.substring(0, i) + o + n.substring(i + 1);
                    if (a(h),
                    !u)
                        return;
                    l(s)
                } else
                    d === r && (a(o),
                    s.blur())
            }
              , d = t => {
                let {key: n} = t
                  , r = t.target;
                if ("ArrowRight" === n || "ArrowDown" === n)
                    return t.preventDefault(),
                    l(r);
                if ("ArrowLeft" === n || "ArrowUp" === n)
                    return t.preventDefault(),
                    u(r);
                let i = r.value;
                r.setSelectionRange(0, i.length),
                "Backspace" === t.key && "" === i && u(r)
            }
              , h = t => {
                let {target: n} = t
                  , r = n.previousElementSibling;
                if (r && "" === r.value)
                    return r.focus();
                n.setSelectionRange(0, n.value.length)
            }
            ;
            return (0,
            i.jsx)("div", {
                className: "flex justify-center gap-x-4",
                children: o.map( (t, n) => (0,
                i.jsx)("input", {
                    type: "text",
                    inputMode: "numeric",
                    autoComplete: "one-time-code",
                    pattern: "\\d{1}",
                    maxLength: r,
                    className: "w-[48px] py-3 rounded-xl bg-[#F6F6F6] dark:bg-[#888888]/10 text-2xl font-medium text-center focus:ring-1",
                    value: t,
                    autoFocus: !0,
                    onChange: t => c(t, n),
                    onKeyDown: d,
                    onFocus: h
                }, n))
            })
        }
        var B = function(t) {
            let[n,r] = (0,
            s.useState)("phone")
              , [a,h] = (0,
            s.useState)("")
              , [v,E] = (0,
            s.useState)(!1)
              , [S,I] = (0,
            s.useState)(59)
              , [U,R] = (0,
            s.useState)(!1)
              , [M,P] = (0,
            s.useState)(!1)
              , [j,B] = (0,
            s.useState)([])
              , [V,q] = (0,
            s.useState)("")
              , [z,K] = (0,
            s.useState)("")
              , [W,Y] = (0,
            s.useState)(null)
              , Q = (0,
            F.useMediaQuery)({
                maxWidth: 768
            })
              , [J,Z] = (0,
            s.useState)(!1)
              , [$,X] = (0,
            s.useState)("")
              , ee = t => X(t)
              , {logEvent: et, setUserId: en, setUserProperties: er} = (0,
            O.Z)()
              , {resolvedTheme: ei} = (0,
            b.Z)()
              , es = {
                width: "500px",
                height: Q ? "100vh" : "auto",
                borderRadius: Q ? "0" : "1.5rem"
            };
            Q || (es = {
                ...es,
                height: "600px"
            },
            "creatingFeed" !== n || (es.width = "408px",
            es.height = "400px"));
            let[ea,eo] = (0,
            s.useState)({
                age: "",
                career: {},
                countryCode: "",
                deviceId: "",
                gender: "",
                latitude: "null",
                longitude: "null",
                phoneNumber: "",
                profession: "",
                otp: ""
            })
              , el = [{
                value: "+91",
                text: "IN",
                image: _.src
            }, {
                value: "+1",
                text: "USA",
                image: m.src
            }]
              , [eu,ec] = (0,
            s.useState)({
                value: "+91",
                text: "+91",
                image: _.src
            })
              , [ed,eh] = (0,
            s.useState)("+91")
              , ef = t => {
                ec(t),
                eh(t.value)
            }
              , ep = (0,
            x.useRouter)()
              , eg = (t, n) => {
                et(w.TB.Web_Get_OTP_Click),
                (0,
                T.IL)(t, n).then(t => {
                    t.code >= 200 ? (r("otp"),
                    em()) : H.Am.error("Invalid number. Check the country code.")
                }
                ).catch(t => {
                    console.error("OTP Error:", t),
                    H.Am.error("Invalid number. Check the country code.")
                }
                )
            }
              , em = () => {
                I(30),
                W && clearInterval(W);
                let t = setInterval( () => {
                    I(n => n <= 1 ? (clearInterval(t),
                    0) : n - 1)
                }
                , 1e3);
                Y(t)
            }
              , ey = () => {
                let t = ed.replace("+", "");
                W && clearInterval(W),
                (0,
                T.jt)(a, t).then(t => {
                    t.code && (I(30),
                    em())
                }
                ).catch(t => {
                    console.error("Resend OTP Error:", t)
                }
                )
            }
              , e_ = () => {
                Z(!0);
                let t = ed.replace("+", "");
                (0,
                T.zS)(a, t, $).then(t => {
                    if (t.code) {
                        if (P(t.data.isNewUser),
                        B(t.data.professionOptions),
                        q(t.data.isNewUser ? V : ""),
                        K(t.data.isNewUser ? z : ""),
                        et(w.TB.Web_OTP_Verified),
                        t.data.isNewUser)
                            r("gender");
                        else {
                            var n, i, s;
                            localStorage.setItem("userData", JSON.stringify(t.data)),
                            en(null === (n = t.data) || void 0 === n ? void 0 : n.id),
                            er({
                                gender: null === (i = t.data) || void 0 === i ? void 0 : i.gender,
                                userName: null === (s = t.data) || void 0 === s ? void 0 : s.userName
                            });
                            let a = ep.pathname;
                            "/feed" === a ? ep.reload() : ep.push("/feed")
                        }
                    }
                }
                ).catch(t => {
                    var n, r;
                    console.error("Confirm OTP Error:", t),
                    H.Am.error(null == t ? void 0 : null === (n = t.response) || void 0 === n ? void 0 : null === (r = n.data) || void 0 === r ? void 0 : r.message)
                }
                ).finally( () => {
                    Z(!1)
                }
                )
            }
              , ev = t => {
                q(t),
                et(w.TB.Web_User_Gender_Selected)
            }
              , eE = t => {
                let n = ed.replace("+", "");
                et(w.TB.Web_User_Profession_Selected),
                (0,
                T._Q)({
                    age: "",
                    career: {},
                    countryCode: n,
                    deviceId: "",
                    gender: V,
                    latitude: "null",
                    longitude: "null",
                    phoneNumber: a,
                    profession: t,
                    otp: $
                }).then(t => {
                    var n, i;
                    localStorage.setItem("userData", JSON.stringify(t.data)),
                    en(null === (n = t.data) || void 0 === n ? void 0 : n.id),
                    er({
                        gender: null === (i = t.data) || void 0 === i ? void 0 : i.gender
                    }),
                    r("your_interest")
                }
                ).catch(t => {
                    console.error("Save User Data Error:", t)
                }
                )
            }
              , eb = () => {
                switch (n) {
                case "otp":
                    r("phone");
                    break;
                case "gender":
                    r("otp");
                    break;
                case "profession":
                    r("gender");
                    break;
                case "your_interest":
                    r("profession");
                    break;
                case "welcome":
                    r("your_interest")
                }
            }
              , eC = () => {
                r("creatingFeed"),
                R(!0),
                et(w.TB.Web_Lets_Go_Click),
                setTimeout( () => {
                    let t = ep.pathname;
                    "/feed" === t ? ep.reload() : ep.push("/feed")
                }
                , 1e3)
            }
            ;
            return (0,
            i.jsxs)(o(), {
                isOpen: t.isOpen,
                ariaHideApp: !1,
                className: "mob-modal-new md:web-modal w-fit md:w-3/12",
                contentLabel: "Login Modal",
                overlayClassName: "custom-overlay",
                style: {
                    content: es
                },
                children: ["gender" !== n && "profession" !== n && "your_interest" !== n && "welcome" !== n && "creatingFeed" !== n && (0,
                i.jsxs)("div", {
                    className: "header flex justify-between items-center",
                    children: [(0,
                    i.jsx)("button", {
                        className: "back-button",
                        onClick: eb,
                        children: (0,
                        i.jsx)(f(), {
                            src: "dark" === ei ? l.Z : u.Z,
                            alt: "back",
                            className: "block sm:hidden",
                            onClick(n) {
                                n.stopPropagation(),
                                t.toggle()
                            }
                        })
                    }), (0,
                    i.jsx)(f(), {
                        src: y.Z,
                        alt: "hood",
                        className: "w-12 m-auto lg:mb-4"
                    }), (0,
                    i.jsx)(f(), {
                        src: "dark" === ei ? c.Z : d.Z,
                        style: {
                            marginTop: " -21px"
                        },
                        className: "h-4 w-4 cursor-pointer float-right hidden sm:block",
                        alt: "cross",
                        onClick(n) {
                            n.stopPropagation(),
                            t.toggle()
                        }
                    })]
                }), (0,
                i.jsxs)("div", {
                    children: [(0,
                    i.jsx)("div", {
                        className: "modal-header text-center font-2l mt-12 font-semibold",
                        children: ( () => {
                            switch (n) {
                            case "phone":
                                return "Enter phone number";
                            case "otp":
                                return "OTP Verification";
                            case "gender":
                                return "Gender?";
                            case "profession":
                                return "You are?";
                            case "your_interest":
                                return (0,
                                i.jsxs)("div", {
                                    className: "space-y-4",
                                    children: [(0,
                                    i.jsx)("h3", {
                                        className: "text-2xl font-bold text-dark-primary-black dark:text-white",
                                        children: "Choose your interests"
                                    }), (0,
                                    i.jsx)("p", {
                                        className: "text-[0.938rem] font-normal text-secondary-gray-light dark:text-gray px-4",
                                        children: "Choose 3 or more to personalize your Hood experience"
                                    })]
                                });
                            case "welcome":
                                return (0,
                                i.jsx)("span", {
                                    className: "text-5xl font-semibold text-dark-primary-black dark:text-primary-white",
                                    children: "Welcome!"
                                });
                            default:
                                return ""
                            }
                        }
                        )()
                    }), (0,
                    i.jsxs)("div", {
                        className: "text-center",
                        children: ["phone" === n && (0,
                        i.jsxs)("div", {
                            children: [(0,
                            i.jsxs)("div", {
                                className: "flex lg:w-3/4 w-4/4 items-center justify-center dark:text-secondary-gray text-secondary-gray-light dark:bg-[rgba(136,136,136,0.1)] bg-[#F6F6F6] p-2 rounded-xl mx-auto relative font-normal text-base mt-6 ",
                                children: [(0,
                                i.jsx)("label", {
                                    htmlFor: "phoneNumber",
                                    className: "sr-only",
                                    children: "Phone Number"
                                }), (0,
                                i.jsx)(C, {
                                    options: el,
                                    selectedOption: eu,
                                    onSelect: ef
                                }), (0,
                                i.jsx)("input", {
                                    type: "tel",
                                    placeholder: "Enter Phone Number",
                                    className: "flex-1 text-dark-primary-black dark:text-primary-white outline-none bg-transparent text-base placeholder:text-sm pl-3 lg:pl-0",
                                    id: "phoneNumber",
                                    value: a,
                                    onChange(t) {
                                        let n = t.target.value.replace(/\D/g, "")
                                          , r = n.slice(0, 10);
                                        h(r)
                                    },
                                    onClick: t => t.stopPropagation(),
                                    pattern: "[0-9]*",
                                    maxLength: 10
                                })]
                            }), (0,
                            i.jsxs)("div", {
                                className: "flex items-center justify-center mt-4",
                                style: {
                                    marginBottom: "30px"
                                },
                                children: [(0,
                                i.jsx)(f(), {
                                    src: "dark" === ei ? p : g,
                                    alt: "secured",
                                    className: "w-3.5 mr-2"
                                }), (0,
                                i.jsxs)("div", {
                                    className: "text-xs font-medium",
                                    children: [(0,
                                    i.jsxs)("span", {
                                        className: "text-secondary-gray-light dark:text-secondary-gray",
                                        children: ["Your number is secured with", " "]
                                    }), "128-AES", " ", (0,
                                    i.jsx)("span", {
                                        className: "text-secondary-gray-light dark:text-secondary-gray",
                                        children: "Encryption"
                                    })]
                                })]
                            }), (0,
                            i.jsx)("div", {
                                className: "modal-footer-login",
                                children: (0,
                                i.jsx)("button", {
                                    className: "rounded-full h-12 px-5 bg-primary text-base font-semibold text-primary-white border-[1.5px] border-primary",
                                    style: {
                                        width: "50%"
                                    },
                                    onClick(t) {
                                        t.preventDefault();
                                        let n = ed.replace("+", "");
                                        eg(a, n),
                                        r("otp")
                                    },
                                    disabled: 10 !== a.length,
                                    children: "Get OTP"
                                })
                            })]
                        }), "otp" === n && (0,
                        i.jsxs)("div", {
                            children: [(0,
                            i.jsxs)("p", {
                                className: "font-normal text-secondary-gray-light dark:text-gray pt-3 mb-10 text-base",
                                children: ["Sent on ", a, (0,
                                i.jsx)("span", {
                                    className: "text-primary px-2 cursor-pointer",
                                    onClick: eb,
                                    children: "Edit"
                                })]
                            }), (0,
                            i.jsx)(G, {
                                value: $,
                                valueLength: 4,
                                onChange: ee
                            }), S <= 0 ? (0,
                            i.jsxs)("div", {
                                className: "py-4",
                                children: [(0,
                                i.jsxs)("span", {
                                    className: "text-sm font-normal text-secondary-gray-light dark:text-gray py-4",
                                    children: ["Didn't receive the OTP?", " "]
                                }), (0,
                                i.jsx)("span", {
                                    className: "text-primary px-2 cursor-pointer",
                                    onClick() {
                                        ey()
                                    },
                                    children: "Resend"
                                })]
                            }) : (0,
                            i.jsxs)("div", {
                                className: "text-sm font-normal text-secondary-gray-light dark:text-gray py-4",
                                children: ["Resend in ", S, " sec"]
                            }), (0,
                            i.jsx)("div", {
                                className: "absolute bottom-14 left-0 w-full bg-transparent p-4 -z-10",
                                children: (0,
                                i.jsx)("button", {
                                    className: "rounded-full border-[1.5px] border-primary bg-primary h-12 px-5 mt-5 cursor-pointer text-base font-semibold text-primary-white",
                                    style: {
                                        width: "50%",
                                        marginTop: "33.9%"
                                    },
                                    onClick() {
                                        e_()
                                    },
                                    disabled: J,
                                    children: J ? (0,
                                    i.jsx)(D.Z, {
                                        height: 10,
                                        className: "h-10",
                                        isWhite: !0
                                    }) : "Confirm"
                                })
                            })]
                        }), "gender" === n && (0,
                        i.jsx)(A, {
                            onNext: () => r("profession"),
                            onGenderSelect: ev
                        }), "profession" === n && (0,
                        i.jsx)(N, {
                            onNext(t) {
                                eE(t)
                            },
                            onSaveUserData: eE,
                            professionOptions: j
                        }), "your_interest" === n && (0,
                        i.jsx)(k, {
                            setView: r
                        }), "welcome" === n && (0,
                        i.jsx)(L, {
                            onStart: eC
                        }), "creatingFeed" === n && U && (0,
                        i.jsxs)("div", {
                            children: [(0,
                            i.jsx)(D.Z, {
                                height: 20,
                                className: "h-20"
                            }), (0,
                            i.jsx)("div", {
                                className: "text-4xl font-semibold mt-20 text-dark-primary-black dark:text-primary-white",
                                children: "Perfect!"
                            }), (0,
                            i.jsx)("div", {
                                className: "text-primary py-5 font-medium",
                                style: {
                                    fontSize: "1.5rem"
                                },
                                children: "Building your timeline"
                            })]
                        })]
                    })]
                })]
            })
        }
    },
    1430: function(t, n, r) {
        "use strict";
        r.d(n, {
            Z: function() {
                return d
            }
        });
        var i = r(5893)
          , s = r(5675)
          , a = r.n(s)
          , o = r(7283)
          , l = {
            src: "/_next/static/media/Cross-sign light.bfefe5fd.svg",
            height: 24,
            width: 24
        }
          , u = r(7851)
          , c = r(3509);
        function d(t) {
            let {onClick: n, className: r} = t
              , {resolvedTheme: s} = (0,
            c.Z)();
            return (0,
            i.jsx)(a(), {
                src: "dark" === s ? o.Z : l,
                alt: "close button",
                height: 32,
                width: 32,
                className: (0,
                u.m)("cursor-pointer dark:hover:bg-white/[5%] hover:bg-black/[0.1] rounded-full transition", r),
                onClick: n
            })
        }
    },
    2602: function(t, n, r) {
        "use strict";
        r.d(n, {
            Z: function() {
                return h
            }
        });
        var i = r(5893)
          , s = r(7294)
          , a = r(5675)
          , o = r.n(a)
          , l = r(7851);
        function u(t) {
            let {topic: n, onClick: r, isSelected: s} = t;
            return (0,
            i.jsx)("button", {
                className: (0,
                l.m)("text-[0.813rem] font-semibold px-3 h-[38px] flex items-center dark:bg-black/10 bg-[#F6F6F6] border-[#E6E6E6] rounded-full border-[0.8px] border-solid dark:text-primary-white dark:border-[rgba(136,136,136,0.16)]", s && "border-1 border-primary bg-primary text-primary-white dark:bg-primary"),
                onClick: () => r(n),
                children: null == n ? void 0 : n.label
            })
        }
        var c = {
            src: "/_next/static/media/see more.4e73962e.svg",
            height: 15,
            width: 14
        }
          , d = r(3509);
        function h(t) {
            let {genre: n, handleTopicClick: r, selectedTopics: a} = t
              , [h,f] = (0,
            s.useState)(!1)
              , [p,g] = (0,
            s.useState)(!1)
              , m = (0,
            s.useRef)(null)
              , {resolvedTheme: y} = (0,
            d.Z)()
              , _ = () => {
                f(t => !t)
            }
              , v = () => {
                m.current && g(m.current.scrollHeight > 138)
            }
            ;
            return (0,
            s.useEffect)( () => (v(),
            window.addEventListener("resize", v),
            () => {
                window.removeEventListener("resize", v)
            }
            ), []),
            (0,
            i.jsxs)("div", {
                className: "flex flex-col gap-y-3",
                children: [(0,
                i.jsx)("h4", {
                    className: "mr-auto text-base font-semibold text-dark-primary-black dark:text-primary-white",
                    children: null == n ? void 0 : n.label
                }), (0,
                i.jsx)("div", {
                    ref: m,
                    className: (0,
                    l.m)("flex flex-wrap overflow-hidden gap-x-2 gap-y-3", h ? "" : "max-h-[138px]"),
                    children: null == n ? void 0 : n.children.map(t => (0,
                    i.jsx)(u, {
                        topic: t,
                        onClick: r,
                        isSelected: a.includes(null == t ? void 0 : t.id)
                    }, null == t ? void 0 : t.id))
                }), p && (h ? (0,
                i.jsxs)("span", {
                    onClick: _,
                    className: "dark:text-secondary-gray text-secondary-gray-light font-medium text-[13px] self-center flex gap-x-1 cursor-pointer",
                    children: ["See less", (0,
                    i.jsx)(o(), {
                        src: c,
                        alt: "arrow",
                        className: "rotate-180"
                    })]
                }) : (0,
                i.jsxs)("span", {
                    onClick: _,
                    className: "text-gray font-medium text-[13px] self-center flex gap-x-1 cursor-pointer",
                    children: ["See more", (0,
                    i.jsx)(o(), {
                        src: c,
                        alt: "arrow"
                    })]
                }))]
            })
        }
    },
    8362: function(t, n, r) {
        "use strict";
        r(3454).env.NEXT_PUBLIC_DEFAULT_TOKEN_STAG,
        n.Z = {
            apiUrl: "https://api.hood.live/web",
            defaultToken: "your-default-token-for-prod",
            commentCharLimit: "500",
            postCharacterLimit: "5000",
            postTitleCharacterLimit: "4980",
            postSeeMoreLimit: "170",
            commentSeeMoreLimit: "170",
            pollOptionLimit: "25",
            razorpayKeyId: "rzp_live_kyeLxJyifpzsxR",
            sendbirdAppId: "933D1E1A-2EEF-4182-A15C-4FEB33FEDE6C",
            giphyKey: "8FaMOUxQ8JDkj4KpKRsfP39Pd05mofAP",
            fireBaseApiKey: "AIzaSyCwLxxvkqq6y79u5HoTTCzyTf1doL9RkoU",
            fireBaseAppId: "1:198543037633:web:509b9c77456c09f9a43040",
            fireBaseMeasurementId: "G-M8M8X4BQH5",
            fireBaseMessagingSenderId: "198543037633"
        }
    },
    8212: function(t, n, r) {
        "use strict";
        r.d(n, {
            YO: function() {
                return ei
            },
            sd: function() {
                return er
            },
            _D: function() {
                return es
            },
            ET: function() {
                return g
            },
            Oo: function() {
                return eg
            },
            D0: function() {
                return d
            },
            R4: function() {
                return c
            },
            nt: function() {
                return el
            },
            fr: function() {
                return eu
            },
            TB: function() {
                return ep
            },
            bY: function() {
                return i
            },
            Nw: function() {
                return ed
            },
            lK: function() {
                return h
            },
            ZH: function() {
                return l
            },
            ew: function() {
                return eh
            },
            tW: function() {
                return m
            },
            J0: function() {
                return ef
            },
            jp: function() {
                return u
            },
            hM: function() {
                return em
            },
            TZ: function() {
                return o
            },
            ef: function() {
                return ec
            },
            xY: function() {
                return et
            },
            u8: function() {
                return en
            },
            B3: function() {
                return eo
            },
            OX: function() {
                return ea
            },
            Ty: function() {
                return f
            },
            m1: function() {
                return s
            }
        });
        var i, s, a, o, l, u, c, d, h, f, p, g, m, y, _, v, E, b, C, S, A, N, T, I, O, w, k = r(2607), U = r(5098), R = {
            src: "/_next/static/media/circle_orange light.fe4c5d2b.svg",
            height: 24,
            width: 24
        }, M = {
            src: "/_next/static/media/circle_notActive light.a77a4522.svg",
            height: 25,
            width: 25
        }, P = {
            src: "/_next/static/media/unfollow.d7c3bb55.svg",
            height: 20,
            width: 20
        }, L = {
            src: "/_next/static/media/unfollowLight.0be98421.svg",
            height: 20,
            width: 20
        }, D = {
            src: "/_next/static/media/followAction.cf9443aa.svg",
            height: 20,
            width: 20
        }, x = {
            src: "/_next/static/media/followActionLight.9cee92f9.svg",
            height: 21,
            width: 21
        }, F = r(4068), H = r(7862), j = {
            src: "/_next/static/media/shareAction.0fd5dc6a.svg",
            height: 20,
            width: 20
        }, G = {
            src: "/_next/static/media/shareAction light.47661430.svg",
            height: 21,
            width: 21
        }, B = {
            src: "/_next/static/media/accont-icon.a7394121.svg",
            height: 21,
            width: 21
        }, V = {
            src: "/_next/static/media/accont-icon-light.702e304a.svg",
            height: 21,
            width: 21
        }, q = {
            src: "/_next/static/media/privacy-icon.50fa2b9b.svg",
            height: 21,
            width: 21
        }, z = {
            src: "/_next/static/media/privacy-icon-light.a87dbe24.svg",
            height: 21,
            width: 21
        }, K = r(6340), W = r(6686), Y = r(5931), Q = r(1522), J = r(4625), Z = r(8154), $ = {
            src: "/_next/static/media/mutedIcon.3e98c071.svg",
            height: 21,
            width: 21
        }, X = {
            src: "/_next/static/media/mutedIconLight.ffe075be.svg",
            height: 21,
            width: 21
        }, ee = {
            src: "/_next/static/media/info_icon_light.307eaebb.svg",
            height: 20,
            width: 21
        };
        (y = i || (i = {})).dark = "dark",
        y.light = "light",
        (_ = s || (s = {})).default = "RECOMMEND",
        _.trending = "TRENDING",
        _.friends = "FRIENDS",
        _.home = "HOME",
        _.ama = "AMA",
        (v = a || (a = {})).posts = "Posts",
        v.media = "Media",
        v.activity = "Activity";
        let et = [{
            label: "Posts",
            value: "posts"
        }, {
            label: "Media",
            value: "media"
        }, {
            label: "Activity",
            value: "activity"
        }]
          , en = [{
            label: "Posts",
            value: "posts"
        }, {
            label: "Media",
            value: "media"
        }];
        (E = o || (o = {})).hide = "Hide",
        E.sharePost = "SharePost",
        E.follow = "Follow",
        E.blockUser = "BlockUser",
        E.reportPost = "ReportPost",
        E.unFollow = "Unfollow",
        E.delete = "DeletePost",
        E.unBlockUser = "UnblockUser",
        E.shareProfile = "ShareProfile",
        (b = l || (l = {})).hide = "Hide",
        b.shareComment = "shareComment",
        b.follow = "Follow",
        b.blockUser = "BlockUser",
        b.reportPost = "ReportPost",
        b.unFollow = "Unfollow",
        b.delete = "DeleteComment",
        b.unBlockUser = "UnblockUser",
        (C = u || (u = {})).delete = "delete_notification",
        C.mute = "mute_notification",
        C.unmute = "unmute_notification",
        C.turnOn = "turnOn_notification",
        C.turnOff = "turnOff_notification",
        (S = c || (c = {})).blocked = "blockedAccounts",
        S.muted = "mutedAccounts",
        S.policy = "PrivacyPolicy",
        (A = d || (d = {})).delete = "deleteAccount",
        A.about = "aboutProfile";
        let er = [{
            name: "Home",
            value: "HOME",
            child: [{
                name: "Default",
                value: "RECOMMEND",
                icon: {
                    dark: {
                        src: "/_next/static/media/feedFilled.f5f7df5d.svg",
                        height: 18,
                        width: 18
                    },
                    light: {
                        src: "/_next/static/media/feedFilledLight.b48010ec.svg",
                        height: 18,
                        width: 18
                    }
                },
                iconActive: {
                    dark: {
                        src: "/_next/static/media/Home_icon_orange.7e0cb370.svg",
                        height: 21,
                        width: 20
                    },
                    light: {
                        src: "/_next/static/media/Home_icon_orange light.bafa2a94.svg",
                        height: 21,
                        width: 20
                    }
                },
                circleActive: {
                    dark: k.Z,
                    light: R
                },
                circleNotActive: {
                    dark: U.Z,
                    light: M
                }
            }, {
                name: "Trending",
                value: "TRENDING",
                icon: {
                    dark: {
                        src: "/_next/static/media/trending_white.94c41655.svg",
                        height: 21,
                        width: 20
                    },
                    light: {
                        src: "/_next/static/media/trending_icon_light.4e841be4.svg",
                        height: 21,
                        width: 20
                    }
                },
                iconActive: {
                    dark: {
                        src: "/_next/static/media/trending_orange.c353367c.svg",
                        height: 21,
                        width: 20
                    },
                    light: {
                        src: "/_next/static/media/trending_orange light.2bf4d1f5.svg",
                        height: 21,
                        width: 20
                    }
                },
                circleActive: {
                    dark: k.Z,
                    light: R
                },
                circleNotActive: {
                    dark: U.Z,
                    light: M
                }
            }, {
                name: "Friends",
                value: "FRIENDS",
                icon: {
                    dark: {
                        src: "/_next/static/media/friends_feed_white.d6c4a25a.svg",
                        height: 21,
                        width: 20
                    },
                    light: {
                        src: "/_next/static/media/friends_feed_icon_light.bc7d9665.svg",
                        height: 21,
                        width: 20
                    }
                },
                iconActive: {
                    dark: {
                        src: "/_next/static/media/friends_feed_orange.befa3d8f.svg",
                        height: 21,
                        width: 20
                    },
                    light: {
                        src: "/_next/static/media/friends_feed_orange light.bdcc3b36.svg",
                        height: 21,
                        width: 20
                    }
                },
                circleActive: {
                    dark: k.Z,
                    light: R
                },
                circleNotActive: {
                    dark: U.Z,
                    light: M
                }
            }]
        }, {
            name: "AMA",
            value: "AMA"
        }];
        F.Z,
        H.Z,
        F.Z,
        H.Z;
        let ei = [{
            name: "Share Post",
            icon: {
                dark: j,
                light: G
            },
            value: "SharePost"
        }, {
            name: "Delete Post",
            icon: {
                dark: J.Z,
                light: Z.Z
            },
            value: "DeletePost"
        }];
        (N = h || (h = {})).comment = "COMMENT",
        N.liked = "LIKED",
        N.repost = "REPOST";
        let es = {
            text: "You haven't posted anything yet."
        };
        (T = f || (f = {})).account = "account",
        T.onlineStatus = "onlineStatus",
        T.verifiedBadge = "verifiedBadge",
        T.notifications = "notifications",
        T.privacy = "privacy",
        T.terms = "terms",
        T.faq = "faq",
        (I = p || (p = {})).profile = "profile",
        I.topics = "topics",
        I.groups = "groups",
        I.inviteFriend = "inviteFriend",
        I.syncContact = "syncContact",
        I.setting = "settings",
        I.feedback = "feedback",
        I.aboutUs = "aboutUs";
        let ea = [{
            text: "Account",
            icon: {
                dark: B,
                light: V
            },
            value: "account"
        }, {
            text: "Online Status",
            icon: {
                dark: {
                    src: "/_next/static/media/online_status.17a31476.svg",
                    height: 20,
                    width: 21
                },
                light: {
                    src: "/_next/static/media/online_status_light.55203dc4.svg",
                    height: 20,
                    width: 21
                }
            },
            value: "onlineStatus"
        }, {
            text: "Privacy",
            icon: {
                dark: q,
                light: z
            },
            value: "privacy"
        }, {
            text: "Terms of use",
            icon: {
                dark: {
                    src: "/_next/static/media/terms-icon.192e63d1.svg",
                    height: 21,
                    width: 21
                },
                light: {
                    src: "/_next/static/media/terms-icon-light.61124094.svg",
                    height: 21,
                    width: 21
                }
            },
            value: "terms",
            url: "/terms-condition.html"
        }, {
            text: "FAQs",
            icon: {
                dark: {
                    src: "/_next/static/media/faq-icon.ed095300.svg",
                    height: 21,
                    width: 21
                },
                light: {
                    src: "/_next/static/media/faq-icon-light.e440fa78.svg",
                    height: 21,
                    width: 21
                }
            },
            value: "faq",
            url: "/faq.html"
        }]
          , eo = [{
            text: "About you profile",
            icon: {
                dark: {
                    src: "/_next/static/media/info_icon.8a6ba3dc.svg",
                    height: 20,
                    width: 21
                },
                light: ee
            },
            value: "aboutProfile"
        }]
          , el = [{
            text: "Blocked Accounts",
            icon: {
                dark: F.Z,
                light: H.Z
            },
            value: "blockedAccounts",
            url: null
        }, {
            text: "Muted Accounts",
            icon: {
                dark: $,
                light: X
            },
            value: "mutedAccounts",
            url: null
        }, {
            text: "Privacy Policy",
            icon: {
                dark: q,
                light: z
            },
            value: "PrivacyPolicy",
            url: "/privacy-policy.html"
        }]
          , eu = [{
            text: "Profile",
            icon: {
                dark: B,
                light: V
            },
            value: "profile"
        }, {
            text: "Topics",
            icon: {
                dark: {
                    src: "/_next/static/media/topics-icon.17eb10e3.svg",
                    height: 21,
                    width: 21
                },
                light: K.Z
            },
            value: "topics"
        }, {
            text: "Settings",
            icon: {
                dark: W.Z,
                light: Y.Z
            },
            value: "settings"
        }, {
            text: "About us",
            icon: {
                dark: Q.Z,
                light: ee
            },
            value: "aboutUs"
        }]
          , ec = {
            ShareProfile: {
                name: "Share Profile",
                icon: {
                    dark: j,
                    light: G
                },
                value: "ShareProfile"
            },
            BlockUser: {
                name: "Block User",
                icon: {
                    dark: F.Z,
                    light: H.Z
                },
                value: "BlockUser"
            },
            UnblockUser: {
                name: "Unblock User",
                icon: {
                    dark: F.Z,
                    light: H.Z
                },
                value: "UnblockUser"
            }
        }
          , ed = {
            SharePost: {
                name: "Share Post",
                icon: {
                    dark: j,
                    light: G
                },
                value: "SharePost"
            },
            Follow: {
                name: "Follow",
                icon: {
                    dark: D,
                    light: x
                },
                value: "Follow"
            },
            Unfollow: {
                name: "Unfollow",
                icon: {
                    dark: P,
                    light: L
                },
                value: "Unfollow"
            },
            BlockUser: {
                name: "Block User",
                icon: {
                    dark: F.Z,
                    light: H.Z
                },
                value: "BlockUser"
            },
            UnblockUser: {
                name: "Unblock User",
                icon: {
                    dark: F.Z,
                    light: H.Z
                },
                value: "UnblockUser"
            },
            ReportPost: {
                name: "Report Post",
                icon: {
                    dark: {
                        src: "/_next/static/media/reportAction.c4ae134f.svg",
                        height: 20,
                        width: 20
                    },
                    light: {
                        src: "/_next/static/media/reportActionLight.1844b4e1.svg",
                        height: 20,
                        width: 20
                    }
                },
                value: "ReportPost"
            }
        };
        J.Z,
        Z.Z;
        let eh = {
            shareComment: {
                name: "Share Comment",
                icon: {
                    dark: j,
                    light: G
                },
                value: "shareComment"
            },
            Follow: {
                name: "Follow",
                icon: {
                    dark: D,
                    light: x
                },
                value: "Follow"
            },
            Unfollow: {
                name: "Unfollow",
                icon: {
                    dark: P,
                    light: L
                },
                value: "Unfollow"
            },
            BlockUser: {
                name: "Block User",
                icon: {
                    dark: F.Z,
                    light: H.Z
                },
                value: "BlockUser"
            },
            UnblockUser: {
                name: "Unblock User",
                icon: {
                    dark: F.Z,
                    light: H.Z
                },
                value: "UnblockUser"
            },
            DeleteComment: {
                name: "Delete Comment",
                icon: {
                    dark: J.Z,
                    light: Z.Z
                },
                value: "DeleteComment"
            }
        }
          , ef = {
            delete_notification: {
                name: "Delete",
                icon: {
                    dark: J.Z,
                    light: Z.Z
                },
                value: "delete_notification"
            },
            mute_notification: {
                name: "Mute",
                icon: {
                    dark: $,
                    light: X
                },
                value: "mute_notification"
            },
            unmute_notification: {
                name: "Unmute",
                icon: {
                    dark: {
                        src: "/_next/static/media/unmute-notif.5039e467.svg",
                        height: 21,
                        width: 20
                    },
                    light: {
                        src: "/_next/static/media/unmute-notif light.72ef62bd.svg",
                        height: 21,
                        width: 20
                    }
                },
                value: "unmute_notification"
            },
            turnOff_notification: {
                name: "Turn off notification from this post",
                icon: {
                    dark: {
                        src: "/_next/static/media/off-notif.2f70f81f.svg",
                        height: 20,
                        width: 21
                    },
                    light: {
                        src: "/_next/static/media/off-notifLight.097750e7.svg",
                        height: 20,
                        width: 21
                    }
                },
                value: "turnOff_notification"
            },
            turnOn_notification: {
                name: "Turn on notification from this post",
                icon: {
                    dark: {
                        src: "/_next/static/media/bell-icon.62c79cfb.svg",
                        height: 21,
                        width: 21
                    },
                    light: {
                        src: "/_next/static/media/bell-iconLight.baefd4bf.svg",
                        height: 21,
                        width: 21
                    }
                },
                value: "turnOn_notification"
            }
        };
        (O = g || (g = {})).CongratsPost = "CongratsPost",
        O.GROUP = "GROUP",
        O.GROUP_POST = "GROUP_POST",
        O.GROUP_REQUESTED = "GROUP_REQUESTED",
        O.GROUP_POST_LIKE = "GROUP_POST_LIKE",
        O.GROUP_POST_MENTION = "GROUP_POST_MENTION",
        O.GROUP_POST_COMMENT = "GROUP_POST_COMMENT",
        O.GROUP_POST_SCREENSHOT = "GROUP_POST_SCREENSHOT",
        O.GROUP_POST_VIEW_MILESTONE_100 = "GROUP_POST_VIEW_MILESTONE_100",
        O.GROUP_POST_VIEW_MILESTONE_300 = "GROUP_POST_VIEW_MILESTONE_300",
        O.GROUP_POST_VIEW_MILESTONE_500 = "GROUP_POST_VIEW_MILESTONE_500",
        O.GROUP_POST_VIEW_MILESTONE_1000 = "GROUP_POST_VIEW_MILESTONE_1000",
        O.GROUP_POST_SHARE = "GROUP_POST_SHARE",
        O.GROUP_POST_REPORT = "GROUP_POST_REPORT",
        O.GROUP_USER_REPORT = "GROUP_USER_REPORT",
        O.GROUP_COMMENT_LIKE = "GROUP_COMMENT_LIKE",
        O.GROUP_COMMENT_REPLY = "GROUP_COMMENT_REPLY",
        O.GROUP_COMMENT_MENTION = "GROUP_COMMENT_MENTION",
        O.GROUP_COMMENT_THREAD_BULK = "GROUP_COMMENT_THREAD_BULK",
        O.GROUP_COMMENT_ENGAGEMENT = "GROUP_COMMENT_ENGAGEMENT",
        O.GROUP_PUBLIC_JOIN = "GROUP_PUBLIC_JOIN",
        O.GROUP_REPORT = "GROUP_REPORT",
        O.GROUP_ACCEPTED = "GROUP_ACCEPTED",
        O.REPORTED_POST_GROUP = "REPORTED_POST_GROUP",
        O.REPORTED_POST = "REPORTED_POST",
        O.USER_CHAT_REQUESTED = "USER_CHAT_REQUESTED",
        O.USER_CHAT_APPROVED = "USER_CHAT_APPROVED",
        O.POST = "POST",
        O.POST_LIKE = "POST_LIKE",
        O.POST_MENTION = "POST_MENTION",
        O.POST_COMMENT = "POST_COMMENT",
        O.POST_SCREENSHOT = "POST_SCREENSHOT",
        O.POST_VIEW_MILESTONE_100 = "POST_VIEW_MILESTONE_100",
        O.POST_VIEW_MILESTONE_300 = "POST_VIEW_MILESTONE_300",
        O.POST_VIEW_MILESTONE_500 = "POST_VIEW_MILESTONE_500",
        O.POST_VIEW_MILESTONE_1000 = "POST_VIEW_MILESTONE_1000",
        O.POST_SHARE = "POST_SHARE",
        O.POST_REPORT = "POST_REPORT",
        O.USER_REPORT = "USER_REPORT",
        O.COMMENT_LIKE = "COMMENT_LIKE",
        O.COMMENT_REPLY = "COMMENT_REPLY",
        O.COMMENT_MENTION = "COMMENT_MENTION",
        O.COMMENT_THREAD_BULK = "COMMENT_THREAD_BULK",
        O.COMMENT_ENGAGEMENT = "COMMENT_ENGAGEMENT",
        O.USER_FOLLOW = "FOLLOW",
        O.USER_REFERRAL_HISTORY = "USER_REFERRAL_HISTORY",
        O.POLL = "POLL",
        O.GROUP_POLL = "GROUP_POLL",
        O.PROFILE_CREATOR_BADGE = "PROFILE_CREATOR_BADGE",
        O.APP_STORE = "APP_STORE",
        O.WEB_URL = "WEB_URL",
        O.APP_SCREEN = "APP_SCREEN",
        O.FEED = "FEED",
        O.CONGRATS_POST = "CONGRATS_POST";
        let ep = [{
            amount: 60,
            name: "s",
            value: "seconds"
        }, {
            amount: 60,
            name: "m",
            value: "minutes"
        }, {
            amount: 24,
            name: "h",
            value: "hours"
        }, {
            amount: 7,
            name: "d",
            value: "days"
        }, {
            amount: 4.34524,
            name: "w",
            value: "weeks"
        }, {
            amount: 12,
            name: "mo",
            value: "months"
        }, {
            amount: Number.POSITIVE_INFINITY,
            name: "yr",
            value: "years"
        }];
        (w = m || (m = {})).home = "Home",
        w.live = "Live",
        w.notification = "Notification",
        w.profile = "Profile",
        w.topics = "Topics",
        w.search = "Search",
        w.settings = "Settings",
        w.groups = "Groups",
        w.superchat = "Superchat",
        w.about = "AboutUs",
        w.hashtag = "HashTag";
        let eg = RegExp(/^\d+$/)
          , em = [{
            name: "1 day",
            value: 1
        }, {
            name: "2 days",
            value: 2
        }, {
            name: "3 days",
            value: 3
        }, {
            name: "4 days",
            value: 4
        }, {
            name: "5 days",
            value: 5
        }, {
            name: "6 days",
            value: 6
        }, {
            name: "7 days",
            value: 7
        }]
    },
    9213: function(t, n, r) {
        "use strict";
        var i, s, a, o, l, u;
        r.d(n, {
            Cc: function() {
                return i
            },
            M0: function() {
                return s
            },
            TB: function() {
                return a
            }
        }),
        (o = i || (i = {})).Web_Logo_Click = "Web_Logo_Click",
        o.Web_Sidebar_Tab_Click = "Web_Sidebar_Tab_Click",
        o.Web_Sign_In_Click = "Web_Sign_In_Click",
        o.Web_Create_Post_Click = "Web_Create_Post_Click",
        o.Web_Search = "Web_Search",
        o.Web_Download_Click = "Web_Download_Click",
        o.Web_Feed_Type_Change = "Web_Feed_Type_Change",
        o.Web_Top_Creator_Click = "Web_Top_Creator_Click",
        o.Web_Footer_Page_Click = "Web_Footer_Page_Click",
        (l = s || (s = {})).Web_Main_Feed_Type_Click = "Web_Main_Feed_Type_Click",
        l.Web_Retry_Loading = "Web_Retry_Loading",
        l.Web_Header_Click = "Web_Header_Click",
        l.Web_Post_Created_Successfully = "Web_Post_Created_Successfully",
        l.Web_View_Post = "Web_View_Post",
        l.Web_Post_Media_Click = "Web_Post_Media_Click",
        l.Web_Post_Like_Click = "Web_Post_Like_Click",
        l.Web_Post_Comment_Icon_Click = "Web_Post_Comment_Icon_Click",
        l.Web_Post_Repost_Click = "Web_Post_Repost_Click",
        l.Web_Post_Share_Click = "Web_Post_Share_Click",
        l.Web_Post_Delete_Click = "Web_Post_Delete_Click",
        l.Web_Poll_Option_Click = "Web_Poll_Option_Click",
        l.Web_Report_Post_Click = "Web_Report_Post_Click",
        l.Web_Remove_Post_From_Feed_Click = "Web_Remove_Post_From_Feed_Click",
        l.Web_Comment_Created_Successfully = "Web_Comment_Created_Successfully",
        l.Web_Comments_Like_Click = "Web_Comments_Like_Click",
        l.Web_Comments_Reply_Click = "Web_Comments_Reply_Click",
        l.Web_Comment_Delete_Click = "Web_Comment_Delete_Click",
        l.Web_Comment_Share_Click = "Web_Comment_Share_Click",
        l.Web_Reply_Created_Successfully = "Web_Reply_Created_Successfully",
        l.Web_View_Replies = "Web_View_Replies",
        l.Web_Show_More_Click = "Web_Show_More_Click",
        (u = a || (a = {})).Web_Get_OTP_Click = "Web_Get_OTP_Click",
        u.Web_OTP_Verified = "Web_OTP_Verified",
        u.Web_User_Gender_Selected = "Web_User_Gender_Selected",
        u.Web_User_Profession_Selected = "Web_User_Profession_Selected",
        u.Web_User_Topics_Selected = "Web_User_Topics_Selected",
        u.Web_Lets_Go_Click = "Web_Lets_Go_Click",
        u.Web_User_Logout_Click = "Web_User_Logout_Click",
        u.Web_Profile_Click = "Web_Profile_Click",
        u.Web_Profile_Share_Click = "Web_Profile_Share_Click",
        u.Web_Buy_Credits_Modal_Open = "Web_Buy_Credits_Modal_Open",
        u.Web_Open_Credit_History = "Web_Open_Credit_History",
        u.Web_Block_User = "Web_Block_User",
        u.Web_Unblock_User = "Web_Unblock_User",
        u.Web_User_Followed = "Web_User_Followed",
        u.Web_User_Unfollowed = "Web_User_Unfollowed",
        u.Web_User_Profile_Edited_Successfully = "Web_User_Profile_Edited_Successfully",
        u.Web_Superchat_Request_Sent = "Web_Superchat_Request_Sent",
        u.Web_Notification_Click = "Web_Notification_Click",
        u.Web_Notification_Delete_Click = "Web_Notification_Delete_Click",
        u.Web_Notification_Mute_User_Click = "Web_Notification_Mute_User_Click",
        u.Web_Notification_Unmute_User_Click = "Web_Notification_Unmute_User_Click",
        u.Web_Notification_TurnOn_Click = "Web_Notification_TurnOn_Click",
        u.Web_Notification_TurnOff_Click = "Web_Notification_TurnOff_Click"
    },
    6578: function(t, n, r) {
        "use strict";
        r.d(n, {
            _: function() {
                return s
            },
            s: function() {
                return i
            }
        });
        let i = {
            title: "Here is your reported post.",
            whatNext: "Our team will review your report, and if there is any violation of our content policy, we assure you that relevant action will be taken."
        }
          , s = {
            title: "Help us understand the problem. Why are you reporting this?",
            reasons: ["Spam", "Hate", "Harassment or bullying", "Inappropriate content, child exploitation or sexual", "Impersonation", "Copyright or trademark violation", "Threats and violence", "Something else"]
        }
    },
    6550: function(t, n, r) {
        "use strict";
        r.d(n, {
            $: function() {
                return m
            }
        });
        var i = r(5893)
          , s = r(7294)
          , a = r(3925)
          , o = r(9106)
          , l = r(7338)
          , u = r(4015)
          , c = r(731)
          , d = r(2920)
          , h = r(6866)
          , f = r(6144)
          , p = r(9213);
        let g = (0,
        s.createContext)(null)
          , m = t => {
            let {children: n} = t
              , {isLogin: r, toggleLoginModal: m} = (0,
            h.Z)()
              , [y,_] = (0,
            s.useState)(!1)
              , [v,E] = (0,
            s.useState)([])
              , [b,C] = (0,
            s.useState)({})
              , [S,A] = (0,
            s.useState)(1)
              , [N,{entry: T}] = (0,
            o.S)()
              , I = T && T.isIntersecting
              , [O,w] = (0,
            s.useState)(!1)
              , [k,U] = (0,
            s.useState)({
                commentData: {},
                mentions: []
            })
              , [R,M] = (0,
            s.useState)([])
              , [P,L] = (0,
            s.useState)(!1)
              , {handleCommentCount: D, postData: x} = (0,
            s.useContext)(c.Z)
              , [F,H] = (0,
            s.useState)("")
              , [j,G] = (0,
            s.useState)(null)
              , {logEvent: B} = (0,
            f.Z)()
              , V = async (t, n, r, i) => {
                w(!0);
                try {
                    var s, o, u, c, d, h, f, p, g, m, y, _;
                    let v, b;
                    let C = await (0,
                    a.Rf)(t, n, r, i);
                    A(null == C ? void 0 : null === (s = C.data) || void 0 === s ? void 0 : s.nextPage);
                    let S = null == C ? void 0 : null === (o = C.data) || void 0 === o ? void 0 : o.docs;
                    if ((null == R ? void 0 : R.length) > 0) {
                        let N = R[0];
                        try {
                            v = await (0,
                            l.Fs)(N),
                            1 === i && H(null == v ? void 0 : null === (h = v.data) || void 0 === h ? void 0 : null === (f = h.comment) || void 0 === f ? void 0 : f.commentId)
                        } catch (T) {
                            console.log("Error in getting clicked notification: ", null == T ? void 0 : null === (p = T.response) || void 0 === p ? void 0 : null === (g = p.data) || void 0 === g ? void 0 : g.message),
                            G(null == T ? void 0 : null === (m = T.response) || void 0 === m ? void 0 : null === (y = m.data) || void 0 === y ? void 0 : y.message)
                        }
                    }
                    let I = null !== (_ = null == v ? void 0 : null === (u = v.data) || void 0 === u ? void 0 : u.comment) && void 0 !== _ ? _ : null
                      , O = await Y(S, I);
                    (null == R ? void 0 : R.length) > 0 && 1 === i && O.unshift(I);
                    let k = null == O ? void 0 : O.map(t => null == t ? void 0 : t.child[0]).filter(t => null != t);
                    (null == C ? void 0 : null === (c = C.data) || void 0 === c ? void 0 : null === (d = c.docs) || void 0 === d ? void 0 : d.length) > 0 && (b = await (0,
                    a.MG)(O));
                    let U = [];
                    k.length > 0 && (U = await (0,
                    a.MG)(k));
                    let M = await Q(O, b, U);
                    1 === i ? E(M) : E(t => [...t, ...M])
                } catch (P) {
                    console.log("Error in fetchComments : ", P)
                } finally {
                    w(!1)
                }
            }
              , q = () => {
                G(null)
            }
              , z = t => {
                M(t)
            }
              , K = () => {
                M([])
            }
              , W = () => {
                E([])
            }
              , Y = async (t, n) => {
                if ((null == R ? void 0 : R.length) === 0)
                    return t;
                let r = null == t ? void 0 : t.filter(t => (null == t ? void 0 : t.commentId) !== (null == n ? void 0 : n.commentId));
                return r
            }
              , Q = async (t, n, r) => {
                let i = t.map(t => {
                    let i = n.find(n => n.commentId === t.commentId)
                      , s = r.find(n => {
                        var r;
                        return (null == n ? void 0 : n.commentId) === (null === (r = null == t ? void 0 : t.child[0]) || void 0 === r ? void 0 : r.commentId)
                    }
                    );
                    if (i) {
                        let a = {
                            ...t,
                            ...i
                        };
                        return s && (a.child = [{
                            ...null == t ? void 0 : t.child[0],
                            ...s
                        }]),
                        a
                    }
                    return t
                }
                );
                return i
            }
              , J = async t => {
                try {
                    var n;
                    let r;
                    let i = await (0,
                    l.Fs)(t)
                      , s = null == i ? void 0 : null === (n = i.data) || void 0 === n ? void 0 : n.comment;
                    s && (r = await (0,
                    a.MG)([s]));
                    let o = await Z([s], r);
                    C(o[0])
                } catch (u) {}
            }
              , Z = async (t, n) => {
                let r = t.map(t => {
                    let r = n.find(n => n.commentId === t.commentId);
                    if (r) {
                        let i = {
                            ...t,
                            ...r
                        };
                        return i
                    }
                    return t
                }
                );
                return r
            }
              , $ = async (t, n, i, s, a) => {
                if (!r) {
                    m();
                    return
                }
                L(!0);
                let o = {
                    createdAt: new Date().toISOString(),
                    groupId: "",
                    location: {
                        lat: 0,
                        lon: 0
                    },
                    media: a,
                    mention: s || [],
                    parentId: t,
                    postId: n,
                    text: i.trim()
                };
                try {
                    await (0,
                    l.Yr)(o),
                    d.Am.success("Comment submitted successfully", {
                        position: d.Am.POSITION.BOTTOM_CENTER
                    }),
                    X(1),
                    D("incr"),
                    eu(t, "incr"),
                    et()
                } catch (u) {
                    console.log("ERROR in creating comment: ", u)
                } finally {
                    L(!1)
                }
            }
              , X = async t => {
                C(n => ({
                    ...n,
                    threadCount: b.threadCount + t
                }))
            }
              , ee = t => {
                var n, i;
                if (!r) {
                    m();
                    return
                }
                _(!0);
                let s = []
                  , a = t => s.some(n => n.userId === t);
                [{
                    username: null == t ? void 0 : null === (n = t.user) || void 0 === n ? void 0 : n.userName,
                    userId: null == t ? void 0 : t.userId
                }, {
                    username: null == x ? void 0 : null === (i = x.user) || void 0 === i ? void 0 : i.userName,
                    userId: null == x ? void 0 : x.userId
                }].forEach(t => {
                    t.userId && !a(t.userId) && s.push(t)
                }
                ),
                U({
                    commentData: t,
                    mentions: s
                })
            }
              , et = () => {
                _(!1),
                U({
                    commentData: {},
                    mentions: []
                })
            }
              , en = async t => {
                let n = {
                    ...t
                };
                if (!r) {
                    m();
                    return
                }
                try {
                    n.currentUserAction.isLike ? (n.currentUserAction.isLike = !1,
                    n.currentUserAction.isDislike = !0,
                    n.totalLike -= 1) : (n.currentUserAction.isLike = !0,
                    n.currentUserAction.isDislike = !1,
                    n.totalLike += 1);
                    let i = v.map(t => n.commentId === t.commentId ? {
                        ...n
                    } : t);
                    E(i);
                    let s = {
                        isLike: n.currentUserAction.isLike,
                        isDislike: n.currentUserAction.isDislike,
                        commentId: null == n ? void 0 : n.commentId,
                        postId: n.postId,
                        groupId: ""
                    };
                    await (0,
                    l.aZ)(s)
                } catch (a) {
                    console.error("Error updating like action:", a)
                }
            }
              , er = async () => {
                if (!r) {
                    m();
                    return
                }
                B(p.M0.Web_Comments_Like_Click);
                let t = {
                    ...b
                };
                b.currentUserAction.isLike ? (t.currentUserAction.isLike = !1,
                t.currentUserAction.isDislike = !0,
                t.totalLike = t.totalLike - 1) : (t.currentUserAction.isLike = !0,
                t.currentUserAction.isDislike = !1,
                t.totalLike = t.totalLike + 1),
                C(t);
                try {
                    let n = {
                        isLike: t.currentUserAction.isLike,
                        isDislike: t.currentUserAction.isDislike,
                        commentId: null == t ? void 0 : t.commentId,
                        postId: t.postId,
                        groupId: ""
                    };
                    await (0,
                    l.aZ)(n)
                } catch (i) {
                    console.error("Error updating like action:", i)
                }
            }
              , ei = async t => {
                if (!r) {
                    m();
                    return
                }
                let n = t.parentId
                  , i = t.commentId
                  , s = v.map(t => {
                    if (t.commentId === n) {
                        let r = t.child
                          , s = r.map(t => t.commentId !== i ? t : t.currentUserAction.isLike ? {
                            ...t,
                            currentUserAction: {
                                ...t.currentUserAction,
                                isLike: !1,
                                isDislike: !0
                            },
                            totalLike: t.totalLike - 1,
                            totalDislike: t.totalDislike + 1
                        } : {
                            ...t,
                            currentUserAction: {
                                ...t.currentUserAction,
                                isLike: !0,
                                isDislike: !1
                            },
                            totalLike: t.totalLike + 1,
                            totalDislike: t.totalDislike - 1
                        });
                        t.child = s
                    }
                    return t
                }
                );
                E(s);
                try {
                    let a = s.find(t => t.commentId === n).child.find(t => t.commentId = i);
                    if (a) {
                        let o = {
                            isLike: a.currentUserAction.isLike,
                            isDislike: a.currentUserAction.isDislike,
                            commentId: a.commentId,
                            postId: a.postId,
                            groupId: ""
                        };
                        await (0,
                        l.aZ)(o)
                    } else
                        console.log("liked comment does not exist in comments list")
                } catch (u) {
                    console.log("error in like a child comment", u)
                }
            }
              , es = (t, n) => {
                let r = t.filter(t => {
                    if (t.commentId != n)
                        return t
                }
                );
                return r
            }
              , ea = async t => {
                let n = v.map(n => ({
                    ...n,
                    child: es(n.child, t),
                    threadCount: n.threadCount - 1
                }));
                E(n)
            }
              , eo = async t => {}
              , el = async (t, n) => {
                let r = u.Z.getUserData()
                  , i = await u.Z.deepCopy(t)
                  , s = {
                    commentId: n,
                    ...i,
                    isDeleted: !1,
                    userId: null == r ? void 0 : r.id,
                    user: r,
                    child: [],
                    threadCount: 0,
                    currentUserAction: {
                        commentId: n,
                        isLike: !1,
                        isDislike: !1
                    },
                    totalDislike: 0,
                    totalLike: 0
                };
                D("incr"),
                E(t => [s, ...t])
            }
              , eu = async (t, n) => {
                let r = v.map(r => {
                    if (r.commentId === t) {
                        if ("incr" === n) {
                            let i = r.threadCount + 1;
                            return {
                                ...r,
                                threadCount: i
                            }
                        }
                        if ("decr" === n) {
                            let s = Math.max(0, r.threadCount - 1);
                            return {
                                ...r,
                                threadCount: s
                            }
                        }
                    }
                    return r
                }
                );
                E(r)
            }
              , ec = async (t, n) => {
                let r = v.filter(n => (null == n ? void 0 : n.commentId) !== t);
                D("decr"),
                E(r)
            }
              , ed = async t => {
                E(v.filter(n => (null == n ? void 0 : n.userId) !== t))
            }
            ;
            return (0,
            i.jsx)(g.Provider, {
                value: {
                    commentList: v,
                    fetchComments: V,
                    myRef: N,
                    nextPage: S,
                    isVisible: I,
                    isCommentLoading: O,
                    fetchCommentWithId: J,
                    handleLikeClick: en,
                    handleParentLikeClick: er,
                    handleChildLike: ei,
                    removeChildComment: ea,
                    blockUserInComments: eo,
                    openReplyModal: ee,
                    appendCommentToFeed: el,
                    handleThreadCount: eu,
                    removeCommentFromFeed: ec,
                    removeBlockedUser: ed,
                    handleCommentCount: D,
                    handleCommentSubmit: $,
                    parentComment: b,
                    handleParentCommentCount: X,
                    openReply: y,
                    closeReply: et,
                    modalData: k,
                    isReplyDisable: P,
                    addToNotNeededIds: z,
                    notNeededIds: R,
                    scrollTo: F,
                    clearNotNeededIds: K,
                    commentErrorMessage: j,
                    resetDeletedComment: q,
                    clearCommentList: W
                },
                children: n
            })
        }
        ;
        n.Z = g
    },
    17: function(t, n, r) {
        "use strict";
        let i, s, a, o, l, u;
        r.d(n, {
            f: function() {
                return tB
            },
            Z: function() {
                return tV
            }
        });
        var c, d, h, f = r(5893), p = r(7294), g = r(3454);
        /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        let m = function(t) {
            let n = []
              , r = 0;
            for (let i = 0; i < t.length; i++) {
                let s = t.charCodeAt(i);
                s < 128 ? n[r++] = s : s < 2048 ? (n[r++] = s >> 6 | 192,
                n[r++] = 63 & s | 128) : (64512 & s) == 55296 && i + 1 < t.length && (64512 & t.charCodeAt(i + 1)) == 56320 ? (s = 65536 + ((1023 & s) << 10) + (1023 & t.charCodeAt(++i)),
                n[r++] = s >> 18 | 240,
                n[r++] = s >> 12 & 63 | 128,
                n[r++] = s >> 6 & 63 | 128,
                n[r++] = 63 & s | 128) : (n[r++] = s >> 12 | 224,
                n[r++] = s >> 6 & 63 | 128,
                n[r++] = 63 & s | 128)
            }
            return n
        }
          , y = function(t) {
            let n = []
              , r = 0
              , i = 0;
            for (; r < t.length; ) {
                let s = t[r++];
                if (s < 128)
                    n[i++] = String.fromCharCode(s);
                else if (s > 191 && s < 224) {
                    let a = t[r++];
                    n[i++] = String.fromCharCode((31 & s) << 6 | 63 & a)
                } else if (s > 239 && s < 365) {
                    let o = t[r++]
                      , l = t[r++]
                      , u = t[r++]
                      , c = ((7 & s) << 18 | (63 & o) << 12 | (63 & l) << 6 | 63 & u) - 65536;
                    n[i++] = String.fromCharCode(55296 + (c >> 10)),
                    n[i++] = String.fromCharCode(56320 + (1023 & c))
                } else {
                    let d = t[r++]
                      , h = t[r++];
                    n[i++] = String.fromCharCode((15 & s) << 12 | (63 & d) << 6 | 63 & h)
                }
            }
            return n.join("")
        }
          , _ = {
            byteToCharMap_: null,
            charToByteMap_: null,
            byteToCharMapWebSafe_: null,
            charToByteMapWebSafe_: null,
            ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
            get ENCODED_VALS() {
                return this.ENCODED_VALS_BASE + "+/="
            },
            get ENCODED_VALS_WEBSAFE() {
                return this.ENCODED_VALS_BASE + "-_."
            },
            HAS_NATIVE_SUPPORT: "function" == typeof atob,
            encodeByteArray(t, n) {
                if (!Array.isArray(t))
                    throw Error("encodeByteArray takes an array as a parameter");
                this.init_();
                let r = n ? this.byteToCharMapWebSafe_ : this.byteToCharMap_
                  , i = [];
                for (let s = 0; s < t.length; s += 3) {
                    let a = t[s]
                      , o = s + 1 < t.length
                      , l = o ? t[s + 1] : 0
                      , u = s + 2 < t.length
                      , c = u ? t[s + 2] : 0
                      , d = a >> 2
                      , h = (3 & a) << 4 | l >> 4
                      , f = (15 & l) << 2 | c >> 6
                      , p = 63 & c;
                    u || (p = 64,
                    o || (f = 64)),
                    i.push(r[d], r[h], r[f], r[p])
                }
                return i.join("")
            },
            encodeString(t, n) {
                return this.HAS_NATIVE_SUPPORT && !n ? btoa(t) : this.encodeByteArray(m(t), n)
            },
            decodeString(t, n) {
                return this.HAS_NATIVE_SUPPORT && !n ? atob(t) : y(this.decodeStringToByteArray(t, n))
            },
            decodeStringToByteArray(t, n) {
                this.init_();
                let r = n ? this.charToByteMapWebSafe_ : this.charToByteMap_
                  , i = [];
                for (let s = 0; s < t.length; ) {
                    let a = r[t.charAt(s++)]
                      , o = s < t.length
                      , l = o ? r[t.charAt(s)] : 0;
                    ++s;
                    let u = s < t.length
                      , c = u ? r[t.charAt(s)] : 64;
                    ++s;
                    let d = s < t.length
                      , h = d ? r[t.charAt(s)] : 64;
                    if (++s,
                    null == a || null == l || null == c || null == h)
                        throw new v;
                    let f = a << 2 | l >> 4;
                    if (i.push(f),
                    64 !== c) {
                        let p = l << 4 & 240 | c >> 2;
                        if (i.push(p),
                        64 !== h) {
                            let g = c << 6 & 192 | h;
                            i.push(g)
                        }
                    }
                }
                return i
            },
            init_() {
                if (!this.byteToCharMap_) {
                    this.byteToCharMap_ = {},
                    this.charToByteMap_ = {},
                    this.byteToCharMapWebSafe_ = {},
                    this.charToByteMapWebSafe_ = {};
                    for (let t = 0; t < this.ENCODED_VALS.length; t++)
                        this.byteToCharMap_[t] = this.ENCODED_VALS.charAt(t),
                        this.charToByteMap_[this.byteToCharMap_[t]] = t,
                        this.byteToCharMapWebSafe_[t] = this.ENCODED_VALS_WEBSAFE.charAt(t),
                        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]] = t,
                        t >= this.ENCODED_VALS_BASE.length && (this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)] = t,
                        this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)] = t)
                }
            }
        };
        class v extends Error {
            constructor() {
                super(...arguments),
                this.name = "DecodeBase64StringError"
            }
        }
        let E = function(t) {
            let n = m(t);
            return _.encodeByteArray(n, !0)
        }
          , b = function(t) {
            return E(t).replace(/\./g, "")
        }
          , C = function(t) {
            try {
                return _.decodeString(t, !0)
            } catch (n) {
                console.error("base64Decode failed: ", n)
            }
            return null
        }
          , S = () => /**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        (function() {
            if ("undefined" != typeof self)
                return self;
            if ("undefined" != typeof window)
                return window;
            if (void 0 !== r.g)
                return r.g;
            throw Error("Unable to locate global object.")
        }
        )().__FIREBASE_DEFAULTS__
          , A = () => {
            if (void 0 === g || void 0 === g.env)
                return;
            let t = g.env.__FIREBASE_DEFAULTS__;
            if (t)
                return JSON.parse(t)
        }
          , N = () => {
            let t;
            if ("undefined" == typeof document)
                return;
            try {
                t = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)
            } catch (n) {
                return
            }
            let r = t && C(t[1]);
            return r && JSON.parse(r)
        }
          , T = () => {
            try {
                return S() || A() || N()
            } catch (t) {
                console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`);
                return
            }
        }
          , I = () => {
            var t;
            return null === (t = T()) || void 0 === t ? void 0 : t.config
        }
        ;
        /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        class O {
            constructor() {
                this.reject = () => {}
                ,
                this.resolve = () => {}
                ,
                this.promise = new Promise( (t, n) => {
                    this.resolve = t,
                    this.reject = n
                }
                )
            }
            wrapCallback(t) {
                return (n, r) => {
                    n ? this.reject(n) : this.resolve(r),
                    "function" == typeof t && (this.promise.catch( () => {}
                    ),
                    1 === t.length ? t(n) : t(n, r))
                }
            }
        }
        function w() {
            try {
                return "object" == typeof indexedDB
            } catch (t) {
                return !1
            }
        }
        function k() {
            return new Promise( (t, n) => {
                try {
                    let r = !0
                      , i = "validate-browser-context-for-indexeddb-analytics-module"
                      , s = self.indexedDB.open(i);
                    s.onsuccess = () => {
                        s.result.close(),
                        r || self.indexedDB.deleteDatabase(i),
                        t(!0)
                    }
                    ,
                    s.onupgradeneeded = () => {
                        r = !1
                    }
                    ,
                    s.onerror = () => {
                        var t;
                        n((null === (t = s.error) || void 0 === t ? void 0 : t.message) || "")
                    }
                } catch (a) {
                    n(a)
                }
            }
            )
        }
        class U extends Error {
            constructor(t, n, r) {
                super(n),
                this.code = t,
                this.customData = r,
                this.name = "FirebaseError",
                Object.setPrototypeOf(this, U.prototype),
                Error.captureStackTrace && Error.captureStackTrace(this, R.prototype.create)
            }
        }
        class R {
            constructor(t, n, r) {
                this.service = t,
                this.serviceName = n,
                this.errors = r
            }
            create(t, ...n) {
                let r = n[0] || {}
                  , i = `${this.service}/${t}`
                  , s = this.errors[t]
                  , a = s ? s.replace(M, (t, n) => {
                    let i = r[n];
                    return null != i ? String(i) : `<${n}?>`
                }
                ) : "Error"
                  , o = `${this.serviceName}: ${a} (${i}).`
                  , l = new U(i,o,r);
                return l
            }
        }
        let M = /\{\$([^}]+)}/g;
        function P(t, n) {
            if (t === n)
                return !0;
            let r = Object.keys(t)
              , i = Object.keys(n);
            for (let s of r) {
                if (!i.includes(s))
                    return !1;
                let a = t[s]
                  , o = n[s];
                if (L(a) && L(o)) {
                    if (!P(a, o))
                        return !1
                } else if (a !== o)
                    return !1
            }
            for (let l of i)
                if (!r.includes(l))
                    return !1;
            return !0
        }
        function L(t) {
            return null !== t && "object" == typeof t
        }
        function D(t, n=1e3, r=2) {
            let i = n * Math.pow(r, t);
            return Math.min(144e5, i + Math.round(.5 * i * (Math.random() - .5) * 2))
        }
        /**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        function x(t) {
            return t && t._delegate ? t._delegate : t
        }
        class F {
            constructor(t, n, r) {
                this.name = t,
                this.instanceFactory = n,
                this.type = r,
                this.multipleInstances = !1,
                this.serviceProps = {},
                this.instantiationMode = "LAZY",
                this.onInstanceCreated = null
            }
            setInstantiationMode(t) {
                return this.instantiationMode = t,
                this
            }
            setMultipleInstances(t) {
                return this.multipleInstances = t,
                this
            }
            setServiceProps(t) {
                return this.serviceProps = t,
                this
            }
            setInstanceCreatedCallback(t) {
                return this.onInstanceCreated = t,
                this
            }
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        let H = "[DEFAULT]";
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        class j {
            constructor(t, n) {
                this.name = t,
                this.container = n,
                this.component = null,
                this.instances = new Map,
                this.instancesDeferred = new Map,
                this.instancesOptions = new Map,
                this.onInitCallbacks = new Map
            }
            get(t) {
                let n = this.normalizeInstanceIdentifier(t);
                if (!this.instancesDeferred.has(n)) {
                    let r = new O;
                    if (this.instancesDeferred.set(n, r),
                    this.isInitialized(n) || this.shouldAutoInitialize())
                        try {
                            let i = this.getOrInitializeService({
                                instanceIdentifier: n
                            });
                            i && r.resolve(i)
                        } catch (s) {}
                }
                return this.instancesDeferred.get(n).promise
            }
            getImmediate(t) {
                var n;
                let r = this.normalizeInstanceIdentifier(null == t ? void 0 : t.identifier)
                  , i = null !== (n = null == t ? void 0 : t.optional) && void 0 !== n && n;
                if (this.isInitialized(r) || this.shouldAutoInitialize())
                    try {
                        return this.getOrInitializeService({
                            instanceIdentifier: r
                        })
                    } catch (s) {
                        if (i)
                            return null;
                        throw s
                    }
                else {
                    if (i)
                        return null;
                    throw Error(`Service ${this.name} is not available`)
                }
            }
            getComponent() {
                return this.component
            }
            setComponent(t) {
                if (t.name !== this.name)
                    throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);
                if (this.component)
                    throw Error(`Component for ${this.name} has already been provided`);
                if (this.component = t,
                this.shouldAutoInitialize()) {
                    if ("EAGER" === t.instantiationMode)
                        try {
                            this.getOrInitializeService({
                                instanceIdentifier: H
                            })
                        } catch (n) {}
                    for (let[r,i] of this.instancesDeferred.entries()) {
                        let s = this.normalizeInstanceIdentifier(r);
                        try {
                            let a = this.getOrInitializeService({
                                instanceIdentifier: s
                            });
                            i.resolve(a)
                        } catch (o) {}
                    }
                }
            }
            clearInstance(t=H) {
                this.instancesDeferred.delete(t),
                this.instancesOptions.delete(t),
                this.instances.delete(t)
            }
            async delete() {
                let t = Array.from(this.instances.values());
                await Promise.all([...t.filter(t => "INTERNAL"in t).map(t => t.INTERNAL.delete()), ...t.filter(t => "_delete"in t).map(t => t._delete())])
            }
            isComponentSet() {
                return null != this.component
            }
            isInitialized(t=H) {
                return this.instances.has(t)
            }
            getOptions(t=H) {
                return this.instancesOptions.get(t) || {}
            }
            initialize(t={}) {
                let {options: n={}} = t
                  , r = this.normalizeInstanceIdentifier(t.instanceIdentifier);
                if (this.isInitialized(r))
                    throw Error(`${this.name}(${r}) has already been initialized`);
                if (!this.isComponentSet())
                    throw Error(`Component ${this.name} has not been registered yet`);
                let i = this.getOrInitializeService({
                    instanceIdentifier: r,
                    options: n
                });
                for (let[s,a] of this.instancesDeferred.entries()) {
                    let o = this.normalizeInstanceIdentifier(s);
                    r === o && a.resolve(i)
                }
                return i
            }
            onInit(t, n) {
                var r;
                let i = this.normalizeInstanceIdentifier(n)
                  , s = null !== (r = this.onInitCallbacks.get(i)) && void 0 !== r ? r : new Set;
                s.add(t),
                this.onInitCallbacks.set(i, s);
                let a = this.instances.get(i);
                return a && t(a, i),
                () => {
                    s.delete(t)
                }
            }
            invokeOnInitCallbacks(t, n) {
                let r = this.onInitCallbacks.get(n);
                if (r)
                    for (let i of r)
                        try {
                            i(t, n)
                        } catch (s) {}
            }
            getOrInitializeService({instanceIdentifier: t, options: n={}}) {
                let r = this.instances.get(t);
                if (!r && this.component && (r = this.component.instanceFactory(this.container, {
                    instanceIdentifier: t === H ? void 0 : t,
                    options: n
                }),
                this.instances.set(t, r),
                this.instancesOptions.set(t, n),
                this.invokeOnInitCallbacks(r, t),
                this.component.onInstanceCreated))
                    try {
                        this.component.onInstanceCreated(this.container, t, r)
                    } catch (i) {}
                return r || null
            }
            normalizeInstanceIdentifier(t=H) {
                return this.component ? this.component.multipleInstances ? t : H : t
            }
            shouldAutoInitialize() {
                return !!this.component && "EXPLICIT" !== this.component.instantiationMode
            }
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        class G {
            constructor(t) {
                this.name = t,
                this.providers = new Map
            }
            addComponent(t) {
                let n = this.getProvider(t.name);
                if (n.isComponentSet())
                    throw Error(`Component ${t.name} has already been registered with ${this.name}`);
                n.setComponent(t)
            }
            addOrOverwriteComponent(t) {
                let n = this.getProvider(t.name);
                n.isComponentSet() && this.providers.delete(t.name),
                this.addComponent(t)
            }
            getProvider(t) {
                if (this.providers.has(t))
                    return this.providers.get(t);
                let n = new j(t,this);
                return this.providers.set(t, n),
                n
            }
            getProviders() {
                return Array.from(this.providers.values())
            }
        }
        /**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        let B = [];
        (d = h || (h = {}))[d.DEBUG = 0] = "DEBUG",
        d[d.VERBOSE = 1] = "VERBOSE",
        d[d.INFO = 2] = "INFO",
        d[d.WARN = 3] = "WARN",
        d[d.ERROR = 4] = "ERROR",
        d[d.SILENT = 5] = "SILENT";
        let V = {
            debug: h.DEBUG,
            verbose: h.VERBOSE,
            info: h.INFO,
            warn: h.WARN,
            error: h.ERROR,
            silent: h.SILENT
        }
          , q = h.INFO
          , z = {
            [h.DEBUG]: "log",
            [h.VERBOSE]: "log",
            [h.INFO]: "info",
            [h.WARN]: "warn",
            [h.ERROR]: "error"
        }
          , K = (t, n, ...r) => {
            if (n < t.logLevel)
                return;
            let i = new Date().toISOString()
              , s = z[n];
            if (s)
                console[s](`[${i}]  ${t.name}:`, ...r);
            else
                throw Error(`Attempted to log a message with an invalid logType (value: ${n})`)
        }
        ;
        class W {
            constructor(t) {
                this.name = t,
                this._logLevel = q,
                this._logHandler = K,
                this._userLogHandler = null,
                B.push(this)
            }
            get logLevel() {
                return this._logLevel
            }
            set logLevel(t) {
                if (!(t in h))
                    throw TypeError(`Invalid value "${t}" assigned to \`logLevel\``);
                this._logLevel = t
            }
            setLogLevel(t) {
                this._logLevel = "string" == typeof t ? V[t] : t
            }
            get logHandler() {
                return this._logHandler
            }
            set logHandler(t) {
                if ("function" != typeof t)
                    throw TypeError("Value assigned to `logHandler` must be a function");
                this._logHandler = t
            }
            get userLogHandler() {
                return this._userLogHandler
            }
            set userLogHandler(t) {
                this._userLogHandler = t
            }
            debug(...t) {
                this._userLogHandler && this._userLogHandler(this, h.DEBUG, ...t),
                this._logHandler(this, h.DEBUG, ...t)
            }
            log(...t) {
                this._userLogHandler && this._userLogHandler(this, h.VERBOSE, ...t),
                this._logHandler(this, h.VERBOSE, ...t)
            }
            info(...t) {
                this._userLogHandler && this._userLogHandler(this, h.INFO, ...t),
                this._logHandler(this, h.INFO, ...t)
            }
            warn(...t) {
                this._userLogHandler && this._userLogHandler(this, h.WARN, ...t),
                this._logHandler(this, h.WARN, ...t)
            }
            error(...t) {
                this._userLogHandler && this._userLogHandler(this, h.ERROR, ...t),
                this._logHandler(this, h.ERROR, ...t)
            }
        }
        let Y = (t, n) => n.some(n => t instanceof n)
          , Q = new WeakMap
          , J = new WeakMap
          , Z = new WeakMap
          , $ = new WeakMap
          , X = new WeakMap
          , ee = {
            get(t, n, r) {
                if (t instanceof IDBTransaction) {
                    if ("done" === n)
                        return J.get(t);
                    if ("objectStoreNames" === n)
                        return t.objectStoreNames || Z.get(t);
                    if ("store" === n)
                        return r.objectStoreNames[1] ? void 0 : r.objectStore(r.objectStoreNames[0])
                }
                return et(t[n])
            },
            set: (t, n, r) => (t[n] = r,
            !0),
            has: (t, n) => t instanceof IDBTransaction && ("done" === n || "store" === n) || n in t
        };
        function et(t) {
            var n;
            if (t instanceof IDBRequest)
                return function(t) {
                    let n = new Promise( (n, r) => {
                        let i = () => {
                            t.removeEventListener("success", s),
                            t.removeEventListener("error", a)
                        }
                          , s = () => {
                            n(et(t.result)),
                            i()
                        }
                          , a = () => {
                            r(t.error),
                            i()
                        }
                        ;
                        t.addEventListener("success", s),
                        t.addEventListener("error", a)
                    }
                    );
                    return n.then(n => {
                        n instanceof IDBCursor && Q.set(n, t)
                    }
                    ).catch( () => {}
                    ),
                    X.set(n, t),
                    n
                }(t);
            if ($.has(t))
                return $.get(t);
            let r = "function" == typeof (n = t) ? n !== IDBDatabase.prototype.transaction || "objectStoreNames"in IDBTransaction.prototype ? (s || (s = [IDBCursor.prototype.advance, IDBCursor.prototype.continue, IDBCursor.prototype.continuePrimaryKey])).includes(n) ? function(...t) {
                return n.apply(en(this), t),
                et(Q.get(this))
            }
            : function(...t) {
                return et(n.apply(en(this), t))
            }
            : function(t, ...r) {
                let i = n.call(en(this), t, ...r);
                return Z.set(i, t.sort ? t.sort() : [t]),
                et(i)
            }
            : (n instanceof IDBTransaction && function(t) {
                if (J.has(t))
                    return;
                let n = new Promise( (n, r) => {
                    let i = () => {
                        t.removeEventListener("complete", s),
                        t.removeEventListener("error", a),
                        t.removeEventListener("abort", a)
                    }
                      , s = () => {
                        n(),
                        i()
                    }
                      , a = () => {
                        r(t.error || new DOMException("AbortError","AbortError")),
                        i()
                    }
                    ;
                    t.addEventListener("complete", s),
                    t.addEventListener("error", a),
                    t.addEventListener("abort", a)
                }
                );
                J.set(t, n)
            }(n),
            Y(n, i || (i = [IDBDatabase, IDBObjectStore, IDBIndex, IDBCursor, IDBTransaction]))) ? new Proxy(n,ee) : n;
            return r !== t && ($.set(t, r),
            X.set(r, t)),
            r
        }
        let en = t => X.get(t);
        function er(t, n, {blocked: r, upgrade: i, blocking: s, terminated: a}={}) {
            let o = indexedDB.open(t, n)
              , l = et(o);
            return i && o.addEventListener("upgradeneeded", t => {
                i(et(o.result), t.oldVersion, t.newVersion, et(o.transaction), t)
            }
            ),
            r && o.addEventListener("blocked", t => r(t.oldVersion, t.newVersion, t)),
            l.then(t => {
                a && t.addEventListener("close", () => a()),
                s && t.addEventListener("versionchange", t => s(t.oldVersion, t.newVersion, t))
            }
            ).catch( () => {}
            ),
            l
        }
        let ei = ["get", "getKey", "getAll", "getAllKeys", "count"]
          , es = ["put", "add", "delete", "clear"]
          , ea = new Map;
        function eo(t, n) {
            if (!(t instanceof IDBDatabase && !(n in t) && "string" == typeof n))
                return;
            if (ea.get(n))
                return ea.get(n);
            let r = n.replace(/FromIndex$/, "")
              , i = n !== r
              , s = es.includes(r);
            if (!(r in (i ? IDBIndex : IDBObjectStore).prototype) || !(s || ei.includes(r)))
                return;
            let a = async function(t, ...n) {
                let a = this.transaction(t, s ? "readwrite" : "readonly")
                  , o = a.store;
                return i && (o = o.index(n.shift())),
                (await Promise.all([o[r](...n), s && a.done]))[0]
            };
            return ea.set(n, a),
            a
        }
        ee = {
            ...c = ee,
            get: (t, n, r) => eo(t, n) || c.get(t, n, r),
            has: (t, n) => !!eo(t, n) || c.has(t, n)
        };
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        class el {
            constructor(t) {
                this.container = t
            }
            getPlatformInfoString() {
                let t = this.container.getProviders();
                return t.map(t => {
                    if (!function(t) {
                        let n = t.getComponent();
                        return (null == n ? void 0 : n.type) === "VERSION"
                    }(t))
                        return null;
                    {
                        let n = t.getImmediate();
                        return `${n.library}/${n.version}`
                    }
                }
                ).filter(t => t).join(" ")
            }
        }
        let eu = "@firebase/app"
          , ec = "0.10.6"
          , ed = new W("@firebase/app")
          , eh = "[DEFAULT]"
          , ef = {
            [eu]: "fire-core",
            "@firebase/app-compat": "fire-core-compat",
            "@firebase/analytics": "fire-analytics",
            "@firebase/analytics-compat": "fire-analytics-compat",
            "@firebase/app-check": "fire-app-check",
            "@firebase/app-check-compat": "fire-app-check-compat",
            "@firebase/auth": "fire-auth",
            "@firebase/auth-compat": "fire-auth-compat",
            "@firebase/database": "fire-rtdb",
            "@firebase/database-compat": "fire-rtdb-compat",
            "@firebase/functions": "fire-fn",
            "@firebase/functions-compat": "fire-fn-compat",
            "@firebase/installations": "fire-iid",
            "@firebase/installations-compat": "fire-iid-compat",
            "@firebase/messaging": "fire-fcm",
            "@firebase/messaging-compat": "fire-fcm-compat",
            "@firebase/performance": "fire-perf",
            "@firebase/performance-compat": "fire-perf-compat",
            "@firebase/remote-config": "fire-rc",
            "@firebase/remote-config-compat": "fire-rc-compat",
            "@firebase/storage": "fire-gcs",
            "@firebase/storage-compat": "fire-gcs-compat",
            "@firebase/firestore": "fire-fst",
            "@firebase/firestore-compat": "fire-fst-compat",
            "@firebase/vertexai-preview": "fire-vertex",
            "fire-js": "fire-js",
            firebase: "fire-js-all"
        }
          , ep = new Map
          , eg = new Map
          , em = new Map;
        function ey(t, n) {
            try {
                t.container.addComponent(n)
            } catch (r) {
                ed.debug(`Component ${n.name} failed to register with FirebaseApp ${t.name}`, r)
            }
        }
        function e_(t) {
            let n = t.name;
            if (em.has(n))
                return ed.debug(`There were multiple attempts to register component ${n}.`),
                !1;
            for (let r of (em.set(n, t),
            ep.values()))
                ey(r, t);
            for (let i of eg.values())
                ey(i, t);
            return !0
        }
        function ev(t, n) {
            let r = t.container.getProvider("heartbeat").getImmediate({
                optional: !0
            });
            return r && r.triggerHeartbeat(),
            t.container.getProvider(n)
        }
        let eE = new R("app","Firebase",{
            "no-app": "No Firebase App '{$appName}' has been created - call initializeApp() first",
            "bad-app-name": "Illegal App name: '{$appName}'",
            "duplicate-app": "Firebase App named '{$appName}' already exists with different options or config",
            "app-deleted": "Firebase App named '{$appName}' already deleted",
            "server-app-deleted": "Firebase Server App has been deleted",
            "no-options": "Need to provide options, when not being deployed to hosting via source.",
            "invalid-app-argument": "firebase.{$appName}() takes either no argument or a Firebase App instance.",
            "invalid-log-argument": "First argument to `onLog` must be null or a function.",
            "idb-open": "Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.",
            "idb-get": "Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.",
            "idb-set": "Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.",
            "idb-delete": "Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.",
            "finalization-registry-not-supported": "FirebaseServerApp deleteOnDeref field defined but the JS runtime does not support FinalizationRegistry.",
            "invalid-server-app-environment": "FirebaseServerApp is not for use in browser environments."
        });
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        class eb {
            constructor(t, n, r) {
                this._isDeleted = !1,
                this._options = Object.assign({}, t),
                this._config = Object.assign({}, n),
                this._name = n.name,
                this._automaticDataCollectionEnabled = n.automaticDataCollectionEnabled,
                this._container = r,
                this.container.addComponent(new F("app", () => this,"PUBLIC"))
            }
            get automaticDataCollectionEnabled() {
                return this.checkDestroyed(),
                this._automaticDataCollectionEnabled
            }
            set automaticDataCollectionEnabled(t) {
                this.checkDestroyed(),
                this._automaticDataCollectionEnabled = t
            }
            get name() {
                return this.checkDestroyed(),
                this._name
            }
            get options() {
                return this.checkDestroyed(),
                this._options
            }
            get config() {
                return this.checkDestroyed(),
                this._config
            }
            get container() {
                return this._container
            }
            get isDeleted() {
                return this._isDeleted
            }
            set isDeleted(t) {
                this._isDeleted = t
            }
            checkDestroyed() {
                if (this.isDeleted)
                    throw eE.create("app-deleted", {
                        appName: this._name
                    })
            }
        }
        function eC(t, n={}) {
            let r = t;
            if ("object" != typeof n) {
                let i = n;
                n = {
                    name: i
                }
            }
            let s = Object.assign({
                name: eh,
                automaticDataCollectionEnabled: !1
            }, n)
              , a = s.name;
            if ("string" != typeof a || !a)
                throw eE.create("bad-app-name", {
                    appName: String(a)
                });
            if (r || (r = I()),
            !r)
                throw eE.create("no-options");
            let o = ep.get(a);
            if (o) {
                if (P(r, o.options) && P(s, o.config))
                    return o;
                throw eE.create("duplicate-app", {
                    appName: a
                })
            }
            let l = new G(a);
            for (let u of em.values())
                l.addComponent(u);
            let c = new eb(r,s,l);
            return ep.set(a, c),
            c
        }
        function eS(t, n, r) {
            var i;
            let s = null !== (i = ef[t]) && void 0 !== i ? i : t;
            r && (s += `-${r}`);
            let a = s.match(/\s|\//)
              , o = n.match(/\s|\//);
            if (a || o) {
                let l = [`Unable to register library "${s}" with version "${n}":`];
                a && l.push(`library name "${s}" contains illegal characters (whitespace or "/")`),
                a && o && l.push("and"),
                o && l.push(`version name "${n}" contains illegal characters (whitespace or "/")`),
                ed.warn(l.join(" "));
                return
            }
            e_(new F(`${s}-version`, () => ({
                library: s,
                version: n
            }),"VERSION"))
        }
        let eA = "firebase-heartbeat-store"
          , eN = null;
        function eT() {
            return eN || (eN = er("firebase-heartbeat-database", 1, {
                upgrade(t, n) {
                    if (0 === n)
                        try {
                            t.createObjectStore(eA)
                        } catch (r) {
                            console.warn(r)
                        }
                }
            }).catch(t => {
                throw eE.create("idb-open", {
                    originalErrorMessage: t.message
                })
            }
            )),
            eN
        }
        async function eI(t) {
            try {
                let n = await eT()
                  , r = n.transaction(eA)
                  , i = await r.objectStore(eA).get(ew(t));
                return await r.done,
                i
            } catch (a) {
                if (a instanceof U)
                    ed.warn(a.message);
                else {
                    let s = eE.create("idb-get", {
                        originalErrorMessage: null == a ? void 0 : a.message
                    });
                    ed.warn(s.message)
                }
            }
        }
        async function eO(t, n) {
            try {
                let r = await eT()
                  , i = r.transaction(eA, "readwrite")
                  , s = i.objectStore(eA);
                await s.put(n, ew(t)),
                await i.done
            } catch (o) {
                if (o instanceof U)
                    ed.warn(o.message);
                else {
                    let a = eE.create("idb-set", {
                        originalErrorMessage: null == o ? void 0 : o.message
                    });
                    ed.warn(a.message)
                }
            }
        }
        function ew(t) {
            return `${t.name}!${t.options.appId}`
        }
        class ek {
            constructor(t) {
                this.container = t,
                this._heartbeatsCache = null;
                let n = this.container.getProvider("app").getImmediate();
                this._storage = new eR(n),
                this._heartbeatsCachePromise = this._storage.read().then(t => (this._heartbeatsCache = t,
                t))
            }
            async triggerHeartbeat() {
                var t, n;
                let r = this.container.getProvider("platform-logger").getImmediate()
                  , i = r.getPlatformInfoString()
                  , s = eU();
                return (null === (t = this._heartbeatsCache) || void 0 === t ? void 0 : t.heartbeats) == null && (this._heartbeatsCache = await this._heartbeatsCachePromise,
                (null === (n = this._heartbeatsCache) || void 0 === n ? void 0 : n.heartbeats) == null) ? void 0 : this._heartbeatsCache.lastSentHeartbeatDate === s || this._heartbeatsCache.heartbeats.some(t => t.date === s) ? void 0 : (this._heartbeatsCache.heartbeats.push({
                    date: s,
                    agent: i
                }),
                this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(t => {
                    let n = new Date(t.date).valueOf()
                      , r = Date.now();
                    return r - n <= 2592e6
                }
                ),
                this._storage.overwrite(this._heartbeatsCache))
            }
            async getHeartbeatsHeader() {
                var t;
                if (null === this._heartbeatsCache && await this._heartbeatsCachePromise,
                (null === (t = this._heartbeatsCache) || void 0 === t ? void 0 : t.heartbeats) == null || 0 === this._heartbeatsCache.heartbeats.length)
                    return "";
                let n = eU()
                  , {heartbeatsToSend: r, unsentEntries: i} = function(t, n=1024) {
                    let r = []
                      , i = t.slice();
                    for (let s of t) {
                        let a = r.find(t => t.agent === s.agent);
                        if (a) {
                            if (a.dates.push(s.date),
                            eM(r) > n) {
                                a.dates.pop();
                                break
                            }
                        } else if (r.push({
                            agent: s.agent,
                            dates: [s.date]
                        }),
                        eM(r) > n) {
                            r.pop();
                            break
                        }
                        i = i.slice(1)
                    }
                    return {
                        heartbeatsToSend: r,
                        unsentEntries: i
                    }
                }(this._heartbeatsCache.heartbeats)
                  , s = b(JSON.stringify({
                    version: 2,
                    heartbeats: r
                }));
                return this._heartbeatsCache.lastSentHeartbeatDate = n,
                i.length > 0 ? (this._heartbeatsCache.heartbeats = i,
                await this._storage.overwrite(this._heartbeatsCache)) : (this._heartbeatsCache.heartbeats = [],
                this._storage.overwrite(this._heartbeatsCache)),
                s
            }
        }
        function eU() {
            let t = new Date;
            return t.toISOString().substring(0, 10)
        }
        class eR {
            constructor(t) {
                this.app = t,
                this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck()
            }
            async runIndexedDBEnvironmentCheck() {
                return !!w() && k().then( () => !0).catch( () => !1)
            }
            async read() {
                let t = await this._canUseIndexedDBPromise;
                if (!t)
                    return {
                        heartbeats: []
                    };
                {
                    let n = await eI(this.app);
                    return (null == n ? void 0 : n.heartbeats) ? n : {
                        heartbeats: []
                    }
                }
            }
            async overwrite(t) {
                var n;
                let r = await this._canUseIndexedDBPromise;
                if (r) {
                    let i = await this.read();
                    return eO(this.app, {
                        lastSentHeartbeatDate: null !== (n = t.lastSentHeartbeatDate) && void 0 !== n ? n : i.lastSentHeartbeatDate,
                        heartbeats: t.heartbeats
                    })
                }
            }
            async add(t) {
                var n;
                let r = await this._canUseIndexedDBPromise;
                if (r) {
                    let i = await this.read();
                    return eO(this.app, {
                        lastSentHeartbeatDate: null !== (n = t.lastSentHeartbeatDate) && void 0 !== n ? n : i.lastSentHeartbeatDate,
                        heartbeats: [...i.heartbeats, ...t.heartbeats]
                    })
                }
            }
        }
        function eM(t) {
            return b(JSON.stringify({
                version: 2,
                heartbeats: t
            })).length
        }
        e_(new F("platform-logger",t => new el(t),"PRIVATE")),
        e_(new F("heartbeat",t => new ek(t),"PRIVATE")),
        eS(eu, ec, ""),
        eS(eu, ec, "esm2017"),
        eS("fire-js", ""),
        /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        eS("firebase", "10.12.3", "app");
        let eP = "@firebase/installations"
          , eL = "0.6.8"
          , eD = `w:${eL}`
          , ex = "FIS_v2"
          , eF = new R("installations","Installations",{
            "missing-app-config-values": 'Missing App configuration value: "{$valueName}"',
            "not-registered": "Firebase Installation is not registered.",
            "installation-not-found": "Firebase Installation not found.",
            "request-failed": '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
            "app-offline": "Could not process request. Application offline.",
            "delete-pending-registration": "Can't delete installation while there is a pending registration request."
        });
        function eH(t) {
            return t instanceof U && t.code.includes("request-failed")
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        function ej({projectId: t}) {
            return `https://firebaseinstallations.googleapis.com/v1/projects/${t}/installations`
        }
        function eG(t) {
            return {
                token: t.token,
                requestStatus: 2,
                expiresIn: Number(t.expiresIn.replace("s", "000")),
                creationTime: Date.now()
            }
        }
        async function eB(t, n) {
            let r = await n.json()
              , i = r.error;
            return eF.create("request-failed", {
                requestName: t,
                serverCode: i.code,
                serverMessage: i.message,
                serverStatus: i.status
            })
        }
        function eV({apiKey: t}) {
            return new Headers({
                "Content-Type": "application/json",
                Accept: "application/json",
                "x-goog-api-key": t
            })
        }
        async function eq(t) {
            let n = await t();
            return n.status >= 500 && n.status < 600 ? t() : n
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        async function ez({appConfig: t, heartbeatServiceProvider: n}, {fid: r}) {
            let i = ej(t)
              , s = eV(t)
              , a = n.getImmediate({
                optional: !0
            });
            if (a) {
                let o = await a.getHeartbeatsHeader();
                o && s.append("x-firebase-client", o)
            }
            let l = {
                fid: r,
                authVersion: ex,
                appId: t.appId,
                sdkVersion: eD
            }
              , u = {
                method: "POST",
                headers: s,
                body: JSON.stringify(l)
            }
              , c = await eq( () => fetch(i, u));
            if (c.ok) {
                let d = await c.json()
                  , h = {
                    fid: d.fid || r,
                    registrationStatus: 2,
                    refreshToken: d.refreshToken,
                    authToken: eG(d.authToken)
                };
                return h
            }
            throw await eB("Create Installation", c)
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        function eK(t) {
            return new Promise(n => {
                setTimeout(n, t)
            }
            )
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        let eW = /^[cdef][\w-]{21}$/;
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        function eY(t) {
            return `${t.appName}!${t.appId}`
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        let eQ = new Map;
        function eJ(t, n) {
            let r = eY(t);
            eZ(r, n),
            function(t, n) {
                let r = (!e$ && "BroadcastChannel"in self && ((e$ = new BroadcastChannel("[Firebase] FID Change")).onmessage = t => {
                    eZ(t.data.key, t.data.fid)
                }
                ),
                e$);
                r && r.postMessage({
                    key: t,
                    fid: n
                }),
                0 === eQ.size && e$ && (e$.close(),
                e$ = null)
            }(r, n)
        }
        function eZ(t, n) {
            let r = eQ.get(t);
            if (r)
                for (let i of r)
                    i(n)
        }
        let e$ = null
          , eX = "firebase-installations-store"
          , e0 = null;
        function e1() {
            return e0 || (e0 = er("firebase-installations-database", 1, {
                upgrade(t, n) {
                    0 === n && t.createObjectStore(eX)
                }
            })),
            e0
        }
        async function e2(t, n) {
            let r = eY(t)
              , i = await e1()
              , s = i.transaction(eX, "readwrite")
              , a = s.objectStore(eX)
              , o = await a.get(r);
            return await a.put(n, r),
            await s.done,
            o && o.fid === n.fid || eJ(t, n.fid),
            n
        }
        async function e3(t) {
            let n = eY(t)
              , r = await e1()
              , i = r.transaction(eX, "readwrite");
            await i.objectStore(eX).delete(n),
            await i.done
        }
        async function e4(t, n) {
            let r = eY(t)
              , i = await e1()
              , s = i.transaction(eX, "readwrite")
              , a = s.objectStore(eX)
              , o = await a.get(r)
              , l = n(o);
            return void 0 === l ? await a.delete(r) : await a.put(l, r),
            await s.done,
            l && (!o || o.fid !== l.fid) && eJ(t, l.fid),
            l
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        async function e5(t) {
            let n;
            let r = await e4(t.appConfig, r => {
                let i = function(t) {
                    let n = t || {
                        fid: function() {
                            try {
                                let t = new Uint8Array(17)
                                  , n = self.crypto || self.msCrypto;
                                n.getRandomValues(t),
                                t[0] = 112 + t[0] % 16;
                                let r = function(t) {
                                    let n = /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
                                    function(t) {
                                        let n = btoa(String.fromCharCode(...t));
                                        return n.replace(/\+/g, "-").replace(/\//g, "_")
                                    }(t);
                                    return n.substr(0, 22)
                                }(t);
                                return eW.test(r) ? r : ""
                            } catch (i) {
                                return ""
                            }
                        }(),
                        registrationStatus: 0
                    };
                    return e9(n)
                }(r)
                  , s = function(t, n) {
                    if (0 === n.registrationStatus) {
                        if (!navigator.onLine) {
                            let r = Promise.reject(eF.create("app-offline"));
                            return {
                                installationEntry: n,
                                registrationPromise: r
                            }
                        }
                        let i = {
                            fid: n.fid,
                            registrationStatus: 1,
                            registrationTime: Date.now()
                        }
                          , s = e6(t, i);
                        return {
                            installationEntry: i,
                            registrationPromise: s
                        }
                    }
                    return 1 === n.registrationStatus ? {
                        installationEntry: n,
                        registrationPromise: e8(t)
                    } : {
                        installationEntry: n
                    }
                }(t, i);
                return n = s.registrationPromise,
                s.installationEntry
            }
            );
            return "" === r.fid ? {
                installationEntry: await n
            } : {
                installationEntry: r,
                registrationPromise: n
            }
        }
        async function e6(t, n) {
            try {
                let r = await ez(t, n);
                return e2(t.appConfig, r)
            } catch (i) {
                throw eH(i) && 409 === i.customData.serverCode ? await e3(t.appConfig) : await e2(t.appConfig, {
                    fid: n.fid,
                    registrationStatus: 0
                }),
                i
            }
        }
        async function e8(t) {
            let n = await e7(t.appConfig);
            for (; 1 === n.registrationStatus; )
                await eK(100),
                n = await e7(t.appConfig);
            if (0 === n.registrationStatus) {
                let {installationEntry: r, registrationPromise: i} = await e5(t);
                return i || r
            }
            return n
        }
        function e7(t) {
            return e4(t, t => {
                if (!t)
                    throw eF.create("installation-not-found");
                return e9(t)
            }
            )
        }
        function e9(t) {
            return 1 === t.registrationStatus && t.registrationTime + 1e4 < Date.now() ? {
                fid: t.fid,
                registrationStatus: 0
            } : t
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        async function te({appConfig: t, heartbeatServiceProvider: n}, r) {
            let i = function(t, {fid: n}) {
                return `${ej(t)}/${n}/authTokens:generate`
            }(t, r)
              , s = function(t, {refreshToken: n}) {
                let r = eV(t);
                return r.append("Authorization", `${ex} ${n}`),
                r
            }(t, r)
              , a = n.getImmediate({
                optional: !0
            });
            if (a) {
                let o = await a.getHeartbeatsHeader();
                o && s.append("x-firebase-client", o)
            }
            let l = {
                installation: {
                    sdkVersion: eD,
                    appId: t.appId
                }
            }
              , u = {
                method: "POST",
                headers: s,
                body: JSON.stringify(l)
            }
              , c = await eq( () => fetch(i, u));
            if (c.ok) {
                let d = await c.json()
                  , h = eG(d);
                return h
            }
            throw await eB("Generate Auth Token", c)
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        async function tt(t, n=!1) {
            let r;
            let i = await e4(t.appConfig, i => {
                var s;
                if (!ts(i))
                    throw eF.create("not-registered");
                let a = i.authToken;
                if (!n && 2 === (s = a).requestStatus && !function(t) {
                    let n = Date.now();
                    return n < t.creationTime || t.creationTime + t.expiresIn < n + 36e5
                }(s))
                    return i;
                if (1 === a.requestStatus)
                    return r = tn(t, n),
                    i;
                {
                    if (!navigator.onLine)
                        throw eF.create("app-offline");
                    let o = function(t) {
                        let n = {
                            requestStatus: 1,
                            requestTime: Date.now()
                        };
                        return Object.assign(Object.assign({}, t), {
                            authToken: n
                        })
                    }(i);
                    return r = ti(t, o),
                    o
                }
            }
            )
              , s = r ? await r : i.authToken;
            return s
        }
        async function tn(t, n) {
            let r = await tr(t.appConfig);
            for (; 1 === r.authToken.requestStatus; )
                await eK(100),
                r = await tr(t.appConfig);
            let i = r.authToken;
            return 0 === i.requestStatus ? tt(t, n) : i
        }
        function tr(t) {
            return e4(t, t => {
                if (!ts(t))
                    throw eF.create("not-registered");
                let n = t.authToken;
                return 1 === n.requestStatus && n.requestTime + 1e4 < Date.now() ? Object.assign(Object.assign({}, t), {
                    authToken: {
                        requestStatus: 0
                    }
                }) : t
            }
            )
        }
        async function ti(t, n) {
            try {
                let r = await te(t, n)
                  , i = Object.assign(Object.assign({}, n), {
                    authToken: r
                });
                return await e2(t.appConfig, i),
                r
            } catch (a) {
                if (eH(a) && (401 === a.customData.serverCode || 404 === a.customData.serverCode))
                    await e3(t.appConfig);
                else {
                    let s = Object.assign(Object.assign({}, n), {
                        authToken: {
                            requestStatus: 0
                        }
                    });
                    await e2(t.appConfig, s)
                }
                throw a
            }
        }
        function ts(t) {
            return void 0 !== t && 2 === t.registrationStatus
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        async function ta(t) {
            let {installationEntry: n, registrationPromise: r} = await e5(t);
            return r ? r.catch(console.error) : tt(t).catch(console.error),
            n.fid
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        async function to(t, n=!1) {
            await tl(t);
            let r = await tt(t, n);
            return r.token
        }
        async function tl(t) {
            let {registrationPromise: n} = await e5(t);
            n && await n
        }
        function tu(t) {
            return eF.create("missing-app-config-values", {
                valueName: t
            })
        }
        /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        let tc = "installations"
          , td = t => {
            let n = t.getProvider("app").getImmediate()
              , r = /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
            function(t) {
                if (!t || !t.options)
                    throw tu("App Configuration");
                if (!t.name)
                    throw tu("App Name");
                for (let n of ["projectId", "apiKey", "appId"])
                    if (!t.options[n])
                        throw tu(n);
                return {
                    appName: t.name,
                    projectId: t.options.projectId,
                    apiKey: t.options.apiKey,
                    appId: t.options.appId
                }
            }(n)
              , i = ev(n, "heartbeat");
            return {
                app: n,
                appConfig: r,
                heartbeatServiceProvider: i,
                _delete: () => Promise.resolve()
            }
        }
          , th = t => {
            let n = t.getProvider("app").getImmediate()
              , r = ev(n, tc).getImmediate();
            return {
                getId: () => ta(r),
                getToken: t => to(r, t)
            }
        }
        ;
        e_(new F(tc,td,"PUBLIC")),
        e_(new F("installations-internal",th,"PRIVATE")),
        eS(eP, eL),
        eS(eP, eL, "esm2017");
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        let tf = "analytics"
          , tp = "https://www.googletagmanager.com/gtag/js"
          , tg = new W("@firebase/analytics")
          , tm = new R("analytics","Analytics",{
            "already-exists": "A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.",
            "already-initialized": "initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.",
            "already-initialized-settings": "Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.",
            "interop-component-reg-failed": "Firebase Analytics Interop Component failed to instantiate: {$reason}",
            "invalid-analytics-context": "Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",
            "indexeddb-unavailable": "IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",
            "fetch-throttle": "The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.",
            "config-fetch-failed": "Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}",
            "no-api-key": 'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',
            "no-app-id": 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',
            "no-client-id": 'The "client_id" field is empty.',
            "invalid-gtag-resource": "Trusted Types detected an invalid gtag resource: {$gtagURL}."
        });
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        function ty(t) {
            if (!t.startsWith(tp)) {
                let n = tm.create("invalid-gtag-resource", {
                    gtagURL: t
                });
                return tg.warn(n.message),
                ""
            }
            return t
        }
        function t_(t) {
            return Promise.all(t.map(t => t.catch(t => t)))
        }
        async function tv(t, n, r, i, s, a) {
            let o = i[s];
            try {
                if (o)
                    await n[o];
                else {
                    let l = await t_(r)
                      , u = l.find(t => t.measurementId === s);
                    u && await n[u.appId]
                }
            } catch (c) {
                tg.error(c)
            }
            t("config", s, a)
        }
        async function tE(t, n, r, i, s) {
            try {
                let a = [];
                if (s && s.send_to) {
                    let o = s.send_to;
                    Array.isArray(o) || (o = [o]);
                    let l = await t_(r);
                    for (let u of o) {
                        let c = l.find(t => t.measurementId === u)
                          , d = c && n[c.appId];
                        if (d)
                            a.push(d);
                        else {
                            a = [];
                            break
                        }
                    }
                }
                0 === a.length && (a = Object.values(n)),
                await Promise.all(a),
                t("event", i, s || {})
            } catch (h) {
                tg.error(h)
            }
        }
        let tb = new class {
            constructor(t={}, n=1e3) {
                this.throttleMetadata = t,
                this.intervalMillis = n
            }
            getThrottleMetadata(t) {
                return this.throttleMetadata[t]
            }
            setThrottleMetadata(t, n) {
                this.throttleMetadata[t] = n
            }
            deleteThrottleMetadata(t) {
                delete this.throttleMetadata[t]
            }
        }
        ;
        async function tC(t) {
            var n;
            let {appId: r, apiKey: i} = t
              , s = {
                method: "GET",
                headers: new Headers({
                    Accept: "application/json",
                    "x-goog-api-key": i
                })
            }
              , a = "https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig".replace("{app-id}", r)
              , o = await fetch(a, s);
            if (200 !== o.status && 304 !== o.status) {
                let l = "";
                try {
                    let u = await o.json();
                    (null === (n = u.error) || void 0 === n ? void 0 : n.message) && (l = u.error.message)
                } catch (c) {}
                throw tm.create("config-fetch-failed", {
                    httpStatus: o.status,
                    responseMessage: l
                })
            }
            return o.json()
        }
        async function tS(t, n=tb, r) {
            let {appId: i, apiKey: s, measurementId: a} = t.options;
            if (!i)
                throw tm.create("no-app-id");
            if (!s) {
                if (a)
                    return {
                        measurementId: a,
                        appId: i
                    };
                throw tm.create("no-api-key")
            }
            let o = n.getThrottleMetadata(i) || {
                backoffCount: 0,
                throttleEndTimeMillis: Date.now()
            }
              , l = new tN;
            return setTimeout(async () => {
                l.abort()
            }
            , void 0 !== r ? r : 6e4),
            tA({
                appId: i,
                apiKey: s,
                measurementId: a
            }, o, l, n)
        }
        async function tA(t, {throttleEndTimeMillis: n, backoffCount: r}, i, s=tb) {
            var a;
            let {appId: o, measurementId: l} = t;
            try {
                await new Promise( (t, r) => {
                    let s = Math.max(n - Date.now(), 0)
                      , a = setTimeout(t, s);
                    i.addEventListener( () => {
                        clearTimeout(a),
                        r(tm.create("fetch-throttle", {
                            throttleEndTimeMillis: n
                        }))
                    }
                    )
                }
                )
            } catch (u) {
                if (l)
                    return tg.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${l} provided in the "measurementId" field in the local Firebase config. [${null == u ? void 0 : u.message}]`),
                    {
                        appId: o,
                        measurementId: l
                    };
                throw u
            }
            try {
                let c = await tC(t);
                return s.deleteThrottleMetadata(o),
                c
            } catch (f) {
                if (!function(t) {
                    if (!(t instanceof U) || !t.customData)
                        return !1;
                    let n = Number(t.customData.httpStatus);
                    return 429 === n || 500 === n || 503 === n || 504 === n
                }(f)) {
                    if (s.deleteThrottleMetadata(o),
                    l)
                        return tg.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${l} provided in the "measurementId" field in the local Firebase config. [${null == f ? void 0 : f.message}]`),
                        {
                            appId: o,
                            measurementId: l
                        };
                    throw f
                }
                let d = 503 === Number(null === (a = null == f ? void 0 : f.customData) || void 0 === a ? void 0 : a.httpStatus) ? D(r, s.intervalMillis, 30) : D(r, s.intervalMillis)
                  , h = {
                    throttleEndTimeMillis: Date.now() + d,
                    backoffCount: r + 1
                };
                return s.setThrottleMetadata(o, h),
                tg.debug(`Calling attemptFetch again in ${d} millis`),
                tA(t, h, i, s)
            }
        }
        class tN {
            constructor() {
                this.listeners = []
            }
            addEventListener(t) {
                this.listeners.push(t)
            }
            abort() {
                this.listeners.forEach(t => t())
            }
        }
        async function tT(t, n, r, i, s) {
            if (s && s.global) {
                t("event", r, i);
                return
            }
            {
                let a = await n
                  , o = Object.assign(Object.assign({}, i), {
                    send_to: a
                });
                t("event", r, o)
            }
        }
        async function tI(t, n, r, i) {
            if (i && i.global)
                return t("set", {
                    user_id: r
                }),
                Promise.resolve();
            {
                let s = await n;
                t("config", s, {
                    update: !0,
                    user_id: r
                })
            }
        }
        async function tO(t, n, r, i) {
            if (i && i.global) {
                let s = {};
                for (let a of Object.keys(r))
                    s[`user_properties.${a}`] = r[a];
                return t("set", s),
                Promise.resolve()
            }
            {
                let o = await n;
                t("config", o, {
                    update: !0,
                    user_properties: r
                })
            }
        }
        /**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        async function tw() {
            if (!w())
                return tg.warn(tm.create("indexeddb-unavailable", {
                    errorInfo: "IndexedDB is not available in this environment."
                }).message),
                !1;
            try {
                await k()
            } catch (t) {
                return tg.warn(tm.create("indexeddb-unavailable", {
                    errorInfo: null == t ? void 0 : t.toString()
                }).message),
                !1
            }
            return !0
        }
        async function tk(t, n, r, i, s, l, u) {
            var c;
            let d = tS(t);
            d.then(n => {
                r[n.measurementId] = n.appId,
                t.options.measurementId && n.measurementId !== t.options.measurementId && tg.warn(`The measurement ID in the local Firebase config (${t.options.measurementId}) does not match the measurement ID fetched from the server (${n.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)
            }
            ).catch(t => tg.error(t)),
            n.push(d);
            let h = tw().then(t => t ? i.getId() : void 0)
              , [f,p] = await Promise.all([d, h]);
            !function(t) {
                let n = window.document.getElementsByTagName("script");
                for (let r of Object.values(n))
                    if (r.src && r.src.includes(tp) && r.src.includes(t))
                        return r;
                return null
            }(l) && function(t, n) {
                let r;
                let i = (window.trustedTypes && (r = window.trustedTypes.createPolicy("firebase-js-sdk-policy", {
                    createScriptURL: ty
                })),
                r)
                  , s = document.createElement("script")
                  , a = `${tp}?l=${t}&id=${n}`;
                s.src = i ? null == i ? void 0 : i.createScriptURL(a) : a,
                s.async = !0,
                document.head.appendChild(s)
            }(l, f.measurementId),
            o && (s("consent", "default", o),
            o = void 0),
            s("js", new Date);
            let g = null !== (c = null == u ? void 0 : u.config) && void 0 !== c ? c : {};
            return g.origin = "firebase",
            g.update = !0,
            null != p && (g.firebase_id = p),
            s("config", f.measurementId, g),
            a && (s("set", a),
            a = void 0),
            f.measurementId
        }
        /**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
        class tU {
            constructor(t) {
                this.app = t
            }
            _delete() {
                return delete tR[this.app.options.appId],
                Promise.resolve()
            }
        }
        let tR = {}
          , tM = []
          , tP = {}
          , tL = "dataLayer"
          , tD = !1;
        function tx(t, n, r, i) {
            tT(u, tR[(t = x(t)).app.options.appId], n, r, i).catch(t => tg.error(t))
        }
        let tF = "@firebase/analytics"
          , tH = "0.10.5";
        e_(new F(tf, (t, {options: n}) => {
            let r = t.getProvider("app").getImmediate()
              , i = t.getProvider("installations-internal").getImmediate();
            return function(t, n, r) {
                !function() {
                    let t = [];
                    if (function() {
                        let t = "object" == typeof chrome ? chrome.runtime : "object" == typeof browser ? browser.runtime : void 0;
                        return "object" == typeof t && void 0 !== t.id
                    }() && t.push("This is a browser extension environment."),
                    "undefined" != typeof navigator && navigator.cookieEnabled || t.push("Cookies are not available."),
                    t.length > 0) {
                        let n = t.map( (t, n) => `(${n + 1}) ${t}`).join(" ")
                          , r = tm.create("invalid-analytics-context", {
                            errorInfo: n
                        });
                        tg.warn(r.message)
                    }
                }();
                let i = t.options.appId;
                if (!i)
                    throw tm.create("no-app-id");
                if (!t.options.apiKey) {
                    if (t.options.measurementId)
                        tg.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${t.options.measurementId} provided in the "measurementId" field in the local Firebase config.`);
                    else
                        throw tm.create("no-api-key")
                }
                if (null != tR[i])
                    throw tm.create("already-exists", {
                        id: i
                    });
                if (!tD) {
                    var s, a;
                    let o, c;
                    o = [],
                    Array.isArray(window[tL]) ? o = window[tL] : window[tL] = o;
                    let {wrappedGtag: d, gtagCore: h} = (s = "gtag",
                    c = function(...t) {
                        window[tL].push(arguments)
                    }
                    ,
                    window[s] && "function" == typeof window[s] && (c = window[s]),
                    window[s] = (a = c,
                    async function(t, ...n) {
                        try {
                            if ("event" === t) {
                                let[r,i] = n;
                                await tE(a, tR, tM, r, i)
                            } else if ("config" === t) {
                                let[s,o] = n;
                                await tv(a, tR, tM, tP, s, o)
                            } else if ("consent" === t) {
                                let[l,u] = n;
                                a("consent", l, u)
                            } else if ("get" === t) {
                                let[c,d,h] = n;
                                a("get", c, d, h)
                            } else if ("set" === t) {
                                let[f] = n;
                                a("set", f)
                            } else
                                a(t, ...n)
                        } catch (p) {
                            tg.error(p)
                        }
                    }
                    ),
                    {
                        gtagCore: c,
                        wrappedGtag: window[s]
                    });
                    u = d,
                    l = h,
                    tD = !0
                }
                tR[i] = tk(t, tM, tP, n, l, tL, r);
                let f = new tU(t);
                return f
            }(r, i, n)
        }
        ,"PUBLIC")),
        e_(new F("analytics-internal",function(t) {
            try {
                let n = t.getProvider(tf).getImmediate();
                return {
                    logEvent: (t, r, i) => tx(n, t, r, i)
                }
            } catch (r) {
                throw tm.create("interop-component-reg-failed", {
                    reason: r
                })
            }
        }
        ,"PRIVATE")),
        eS(tF, tH),
        eS(tF, tH, "esm2017");
        var tj = r(8362);
        let tG = {
            apiKey: tj.Z.fireBaseApiKey,
            authDomain: "zorro---discover-the-truth.firebaseapp.com",
            projectId: "zorro---discover-the-truth",
            storageBucket: "zorro---discover-the-truth.appspot.com",
            messagingSenderId: tj.Z.fireBaseMessagingSenderId,
            appId: tj.Z.fireBaseAppId,
            measurementId: tj.Z.fireBaseMeasurementId
        }
          , tB = (0,
        p.createContext)(null);
        function tV(t) {
            let {children: n} = t
              , [r,i] = (0,
            p.useState)(null);
            (0,
            p.useEffect)( () => {
                if (r)
                    return;
                let t = eC(tG)
                  , n = function(t=function(t=eh) {
                    let n = ep.get(t);
                    if (!n && t === eh && I())
                        return eC();
                    if (!n)
                        throw eE.create("no-app", {
                            appName: t
                        });
                    return n
                }()) {
                    t = x(t);
                    let n = ev(t, tf);
                    return n.isInitialized() ? n.getImmediate() : function(t, n={}) {
                        let r = ev(t, tf);
                        if (r.isInitialized()) {
                            let i = r.getImmediate();
                            if (P(n, r.getOptions()))
                                return i;
                            throw tm.create("already-initialized")
                        }
                        let s = r.initialize({
                            options: n
                        });
                        return s
                    }(t)
                }(t);
                i(n)
            }
            , []);
            let s = (t, n) => {
                r && tx(r, t, n)
            }
              , a = t => {
                r && function(t, n, r) {
                    tI(u, tR[(t = x(t)).app.options.appId], n, void 0).catch(t => tg.error(t))
                }(r, t)
            }
              , o = t => {
                r && function(t, n, r) {
                    tO(u, tR[(t = x(t)).app.options.appId], n, void 0).catch(t => tg.error(t))
                }(r, t)
            }
            ;
            return (0,
            f.jsx)(tB.Provider, {
                value: {
                    logEvent: s,
                    setUserId: a,
                    setUserProperties: o
                },
                children: n
            })
        }
    },
    2077: function(t, n, r) {
        "use strict";
        r.d(n, {
            vl: function() {
                return m
            }
        });
        var i = r(5893)
          , s = r(7294)
          , a = r(6931)
          , o = r(2920)
          , l = r(7794)
          , u = r(8212)
          , c = r(7415)
          , d = r(9106)
          , h = r(6866)
          , f = r(9213)
          , p = r(6144);
        let g = (0,
        s.createContext)(null)
          , m = t => {
            let {children: n} = t
              , [r,m] = (0,
            s.useState)(u.m1.default)
              , [y,_] = (0,
            s.useState)(u.m1.home)
              , [v,E] = (0,
            s.useState)(!1)
              , [b,C] = (0,
            s.useState)(!1)
              , [S,A] = (0,
            s.useState)(!1)
              , [N,T] = (0,
            s.useState)(!1)
              , [I,O] = (0,
            s.useState)([])
              , [w,k] = (0,
            s.useState)([])
              , [U,{entry: R}] = (0,
            d.S)()
              , M = R && R.isIntersecting
              , [P,L] = (0,
            s.useState)(!1)
              , [D,x] = (0,
            s.useState)("")
              , {isLogin: F, toggleLoginModal: H, userInfo: j} = (0,
            h.Z)()
              , {logEvent: G} = (0,
            p.Z)();
            (0,
            s.useEffect)( () => {
                m(u.m1.default),
                localStorage.getItem("userData") && O([])
            }
            , []);
            let B = () => {
                E(!v)
            }
              , V = () => {
                T(!0)
            }
              , q = () => {
                T(!1)
            }
              , z = t => {
                F ? (_(u.m1.home),
                m(t),
                localStorage.setItem("selectedFeed", t),
                G(f.M0.Web_Main_Feed_Type_Click, {
                    feedType: t
                }),
                O([]),
                q()) : (q(),
                H())
            }
              , K = async (t, n) => {
                try {
                    var r, i, s, a, o, u;
                    A(!0),
                    L(!1);
                    let d = await (0,
                    l.T6)(t, n);
                    if (null == d ? void 0 : null === (r = d.data) || void 0 === r ? void 0 : null === (i = r.docs) || void 0 === i ? void 0 : i.length) {
                        let h = null == d ? void 0 : null === (s = d.data) || void 0 === s ? void 0 : null === (a = s.docs) || void 0 === a ? void 0 : a.map(t => t.postId)
                          , f = await (0,
                        c.p)(h)
                          , p = null === (o = null == d ? void 0 : d.data.docs) || void 0 === o ? void 0 : o.map( (t, n) => ({
                            ...t,
                            actionCount: f[n].actionCount,
                            currentUserAction: f[n].currentUserAction
                        }));
                        x(null == d ? void 0 : null === (u = d.data) || void 0 === u ? void 0 : u.timelineBeforeCursor),
                        O(t => [...t, ...p])
                    }
                } catch (g) {
                    L(!0),
                    console.error("Error fetching post actions bulk data:", g)
                } finally {
                    A(!1)
                }
            }
              , W = async t => {
                try {
                    C(!0);
                    let n = await (0,
                    a.qb)(t)
                      , r = {
                        ...n,
                        actionCount: {
                            postId: null == n ? void 0 : n.postId,
                            screenshotCount: 0,
                            totalComment: 0,
                            repostCount: 0,
                            totalLike: 0,
                            viewCount: 0
                        },
                        currentUserAction: {
                            isDislike: !1,
                            isHide: !1,
                            isLike: !1,
                            isReport: !1,
                            isRepost: !1,
                            postId: null == n ? void 0 : n.postId,
                            isHeart: !1
                        },
                        user: {
                            ...j
                        }
                    };
                    return o.Am.success("Post created successfully", {
                        position: o.Am.POSITION.BOTTOM_CENTER
                    }),
                    B(),
                    O(t => [r, ...t]),
                    n
                } catch (l) {
                    var i, s;
                    return console.log("Error in Post creation", l),
                    o.Am.error(null == l ? void 0 : null === (i = l.response) || void 0 === i ? void 0 : null === (s = i.data) || void 0 === s ? void 0 : s.message),
                    {}
                } finally {
                    C(!1)
                }
            }
            ;
            return (0,
            i.jsx)(g.Provider, {
                value: {
                    getFeedPosts: K,
                    openFeedModal: V,
                    closeFeedModal: q,
                    handleFeedTabClick: z,
                    finalList: I,
                    currFeed: r,
                    mainFeed: y,
                    setMainFeed: _,
                    feedModal: N,
                    postList: w,
                    handlePostSubmit: W,
                    togglePostModal: B,
                    showModal: v,
                    isPosting: b,
                    setFinalList: O,
                    setPostList: k,
                    retry: P,
                    cursor: D,
                    myRef: U,
                    isVisible: M,
                    postLoader: S
                },
                children: n
            })
        }
        ;
        n.ZP = g
    },
    5018: function(t, n, r) {
        "use strict";
        r.d(n, {
            l: function() {
                return u
            }
        });
        var i = r(5893)
          , s = r(7294)
          , a = r(1615)
          , o = r(2965);
        let l = (0,
        s.createContext)(null)
          , u = t => {
            let {children: n} = t
              , [r,u] = (0,
            s.useState)(0)
              , [c,d] = (0,
            s.useState)(1)
              , [h,f] = (0,
            s.useState)([])
              , [p,g] = (0,
            s.useState)(!1)
              , [m,y] = (0,
            s.useState)(!1)
              , [_,v] = (0,
            s.useState)(!1)
              , E = (0,
            s.useCallback)( () => {
                d(1),
                f([]),
                b(1),
                S()
            }
            , [])
              , b = async t => {
                try {
                    var n, r;
                    if (m)
                        return;
                    y(!0),
                    g(!0);
                    let i = await (0,
                    o.Jq)(t)
                      , s = null == i ? void 0 : null === (n = i.data) || void 0 === n ? void 0 : n.docs;
                    if (s) {
                        d(null == i ? void 0 : null === (r = i.data) || void 0 === r ? void 0 : r.nextPage),
                        f(t => [...t, ...s]);
                        return
                    }
                    v(!0)
                } catch (a) {
                    console.error("Error fetching notification data:", a)
                } finally {
                    y(!1),
                    g(!1)
                }
            }
            ;
            (0,
            s.useEffect)( () => {
                (0,
                a.u)();
                let t = setInterval(C, 1e4);
                return () => clearInterval(t)
            }
            , []);
            let C = async () => {
                try {
                    let t = await a.e.get("notification/unread/count")
                      , n = t.data && t.data.unreadNotificationCount ? t.data.unreadNotificationCount : 0;
                    u(n)
                } catch (r) {
                    console.log("Error in fetching notification unread count:", r.message)
                }
            }
              , S = async () => {
                await a.e.post("notification/read/all"),
                u(0)
            }
              , A = async t => {
                await a.e.post("notification/delete", {
                    id: t
                })
            }
            ;
            return (0,
            i.jsx)(l.Provider, {
                value: {
                    unreadCount: r,
                    fetchUnreadCount: C,
                    notificationReadall: S,
                    deleteNotification: A,
                    page: c,
                    setPage: d,
                    resetPageNumber: E,
                    notificationData: h,
                    setNotificationData: f,
                    isLoading: p,
                    setIsLoading: g,
                    isFetching: m,
                    setIsFetching: y,
                    retry: _,
                    setRetry: v,
                    fetchNotificationList: b
                },
                children: n
            })
        }
        ;
        n.Z = l
    },
    731: function(t, n, r) {
        "use strict";
        r.d(n, {
            v: function() {
                return g
            }
        });
        var i = r(5893)
          , s = r(7294)
          , a = r(1163)
          , o = r(7794)
          , l = r(225)
          , u = r(2920)
          , c = r(2077)
          , d = r(6866)
          , h = r(6144)
          , f = r(9213);
        let p = (0,
        s.createContext)(null)
          , g = t => {
            let {children: n} = t
              , r = (0,
            a.useRouter)()
              , [g,m] = (0,
            s.useState)({})
              , {isLogin: y, toggleLoginModal: _} = (0,
            d.Z)()
              , [v,E] = (0,
            s.useState)(!1)
              , [b,C] = (0,
            s.useState)(null)
              , [S,A] = (0,
            s.useState)(!1)
              , {setFinalList: N, finalList: T} = (0,
            s.useContext)(c.ZP)
              , {logEvent: I} = (0,
            h.Z)()
              , O = async t => {
                var n, r, i, s;
                try {
                    A(!0);
                    let a = await (0,
                    o.P5)(t);
                    m(null !== (n = null == a ? void 0 : a.data) && void 0 !== n ? n : {})
                } catch (l) {
                    console.log("error message in oooo", l),
                    C(null !== (s = null == l ? void 0 : null === (r = l.response) || void 0 === r ? void 0 : null === (i = r.data) || void 0 === i ? void 0 : i.message) && void 0 !== s ? s : "OOPS! This post no longer exists"),
                    E(!0)
                } finally {
                    A(!1)
                }
            }
              , w = () => {
                m({}),
                C(""),
                E(!1)
            }
              , k = async t => {
                m(n => {
                    var r, i;
                    return {
                        ...n,
                        actionCount: {
                            ...n.actionCount,
                            totalComment: "incr" === t ? (null == n ? void 0 : null === (r = n.actionCount) || void 0 === r ? void 0 : r.totalComment) + 1 : (null == n ? void 0 : null === (i = n.actionCount) || void 0 === i ? void 0 : i.totalComment) - 1
                        }
                    }
                }
                )
            }
              , U = async () => {
                let t = {
                    ...g
                };
                if (I(f.M0.Web_Post_Like_Click),
                !y) {
                    _();
                    return
                }
                t.currentUserAction.isLike ? (t.currentUserAction.isLike = !1,
                t.actionCount.totalLike -= 1) : (t.currentUserAction.isLike = !0,
                t.actionCount.totalLike += 1),
                m(t);
                let n = {
                    isLike: t.currentUserAction.isLike,
                    isDislike: t.currentUserAction.isHeart,
                    postId: t.postId
                };
                try {
                    await (0,
                    l.xI)(n)
                } catch (r) {}
            }
              , R = async () => {
                let t = {
                    ...g
                };
                if (!y) {
                    _();
                    return
                }
                I(f.M0.Web_Post_Repost_Click),
                t.currentUserAction.isRepost ? (t.currentUserAction.isRepost = !1,
                t.actionCount.repostCount -= 1) : (t.currentUserAction.isRepost = !0,
                t.actionCount.repostCount += 1),
                m(t);
                let n = {
                    isRepost: t.currentUserAction.isRepost,
                    postId: t.postId
                };
                try {
                    await (0,
                    l.DJ)(n)
                } catch (r) {}
            }
              , M = (t, n) => {
                I(f.M0.Web_Poll_Option_Click),
                m(r => {
                    if (r.postId === n) {
                        let i = r.poll.optionArray.map(n => n.option === t ? {
                            ...n,
                            voteCount: n.voteCount + 1
                        } : n);
                        return {
                            ...r,
                            poll: {
                                ...r.poll,
                                optionArray: i,
                                currentUserReaction: t,
                                totalVotes: (r.poll.totalVotes || 0) + 1
                            }
                        }
                    }
                    return r
                }
                );
                try {
                    (0,
                    l.fB)({
                        option: t,
                        postId: n
                    })
                } catch (r) {
                    console.log("Error in saving poll", r)
                }
            }
              , P = () => {
                let t = window.location.href
                  , n = document.createElement("input");
                n.value = t,
                document.body.appendChild(n),
                n.select(),
                document.execCommand("copy"),
                document.body.removeChild(n),
                u.Am.success("Link Copied")
            }
              , L = async t => {
                let n = T.filter(n => (null == n ? void 0 : n.postId) !== t);
                N(n),
                r.back(),
                I(f.M0.Web_Remove_Post_From_Feed_Click)
            }
              , D = async t => {
                N(T.filter(n => {
                    var r;
                    return (null == n ? void 0 : null === (r = n.user) || void 0 === r ? void 0 : r.id) !== t
                }
                )),
                r.back()
            }
            ;
            return (0,
            i.jsx)(p.Provider, {
                value: {
                    isDeleted: v,
                    message: b,
                    postData: g,
                    isPostLoading: S,
                    getPostData: O,
                    handlePostLike: U,
                    handleRepostClick: R,
                    handleCopyLink: P,
                    handleCommentCount: k,
                    removePostFromFeed: L,
                    removeBlockedUser: D,
                    intializeStates: w,
                    handlePollOptionClick: M
                },
                children: n
            })
        }
        ;
        n.Z = p
    },
    6439: function(t, n, r) {
        "use strict";
        r.d(n, {
            N: function() {
                return o
            },
            Z: function() {
                return l
            }
        });
        var i = r(5893)
          , s = r(7294)
          , a = r(8212);
        let o = (0,
        s.createContext)(null);
        function l(t) {
            let {children: n} = t
              , [r,l] = (0,
            s.useState)(a.bY.dark);
            (0,
            s.useEffect)( () => {
                let t = localStorage.getItem("theme");
                t ? l(t) : (localStorage.setItem("theme", a.bY.dark),
                l(a.bY.dark))
            }
            , []),
            (0,
            s.useEffect)( () => {
                r === a.bY.dark ? (document.documentElement.classList.add("dark"),
                localStorage.setItem("theme", r)) : (document.documentElement.classList.remove("dark"),
                localStorage.setItem("theme", a.bY.light))
            }
            , [r]);
            let u = t => {
                l(t)
            }
            ;
            return (0,
            i.jsx)(o.Provider, {
                value: {
                    resolvedTheme: r,
                    toggleTheme: u
                },
                children: n
            })
        }
    },
    2899: function(t, n, r) {
        "use strict";
        r.d(n, {
            dr: function() {
                return O
            },
            ZP: function() {
                return w
            }
        });
        var i = r(5893)
          , s = r(7294)
          , a = r(9179)
          , o = r(5795)
          , l = r(1107)
          , u = r.n(l)
          , c = r(8362)
          , d = r(5490)
          , h = r(3253)
          , f = r.n(h)
          , p = r(1430)
          , g = r(6578)
          , m = r(5675)
          , y = r.n(m)
          , _ = r(2607)
          , v = r(5098)
          , E = r(7263);
        function b(t) {
            let {isOpen: n, submitting: r, closeModal: a, onSubmit: o} = t
              , [l,u] = (0,
            s.useState)("");
            return (0,
            s.useEffect)( () => {
                n || u("")
            }
            , [n]),
            (0,
            i.jsxs)(f(), {
                isOpen: n,
                onRequestClose: a,
                contentLabel: "Report Post",
                overlayClassName: "custom-overlay flex items-center justify-center p-2",
                className: "outline-none rounded-xl  w-full max-w-[596px] bg-white all-modal-bg ring-1 ring-[rgba(250,250,250,0.12)] flex flex-col divide-y divide-[rgba(136,136,136,0.16)]",
                appElement: "undefined" != typeof document ? document.body : null,
                children: [(0,
                i.jsxs)("header", {
                    className: "flex justify-between items-center py-3 px-4",
                    children: [(0,
                    i.jsx)("h2", {
                        className: "text-base font-semibold text-dark-primary-black dark:text-primary-white",
                        children: "Report Post"
                    }), (0,
                    i.jsx)(p.Z, {
                        onClick: a,
                        className: "h-6 w-6"
                    })]
                }), (0,
                i.jsxs)("main", {
                    className: "flex-1 p-4 text-dark-primary-black dark:text-primary-white",
                    children: [(0,
                    i.jsx)("h3", {
                        className: "text-2xl font-semibold",
                        children: g._.title
                    }), (0,
                    i.jsx)("ul", {
                        className: "flex flex-col gap-y-1 mt-4 overflow-scroll max-h-[65vh]",
                        children: g._.reasons.map( (t, n) => (0,
                        i.jsx)(C, {
                            reason: t,
                            selected: l === t,
                            onClick: t => u(t)
                        }, n))
                    })]
                }), (0,
                i.jsx)("footer", {
                    className: "mt-auto text-center",
                    children: (0,
                    i.jsx)("button", {
                        disabled: !l.length,
                        className: "mt-4 mb-6 w-3/4 bg-primary h-12 rounded-full active:scale-95 transition disabled:cursor-not-allowed disabled:opacity-50 text-primary-white font-semibold",
                        onClick: () => o(l),
                        children: r ? (0,
                        i.jsx)(E.Z, {
                            isWhite: !0,
                            height: 6
                        }) : "Submit"
                    })
                })]
            })
        }
        let C = t => {
            let {reason: n, selected: r, onClick: s} = t;
            return (0,
            i.jsxs)("li", {
                className: "flex justify-between items-center p-2 cursor-pointer hover:bg-white/[0.05] rounded-md",
                onClick: () => s(n),
                children: [(0,
                i.jsx)("p", {
                    className: "text-base font-normal text-secondary-gray-light dark:text-primary-title",
                    children: n
                }), (0,
                i.jsx)("button", {
                    className: "cursor-pointer",
                    children: (0,
                    i.jsx)(y(), {
                        src: r ? _.Z : v.Z,
                        alt: "button",
                        height: 24,
                        width: 24
                    })
                })]
            })
        }
        ;
        var S = r(225)
          , A = r(2920)
          , N = r(9213)
          , T = r(6144);
        let I = (0,
        s.createContext)(null)
          , O = t => {
            let {children: n} = t
              , [r,l] = (0,
            s.useState)({})
              , [h,f] = (0,
            s.useState)(!1)
              , [p,g] = (0,
            s.useState)(!1)
              , [m,y] = (0,
            s.useState)("")
              , [_,v] = (0,
            s.useState)(!1)
              , [E,C] = (0,
            s.useState)()
              , [O,w] = (0,
            s.useState)(0)
              , {chatExist: k, shouldConnect: U, updateShouldConnect: R} = function(t) {
                let[n,r] = (0,
                s.useState)(!1)
                  , [i,a] = (0,
                s.useState)(!1);
                (0,
                s.useEffect)( () => {
                    t && l()
                }
                , [t]);
                let l = async () => {
                    try {
                        var t, n;
                        let i = await (0,
                        o.yV)();
                        if (!i)
                            throw Error("Error in getting channel");
                        return r(null == i ? void 0 : null === (t = i.data) || void 0 === t ? void 0 : t.chatExist),
                        (null == i ? void 0 : null === (n = i.data) || void 0 === n ? void 0 : n.chatExist) && a(!0),
                        i
                    } catch (s) {
                        console.log("Error in Getting ChannelExists", s.message)
                    }
                }
                  , u = t => {
                    a(t)
                }
                ;
                return {
                    chatExist: n,
                    shouldConnect: i,
                    updateShouldConnect: u
                }
            }(h)
              , M = function() {
                let[t,n] = (0,
                s.useState)(null);
                return (0,
                s.useEffect)( () => {
                    let t = new (u())({
                        appId: c.Z.sendbirdAppId
                    });
                    return n(t),
                    () => {
                        t && t.disconnect( () => {
                            console.log("Disconnected from Sendbird")
                        }
                        )
                    }
                }
                , []),
                t
            }()
              , {logEvent: P, setUserId: L, setUserProperties: D} = (0,
            T.Z)();
            (0,
            s.useEffect)( () => {
                if (!1 === U)
                    return;
                F();
                let t = setInterval(x, 6e3);
                return () => clearInterval(t)
            }
            , [U]);
            let x = async () => {
                let t = await (null == M ? void 0 : M.getTotalUnreadMessageCount());
                "number" == typeof t && w(t)
            }
              , F = async () => {
                null == M || M.connect(null == r ? void 0 : r.id, (t, n) => {
                    n ? console.error("Sendbird connection failed, refresh your browser", n) : M.updateCurrentUserInfo(null == r ? void 0 : r.userName, null == r ? void 0 : r.profileImage, (t, n) => {
                        n && console.error("Failed to update profile image and nickname", n)
                    }
                    )
                }
                )
            }
              , H = t => {
                y(t)
            }
              , j = () => {
                y("")
            }
              , G = async t => {
                v(!0);
                try {
                    let n = await (0,
                    S.G1)({
                        postId: m,
                        reason: t
                    });
                    if (!n)
                        throw Error("Error In Reporting Post");
                    P(N.M0.Web_Report_Post_Click),
                    A.Am.success("Report Sent")
                } catch (r) {
                    A.Am.error("Unable to report")
                } finally {
                    v(!1),
                    j()
                }
            }
              , B = t => {
                C(t)
            }
            ;
            function V() {
                g(!p)
            }
            let q = async () => {
                let t = JSON.parse(localStorage.getItem("userData"))
                  , n = null == t ? void 0 : t.id
                  , r = await (0,
                a.Q)(n);
                l(r)
            }
              , z = () => {
                f(!!JSON.parse(localStorage.getItem("userData")))
            }
            ;
            return (0,
            s.useEffect)( () => {
                if (localStorage.getItem("userData")) {
                    let t = JSON.parse(localStorage.getItem("userData"));
                    l(t),
                    f(!0),
                    L(null == t ? void 0 : t.id),
                    D({
                        gender: null == t ? void 0 : t.gender,
                        userName: null == t ? void 0 : t.userName
                    })
                }
                return window.addEventListener("storage", z),
                () => {
                    window.removeEventListener("storage", z)
                }
            }
            , []),
            (0,
            i.jsxs)(I.Provider, {
                value: {
                    userInfo: r,
                    isLogin: h,
                    updateUserInfo: q,
                    setIsLogin: f,
                    toggleLoginModal: V,
                    showLoginModal: p,
                    connectionData: E,
                    showConnectionsFor: B,
                    getDataFromLocalstorage: z,
                    chatExist: k,
                    connectToSendBird: F,
                    shouldConnect: U,
                    updateShouldConnect: R,
                    superchatMessageUnreadCount: O,
                    reportPost: H
                },
                children: [n, (0,
                i.jsx)(d.Z, {
                    isOpen: p,
                    toggle: V
                }), (0,
                i.jsx)(b, {
                    closeModal: j,
                    isOpen: !!m.length,
                    onSubmit: G,
                    submitting: _
                })]
            })
        }
        ;
        var w = I
    },
    6144: function(t, n, r) {
        "use strict";
        r.d(n, {
            Z: function() {
                return a
            }
        });
        var i = r(7294)
          , s = r(17);
        function a() {
            let t = (0,
            i.useContext)(s.f);
            if (!t)
                throw Error("Can't use FirebaseContext outside FirebaseProvider");
            return t
        }
    },
    3509: function(t, n, r) {
        "use strict";
        r.d(n, {
            Z: function() {
                return a
            }
        });
        var i = r(7294)
          , s = r(6439);
        function a() {
            let t = (0,
            i.useContext)(s.N);
            if (!t)
                throw Error("Cant't use useTheme outside of ThemeContextProvider");
            return t
        }
    },
    6866: function(t, n, r) {
        "use strict";
        r.d(n, {
            Z: function() {
                return a
            }
        });
        var i = r(7294)
          , s = r(2899);
        function a() {
            let t = (0,
            i.useContext)(s.ZP);
            if (!t)
                throw Error("Can't use UserContext outside UserProvider");
            return t
        }
    },
    9749: function(t, n, r) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        }),
        n.default = void 0;
        var i = r(6495).Z
          , s = r(2648).Z
          , a = r(1598).Z
          , o = r(7273).Z
          , l = a(r(7294))
          , u = s(r(3121))
          , c = r(2675)
          , d = r(139)
          , h = r(8730);
        r(7238);
        var f = s(r(9824));
        let p = {
            deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],
            imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],
            path: "/_next/image",
            loader: "default",
            dangerouslyAllowSVG: !1,
            unoptimized: !1
        };
        function g(t) {
            return void 0 !== t.default
        }
        function m(t) {
            return "number" == typeof t || void 0 === t ? t : "string" == typeof t && /^[0-9]+$/.test(t) ? parseInt(t, 10) : NaN
        }
        function y(t, n, r, s, a) {
            if (!t || t["data-loaded-src"] === n)
                return;
            t["data-loaded-src"] = n;
            let o = "decode"in t ? t.decode() : Promise.resolve();
            o.catch( () => {}
            ).then( () => {
                if (t.parentNode) {
                    if (null == r ? void 0 : r.current) {
                        let n = new Event("load");
                        Object.defineProperty(n, "target", {
                            writable: !1,
                            value: t
                        });
                        let a = !1
                          , o = !1;
                        r.current(i({}, n, {
                            nativeEvent: n,
                            currentTarget: t,
                            target: t,
                            isDefaultPrevented: () => a,
                            isPropagationStopped: () => o,
                            persist() {},
                            preventDefault() {
                                a = !0,
                                n.preventDefault()
                            },
                            stopPropagation() {
                                o = !0,
                                n.stopPropagation()
                            }
                        }))
                    }
                    (null == s ? void 0 : s.current) && s.current(t)
                }
            }
            )
        }
        let _ = l.forwardRef( (t, n) => {
            var {imgAttributes: r, heightInt: s, widthInt: a, qualityInt: u, className: c, imgStyle: d, blurStyle: h, isLazy: f, fill: p, placeholder: g, loading: m, srcString: _, config: v, unoptimized: E, loader: b, onLoadRef: C, onLoadingCompleteRef: S, onLoad: A, onError: N} = t
              , T = o(t, ["imgAttributes", "heightInt", "widthInt", "qualityInt", "className", "imgStyle", "blurStyle", "isLazy", "fill", "placeholder", "loading", "srcString", "config", "unoptimized", "loader", "onLoadRef", "onLoadingCompleteRef", "onLoad", "onError"]);
            return m = f ? "lazy" : m,
            l.default.createElement(l.default.Fragment, null, l.default.createElement("img", Object.assign({}, T, r, {
                width: a,
                height: s,
                decoding: "async",
                "data-nimg": p ? "fill" : "1",
                className: c,
                loading: m,
                style: i({}, d, h),
                ref: l.useCallback(t => {
                    n && ("function" == typeof n ? n(t) : "object" == typeof n && (n.current = t)),
                    t && (N && (t.src = t.src),
                    t.complete && y(t, _, C, S, E))
                }
                , [_, C, S, N, E, n]),
                onLoad(t) {
                    let n = t.currentTarget;
                    y(n, _, C, S, E)
                },
                onError(t) {
                    let {style: n} = t.currentTarget;
                    "transparent" === n.color && (n.color = ""),
                    "blur" === g && n.backgroundImage && (n.backgroundSize = "",
                    n.backgroundPosition = "",
                    n.backgroundRepeat = "",
                    n.backgroundImage = ""),
                    N && N(t)
                }
            })))
        }
        )
          , v = l.forwardRef( (t, n) => {
            let r, s;
            var a, {src: y, sizes: v, unoptimized: E=!1, priority: b=!1, loading: C, className: S, quality: A, width: N, height: T, fill: I, style: O, onLoad: w, onLoadingComplete: k, placeholder: U="empty", blurDataURL: R, layout: M, objectFit: P, objectPosition: L, lazyBoundary: D, lazyRoot: x} = t, F = o(t, ["src", "sizes", "unoptimized", "priority", "loading", "className", "quality", "width", "height", "fill", "style", "onLoad", "onLoadingComplete", "placeholder", "blurDataURL", "layout", "objectFit", "objectPosition", "lazyBoundary", "lazyRoot"]);
            let H = l.useContext(h.ImageConfigContext)
              , j = l.useMemo( () => {
                let t = p || H || d.imageConfigDefault
                  , n = [...t.deviceSizes, ...t.imageSizes].sort( (t, n) => t - n)
                  , r = t.deviceSizes.sort( (t, n) => t - n);
                return i({}, t, {
                    allSizes: n,
                    deviceSizes: r
                })
            }
            , [H])
              , G = F
              , B = G.loader || f.default;
            if (delete G.loader,
            "__next_img_default"in B) {
                if ("custom" === j.loader)
                    throw Error('Image with src "'.concat(y, '" is missing "loader" prop.') + "\nRead more: https://nextjs.org/docs/messages/next-image-missing-loader")
            } else {
                let V = B;
                B = t => {
                    let {config: n} = t
                      , r = o(t, ["config"]);
                    return V(r)
                }
            }
            if (M) {
                "fill" === M && (I = !0);
                let q = {
                    intrinsic: {
                        maxWidth: "100%",
                        height: "auto"
                    },
                    responsive: {
                        width: "100%",
                        height: "auto"
                    }
                }[M];
                q && (O = i({}, O, q));
                let z = {
                    responsive: "100vw",
                    fill: "100vw"
                }[M];
                z && !v && (v = z)
            }
            let K = ""
              , W = m(N)
              , Y = m(T);
            if ("object" == typeof (a = y) && (g(a) || void 0 !== a.src)) {
                let Q = g(y) ? y.default : y;
                if (!Q.src)
                    throw Error("An object should only be passed to the image component src parameter if it comes from a static image import. It must include src. Received ".concat(JSON.stringify(Q)));
                if (!Q.height || !Q.width)
                    throw Error("An object should only be passed to the image component src parameter if it comes from a static image import. It must include height and width. Received ".concat(JSON.stringify(Q)));
                if (r = Q.blurWidth,
                s = Q.blurHeight,
                R = R || Q.blurDataURL,
                K = Q.src,
                !I) {
                    if (W || Y) {
                        if (W && !Y) {
                            let J = W / Q.width;
                            Y = Math.round(Q.height * J)
                        } else if (!W && Y) {
                            let Z = Y / Q.height;
                            W = Math.round(Q.width * Z)
                        }
                    } else
                        W = Q.width,
                        Y = Q.height
                }
            }
            let $ = !b && ("lazy" === C || void 0 === C);
            ((y = "string" == typeof y ? y : K).startsWith("data:") || y.startsWith("blob:")) && (E = !0,
            $ = !1),
            j.unoptimized && (E = !0);
            let X = m(A)
              , ee = Object.assign(I ? {
                position: "absolute",
                height: "100%",
                width: "100%",
                left: 0,
                top: 0,
                right: 0,
                bottom: 0,
                objectFit: P,
                objectPosition: L
            } : {}, {
                color: "transparent"
            }, O)
              , et = "blur" === U && R ? {
                backgroundSize: ee.objectFit || "cover",
                backgroundPosition: ee.objectPosition || "50% 50%",
                backgroundRepeat: "no-repeat",
                backgroundImage: 'url("data:image/svg+xml;charset=utf-8,'.concat(c.getImageBlurSvg({
                    widthInt: W,
                    heightInt: Y,
                    blurWidth: r,
                    blurHeight: s,
                    blurDataURL: R
                }), '")')
            } : {}
              , en = function(t) {
                let {config: n, src: r, unoptimized: i, width: s, quality: a, sizes: o, loader: l} = t;
                if (i)
                    return {
                        src: r,
                        srcSet: void 0,
                        sizes: void 0
                    };
                let {widths: u, kind: c} = function(t, n, r) {
                    let {deviceSizes: i, allSizes: s} = t;
                    if (r) {
                        let a = /(^|\s)(1?\d?\d)vw/g
                          , o = [];
                        for (let l; l = a.exec(r); l)
                            o.push(parseInt(l[2]));
                        if (o.length) {
                            let u = .01 * Math.min(...o);
                            return {
                                widths: s.filter(t => t >= i[0] * u),
                                kind: "w"
                            }
                        }
                        return {
                            widths: s,
                            kind: "w"
                        }
                    }
                    if ("number" != typeof n)
                        return {
                            widths: i,
                            kind: "w"
                        };
                    let c = [...new Set([n, 2 * n].map(t => s.find(n => n >= t) || s[s.length - 1]))];
                    return {
                        widths: c,
                        kind: "x"
                    }
                }(n, s, o)
                  , d = u.length - 1;
                return {
                    sizes: o || "w" !== c ? o : "100vw",
                    srcSet: u.map( (t, i) => "".concat(l({
                        config: n,
                        src: r,
                        quality: a,
                        width: t
                    }), " ").concat("w" === c ? t : i + 1).concat(c)).join(", "),
                    src: l({
                        config: n,
                        src: r,
                        quality: a,
                        width: u[d]
                    })
                }
            }({
                config: j,
                src: y,
                unoptimized: E,
                width: W,
                quality: X,
                sizes: v,
                loader: B
            })
              , er = y
              , ei = {
                imageSrcSet: en.srcSet,
                imageSizes: en.sizes,
                crossOrigin: G.crossOrigin
            }
              , es = l.useRef(w);
            l.useEffect( () => {
                es.current = w
            }
            , [w]);
            let ea = l.useRef(k);
            l.useEffect( () => {
                ea.current = k
            }
            , [k]);
            let eo = i({
                isLazy: $,
                imgAttributes: en,
                heightInt: Y,
                widthInt: W,
                qualityInt: X,
                className: S,
                imgStyle: ee,
                blurStyle: et,
                loading: C,
                config: j,
                fill: I,
                unoptimized: E,
                placeholder: U,
                loader: B,
                srcString: er,
                onLoadRef: es,
                onLoadingCompleteRef: ea
            }, G);
            return l.default.createElement(l.default.Fragment, null, l.default.createElement(_, Object.assign({}, eo, {
                ref: n
            })), b ? l.default.createElement(u.default, null, l.default.createElement("link", Object.assign({
                key: "__nimg-" + en.src + en.srcSet + en.sizes,
                rel: "preload",
                as: "image",
                href: en.srcSet ? void 0 : en.src
            }, ei))) : null)
        }
        );
        n.default = v,
        ("function" == typeof n.default || "object" == typeof n.default && null !== n.default) && void 0 === n.default.__esModule && (Object.defineProperty(n.default, "__esModule", {
            value: !0
        }),
        Object.assign(n.default, n),
        t.exports = n.default)
    },
    2675: function(t, n) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        }),
        n.getImageBlurSvg = function(t) {
            let {widthInt: n, heightInt: r, blurWidth: i, blurHeight: s, blurDataURL: a} = t
              , o = i || n
              , l = s || r
              , u = a.startsWith("data:image/jpeg") ? "%3CfeComponentTransfer%3E%3CfeFuncA type='discrete' tableValues='1 1'/%3E%3C/feComponentTransfer%3E%" : "";
            return o && l ? "%3Csvg xmlns='http%3A//www.w3.org/2000/svg' viewBox='0 0 ".concat(o, " ").concat(l, "'%3E%3Cfilter id='b' color-interpolation-filters='sRGB'%3E%3CfeGaussianBlur stdDeviation='").concat(i && s ? "1" : "20", "'/%3E").concat(u, "%3C/filter%3E%3Cimage preserveAspectRatio='none' filter='url(%23b)' x='0' y='0' height='100%25' width='100%25' href='").concat(a, "'/%3E%3C/svg%3E") : "%3Csvg xmlns='http%3A//www.w3.org/2000/svg'%3E%3Cimage style='filter:blur(20px)' x='0' y='0' height='100%25' width='100%25' href='".concat(a, "'/%3E%3C/svg%3E")
        }
    },
    9824: function(t, n) {
        "use strict";
        function r(t) {
            let {config: n, src: r, width: i, quality: s} = t;
            return r.endsWith(".svg") && !n.dangerouslyAllowSVG ? r : "".concat(n.path, "?url=").concat(encodeURIComponent(r), "&w=").concat(i, "&q=").concat(s || 75)
        }
        Object.defineProperty(n, "__esModule", {
            value: !0
        }),
        n.default = void 0,
        r.__next_img_default = !0,
        n.default = r
    },
    3847: function(t, n, r) {
        "use strict";
        r.r(n);
        var i = r(5893)
          , s = r(2899);
        r(8136),
        r(8339);
        var a = r(2920);
        r(4213);
        var o = r(5018)
          , l = r(6550)
          , u = r(731)
          , c = r(2077)
          , d = r(17)
          , h = r(6439);
        n.default = function(t) {
            var n;
            let {Component: r, pageProps: f} = t
              , p = null !== (n = r.getLayout) && void 0 !== n ? n : t => t;
            return (0,
            i.jsx)(d.Z, {
                children: (0,
                i.jsx)(h.Z, {
                    children: (0,
                    i.jsx)(s.dr, {
                        children: (0,
                        i.jsx)(c.vl, {
                            children: (0,
                            i.jsx)(o.l, {
                                children: (0,
                                i.jsx)(u.v, {
                                    children: (0,
                                    i.jsxs)(l.$, {
                                        children: [p((0,
                                        i.jsx)(r, {
                                            ...f
                                        })), (0,
                                        i.jsx)(a.Ix, {
                                            position: "bottom-center",
                                            autoClose: 3e3,
                                            closeOnClick: !0,
                                            pauseOnHover: !0,
                                            draggable: !1,
                                            theme: "colored",
                                            toastStyle: {
                                                background: "#D5663F",
                                                borderRadius: "12px",
                                                boxShadow: "0 10px 30px rgba(0,0,0,0.5)"
                                            },
                                            closeButton: !1,
                                            progressStyle: {
                                                background: "rgba(255,255,255,0.2)"
                                            }
                                        })]
                                    })
                                })
                            })
                        })
                    })
                })
            })
        }
    },
    7338: function(t, n, r) {
        "use strict";
        r.d(n, {
            FE: function() {
                return o
            },
            Fs: function() {
                return l
            },
            Yr: function() {
                return s
            },
            aZ: function() {
                return a
            }
        });
        var i = r(1615);
        async function s(t) {
            try {
                (0,
                i.u)();
                let n = await i.e.post("/actions/comment/create", {
                    ...t
                });
                return n
            } catch (r) {
                console.error("Comment creation Error:", r)
            }
        }
        let a = async t => {
            (0,
            i.u)();
            try {
                return await i.e.post("/actions/comment/action", {
                    ...t
                })
            } catch (n) {
                console.error("Comment like Error:", n)
            }
        }
        ;
        async function o(t) {
            try {
                (0,
                i.u)();
                let n = await i.e.delete("/actions/comment/delete/".concat(t));
                return n.data
            } catch (r) {
                return console.error("Comment deletion Error:", r),
                []
            }
        }
        let l = async t => ((0,
        i.u)(),
        await i.e.post("/posts/comment/info", {
            commentId: t
        }))
    },
    6931: function(t, n, r) {
        "use strict";
        r.d(n, {
            $x: function() {
                return u
            },
            EH: function() {
                return l
            },
            Ec: function() {
                return c
            },
            qb: function() {
                return o
            }
        });
        var i = r(6154)
          , s = r(1615)
          , a = r(4015);
        async function o(t) {
            (0,
            s.u)();
            let n = await s.e.post("/posts/save", {
                ...t
            });
            return n.data
        }
        async function l(t) {
            let n = a.Z.prodToken()
              , r = i.Z.create({
                baseURL: "https://api.hood.live/web",
                timeout: 6e4
            });
            r.defaults.headers.common.Authorization = "Bearer ".concat(n);
            let s = await r.post("https://api.hood.live/upload/v1/post/upload", t, {
                headers: {
                    "Content-Type": "multipart/form-data",
                    Authorization: "Bearer ".concat(n)
                }
            });
            return s.data
        }
        async function u(t) {
            let n = a.Z.prodToken()
              , r = i.Z.create({
                baseURL: "https://api.hood.live/web",
                timeout: 18e4
            });
            r.defaults.headers.common.Authorization = "Bearer ".concat(n);
            let s = await r.post("https://api.hood.live/upload/v1/video/upload", t, {
                headers: {
                    "Content-Type": "multipart/form-data",
                    Authorization: "Bearer ".concat(n)
                }
            });
            return s.data
        }
        let c = async () => await s.e.get("/posts/isAmaAllowed")
    },
    225: function(t, n, r) {
        "use strict";
        r.d(n, {
            DJ: function() {
                return g
            },
            G1: function() {
                return s
            },
            P_: function() {
                return o
            },
            _: function() {
                return f
            },
            fB: function() {
                return m
            },
            j2: function() {
                return a
            },
            kt: function() {
                return h
            },
            rf: function() {
                return u
            },
            se: function() {
                return c
            },
            sq: function() {
                return d
            },
            wQ: function() {
                return l
            },
            xI: function() {
                return p
            }
        });
        var i = r(1615);
        let s = async t => ((0,
        i.u)(),
        await i.e.post("/posts/report", t))
          , a = async t => ((0,
        i.u)(),
        await i.e.get("/posts/reported-post/".concat(t)))
          , o = async t => {
            (0,
            i.u)();
            try {
                return i.e.post("/user/follow/".concat(t))
            } catch (n) {
                console.log(n)
            }
        }
          , l = async t => {
            (0,
            i.u)();
            try {
                return i.e.post("/user/unfollow/".concat(t))
            } catch (n) {
                console.log(n)
            }
        }
          , u = async t => {
            (0,
            i.u)();
            try {
                return i.e.post("/user/block/".concat(t))
            } catch (n) {
                console.log(n)
            }
        }
          , c = async t => {
            (0,
            i.u)();
            try {
                return i.e.post("/user/unblock/".concat(t))
            } catch (n) {
                console.log(n)
            }
        }
          , d = async t => {
            (0,
            i.u)();
            try {
                return i.e.post("/posts/delete", {
                    postId: t
                })
            } catch (n) {
                console.log(n)
            }
        }
          , h = async t => ((0,
        i.u)(),
        i.e.post("/user/connections/count/bulk", {
            userIds: t
        }))
          , f = async t => ((0,
        i.u)(),
        await i.e.get("/user/blocked/".concat(t)))
          , p = t => {
            (0,
            i.u)();
            try {
                return i.e.post("/actions/post/action", t)
            } catch (n) {
                console.log(n)
            }
        }
          , g = t => {
            (0,
            i.u)();
            try {
                return i.e.post("/actions/post/repost", t)
            } catch (n) {
                console.log(n)
            }
        }
          , m = async t => ((0,
        i.u)(),
        await i.e.post("posts/poll/action", t))
    },
    7415: function(t, n, r) {
        "use strict";
        r.d(n, {
            p: function() {
                return s
            }
        });
        var i = r(1615);
        async function s(t) {
            try {
                if ((0,
                i.u)(),
                !(t && t.length > 0 && t.every(t => "string" == typeof t)))
                    return [];
                {
                    let n = await i.e.post("/actions/posts", {
                        postIds: t
                    });
                    return n.data
                }
            } catch (r) {
                return console.error("Error fetching actions bulk data:", r),
                []
            }
        }
    },
    7794: function(t, n, r) {
        "use strict";
        r.d(n, {
            P5: function() {
                return a
            },
            T6: function() {
                return s
            }
        });
        var i = r(1615);
        async function s(t, n) {
            let r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 15;
            return (0,
            i.u)(),
            n || (n = ""),
            await i.e.get("/feed/recommend?pageSize=".concat(r, "&before=").concat(n, "&timelineType=").concat(t))
        }
        let a = async t => ((0,
        i.u)(),
        await i.e.get("posts/".concat(t)))
    },
    5174: function(t, n, r) {
        "use strict";
        r.d(n, {
            BM: function() {
                return o
            },
            Fj: function() {
                return s
            },
            Lj: function() {
                return d
            },
            Q2: function() {
                return a
            },
            T3: function() {
                return c
            },
            b7: function() {
                return l
            },
            dk: function() {
                return u
            }
        });
        var i = r(1615);
        async function s() {
            let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1
              , n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 15;
            (0,
            i.u)();
            try {
                let r = await i.e.get("/actions/activity?page=".concat(t, "&pageSize=").concat(n));
                return r.data
            } catch (s) {
                console.log(s)
            }
        }
        async function a() {
            let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1
              , n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 6
              , r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "";
            (0,
            i.u)();
            try {
                let s = await i.e.get("/search/mentions?q=".concat(r, "&page=").concat(t, "&pageSize=").concat(n));
                return s.data
            } catch (a) {
                return console.log(a),
                []
            }
        }
        let o = async t => {
            (0,
            i.u)();
            try {
                let n = await i.e.post("/user/bulk", {
                    userIds: t
                });
                return n.data
            } catch (r) {
                console.log(r)
            }
        }
          , l = async t => {
            (0,
            i.u)();
            try {
                let n = await i.e.post("/actions/comments/bulk", {
                    commentIds: t
                });
                return n.data
            } catch (r) {
                console.log(r)
            }
        }
          , u = async t => {
            (0,
            i.u)();
            try {
                let n = await i.e.post("/posts/bulk", {
                    postIds: t
                });
                return n.data
            } catch (r) {
                console.log(r)
            }
        }
          , c = async t => {
            (0,
            i.u)();
            try {
                let n = await i.e.post("/search/username/exists", {
                    userName: t
                });
                return n.data
            } catch (r) {
                console.log(r)
            }
        }
          , d = async t => {
            (0,
            i.u)();
            try {
                return i.e.put("/user/update", t)
            } catch (n) {
                console.log(n)
            }
        }
    },
    9179: function(t, n, r) {
        "use strict";
        r.d(n, {
            Q: function() {
                return u
            },
            b: function() {
                return l
            }
        });
        var i = r(1615)
          , s = r(4015);
        let a = s.Z.getUserData()
          , o = null == a ? void 0 : a.id;
        async function l() {
            let t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : o
              , n = arguments.length > 1 ? arguments[1] : void 0
              , r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1
              , s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 15;
            (0,
            i.u)();
            try {
                let a = await i.e.get("/posts/userprofile?userId=".concat(t, "&page=").concat(r, "&pageSize=").concat(s, "&type=").concat(n));
                return a.data
            } catch (l) {
                console.log(l)
            }
        }
        let u = async t => {
            (0,
            i.u)();
            try {
                let n = await i.e.get("/user/info/".concat(t));
                return n.data
            } catch (r) {
                console.log(r)
            }
        }
    },
    3925: function(t, n, r) {
        "use strict";
        r.d(n, {
            IL: function() {
                return s
            },
            MG: function() {
                return f
            },
            Rf: function() {
                return h
            },
            Tp: function() {
                return d
            },
            WY: function() {
                return m
            },
            YV: function() {
                return l
            },
            ZS: function() {
                return c
            },
            _Q: function() {
                return u
            },
            iu: function() {
                return g
            },
            jt: function() {
                return a
            },
            yC: function() {
                return p
            },
            yt: function() {
                return y
            },
            zS: function() {
                return o
            }
        });
        var i = r(1615);
        let s = (t, n) => {
            try {
                return i.e.post("/auth/otp/send", {
                    phoneNumber: t,
                    countryCode: n
                })
            } catch (r) {
                console.log(r)
            }
        }
          , a = (t, n) => {
            try {
                return i.e.post("/auth/otp/resend", {
                    phoneNumber: t,
                    countryCode: n
                })
            } catch (r) {
                console.log("resend error", r)
            }
        }
          , o = (t, n, r) => {
            try {
                return i.e.post("/auth/otp/verify", {
                    phoneNumber: t,
                    countryCode: n,
                    otp: r
                })
            } catch (s) {
                console.log(s)
            }
        }
          , l = async t => await i.e.post("user/token/refresh", t)
          , u = t => {
            (0,
            i.u)();
            try {
                return i.e.post("/auth/user/save", t)
            } catch (n) {
                console.log(n)
            }
        }
          , c = () => {
            (0,
            i.u)();
            try {
                return i.e.get("/search/v2/topics/onboarding")
            } catch (t) {
                console.log(t)
            }
        }
          , d = async t => {
            (0,
            i.u)();
            try {
                return await i.e.post("/user/v2/topic/follow-bulk", {
                    topicIds: t
                })
            } catch (n) {
                console.log(n)
            }
        }
          , h = function(t, n, r) {
            let s = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1
              , a = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : 15;
            (0,
            i.u)();
            try {
                return i.e.get("/actions/post/comments/".concat(t, "?parentId=").concat(n, "&page=").concat(s, "&authorId=").concat(r, "&pageSize=").concat(a, "&includeTotal=false"))
            } catch (o) {
                console.log(o)
            }
        }
          , f = async t => {
            let n = t.map(t => null == t ? void 0 : t.commentId);
            try {
                let r = await i.e.post("/actions/comments", {
                    commentIds: n
                });
                return r.data
            } catch (s) {
                console.log("Err in getCommentActions func", s)
            }
        }
          , p = function(t) {
            let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1
              , r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 15;
            (0,
            i.u)();
            try {
                return i.e.get("/search/post?q=".concat(t, "&page=").concat(n, "&pageSize=").concat(r))
            } catch (s) {
                console.log(s)
            }
        }
          , g = function(t) {
            let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1
              , r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 15;
            (0,
            i.u)();
            try {
                return i.e.get("/search/profiles?q=".concat(t, "&page=").concat(n, "&pageSize=").concat(r))
            } catch (s) {
                console.log(s)
            }
        }
          , m = async t => {
            (0,
            i.u)();
            try {
                return await i.e.put("/user/update", t)
            } catch (n) {
                console.log(n)
            }
        }
          , y = () => {
            (0,
            i.u)();
            try {
                return i.e.get("/user/suggested/usernames")
            } catch (t) {
                console.log(t)
            }
        }
    },
    2965: function(t, n, r) {
        "use strict";
        r.d(n, {
            Jq: function() {
                return s
            },
            LN: function() {
                return l
            },
            W3: function() {
                return o
            },
            v1: function() {
                return a
            }
        });
        var i = r(1615);
        let s = async t => {
            (0,
            i.u)();
            try {
                return await i.e.get("/notification?page=".concat(t, "&pageSize=15&appVersion=434"))
            } catch (n) {
                console.log("error in getNotificationList", n)
            }
        }
          , a = async t => await i.e.post("/notification/check", {
            ...t
        })
          , o = async t => ((0,
        i.u)(),
        await i.e.post("/notification/mute/user", {
            ...t
        }))
          , l = async (t, n) => {
            try {
                return await i.e.post("/notification/mute/".concat(t), {
                    ...n
                })
            } catch (r) {
                console.log("Error : ", r)
            }
        }
    },
    5795: function(t, n, r) {
        "use strict";
        r.d(n, {
            B$: function() {
                return u
            },
            FA: function() {
                return h
            },
            J6: function() {
                return c
            },
            K8: function() {
                return m
            },
            LV: function() {
                return d
            },
            Up: function() {
                return g
            },
            fo: function() {
                return p
            },
            lX: function() {
                return _
            },
            rL: function() {
                return l
            },
            rW: function() {
                return s
            },
            tk: function() {
                return a
            },
            ve: function() {
                return f
            },
            yV: function() {
                return o
            },
            zz: function() {
                return y
            }
        });
        var i = r(1615);
        let s = async () => {
            let t = await i.e.get("/superchat/credits");
            return t
        }
          , a = async t => {
            let n = await i.e.post("/superchat/request/exist", {
                receiverUid: t
            });
            return n
        }
          , o = async () => {
            try {
                let t = await i.e.get("/superchat/channel/exist");
                if (!t)
                    throw Error("Error in getting channel");
                return t
            } catch (n) {
                console.log("Error in getChannelExists: ", n.message)
            }
        }
          , l = async t => {
            let n = await i.e.post("/superchat/send", t);
            return n
        }
          , u = async () => {
            try {
                let t = await i.e.get("/superchat/received/requests");
                return t
            } catch (n) {
                console.log("Error in getReceivedRequests: ", n)
            }
        }
          , c = async () => {
            try {
                let t = await i.e.get("/superchat/sent/requests");
                return t
            } catch (n) {
                console.log("Error in getSentRequests: ", n)
            }
        }
          , d = async t => {
            try {
                let n = await i.e.post("/superchat/create/order", t);
                return n
            } catch (r) {
                console.log("Error in createOrder api: ", r)
            }
        }
          , h = async t => {
            try {
                let n = await i.e.post("/superchat/update/credits", t);
                return n
            } catch (r) {
                console.log("Error in updateCredits ", r)
            }
        }
        ;
        function f(t) {
            return new Promise(n => {
                let r = document.createElement("script");
                r.src = t,
                r.onload = () => {
                    n(!0)
                }
                ,
                r.onerror = () => {
                    n(!1)
                }
                ,
                document.body.appendChild(r)
            }
            )
        }
        let p = async function(t) {
            let n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;
            try {
                let r = await i.e.get("/superchat/transactions/status?page=".concat(t, "&pageSize=").concat(n));
                if (!r)
                    throw Error("Failed in Getting Transaction History");
                return r
            } catch (s) {
                console.log("error in getTransaction ", s)
            }
        }
          , g = async t => await i.e.post("/superchat/accept", t)
          , m = async t => {
            try {
                let n = await i.e.post("/superchat/accept", t);
                if (!n)
                    throw Error("Failed in declineChatRequest");
                return n
            } catch (r) {
                console.log("Error in declineChatRequest", r)
            }
        }
          , y = async t => {
            let n = await i.e.post("/superchat/channel/delete", {
                channelUrl: t
            });
            return n
        }
          , _ = async t => {
            let n = await i.e.post("/superchat/channel/unlock", {
                channelUrl: t
            });
            return n
        }
    },
    4015: function(t, n, r) {
        "use strict";
        r.d(n, {
            Z: function() {
                return s
            }
        });
        var i = r(8212)
          , s = {
            isLoggedIn() {
                let t = this.getUserData()
                  , n = null == t ? void 0 : t.accessToken;
                return n && n.length > 15
            },
            isPhoneValid: t => !!t && 10 === t.length && t > 6e9,
            isToken: () => null,
            prodToken() {
                let t = this.getUserData();
                return null == t ? void 0 : t.accessToken
            },
            toCompactNotaion(t) {
                let n = new Intl.NumberFormat(void 0,{
                    notation: "compact",
                    maximumFractionDigits: 2
                });
                return n.format(t)
            },
            getUserData() {
                {
                    let t = window.localStorage.getItem("userData");
                    return t ? JSON.parse(t) : null
                }
            },
            setUserToken(t) {
                if (t) {
                    let n = this.getUserData() || {};
                    n.accessToken = t,
                    window.localStorage.setItem("userData", JSON.stringify(n))
                }
            },
            clearUserToken() {
                let t = this.getUserData() || {};
                delete t.accessToken,
                window.localStorage.setItem("userData", JSON.stringify(t))
            },
            getToken() {
                let t = this.getUserData() || {};
                return t.accessToken || ""
            },
            signOut() {
                window.localStorage.removeItem("userData")
            },
            setUserProdTokenToAxios(t) {
                let n = this.prodToken();
                if (n)
                    t.defaults.headers.common.Authorization = "Bearer ".concat(n);
                else {
                    let r = this.isToken();
                    t.defaults.headers.common.Authorization = "Bearer ".concat(r)
                }
            },
            removeDuplicateComments(t) {
                let n = []
                  , r = new Set;
                return t.forEach(t => {
                    if (r.has(t.commentId)) {
                        let i = n.findIndex(n => n.commentId === t.commentId);
                        -1 !== i && (n[i] = t)
                    } else
                        r.add(t.commentId),
                        n.push(t)
                }
                ),
                n
            },
            updateComments(t, n) {
                let r = t || []
                  , i = new Set(t.map(t => t.commentId));
                return n.forEach(t => {
                    if (i.has(t.commentId)) {
                        let n = r.findIndex(n => n.commentId === t.commentId);
                        -1 !== n && (r[n] = t)
                    } else
                        i.add(t.commentId),
                        r.push(t)
                }
                ),
                r
            },
            formatLastMessageTime(t) {
                t = new Date(t);
                let n = new Date;
                if (t.getDate() === n.getDate() - 1 && t.getMonth() === n.getMonth() && t.getFullYear() === n.getFullYear())
                    return "Yesterday";
                let r = n.getTime() - t.getTime();
                if (r < 864e5) {
                    let i = t.getHours()
                      , s = ("0" + t.getMinutes()).slice(-2);
                    return "".concat(i % 12 || 12, ":").concat(s, " ").concat(i >= 12 ? "PM" : "AM")
                }
                return t.toLocaleDateString("en-US", {
                    day: "2-digit",
                    month: "short"
                })
            },
            formatTimeAgo(t) {
                let n = ((t = new Date(t)) - new Date) / 1e3;
                for (let r = 0; r < (null === i.TB || void 0 === i.TB ? void 0 : i.TB.length); r++) {
                    let s = i.TB[r];
                    if (Math.abs(n) < s.amount)
                        return "".concat(Math.abs(Math.ceil(n))).concat(s.name);
                    n /= s.amount
                }
            },
            formatTimeRemaining(t) {
                let n = new Date
                  , r = ((t = new Date(t)) - n) / 1e3
                  , s = new Intl.RelativeTimeFormat(void 0,{
                    numeric: "always",
                    style: "long"
                });
                for (let a = 0; a < (null === i.TB || void 0 === i.TB ? void 0 : i.TB.length); a++) {
                    let o = i.TB[a];
                    if (Math.abs(r) < o.amount)
                        return s.format(Math.floor(r), o.value);
                    r /= o.amount
                }
            },
            pollExpireIn(t) {
                let n = new Date
                  , r = ((t = new Date(t)) - n) / 1e3;
                if (r <= 0)
                    return "Expired";
                if (r >= 86400) {
                    let i = Math.floor(r / 86400);
                    return "".concat(i, " day").concat(i > 1 ? "s" : "", " left")
                }
                if (r >= 3600) {
                    let s = Math.floor(r / 3600)
                      , a = Math.floor(r % 3600 / 60);
                    return "".concat(s, " hour").concat(s > 1 ? "s" : "", " ").concat(a, " minute").concat(a > 1 ? "s" : "", " left")
                }
                {
                    let o = Math.floor(r / 60);
                    return "".concat(o, " minute").concat(o > 1 ? "s" : "", " left")
                }
            },
            getCurrentYear: () => new Date().getFullYear().toString(),
            sleep: t => new Promise(n => setTimeout( () => {}
            , t)),
            deepCopy: async t => JSON.parse(JSON.stringify(t))
        }
    },
    1876: function(t) {
        !function() {
            var n = {
                675: function(t, n) {
                    "use strict";
                    n.byteLength = function(t) {
                        var n = u(t)
                          , r = n[0]
                          , i = n[1];
                        return (r + i) * 3 / 4 - i
                    }
                    ,
                    n.toByteArray = function(t) {
                        var n, r, a = u(t), o = a[0], l = a[1], c = new s((o + l) * 3 / 4 - l), d = 0, h = l > 0 ? o - 4 : o;
                        for (r = 0; r < h; r += 4)
                            n = i[t.charCodeAt(r)] << 18 | i[t.charCodeAt(r + 1)] << 12 | i[t.charCodeAt(r + 2)] << 6 | i[t.charCodeAt(r + 3)],
                            c[d++] = n >> 16 & 255,
                            c[d++] = n >> 8 & 255,
                            c[d++] = 255 & n;
                        return 2 === l && (n = i[t.charCodeAt(r)] << 2 | i[t.charCodeAt(r + 1)] >> 4,
                        c[d++] = 255 & n),
                        1 === l && (n = i[t.charCodeAt(r)] << 10 | i[t.charCodeAt(r + 1)] << 4 | i[t.charCodeAt(r + 2)] >> 2,
                        c[d++] = n >> 8 & 255,
                        c[d++] = 255 & n),
                        c
                    }
                    ,
                    n.fromByteArray = function(t) {
                        for (var n, i = t.length, s = i % 3, a = [], o = 0, l = i - s; o < l; o += 16383)
                            a.push(function(t, n, i) {
                                for (var s, a = [], o = n; o < i; o += 3)
                                    a.push(r[(s = (t[o] << 16 & 16711680) + (t[o + 1] << 8 & 65280) + (255 & t[o + 2])) >> 18 & 63] + r[s >> 12 & 63] + r[s >> 6 & 63] + r[63 & s]);
                                return a.join("")
                            }(t, o, o + 16383 > l ? l : o + 16383));
                        return 1 === s ? a.push(r[(n = t[i - 1]) >> 2] + r[n << 4 & 63] + "==") : 2 === s && a.push(r[(n = (t[i - 2] << 8) + t[i - 1]) >> 10] + r[n >> 4 & 63] + r[n << 2 & 63] + "="),
                        a.join("")
                    }
                    ;
                    for (var r = [], i = [], s = "undefined" != typeof Uint8Array ? Uint8Array : Array, a = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", o = 0, l = a.length; o < l; ++o)
                        r[o] = a[o],
                        i[a.charCodeAt(o)] = o;
                    function u(t) {
                        var n = t.length;
                        if (n % 4 > 0)
                            throw Error("Invalid string. Length must be a multiple of 4");
                        var r = t.indexOf("=");
                        -1 === r && (r = n);
                        var i = r === n ? 0 : 4 - r % 4;
                        return [r, i]
                    }
                    i["-".charCodeAt(0)] = 62,
                    i["_".charCodeAt(0)] = 63
                },
                72: function(t, n, r) {
                    "use strict";
                    /*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
                    var i = r(675)
                      , s = r(783)
                      , a = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
                    function o(t) {
                        if (t > 2147483647)
                            throw RangeError('The value "' + t + '" is invalid for option "size"');
                        var n = new Uint8Array(t);
                        return Object.setPrototypeOf(n, l.prototype),
                        n
                    }
                    function l(t, n, r) {
                        if ("number" == typeof t) {
                            if ("string" == typeof n)
                                throw TypeError('The "string" argument must be of type string. Received type number');
                            return d(t)
                        }
                        return u(t, n, r)
                    }
                    function u(t, n, r) {
                        if ("string" == typeof t)
                            return function(t, n) {
                                if (("string" != typeof n || "" === n) && (n = "utf8"),
                                !l.isEncoding(n))
                                    throw TypeError("Unknown encoding: " + n);
                                var r = 0 | p(t, n)
                                  , i = o(r)
                                  , s = i.write(t, n);
                                return s !== r && (i = i.slice(0, s)),
                                i
                            }(t, n);
                        if (ArrayBuffer.isView(t))
                            return h(t);
                        if (null == t)
                            throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t);
                        if (k(t, ArrayBuffer) || t && k(t.buffer, ArrayBuffer) || "undefined" != typeof SharedArrayBuffer && (k(t, SharedArrayBuffer) || t && k(t.buffer, SharedArrayBuffer)))
                            return function(t, n, r) {
                                var i;
                                if (n < 0 || t.byteLength < n)
                                    throw RangeError('"offset" is outside of buffer bounds');
                                if (t.byteLength < n + (r || 0))
                                    throw RangeError('"length" is outside of buffer bounds');
                                return Object.setPrototypeOf(i = void 0 === n && void 0 === r ? new Uint8Array(t) : void 0 === r ? new Uint8Array(t,n) : new Uint8Array(t,n,r), l.prototype),
                                i
                            }(t, n, r);
                        if ("number" == typeof t)
                            throw TypeError('The "value" argument must not be of type number. Received type number');
                        var i = t.valueOf && t.valueOf();
                        if (null != i && i !== t)
                            return l.from(i, n, r);
                        var s = function(t) {
                            if (l.isBuffer(t)) {
                                var n, r = 0 | f(t.length), i = o(r);
                                return 0 === i.length || t.copy(i, 0, 0, r),
                                i
                            }
                            return void 0 !== t.length ? "number" != typeof t.length || (n = t.length) != n ? o(0) : h(t) : "Buffer" === t.type && Array.isArray(t.data) ? h(t.data) : void 0
                        }(t);
                        if (s)
                            return s;
                        if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof t[Symbol.toPrimitive])
                            return l.from(t[Symbol.toPrimitive]("string"), n, r);
                        throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t)
                    }
                    function c(t) {
                        if ("number" != typeof t)
                            throw TypeError('"size" argument must be of type number');
                        if (t < 0)
                            throw RangeError('The value "' + t + '" is invalid for option "size"')
                    }
                    function d(t) {
                        return c(t),
                        o(t < 0 ? 0 : 0 | f(t))
                    }
                    function h(t) {
                        for (var n = t.length < 0 ? 0 : 0 | f(t.length), r = o(n), i = 0; i < n; i += 1)
                            r[i] = 255 & t[i];
                        return r
                    }
                    function f(t) {
                        if (t >= 2147483647)
                            throw RangeError("Attempt to allocate Buffer larger than maximum size: 0x7fffffff bytes");
                        return 0 | t
                    }
                    function p(t, n) {
                        if (l.isBuffer(t))
                            return t.length;
                        if (ArrayBuffer.isView(t) || k(t, ArrayBuffer))
                            return t.byteLength;
                        if ("string" != typeof t)
                            throw TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof t);
                        var r = t.length
                          , i = arguments.length > 2 && !0 === arguments[2];
                        if (!i && 0 === r)
                            return 0;
                        for (var s = !1; ; )
                            switch (n) {
                            case "ascii":
                            case "latin1":
                            case "binary":
                                return r;
                            case "utf8":
                            case "utf-8":
                                return T(t).length;
                            case "ucs2":
                            case "ucs-2":
                            case "utf16le":
                            case "utf-16le":
                                return 2 * r;
                            case "hex":
                                return r >>> 1;
                            case "base64":
                                return O(t).length;
                            default:
                                if (s)
                                    return i ? -1 : T(t).length;
                                n = ("" + n).toLowerCase(),
                                s = !0
                            }
                    }
                    function g(t, n, r) {
                        var s, a, o = !1;
                        if ((void 0 === n || n < 0) && (n = 0),
                        n > this.length || ((void 0 === r || r > this.length) && (r = this.length),
                        r <= 0 || (r >>>= 0) <= (n >>>= 0)))
                            return "";
                        for (t || (t = "utf8"); ; )
                            switch (t) {
                            case "hex":
                                return function(t, n, r) {
                                    var i = t.length;
                                    (!n || n < 0) && (n = 0),
                                    (!r || r < 0 || r > i) && (r = i);
                                    for (var s = "", a = n; a < r; ++a)
                                        s += U[t[a]];
                                    return s
                                }(this, n, r);
                            case "utf8":
                            case "utf-8":
                                return v(this, n, r);
                            case "ascii":
                                return function(t, n, r) {
                                    var i = "";
                                    r = Math.min(t.length, r);
                                    for (var s = n; s < r; ++s)
                                        i += String.fromCharCode(127 & t[s]);
                                    return i
                                }(this, n, r);
                            case "latin1":
                            case "binary":
                                return function(t, n, r) {
                                    var i = "";
                                    r = Math.min(t.length, r);
                                    for (var s = n; s < r; ++s)
                                        i += String.fromCharCode(t[s]);
                                    return i
                                }(this, n, r);
                            case "base64":
                                return s = n,
                                a = r,
                                0 === s && a === this.length ? i.fromByteArray(this) : i.fromByteArray(this.slice(s, a));
                            case "ucs2":
                            case "ucs-2":
                            case "utf16le":
                            case "utf-16le":
                                return function(t, n, r) {
                                    for (var i = t.slice(n, r), s = "", a = 0; a < i.length; a += 2)
                                        s += String.fromCharCode(i[a] + 256 * i[a + 1]);
                                    return s
                                }(this, n, r);
                            default:
                                if (o)
                                    throw TypeError("Unknown encoding: " + t);
                                t = (t + "").toLowerCase(),
                                o = !0
                            }
                    }
                    function m(t, n, r) {
                        var i = t[n];
                        t[n] = t[r],
                        t[r] = i
                    }
                    function y(t, n, r, i, s) {
                        var a;
                        if (0 === t.length)
                            return -1;
                        if ("string" == typeof r ? (i = r,
                        r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648),
                        (a = r = +r) != a && (r = s ? 0 : t.length - 1),
                        r < 0 && (r = t.length + r),
                        r >= t.length) {
                            if (s)
                                return -1;
                            r = t.length - 1
                        } else if (r < 0) {
                            if (!s)
                                return -1;
                            r = 0
                        }
                        if ("string" == typeof n && (n = l.from(n, i)),
                        l.isBuffer(n))
                            return 0 === n.length ? -1 : _(t, n, r, i, s);
                        if ("number" == typeof n)
                            return (n &= 255,
                            "function" == typeof Uint8Array.prototype.indexOf) ? s ? Uint8Array.prototype.indexOf.call(t, n, r) : Uint8Array.prototype.lastIndexOf.call(t, n, r) : _(t, [n], r, i, s);
                        throw TypeError("val must be string, number or Buffer")
                    }
                    function _(t, n, r, i, s) {
                        var a, o = 1, l = t.length, u = n.length;
                        if (void 0 !== i && ("ucs2" === (i = String(i).toLowerCase()) || "ucs-2" === i || "utf16le" === i || "utf-16le" === i)) {
                            if (t.length < 2 || n.length < 2)
                                return -1;
                            o = 2,
                            l /= 2,
                            u /= 2,
                            r /= 2
                        }
                        function c(t, n) {
                            return 1 === o ? t[n] : t.readUInt16BE(n * o)
                        }
                        if (s) {
                            var d = -1;
                            for (a = r; a < l; a++)
                                if (c(t, a) === c(n, -1 === d ? 0 : a - d)) {
                                    if (-1 === d && (d = a),
                                    a - d + 1 === u)
                                        return d * o
                                } else
                                    -1 !== d && (a -= a - d),
                                    d = -1
                        } else
                            for (r + u > l && (r = l - u),
                            a = r; a >= 0; a--) {
                                for (var h = !0, f = 0; f < u; f++)
                                    if (c(t, a + f) !== c(n, f)) {
                                        h = !1;
                                        break
                                    }
                                if (h)
                                    return a
                            }
                        return -1
                    }
                    function v(t, n, r) {
                        r = Math.min(t.length, r);
                        for (var i = [], s = n; s < r; ) {
                            var a, o, l, u, c = t[s], d = null, h = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;
                            if (s + h <= r)
                                switch (h) {
                                case 1:
                                    c < 128 && (d = c);
                                    break;
                                case 2:
                                    (192 & (a = t[s + 1])) == 128 && (u = (31 & c) << 6 | 63 & a) > 127 && (d = u);
                                    break;
                                case 3:
                                    a = t[s + 1],
                                    o = t[s + 2],
                                    (192 & a) == 128 && (192 & o) == 128 && (u = (15 & c) << 12 | (63 & a) << 6 | 63 & o) > 2047 && (u < 55296 || u > 57343) && (d = u);
                                    break;
                                case 4:
                                    a = t[s + 1],
                                    o = t[s + 2],
                                    l = t[s + 3],
                                    (192 & a) == 128 && (192 & o) == 128 && (192 & l) == 128 && (u = (15 & c) << 18 | (63 & a) << 12 | (63 & o) << 6 | 63 & l) > 65535 && u < 1114112 && (d = u)
                                }
                            null === d ? (d = 65533,
                            h = 1) : d > 65535 && (d -= 65536,
                            i.push(d >>> 10 & 1023 | 55296),
                            d = 56320 | 1023 & d),
                            i.push(d),
                            s += h
                        }
                        return function(t) {
                            var n = t.length;
                            if (n <= 4096)
                                return String.fromCharCode.apply(String, t);
                            for (var r = "", i = 0; i < n; )
                                r += String.fromCharCode.apply(String, t.slice(i, i += 4096));
                            return r
                        }(i)
                    }
                    function E(t, n, r) {
                        if (t % 1 != 0 || t < 0)
                            throw RangeError("offset is not uint");
                        if (t + n > r)
                            throw RangeError("Trying to access beyond buffer length")
                    }
                    function b(t, n, r, i, s, a) {
                        if (!l.isBuffer(t))
                            throw TypeError('"buffer" argument must be a Buffer instance');
                        if (n > s || n < a)
                            throw RangeError('"value" argument is out of bounds');
                        if (r + i > t.length)
                            throw RangeError("Index out of range")
                    }
                    function C(t, n, r, i, s, a) {
                        if (r + i > t.length || r < 0)
                            throw RangeError("Index out of range")
                    }
                    function S(t, n, r, i, a) {
                        return n = +n,
                        r >>>= 0,
                        a || C(t, n, r, 4, 34028234663852886e22, -34028234663852886e22),
                        s.write(t, n, r, i, 23, 4),
                        r + 4
                    }
                    function A(t, n, r, i, a) {
                        return n = +n,
                        r >>>= 0,
                        a || C(t, n, r, 8, 17976931348623157e292, -17976931348623157e292),
                        s.write(t, n, r, i, 52, 8),
                        r + 8
                    }
                    n.Buffer = l,
                    n.SlowBuffer = function(t) {
                        return +t != t && (t = 0),
                        l.alloc(+t)
                    }
                    ,
                    n.INSPECT_MAX_BYTES = 50,
                    n.kMaxLength = 2147483647,
                    l.TYPED_ARRAY_SUPPORT = function() {
                        try {
                            var t = new Uint8Array(1)
                              , n = {
                                foo: function() {
                                    return 42
                                }
                            };
                            return Object.setPrototypeOf(n, Uint8Array.prototype),
                            Object.setPrototypeOf(t, n),
                            42 === t.foo()
                        } catch (r) {
                            return !1
                        }
                    }(),
                    l.TYPED_ARRAY_SUPPORT || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),
                    Object.defineProperty(l.prototype, "parent", {
                        enumerable: !0,
                        get: function() {
                            if (l.isBuffer(this))
                                return this.buffer
                        }
                    }),
                    Object.defineProperty(l.prototype, "offset", {
                        enumerable: !0,
                        get: function() {
                            if (l.isBuffer(this))
                                return this.byteOffset
                        }
                    }),
                    l.poolSize = 8192,
                    l.from = function(t, n, r) {
                        return u(t, n, r)
                    }
                    ,
                    Object.setPrototypeOf(l.prototype, Uint8Array.prototype),
                    Object.setPrototypeOf(l, Uint8Array),
                    l.alloc = function(t, n, r) {
                        return (c(t),
                        t <= 0) ? o(t) : void 0 !== n ? "string" == typeof r ? o(t).fill(n, r) : o(t).fill(n) : o(t)
                    }
                    ,
                    l.allocUnsafe = function(t) {
                        return d(t)
                    }
                    ,
                    l.allocUnsafeSlow = function(t) {
                        return d(t)
                    }
                    ,
                    l.isBuffer = function(t) {
                        return null != t && !0 === t._isBuffer && t !== l.prototype
                    }
                    ,
                    l.compare = function(t, n) {
                        if (k(t, Uint8Array) && (t = l.from(t, t.offset, t.byteLength)),
                        k(n, Uint8Array) && (n = l.from(n, n.offset, n.byteLength)),
                        !l.isBuffer(t) || !l.isBuffer(n))
                            throw TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                        if (t === n)
                            return 0;
                        for (var r = t.length, i = n.length, s = 0, a = Math.min(r, i); s < a; ++s)
                            if (t[s] !== n[s]) {
                                r = t[s],
                                i = n[s];
                                break
                            }
                        return r < i ? -1 : i < r ? 1 : 0
                    }
                    ,
                    l.isEncoding = function(t) {
                        switch (String(t).toLowerCase()) {
                        case "hex":
                        case "utf8":
                        case "utf-8":
                        case "ascii":
                        case "latin1":
                        case "binary":
                        case "base64":
                        case "ucs2":
                        case "ucs-2":
                        case "utf16le":
                        case "utf-16le":
                            return !0;
                        default:
                            return !1
                        }
                    }
                    ,
                    l.concat = function(t, n) {
                        if (!Array.isArray(t))
                            throw TypeError('"list" argument must be an Array of Buffers');
                        if (0 === t.length)
                            return l.alloc(0);
                        if (void 0 === n)
                            for (r = 0,
                            n = 0; r < t.length; ++r)
                                n += t[r].length;
                        var r, i = l.allocUnsafe(n), s = 0;
                        for (r = 0; r < t.length; ++r) {
                            var a = t[r];
                            if (k(a, Uint8Array) && (a = l.from(a)),
                            !l.isBuffer(a))
                                throw TypeError('"list" argument must be an Array of Buffers');
                            a.copy(i, s),
                            s += a.length
                        }
                        return i
                    }
                    ,
                    l.byteLength = p,
                    l.prototype._isBuffer = !0,
                    l.prototype.swap16 = function() {
                        var t = this.length;
                        if (t % 2 != 0)
                            throw RangeError("Buffer size must be a multiple of 16-bits");
                        for (var n = 0; n < t; n += 2)
                            m(this, n, n + 1);
                        return this
                    }
                    ,
                    l.prototype.swap32 = function() {
                        var t = this.length;
                        if (t % 4 != 0)
                            throw RangeError("Buffer size must be a multiple of 32-bits");
                        for (var n = 0; n < t; n += 4)
                            m(this, n, n + 3),
                            m(this, n + 1, n + 2);
                        return this
                    }
                    ,
                    l.prototype.swap64 = function() {
                        var t = this.length;
                        if (t % 8 != 0)
                            throw RangeError("Buffer size must be a multiple of 64-bits");
                        for (var n = 0; n < t; n += 8)
                            m(this, n, n + 7),
                            m(this, n + 1, n + 6),
                            m(this, n + 2, n + 5),
                            m(this, n + 3, n + 4);
                        return this
                    }
                    ,
                    l.prototype.toString = function() {
                        var t = this.length;
                        return 0 === t ? "" : 0 == arguments.length ? v(this, 0, t) : g.apply(this, arguments)
                    }
                    ,
                    l.prototype.toLocaleString = l.prototype.toString,
                    l.prototype.equals = function(t) {
                        if (!l.isBuffer(t))
                            throw TypeError("Argument must be a Buffer");
                        return this === t || 0 === l.compare(this, t)
                    }
                    ,
                    l.prototype.inspect = function() {
                        var t = ""
                          , r = n.INSPECT_MAX_BYTES;
                        return t = this.toString("hex", 0, r).replace(/(.{2})/g, "$1 ").trim(),
                        this.length > r && (t += " ... "),
                        "<Buffer " + t + ">"
                    }
                    ,
                    a && (l.prototype[a] = l.prototype.inspect),
                    l.prototype.compare = function(t, n, r, i, s) {
                        if (k(t, Uint8Array) && (t = l.from(t, t.offset, t.byteLength)),
                        !l.isBuffer(t))
                            throw TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof t);
                        if (void 0 === n && (n = 0),
                        void 0 === r && (r = t ? t.length : 0),
                        void 0 === i && (i = 0),
                        void 0 === s && (s = this.length),
                        n < 0 || r > t.length || i < 0 || s > this.length)
                            throw RangeError("out of range index");
                        if (i >= s && n >= r)
                            return 0;
                        if (i >= s)
                            return -1;
                        if (n >= r)
                            return 1;
                        if (n >>>= 0,
                        r >>>= 0,
                        i >>>= 0,
                        s >>>= 0,
                        this === t)
                            return 0;
                        for (var a = s - i, o = r - n, u = Math.min(a, o), c = this.slice(i, s), d = t.slice(n, r), h = 0; h < u; ++h)
                            if (c[h] !== d[h]) {
                                a = c[h],
                                o = d[h];
                                break
                            }
                        return a < o ? -1 : o < a ? 1 : 0
                    }
                    ,
                    l.prototype.includes = function(t, n, r) {
                        return -1 !== this.indexOf(t, n, r)
                    }
                    ,
                    l.prototype.indexOf = function(t, n, r) {
                        return y(this, t, n, r, !0)
                    }
                    ,
                    l.prototype.lastIndexOf = function(t, n, r) {
                        return y(this, t, n, r, !1)
                    }
                    ,
                    l.prototype.write = function(t, n, r, i) {
                        if (void 0 === n)
                            i = "utf8",
                            r = this.length,
                            n = 0;
                        else if (void 0 === r && "string" == typeof n)
                            i = n,
                            r = this.length,
                            n = 0;
                        else if (isFinite(n))
                            n >>>= 0,
                            isFinite(r) ? (r >>>= 0,
                            void 0 === i && (i = "utf8")) : (i = r,
                            r = void 0);
                        else
                            throw Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                        var s, a, o, l, u, c, d, h, f, p, g, m, y = this.length - n;
                        if ((void 0 === r || r > y) && (r = y),
                        t.length > 0 && (r < 0 || n < 0) || n > this.length)
                            throw RangeError("Attempt to write outside buffer bounds");
                        i || (i = "utf8");
                        for (var _ = !1; ; )
                            switch (i) {
                            case "hex":
                                return function(t, n, r, i) {
                                    r = Number(r) || 0;
                                    var s = t.length - r;
                                    i ? (i = Number(i)) > s && (i = s) : i = s;
                                    var a = n.length;
                                    i > a / 2 && (i = a / 2);
                                    for (var o = 0; o < i; ++o) {
                                        var l = parseInt(n.substr(2 * o, 2), 16);
                                        if (l != l)
                                            break;
                                        t[r + o] = l
                                    }
                                    return o
                                }(this, t, n, r);
                            case "utf8":
                            case "utf-8":
                                return u = n,
                                c = r,
                                w(T(t, this.length - u), this, u, c);
                            case "ascii":
                                return d = n,
                                h = r,
                                w(I(t), this, d, h);
                            case "latin1":
                            case "binary":
                                return s = this,
                                a = t,
                                o = n,
                                l = r,
                                w(I(a), s, o, l);
                            case "base64":
                                return f = n,
                                p = r,
                                w(O(t), this, f, p);
                            case "ucs2":
                            case "ucs-2":
                            case "utf16le":
                            case "utf-16le":
                                return g = n,
                                m = r,
                                w(function(t, n) {
                                    for (var r, i, s = [], a = 0; a < t.length && !((n -= 2) < 0); ++a)
                                        i = (r = t.charCodeAt(a)) >> 8,
                                        s.push(r % 256),
                                        s.push(i);
                                    return s
                                }(t, this.length - g), this, g, m);
                            default:
                                if (_)
                                    throw TypeError("Unknown encoding: " + i);
                                i = ("" + i).toLowerCase(),
                                _ = !0
                            }
                    }
                    ,
                    l.prototype.toJSON = function() {
                        return {
                            type: "Buffer",
                            data: Array.prototype.slice.call(this._arr || this, 0)
                        }
                    }
                    ,
                    l.prototype.slice = function(t, n) {
                        var r = this.length;
                        t = ~~t,
                        n = void 0 === n ? r : ~~n,
                        t < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r),
                        n < 0 ? (n += r) < 0 && (n = 0) : n > r && (n = r),
                        n < t && (n = t);
                        var i = this.subarray(t, n);
                        return Object.setPrototypeOf(i, l.prototype),
                        i
                    }
                    ,
                    l.prototype.readUIntLE = function(t, n, r) {
                        t >>>= 0,
                        n >>>= 0,
                        r || E(t, n, this.length);
                        for (var i = this[t], s = 1, a = 0; ++a < n && (s *= 256); )
                            i += this[t + a] * s;
                        return i
                    }
                    ,
                    l.prototype.readUIntBE = function(t, n, r) {
                        t >>>= 0,
                        n >>>= 0,
                        r || E(t, n, this.length);
                        for (var i = this[t + --n], s = 1; n > 0 && (s *= 256); )
                            i += this[t + --n] * s;
                        return i
                    }
                    ,
                    l.prototype.readUInt8 = function(t, n) {
                        return t >>>= 0,
                        n || E(t, 1, this.length),
                        this[t]
                    }
                    ,
                    l.prototype.readUInt16LE = function(t, n) {
                        return t >>>= 0,
                        n || E(t, 2, this.length),
                        this[t] | this[t + 1] << 8
                    }
                    ,
                    l.prototype.readUInt16BE = function(t, n) {
                        return t >>>= 0,
                        n || E(t, 2, this.length),
                        this[t] << 8 | this[t + 1]
                    }
                    ,
                    l.prototype.readUInt32LE = function(t, n) {
                        return t >>>= 0,
                        n || E(t, 4, this.length),
                        (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + 16777216 * this[t + 3]
                    }
                    ,
                    l.prototype.readUInt32BE = function(t, n) {
                        return t >>>= 0,
                        n || E(t, 4, this.length),
                        16777216 * this[t] + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3])
                    }
                    ,
                    l.prototype.readIntLE = function(t, n, r) {
                        t >>>= 0,
                        n >>>= 0,
                        r || E(t, n, this.length);
                        for (var i = this[t], s = 1, a = 0; ++a < n && (s *= 256); )
                            i += this[t + a] * s;
                        return i >= (s *= 128) && (i -= Math.pow(2, 8 * n)),
                        i
                    }
                    ,
                    l.prototype.readIntBE = function(t, n, r) {
                        t >>>= 0,
                        n >>>= 0,
                        r || E(t, n, this.length);
                        for (var i = n, s = 1, a = this[t + --i]; i > 0 && (s *= 256); )
                            a += this[t + --i] * s;
                        return a >= (s *= 128) && (a -= Math.pow(2, 8 * n)),
                        a
                    }
                    ,
                    l.prototype.readInt8 = function(t, n) {
                        return (t >>>= 0,
                        n || E(t, 1, this.length),
                        128 & this[t]) ? -((255 - this[t] + 1) * 1) : this[t]
                    }
                    ,
                    l.prototype.readInt16LE = function(t, n) {
                        t >>>= 0,
                        n || E(t, 2, this.length);
                        var r = this[t] | this[t + 1] << 8;
                        return 32768 & r ? 4294901760 | r : r
                    }
                    ,
                    l.prototype.readInt16BE = function(t, n) {
                        t >>>= 0,
                        n || E(t, 2, this.length);
                        var r = this[t + 1] | this[t] << 8;
                        return 32768 & r ? 4294901760 | r : r
                    }
                    ,
                    l.prototype.readInt32LE = function(t, n) {
                        return t >>>= 0,
                        n || E(t, 4, this.length),
                        this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24
                    }
                    ,
                    l.prototype.readInt32BE = function(t, n) {
                        return t >>>= 0,
                        n || E(t, 4, this.length),
                        this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]
                    }
                    ,
                    l.prototype.readFloatLE = function(t, n) {
                        return t >>>= 0,
                        n || E(t, 4, this.length),
                        s.read(this, t, !0, 23, 4)
                    }
                    ,
                    l.prototype.readFloatBE = function(t, n) {
                        return t >>>= 0,
                        n || E(t, 4, this.length),
                        s.read(this, t, !1, 23, 4)
                    }
                    ,
                    l.prototype.readDoubleLE = function(t, n) {
                        return t >>>= 0,
                        n || E(t, 8, this.length),
                        s.read(this, t, !0, 52, 8)
                    }
                    ,
                    l.prototype.readDoubleBE = function(t, n) {
                        return t >>>= 0,
                        n || E(t, 8, this.length),
                        s.read(this, t, !1, 52, 8)
                    }
                    ,
                    l.prototype.writeUIntLE = function(t, n, r, i) {
                        if (t = +t,
                        n >>>= 0,
                        r >>>= 0,
                        !i) {
                            var s = Math.pow(2, 8 * r) - 1;
                            b(this, t, n, r, s, 0)
                        }
                        var a = 1
                          , o = 0;
                        for (this[n] = 255 & t; ++o < r && (a *= 256); )
                            this[n + o] = t / a & 255;
                        return n + r
                    }
                    ,
                    l.prototype.writeUIntBE = function(t, n, r, i) {
                        if (t = +t,
                        n >>>= 0,
                        r >>>= 0,
                        !i) {
                            var s = Math.pow(2, 8 * r) - 1;
                            b(this, t, n, r, s, 0)
                        }
                        var a = r - 1
                          , o = 1;
                        for (this[n + a] = 255 & t; --a >= 0 && (o *= 256); )
                            this[n + a] = t / o & 255;
                        return n + r
                    }
                    ,
                    l.prototype.writeUInt8 = function(t, n, r) {
                        return t = +t,
                        n >>>= 0,
                        r || b(this, t, n, 1, 255, 0),
                        this[n] = 255 & t,
                        n + 1
                    }
                    ,
                    l.prototype.writeUInt16LE = function(t, n, r) {
                        return t = +t,
                        n >>>= 0,
                        r || b(this, t, n, 2, 65535, 0),
                        this[n] = 255 & t,
                        this[n + 1] = t >>> 8,
                        n + 2
                    }
                    ,
                    l.prototype.writeUInt16BE = function(t, n, r) {
                        return t = +t,
                        n >>>= 0,
                        r || b(this, t, n, 2, 65535, 0),
                        this[n] = t >>> 8,
                        this[n + 1] = 255 & t,
                        n + 2
                    }
                    ,
                    l.prototype.writeUInt32LE = function(t, n, r) {
                        return t = +t,
                        n >>>= 0,
                        r || b(this, t, n, 4, 4294967295, 0),
                        this[n + 3] = t >>> 24,
                        this[n + 2] = t >>> 16,
                        this[n + 1] = t >>> 8,
                        this[n] = 255 & t,
                        n + 4
                    }
                    ,
                    l.prototype.writeUInt32BE = function(t, n, r) {
                        return t = +t,
                        n >>>= 0,
                        r || b(this, t, n, 4, 4294967295, 0),
                        this[n] = t >>> 24,
                        this[n + 1] = t >>> 16,
                        this[n + 2] = t >>> 8,
                        this[n + 3] = 255 & t,
                        n + 4
                    }
                    ,
                    l.prototype.writeIntLE = function(t, n, r, i) {
                        if (t = +t,
                        n >>>= 0,
                        !i) {
                            var s = Math.pow(2, 8 * r - 1);
                            b(this, t, n, r, s - 1, -s)
                        }
                        var a = 0
                          , o = 1
                          , l = 0;
                        for (this[n] = 255 & t; ++a < r && (o *= 256); )
                            t < 0 && 0 === l && 0 !== this[n + a - 1] && (l = 1),
                            this[n + a] = (t / o >> 0) - l & 255;
                        return n + r
                    }
                    ,
                    l.prototype.writeIntBE = function(t, n, r, i) {
                        if (t = +t,
                        n >>>= 0,
                        !i) {
                            var s = Math.pow(2, 8 * r - 1);
                            b(this, t, n, r, s - 1, -s)
                        }
                        var a = r - 1
                          , o = 1
                          , l = 0;
                        for (this[n + a] = 255 & t; --a >= 0 && (o *= 256); )
                            t < 0 && 0 === l && 0 !== this[n + a + 1] && (l = 1),
                            this[n + a] = (t / o >> 0) - l & 255;
                        return n + r
                    }
                    ,
                    l.prototype.writeInt8 = function(t, n, r) {
                        return t = +t,
                        n >>>= 0,
                        r || b(this, t, n, 1, 127, -128),
                        t < 0 && (t = 255 + t + 1),
                        this[n] = 255 & t,
                        n + 1
                    }
                    ,
                    l.prototype.writeInt16LE = function(t, n, r) {
                        return t = +t,
                        n >>>= 0,
                        r || b(this, t, n, 2, 32767, -32768),
                        this[n] = 255 & t,
                        this[n + 1] = t >>> 8,
                        n + 2
                    }
                    ,
                    l.prototype.writeInt16BE = function(t, n, r) {
                        return t = +t,
                        n >>>= 0,
                        r || b(this, t, n, 2, 32767, -32768),
                        this[n] = t >>> 8,
                        this[n + 1] = 255 & t,
                        n + 2
                    }
                    ,
                    l.prototype.writeInt32LE = function(t, n, r) {
                        return t = +t,
                        n >>>= 0,
                        r || b(this, t, n, 4, 2147483647, -2147483648),
                        this[n] = 255 & t,
                        this[n + 1] = t >>> 8,
                        this[n + 2] = t >>> 16,
                        this[n + 3] = t >>> 24,
                        n + 4
                    }
                    ,
                    l.prototype.writeInt32BE = function(t, n, r) {
                        return t = +t,
                        n >>>= 0,
                        r || b(this, t, n, 4, 2147483647, -2147483648),
                        t < 0 && (t = 4294967295 + t + 1),
                        this[n] = t >>> 24,
                        this[n + 1] = t >>> 16,
                        this[n + 2] = t >>> 8,
                        this[n + 3] = 255 & t,
                        n + 4
                    }
                    ,
                    l.prototype.writeFloatLE = function(t, n, r) {
                        return S(this, t, n, !0, r)
                    }
                    ,
                    l.prototype.writeFloatBE = function(t, n, r) {
                        return S(this, t, n, !1, r)
                    }
                    ,
                    l.prototype.writeDoubleLE = function(t, n, r) {
                        return A(this, t, n, !0, r)
                    }
                    ,
                    l.prototype.writeDoubleBE = function(t, n, r) {
                        return A(this, t, n, !1, r)
                    }
                    ,
                    l.prototype.copy = function(t, n, r, i) {
                        if (!l.isBuffer(t))
                            throw TypeError("argument should be a Buffer");
                        if (r || (r = 0),
                        i || 0 === i || (i = this.length),
                        n >= t.length && (n = t.length),
                        n || (n = 0),
                        i > 0 && i < r && (i = r),
                        i === r || 0 === t.length || 0 === this.length)
                            return 0;
                        if (n < 0)
                            throw RangeError("targetStart out of bounds");
                        if (r < 0 || r >= this.length)
                            throw RangeError("Index out of range");
                        if (i < 0)
                            throw RangeError("sourceEnd out of bounds");
                        i > this.length && (i = this.length),
                        t.length - n < i - r && (i = t.length - n + r);
                        var s = i - r;
                        if (this === t && "function" == typeof Uint8Array.prototype.copyWithin)
                            this.copyWithin(n, r, i);
                        else if (this === t && r < n && n < i)
                            for (var a = s - 1; a >= 0; --a)
                                t[a + n] = this[a + r];
                        else
                            Uint8Array.prototype.set.call(t, this.subarray(r, i), n);
                        return s
                    }
                    ,
                    l.prototype.fill = function(t, n, r, i) {
                        if ("string" == typeof t) {
                            if ("string" == typeof n ? (i = n,
                            n = 0,
                            r = this.length) : "string" == typeof r && (i = r,
                            r = this.length),
                            void 0 !== i && "string" != typeof i)
                                throw TypeError("encoding must be a string");
                            if ("string" == typeof i && !l.isEncoding(i))
                                throw TypeError("Unknown encoding: " + i);
                            if (1 === t.length) {
                                var s, a = t.charCodeAt(0);
                                ("utf8" === i && a < 128 || "latin1" === i) && (t = a)
                            }
                        } else
                            "number" == typeof t ? t &= 255 : "boolean" == typeof t && (t = Number(t));
                        if (n < 0 || this.length < n || this.length < r)
                            throw RangeError("Out of range index");
                        if (r <= n)
                            return this;
                        if (n >>>= 0,
                        r = void 0 === r ? this.length : r >>> 0,
                        t || (t = 0),
                        "number" == typeof t)
                            for (s = n; s < r; ++s)
                                this[s] = t;
                        else {
                            var o = l.isBuffer(t) ? t : l.from(t, i)
                              , u = o.length;
                            if (0 === u)
                                throw TypeError('The value "' + t + '" is invalid for argument "value"');
                            for (s = 0; s < r - n; ++s)
                                this[s + n] = o[s % u]
                        }
                        return this
                    }
                    ;
                    var N = /[^+/0-9A-Za-z-_]/g;
                    function T(t, n) {
                        n = n || 1 / 0;
                        for (var r, i = t.length, s = null, a = [], o = 0; o < i; ++o) {
                            if ((r = t.charCodeAt(o)) > 55295 && r < 57344) {
                                if (!s) {
                                    if (r > 56319 || o + 1 === i) {
                                        (n -= 3) > -1 && a.push(239, 191, 189);
                                        continue
                                    }
                                    s = r;
                                    continue
                                }
                                if (r < 56320) {
                                    (n -= 3) > -1 && a.push(239, 191, 189),
                                    s = r;
                                    continue
                                }
                                r = (s - 55296 << 10 | r - 56320) + 65536
                            } else
                                s && (n -= 3) > -1 && a.push(239, 191, 189);
                            if (s = null,
                            r < 128) {
                                if ((n -= 1) < 0)
                                    break;
                                a.push(r)
                            } else if (r < 2048) {
                                if ((n -= 2) < 0)
                                    break;
                                a.push(r >> 6 | 192, 63 & r | 128)
                            } else if (r < 65536) {
                                if ((n -= 3) < 0)
                                    break;
                                a.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128)
                            } else if (r < 1114112) {
                                if ((n -= 4) < 0)
                                    break;
                                a.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128)
                            } else
                                throw Error("Invalid code point")
                        }
                        return a
                    }
                    function I(t) {
                        for (var n = [], r = 0; r < t.length; ++r)
                            n.push(255 & t.charCodeAt(r));
                        return n
                    }
                    function O(t) {
                        return i.toByteArray(function(t) {
                            if ((t = (t = t.split("=")[0]).trim().replace(N, "")).length < 2)
                                return "";
                            for (; t.length % 4 != 0; )
                                t += "=";
                            return t
                        }(t))
                    }
                    function w(t, n, r, i) {
                        for (var s = 0; s < i && !(s + r >= n.length) && !(s >= t.length); ++s)
                            n[s + r] = t[s];
                        return s
                    }
                    function k(t, n) {
                        return t instanceof n || null != t && null != t.constructor && null != t.constructor.name && t.constructor.name === n.name
                    }
                    var U = function() {
                        for (var t = "0123456789abcdef", n = Array(256), r = 0; r < 16; ++r)
                            for (var i = 16 * r, s = 0; s < 16; ++s)
                                n[i + s] = t[r] + t[s];
                        return n
                    }()
                },
                783: function(t, n) {
                    /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
                    n.read = function(t, n, r, i, s) {
                        var a, o, l = 8 * s - i - 1, u = (1 << l) - 1, c = u >> 1, d = -7, h = r ? s - 1 : 0, f = r ? -1 : 1, p = t[n + h];
                        for (h += f,
                        a = p & (1 << -d) - 1,
                        p >>= -d,
                        d += l; d > 0; a = 256 * a + t[n + h],
                        h += f,
                        d -= 8)
                            ;
                        for (o = a & (1 << -d) - 1,
                        a >>= -d,
                        d += i; d > 0; o = 256 * o + t[n + h],
                        h += f,
                        d -= 8)
                            ;
                        if (0 === a)
                            a = 1 - c;
                        else {
                            if (a === u)
                                return o ? NaN : (p ? -1 : 1) * (1 / 0);
                            o += Math.pow(2, i),
                            a -= c
                        }
                        return (p ? -1 : 1) * o * Math.pow(2, a - i)
                    }
                    ,
                    n.write = function(t, n, r, i, s, a) {
                        var o, l, u, c = 8 * a - s - 1, d = (1 << c) - 1, h = d >> 1, f = 23 === s ? 5960464477539062e-23 : 0, p = i ? 0 : a - 1, g = i ? 1 : -1, m = n < 0 || 0 === n && 1 / n < 0 ? 1 : 0;
                        for (isNaN(n = Math.abs(n)) || n === 1 / 0 ? (l = isNaN(n) ? 1 : 0,
                        o = d) : (o = Math.floor(Math.log(n) / Math.LN2),
                        n * (u = Math.pow(2, -o)) < 1 && (o--,
                        u *= 2),
                        o + h >= 1 ? n += f / u : n += f * Math.pow(2, 1 - h),
                        n * u >= 2 && (o++,
                        u /= 2),
                        o + h >= d ? (l = 0,
                        o = d) : o + h >= 1 ? (l = (n * u - 1) * Math.pow(2, s),
                        o += h) : (l = n * Math.pow(2, h - 1) * Math.pow(2, s),
                        o = 0)); s >= 8; t[r + p] = 255 & l,
                        p += g,
                        l /= 256,
                        s -= 8)
                            ;
                        for (o = o << s | l,
                        c += s; c > 0; t[r + p] = 255 & o,
                        p += g,
                        o /= 256,
                        c -= 8)
                            ;
                        t[r + p - g] |= 128 * m
                    }
                }
            }
              , r = {};
            function i(t) {
                var s = r[t];
                if (void 0 !== s)
                    return s.exports;
                var a = r[t] = {
                    exports: {}
                }
                  , o = !0;
                try {
                    n[t](a, a.exports, i),
                    o = !1
                } finally {
                    o && delete r[t]
                }
                return a.exports
            }
            i.ab = "//";
            var s = i(72);
            t.exports = s
        }()
    },
    8136: function() {},
    8339: function() {},
    4213: function() {},
    3782: function() {},
    7663: function(t) {
        !function() {
            var n = {
                229: function(t) {
                    var n, r, i, s = t.exports = {};
                    function a() {
                        throw Error("setTimeout has not been defined")
                    }
                    function o() {
                        throw Error("clearTimeout has not been defined")
                    }
                    function l(t) {
                        if (n === setTimeout)
                            return setTimeout(t, 0);
                        if ((n === a || !n) && setTimeout)
                            return n = setTimeout,
                            setTimeout(t, 0);
                        try {
                            return n(t, 0)
                        } catch (i) {
                            try {
                                return n.call(null, t, 0)
                            } catch (r) {
                                return n.call(this, t, 0)
                            }
                        }
                    }
                    !function() {
                        try {
                            n = "function" == typeof setTimeout ? setTimeout : a
                        } catch (t) {
                            n = a
                        }
                        try {
                            r = "function" == typeof clearTimeout ? clearTimeout : o
                        } catch (i) {
                            r = o
                        }
                    }();
                    var u = []
                      , c = !1
                      , d = -1;
                    function h() {
                        c && i && (c = !1,
                        i.length ? u = i.concat(u) : d = -1,
                        u.length && f())
                    }
                    function f() {
                        if (!c) {
                            var t = l(h);
                            c = !0;
                            for (var n = u.length; n; ) {
                                for (i = u,
                                u = []; ++d < n; )
                                    i && i[d].run();
                                d = -1,
                                n = u.length
                            }
                            i = null,
                            c = !1,
                            function(t) {
                                if (r === clearTimeout)
                                    return clearTimeout(t);
                                if ((r === o || !r) && clearTimeout)
                                    return r = clearTimeout,
                                    clearTimeout(t);
                                try {
                                    r(t)
                                } catch (i) {
                                    try {
                                        return r.call(null, t)
                                    } catch (n) {
                                        return r.call(this, t)
                                    }
                                }
                            }(t)
                        }
                    }
                    function p(t, n) {
                        this.fun = t,
                        this.array = n
                    }
                    function g() {}
                    s.nextTick = function(t) {
                        var n = Array(arguments.length - 1);
                        if (arguments.length > 1)
                            for (var r = 1; r < arguments.length; r++)
                                n[r - 1] = arguments[r];
                        u.push(new p(t,n)),
                        1 !== u.length || c || l(f)
                    }
                    ,
                    p.prototype.run = function() {
                        this.fun.apply(null, this.array)
                    }
                    ,
                    s.title = "browser",
                    s.browser = !0,
                    s.env = {},
                    s.argv = [],
                    s.version = "",
                    s.versions = {},
                    s.on = g,
                    s.addListener = g,
                    s.once = g,
                    s.off = g,
                    s.removeListener = g,
                    s.removeAllListeners = g,
                    s.emit = g,
                    s.prependListener = g,
                    s.prependOnceListener = g,
                    s.listeners = function(t) {
                        return []
                    }
                    ,
                    s.binding = function(t) {
                        throw Error("process.binding is not supported")
                    }
                    ,
                    s.cwd = function() {
                        return "/"
                    }
                    ,
                    s.chdir = function(t) {
                        throw Error("process.chdir is not supported")
                    }
                    ,
                    s.umask = function() {
                        return 0
                    }
                }
            }
              , r = {};
            function i(t) {
                var s = r[t];
                if (void 0 !== s)
                    return s.exports;
                var a = r[t] = {
                    exports: {}
                }
                  , o = !0;
                try {
                    n[t](a, a.exports, i),
                    o = !1
                } finally {
                    o && delete r[t]
                }
                return a.exports
            }
            i.ab = "//";
            var s = i(229);
            t.exports = s
        }()
    },
    5675: function(t, n, r) {
        t.exports = r(9749)
    },
    1163: function(t, n, r) {
        t.exports = r(880)
    },
    2703: function(t, n, r) {
        "use strict";
        var i = r(414);
        function s() {}
        function a() {}
        a.resetWarningCache = s,
        t.exports = function() {
            function t(t, n, r, s, a, o) {
                if (o !== i) {
                    var l = Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");
                    throw l.name = "Invariant Violation",
                    l
                }
            }
            function n() {
                return t
            }
            t.isRequired = t;
            var r = {
                array: t,
                bigint: t,
                bool: t,
                func: t,
                number: t,
                object: t,
                string: t,
                symbol: t,
                any: t,
                arrayOf: n,
                element: t,
                elementType: t,
                instanceOf: n,
                node: t,
                objectOf: n,
                oneOf: n,
                oneOfType: n,
                shape: n,
                exact: n,
                checkPropTypes: a,
                resetWarningCache: s
            };
            return r.PropTypes = r,
            r
        }
    },
    5697: function(t, n, r) {
        t.exports = r(2703)()
    },
    414: function(t) {
        "use strict";
        t.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"
    },
    9106: function(t, n, r) {
        "use strict";
        r.d(n, {
            S: function() {
                return l
            }
        });
        var i, s = r(7294), a = [0], o = (i = new Map,
        {
            getObserver: function(t) {
                var n = t.root
                  , r = t.rootMargin
                  , s = t.threshold
                  , a = i.get(n);
                a || (a = new Map,
                i.set(n, a));
                var o = JSON.stringify({
                    rootMargin: r,
                    threshold: s
                })
                  , l = a.get(o);
                if (!l) {
                    var u = new Map;
                    l = {
                        observer: new IntersectionObserver(function(t) {
                            t.forEach(function(t) {
                                var n = u.get(t.target);
                                null == n || n(t)
                            })
                        }
                        ,{
                            root: n,
                            rootMargin: r,
                            threshold: s
                        }),
                        entryCallbacks: u
                    },
                    a.set(o, l)
                }
                return {
                    observe: function(t, n) {
                        var r, i;
                        null == (r = l) || r.entryCallbacks.set(t, n),
                        null == (i = l) || i.observer.observe(t)
                    },
                    unobserve: function(t) {
                        var n, r;
                        null == (n = l) || n.entryCallbacks.delete(t),
                        null == (r = l) || r.observer.unobserve(t)
                    }
                }
            }
        });
        function l(t) {
            var n, r, i = null != (n = null == t ? void 0 : t.rootMargin) ? n : "0px", l = null != (r = null == t ? void 0 : t.threshold) ? r : a, u = (0,
            s.useRef)(null), c = (0,
            s.useRef)(null), d = (0,
            s.useRef)(null), h = (0,
            s.useState)(), f = h[0], p = h[1], g = (0,
            s.useCallback)(function() {
                var t = u.current;
                if (!t) {
                    p(void 0);
                    return
                }
                var n = o.getObserver({
                    root: c.current,
                    rootMargin: i,
                    threshold: l
                });
                n.observe(t, function(t) {
                    p(t)
                }),
                d.current = n
            }, [i, l]), m = (0,
            s.useCallback)(function() {
                var t = d.current
                  , n = u.current;
                n && (null == t || t.unobserve(n)),
                d.current = null
            }, []);
            return [(0,
            s.useCallback)(function(t) {
                m(),
                u.current = t,
                g()
            }, [g, m]), {
                entry: f,
                rootRef: (0,
                s.useCallback)(function(t) {
                    m(),
                    c.current = t,
                    g()
                }, [g, m])
            }]
        }
    },
    6871: function(t, n, r) {
        "use strict";
        function i() {
            var t = this.constructor.getDerivedStateFromProps(this.props, this.state);
            null != t && this.setState(t)
        }
        function s(t) {
            this.setState((function(n) {
                var r = this.constructor.getDerivedStateFromProps(t, n);
                return null != r ? r : null
            }
            ).bind(this))
        }
        function a(t, n) {
            try {
                var r = this.props
                  , i = this.state;
                this.props = t,
                this.state = n,
                this.__reactInternalSnapshotFlag = !0,
                this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(r, i)
            } finally {
                this.props = r,
                this.state = i
            }
        }
        function o(t) {
            var n = t.prototype;
            if (!n || !n.isReactComponent)
                throw Error("Can only polyfill class components");
            if ("function" != typeof t.getDerivedStateFromProps && "function" != typeof n.getSnapshotBeforeUpdate)
                return t;
            var r = null
              , o = null
              , l = null;
            if ("function" == typeof n.componentWillMount ? r = "componentWillMount" : "function" == typeof n.UNSAFE_componentWillMount && (r = "UNSAFE_componentWillMount"),
            "function" == typeof n.componentWillReceiveProps ? o = "componentWillReceiveProps" : "function" == typeof n.UNSAFE_componentWillReceiveProps && (o = "UNSAFE_componentWillReceiveProps"),
            "function" == typeof n.componentWillUpdate ? l = "componentWillUpdate" : "function" == typeof n.UNSAFE_componentWillUpdate && (l = "UNSAFE_componentWillUpdate"),
            null !== r || null !== o || null !== l)
                throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n" + (t.displayName || t.name) + " uses " + ("function" == typeof t.getDerivedStateFromProps ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()") + " but also contains the following legacy lifecycles:" + (null !== r ? "\n  " + r : "") + (null !== o ? "\n  " + o : "") + (null !== l ? "\n  " + l : "") + "\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks");
            if ("function" == typeof t.getDerivedStateFromProps && (n.componentWillMount = i,
            n.componentWillReceiveProps = s),
            "function" == typeof n.getSnapshotBeforeUpdate) {
                if ("function" != typeof n.componentDidUpdate)
                    throw Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");
                n.componentWillUpdate = a;
                var u = n.componentDidUpdate;
                n.componentDidUpdate = function(t, n, r) {
                    var i = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : r;
                    u.call(this, t, n, i)
                }
            }
            return t
        }
        r.r(n),
        r.d(n, {
            polyfill: function() {
                return o
            }
        }),
        i.__suppressDeprecationWarning = !0,
        s.__suppressDeprecationWarning = !0,
        a.__suppressDeprecationWarning = !0
    },
    9983: function(t, n, r) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        }),
        n.bodyOpenClassName = n.portalClassName = void 0;
        var i = Object.assign || function(t) {
            for (var n = 1; n < arguments.length; n++) {
                var r = arguments[n];
                for (var i in r)
                    Object.prototype.hasOwnProperty.call(r, i) && (t[i] = r[i])
            }
            return t
        }
          , s = function() {
            function t(t, n) {
                for (var r = 0; r < n.length; r++) {
                    var i = n[r];
                    i.enumerable = i.enumerable || !1,
                    i.configurable = !0,
                    "value"in i && (i.writable = !0),
                    Object.defineProperty(t, i.key, i)
                }
            }
            return function(n, r, i) {
                return r && t(n.prototype, r),
                i && t(n, i),
                n
            }
        }()
          , a = r(7294)
          , o = g(a)
          , l = g(r(3935))
          , u = g(r(5697))
          , c = g(r(8747))
          , d = function(t) {
            if (t && t.__esModule)
                return t;
            var n = {};
            if (null != t)
                for (var r in t)
                    Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r]);
            return n.default = t,
            n
        }(r(7149))
          , h = r(1112)
          , f = g(h)
          , p = r(6871);
        function g(t) {
            return t && t.__esModule ? t : {
                default: t
            }
        }
        function m(t, n) {
            if (!t)
                throw ReferenceError("this hasn't been initialised - super() hasn't been called");
            return n && ("object" == typeof n || "function" == typeof n) ? n : t
        }
        var y = n.portalClassName = "ReactModalPortal"
          , _ = n.bodyOpenClassName = "ReactModal__Body--open"
          , v = h.canUseDOM && void 0 !== l.default.createPortal
          , E = function(t) {
            return document.createElement(t)
        }
          , b = function() {
            return v ? l.default.createPortal : l.default.unstable_renderSubtreeIntoContainer
        }
          , C = function(t) {
            function n() {
                !function(t, n) {
                    if (!(t instanceof n))
                        throw TypeError("Cannot call a class as a function")
                }(this, n);
                for (var t, r, s, a = arguments.length, u = Array(a), d = 0; d < a; d++)
                    u[d] = arguments[d];
                return r = s = m(this, (t = n.__proto__ || Object.getPrototypeOf(n)).call.apply(t, [this].concat(u))),
                s.removePortal = function() {
                    v || l.default.unmountComponentAtNode(s.node);
                    var t = (0,
                    s.props.parentSelector)();
                    t && t.contains(s.node) ? t.removeChild(s.node) : console.warn('React-Modal: "parentSelector" prop did not returned any DOM element. Make sure that the parent element is unmounted to avoid any memory leaks.')
                }
                ,
                s.portalRef = function(t) {
                    s.portal = t
                }
                ,
                s.renderPortal = function(t) {
                    var r = b()(s, o.default.createElement(c.default, i({
                        defaultStyles: n.defaultStyles
                    }, t)), s.node);
                    s.portalRef(r)
                }
                ,
                m(s, r)
            }
            return !function(t, n) {
                if ("function" != typeof n && null !== n)
                    throw TypeError("Super expression must either be null or a function, not " + typeof n);
                t.prototype = Object.create(n && n.prototype, {
                    constructor: {
                        value: t,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }),
                n && (Object.setPrototypeOf ? Object.setPrototypeOf(t, n) : t.__proto__ = n)
            }(n, t),
            s(n, [{
                key: "componentDidMount",
                value: function() {
                    h.canUseDOM && (v || (this.node = E("div")),
                    this.node.className = this.props.portalClassName,
                    (0,
                    this.props.parentSelector)().appendChild(this.node),
                    v || this.renderPortal(this.props))
                }
            }, {
                key: "getSnapshotBeforeUpdate",
                value: function(t) {
                    return {
                        prevParent: (0,
                        t.parentSelector)(),
                        nextParent: (0,
                        this.props.parentSelector)()
                    }
                }
            }, {
                key: "componentDidUpdate",
                value: function(t, n, r) {
                    if (h.canUseDOM) {
                        var i = this.props
                          , s = i.isOpen
                          , a = i.portalClassName;
                        t.portalClassName !== a && (this.node.className = a);
                        var o = r.prevParent
                          , l = r.nextParent;
                        l !== o && (o.removeChild(this.node),
                        l.appendChild(this.node)),
                        (t.isOpen || s) && (v || this.renderPortal(this.props))
                    }
                }
            }, {
                key: "componentWillUnmount",
                value: function() {
                    if (h.canUseDOM && this.node && this.portal) {
                        var t = this.portal.state
                          , n = Date.now()
                          , r = t.isOpen && this.props.closeTimeoutMS && (t.closesAt || n + this.props.closeTimeoutMS);
                        r ? (t.beforeClose || this.portal.closeWithTimeout(),
                        setTimeout(this.removePortal, r - n)) : this.removePortal()
                    }
                }
            }, {
                key: "render",
                value: function() {
                    return h.canUseDOM && v ? (!this.node && v && (this.node = E("div")),
                    b()(o.default.createElement(c.default, i({
                        ref: this.portalRef,
                        defaultStyles: n.defaultStyles
                    }, this.props)), this.node)) : null
                }
            }], [{
                key: "setAppElement",
                value: function(t) {
                    d.setElement(t)
                }
            }]),
            n
        }(a.Component);
        C.propTypes = {
            isOpen: u.default.bool.isRequired,
            style: u.default.shape({
                content: u.default.object,
                overlay: u.default.object
            }),
            portalClassName: u.default.string,
            bodyOpenClassName: u.default.string,
            htmlOpenClassName: u.default.string,
            className: u.default.oneOfType([u.default.string, u.default.shape({
                base: u.default.string.isRequired,
                afterOpen: u.default.string.isRequired,
                beforeClose: u.default.string.isRequired
            })]),
            overlayClassName: u.default.oneOfType([u.default.string, u.default.shape({
                base: u.default.string.isRequired,
                afterOpen: u.default.string.isRequired,
                beforeClose: u.default.string.isRequired
            })]),
            appElement: u.default.oneOfType([u.default.instanceOf(f.default), u.default.instanceOf(h.SafeHTMLCollection), u.default.instanceOf(h.SafeNodeList), u.default.arrayOf(u.default.instanceOf(f.default))]),
            onAfterOpen: u.default.func,
            onRequestClose: u.default.func,
            closeTimeoutMS: u.default.number,
            ariaHideApp: u.default.bool,
            shouldFocusAfterRender: u.default.bool,
            shouldCloseOnOverlayClick: u.default.bool,
            shouldReturnFocusAfterClose: u.default.bool,
            preventScroll: u.default.bool,
            parentSelector: u.default.func,
            aria: u.default.object,
            data: u.default.object,
            role: u.default.string,
            contentLabel: u.default.string,
            shouldCloseOnEsc: u.default.bool,
            overlayRef: u.default.func,
            contentRef: u.default.func,
            id: u.default.string,
            overlayElement: u.default.func,
            contentElement: u.default.func
        },
        C.defaultProps = {
            isOpen: !1,
            portalClassName: y,
            bodyOpenClassName: _,
            role: "dialog",
            ariaHideApp: !0,
            closeTimeoutMS: 0,
            shouldFocusAfterRender: !0,
            shouldCloseOnEsc: !0,
            shouldCloseOnOverlayClick: !0,
            shouldReturnFocusAfterClose: !0,
            preventScroll: !1,
            parentSelector: function() {
                return document.body
            },
            overlayElement: function(t, n) {
                return o.default.createElement("div", t, n)
            },
            contentElement: function(t, n) {
                return o.default.createElement("div", t, n)
            }
        },
        C.defaultStyles = {
            overlay: {
                position: "fixed",
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                backgroundColor: "rgba(255, 255, 255, 0.75)"
            },
            content: {
                position: "absolute",
                top: "40px",
                left: "40px",
                right: "40px",
                bottom: "40px",
                border: "1px solid #ccc",
                background: "#fff",
                overflow: "auto",
                WebkitOverflowScrolling: "touch",
                borderRadius: "4px",
                outline: "none",
                padding: "20px"
            }
        },
        (0,
        p.polyfill)(C),
        n.default = C
    },
    8747: function(t, n, r) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        });
        var i = Object.assign || function(t) {
            for (var n = 1; n < arguments.length; n++) {
                var r = arguments[n];
                for (var i in r)
                    Object.prototype.hasOwnProperty.call(r, i) && (t[i] = r[i])
            }
            return t
        }
          , s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
            return typeof t
        }
        : function(t) {
            return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
        }
          , a = function() {
            function t(t, n) {
                for (var r = 0; r < n.length; r++) {
                    var i = n[r];
                    i.enumerable = i.enumerable || !1,
                    i.configurable = !0,
                    "value"in i && (i.writable = !0),
                    Object.defineProperty(t, i.key, i)
                }
            }
            return function(n, r, i) {
                return r && t(n.prototype, r),
                i && t(n, i),
                n
            }
        }()
          , o = r(7294)
          , l = y(r(5697))
          , u = m(r(9685))
          , c = y(r(8338))
          , d = m(r(7149))
          , h = m(r(2409))
          , f = r(1112)
          , p = y(f)
          , g = y(r(9623));
        function m(t) {
            if (t && t.__esModule)
                return t;
            var n = {};
            if (null != t)
                for (var r in t)
                    Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r]);
            return n.default = t,
            n
        }
        function y(t) {
            return t && t.__esModule ? t : {
                default: t
            }
        }
        r(5063);
        var _ = {
            overlay: "ReactModal__Overlay",
            content: "ReactModal__Content"
        }
          , v = 0
          , E = function(t) {
            function n(t) {
                !function(t, n) {
                    if (!(t instanceof n))
                        throw TypeError("Cannot call a class as a function")
                }(this, n);
                var r = function(t, n) {
                    if (!t)
                        throw ReferenceError("this hasn't been initialised - super() hasn't been called");
                    return n && ("object" == typeof n || "function" == typeof n) ? n : t
                }(this, (n.__proto__ || Object.getPrototypeOf(n)).call(this, t));
                return r.setOverlayRef = function(t) {
                    r.overlay = t,
                    r.props.overlayRef && r.props.overlayRef(t)
                }
                ,
                r.setContentRef = function(t) {
                    r.content = t,
                    r.props.contentRef && r.props.contentRef(t)
                }
                ,
                r.afterClose = function() {
                    var t = r.props
                      , n = t.appElement
                      , i = t.ariaHideApp
                      , s = t.htmlOpenClassName
                      , a = t.bodyOpenClassName
                      , o = t.parentSelector
                      , l = o && o().ownerDocument || document;
                    a && h.remove(l.body, a),
                    s && h.remove(l.getElementsByTagName("html")[0], s),
                    i && v > 0 && 0 == (v -= 1) && d.show(n),
                    r.props.shouldFocusAfterRender && (r.props.shouldReturnFocusAfterClose ? (u.returnFocus(r.props.preventScroll),
                    u.teardownScopedFocus()) : u.popWithoutFocus()),
                    r.props.onAfterClose && r.props.onAfterClose(),
                    g.default.deregister(r)
                }
                ,
                r.open = function() {
                    r.beforeOpen(),
                    r.state.afterOpen && r.state.beforeClose ? (clearTimeout(r.closeTimer),
                    r.setState({
                        beforeClose: !1
                    })) : (r.props.shouldFocusAfterRender && (u.setupScopedFocus(r.node),
                    u.markForFocusLater()),
                    r.setState({
                        isOpen: !0
                    }, function() {
                        r.openAnimationFrame = requestAnimationFrame(function() {
                            r.setState({
                                afterOpen: !0
                            }),
                            r.props.isOpen && r.props.onAfterOpen && r.props.onAfterOpen({
                                overlayEl: r.overlay,
                                contentEl: r.content
                            })
                        })
                    }))
                }
                ,
                r.close = function() {
                    r.props.closeTimeoutMS > 0 ? r.closeWithTimeout() : r.closeWithoutTimeout()
                }
                ,
                r.focusContent = function() {
                    return r.content && !r.contentHasFocus() && r.content.focus({
                        preventScroll: !0
                    })
                }
                ,
                r.closeWithTimeout = function() {
                    var t = Date.now() + r.props.closeTimeoutMS;
                    r.setState({
                        beforeClose: !0,
                        closesAt: t
                    }, function() {
                        r.closeTimer = setTimeout(r.closeWithoutTimeout, r.state.closesAt - Date.now())
                    })
                }
                ,
                r.closeWithoutTimeout = function() {
                    r.setState({
                        beforeClose: !1,
                        isOpen: !1,
                        afterOpen: !1,
                        closesAt: null
                    }, r.afterClose)
                }
                ,
                r.handleKeyDown = function(t) {
                    ("Tab" === t.code || 9 === t.keyCode) && (0,
                    c.default)(r.content, t),
                    r.props.shouldCloseOnEsc && ("Escape" === t.code || 27 === t.keyCode) && (t.stopPropagation(),
                    r.requestClose(t))
                }
                ,
                r.handleOverlayOnClick = function(t) {
                    null === r.shouldClose && (r.shouldClose = !0),
                    r.shouldClose && r.props.shouldCloseOnOverlayClick && (r.ownerHandlesClose() ? r.requestClose(t) : r.focusContent()),
                    r.shouldClose = null
                }
                ,
                r.handleContentOnMouseUp = function() {
                    r.shouldClose = !1
                }
                ,
                r.handleOverlayOnMouseDown = function(t) {
                    r.props.shouldCloseOnOverlayClick || t.target != r.overlay || t.preventDefault()
                }
                ,
                r.handleContentOnClick = function() {
                    r.shouldClose = !1
                }
                ,
                r.handleContentOnMouseDown = function() {
                    r.shouldClose = !1
                }
                ,
                r.requestClose = function(t) {
                    return r.ownerHandlesClose() && r.props.onRequestClose(t)
                }
                ,
                r.ownerHandlesClose = function() {
                    return r.props.onRequestClose
                }
                ,
                r.shouldBeClosed = function() {
                    return !r.state.isOpen && !r.state.beforeClose
                }
                ,
                r.contentHasFocus = function() {
                    return document.activeElement === r.content || r.content.contains(document.activeElement)
                }
                ,
                r.buildClassName = function(t, n) {
                    var i = (void 0 === n ? "undefined" : s(n)) === "object" ? n : {
                        base: _[t],
                        afterOpen: _[t] + "--after-open",
                        beforeClose: _[t] + "--before-close"
                    }
                      , a = i.base;
                    return r.state.afterOpen && (a = a + " " + i.afterOpen),
                    r.state.beforeClose && (a = a + " " + i.beforeClose),
                    "string" == typeof n && n ? a + " " + n : a
                }
                ,
                r.attributesFromObject = function(t, n) {
                    return Object.keys(n).reduce(function(r, i) {
                        return r[t + "-" + i] = n[i],
                        r
                    }, {})
                }
                ,
                r.state = {
                    afterOpen: !1,
                    beforeClose: !1
                },
                r.shouldClose = null,
                r.moveFromContentToOverlay = null,
                r
            }
            return !function(t, n) {
                if ("function" != typeof n && null !== n)
                    throw TypeError("Super expression must either be null or a function, not " + typeof n);
                t.prototype = Object.create(n && n.prototype, {
                    constructor: {
                        value: t,
                        enumerable: !1,
                        writable: !0,
                        configurable: !0
                    }
                }),
                n && (Object.setPrototypeOf ? Object.setPrototypeOf(t, n) : t.__proto__ = n)
            }(n, t),
            a(n, [{
                key: "componentDidMount",
                value: function() {
                    this.props.isOpen && this.open()
                }
            }, {
                key: "componentDidUpdate",
                value: function(t, n) {
                    this.props.isOpen && !t.isOpen ? this.open() : !this.props.isOpen && t.isOpen && this.close(),
                    this.props.shouldFocusAfterRender && this.state.isOpen && !n.isOpen && this.focusContent()
                }
            }, {
                key: "componentWillUnmount",
                value: function() {
                    this.state.isOpen && this.afterClose(),
                    clearTimeout(this.closeTimer),
                    cancelAnimationFrame(this.openAnimationFrame)
                }
            }, {
                key: "beforeOpen",
                value: function() {
                    var t = this.props
                      , n = t.appElement
                      , r = t.ariaHideApp
                      , i = t.htmlOpenClassName
                      , s = t.bodyOpenClassName
                      , a = t.parentSelector
                      , o = a && a().ownerDocument || document;
                    s && h.add(o.body, s),
                    i && h.add(o.getElementsByTagName("html")[0], i),
                    r && (v += 1,
                    d.hide(n)),
                    g.default.register(this)
                }
            }, {
                key: "render",
                value: function() {
                    var t = this.props
                      , n = t.id
                      , r = t.className
                      , s = t.overlayClassName
                      , a = t.defaultStyles
                      , o = t.children
                      , l = r ? {} : a.content
                      , u = s ? {} : a.overlay;
                    if (this.shouldBeClosed())
                        return null;
                    var c = {
                        ref: this.setOverlayRef,
                        className: this.buildClassName("overlay", s),
                        style: i({}, u, this.props.style.overlay),
                        onClick: this.handleOverlayOnClick,
                        onMouseDown: this.handleOverlayOnMouseDown
                    }
                      , d = i({
                        id: n,
                        ref: this.setContentRef,
                        style: i({}, l, this.props.style.content),
                        className: this.buildClassName("content", r),
                        tabIndex: "-1",
                        onKeyDown: this.handleKeyDown,
                        onMouseDown: this.handleContentOnMouseDown,
                        onMouseUp: this.handleContentOnMouseUp,
                        onClick: this.handleContentOnClick,
                        role: this.props.role,
                        "aria-label": this.props.contentLabel
                    }, this.attributesFromObject("aria", i({
                        modal: !0
                    }, this.props.aria)), this.attributesFromObject("data", this.props.data || {}), {
                        "data-testid": this.props.testId
                    })
                      , h = this.props.contentElement(d, o);
                    return this.props.overlayElement(c, h)
                }
            }]),
            n
        }(o.Component);
        E.defaultProps = {
            style: {
                overlay: {},
                content: {}
            },
            defaultStyles: {}
        },
        E.propTypes = {
            isOpen: l.default.bool.isRequired,
            defaultStyles: l.default.shape({
                content: l.default.object,
                overlay: l.default.object
            }),
            style: l.default.shape({
                content: l.default.object,
                overlay: l.default.object
            }),
            className: l.default.oneOfType([l.default.string, l.default.object]),
            overlayClassName: l.default.oneOfType([l.default.string, l.default.object]),
            parentSelector: l.default.func,
            bodyOpenClassName: l.default.string,
            htmlOpenClassName: l.default.string,
            ariaHideApp: l.default.bool,
            appElement: l.default.oneOfType([l.default.instanceOf(p.default), l.default.instanceOf(f.SafeHTMLCollection), l.default.instanceOf(f.SafeNodeList), l.default.arrayOf(l.default.instanceOf(p.default))]),
            onAfterOpen: l.default.func,
            onAfterClose: l.default.func,
            onRequestClose: l.default.func,
            closeTimeoutMS: l.default.number,
            shouldFocusAfterRender: l.default.bool,
            shouldCloseOnOverlayClick: l.default.bool,
            shouldReturnFocusAfterClose: l.default.bool,
            preventScroll: l.default.bool,
            role: l.default.string,
            contentLabel: l.default.string,
            aria: l.default.object,
            data: l.default.object,
            children: l.default.node,
            shouldCloseOnEsc: l.default.bool,
            overlayRef: l.default.func,
            contentRef: l.default.func,
            id: l.default.string,
            overlayElement: l.default.func,
            contentElement: l.default.func,
            testId: l.default.string
        },
        n.default = E,
        t.exports = n.default
    },
    7149: function(t, n, r) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        }),
        n.resetState = function() {
            o && (o.removeAttribute ? o.removeAttribute("aria-hidden") : null != o.length ? o.forEach(function(t) {
                return t.removeAttribute("aria-hidden")
            }) : document.querySelectorAll(o).forEach(function(t) {
                return t.removeAttribute("aria-hidden")
            })),
            o = null
        }
        ,
        n.log = function() {}
        ,
        n.assertNodeList = l,
        n.setElement = function(t) {
            var n = t;
            if ("string" == typeof n && a.canUseDOM) {
                var r = document.querySelectorAll(n);
                l(r, n),
                n = r
            }
            return o = n || o
        }
        ,
        n.validateElement = u,
        n.hide = function(t) {
            var n = !0
              , r = !1
              , i = void 0;
            try {
                for (var s, a = u(t)[Symbol.iterator](); !(n = (s = a.next()).done); n = !0)
                    s.value.setAttribute("aria-hidden", "true")
            } catch (o) {
                r = !0,
                i = o
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw i
                }
            }
        }
        ,
        n.show = function(t) {
            var n = !0
              , r = !1
              , i = void 0;
            try {
                for (var s, a = u(t)[Symbol.iterator](); !(n = (s = a.next()).done); n = !0)
                    s.value.removeAttribute("aria-hidden")
            } catch (o) {
                r = !0,
                i = o
            } finally {
                try {
                    !n && a.return && a.return()
                } finally {
                    if (r)
                        throw i
                }
            }
        }
        ,
        n.documentNotReadyOrSSRTesting = function() {
            o = null
        }
        ;
        var i, s = (i = r(2473)) && i.__esModule ? i : {
            default: i
        }, a = r(1112), o = null;
        function l(t, n) {
            if (!t || !t.length)
                throw Error("react-modal: No elements were found for selector " + n + ".")
        }
        function u(t) {
            var n = t || o;
            return n ? Array.isArray(n) || n instanceof HTMLCollection || n instanceof NodeList ? n : [n] : ((0,
            s.default)(!1, "react-modal: App element is not defined. Please use `Modal.setAppElement(el)` or set `appElement={el}`. This is needed so screen readers don't see main content when modal is opened. It is not recommended, but you can opt-out by setting `ariaHideApp={false}`."),
            [])
        }
    },
    5063: function(t, n, r) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        }),
        n.resetState = function() {
            for (var t = [a, o], n = 0; n < t.length; n++) {
                var r = t[n];
                r && r.parentNode && r.parentNode.removeChild(r)
            }
            a = o = null,
            l = []
        }
        ,
        n.log = function() {
            console.log("bodyTrap ----------"),
            console.log(l.length);
            for (var t = [a, o], n = 0; n < t.length; n++) {
                var r = t[n] || {};
                console.log(r.nodeName, r.className, r.id)
            }
            console.log("edn bodyTrap ----------")
        }
        ;
        var i, s = (i = r(9623)) && i.__esModule ? i : {
            default: i
        }, a = void 0, o = void 0, l = [];
        function u() {
            0 !== l.length && l[l.length - 1].focusContent()
        }
        s.default.subscribe(function(t, n) {
            a || o || ((a = document.createElement("div")).setAttribute("data-react-modal-body-trap", ""),
            a.style.position = "absolute",
            a.style.opacity = "0",
            a.setAttribute("tabindex", "0"),
            a.addEventListener("focus", u),
            (o = a.cloneNode()).addEventListener("focus", u)),
            (l = n).length > 0 ? (document.body.firstChild !== a && document.body.insertBefore(a, document.body.firstChild),
            document.body.lastChild !== o && document.body.appendChild(o)) : (a.parentElement && a.parentElement.removeChild(a),
            o.parentElement && o.parentElement.removeChild(o))
        })
    },
    2409: function(t, n) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        }),
        n.resetState = function() {
            var t = document.getElementsByTagName("html")[0];
            for (var n in r)
                s(t, r[n]);
            var a = document.body;
            for (var o in i)
                s(a, i[o]);
            r = {},
            i = {}
        }
        ,
        n.log = function() {}
        ;
        var r = {}
          , i = {};
        function s(t, n) {
            t.classList.remove(n)
        }
        var a = function(t, n, r) {
            r.forEach(function(r) {
                var i;
                (i = n)[r] || (i[r] = 0),
                i[r] += 1,
                t.add(r)
            })
        }
          , o = function(t, n, r) {
            r.forEach(function(r) {
                var i;
                (i = n)[r] && (i[r] -= 1),
                0 === n[r] && t.remove(r)
            })
        };
        n.add = function(t, n) {
            return a(t.classList, "html" == t.nodeName.toLowerCase() ? r : i, n.split(" "))
        }
        ,
        n.remove = function(t, n) {
            return o(t.classList, "html" == t.nodeName.toLowerCase() ? r : i, n.split(" "))
        }
    },
    9685: function(t, n, r) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        }),
        n.resetState = function() {
            a = []
        }
        ,
        n.log = function() {}
        ,
        n.handleBlur = u,
        n.handleFocus = c,
        n.markForFocusLater = function() {
            a.push(document.activeElement)
        }
        ,
        n.returnFocus = function() {
            var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]
              , n = null;
            try {
                0 !== a.length && (n = a.pop()).focus({
                    preventScroll: t
                });
                return
            } catch (r) {
                console.warn(["You tried to return focus to", n, "but it is not in the DOM anymore"].join(" "))
            }
        }
        ,
        n.popWithoutFocus = function() {
            a.length > 0 && a.pop()
        }
        ,
        n.setupScopedFocus = function(t) {
            o = t,
            window.addEventListener ? (window.addEventListener("blur", u, !1),
            document.addEventListener("focus", c, !0)) : (window.attachEvent("onBlur", u),
            document.attachEvent("onFocus", c))
        }
        ,
        n.teardownScopedFocus = function() {
            o = null,
            window.addEventListener ? (window.removeEventListener("blur", u),
            document.removeEventListener("focus", c)) : (window.detachEvent("onBlur", u),
            document.detachEvent("onFocus", c))
        }
        ;
        var i, s = (i = r(7845)) && i.__esModule ? i : {
            default: i
        }, a = [], o = null, l = !1;
        function u() {
            l = !0
        }
        function c() {
            l && (l = !1,
            o && setTimeout(function() {
                o.contains(document.activeElement) || ((0,
                s.default)(o)[0] || o).focus()
            }, 0))
        }
    },
    9623: function(t, n) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        }),
        n.log = function() {
            console.log("portalOpenInstances ----------"),
            console.log(i.openInstances.length),
            i.openInstances.forEach(function(t) {
                return console.log(t)
            }),
            console.log("end portalOpenInstances ----------")
        }
        ,
        n.resetState = function() {
            i = new r
        }
        ;
        var r = function t() {
            var n = this;
            !function(t, n) {
                if (!(t instanceof n))
                    throw TypeError("Cannot call a class as a function")
            }(this, t),
            this.register = function(t) {
                -1 === n.openInstances.indexOf(t) && (n.openInstances.push(t),
                n.emit("register"))
            }
            ,
            this.deregister = function(t) {
                var r = n.openInstances.indexOf(t);
                -1 !== r && (n.openInstances.splice(r, 1),
                n.emit("deregister"))
            }
            ,
            this.subscribe = function(t) {
                n.subscribers.push(t)
            }
            ,
            this.emit = function(t) {
                n.subscribers.forEach(function(r) {
                    return r(t, n.openInstances.slice())
                })
            }
            ,
            this.openInstances = [],
            this.subscribers = []
        }
          , i = new r;
        n.default = i
    },
    1112: function(t, n, r) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        }),
        n.canUseDOM = n.SafeNodeList = n.SafeHTMLCollection = void 0;
        var i, s = ((i = r(8875)) && i.__esModule ? i : {
            default: i
        }).default, a = s.canUseDOM ? window.HTMLElement : {};
        n.SafeHTMLCollection = s.canUseDOM ? window.HTMLCollection : {},
        n.SafeNodeList = s.canUseDOM ? window.NodeList : {},
        n.canUseDOM = s.canUseDOM,
        n.default = a
    },
    8338: function(t, n, r) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        }),
        n.default = function(t, n) {
            var r = (0,
            s.default)(t);
            if (!r.length) {
                n.preventDefault();
                return
            }
            var i = void 0
              , a = n.shiftKey
              , o = r[0]
              , l = r[r.length - 1]
              , u = function t() {
                var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : document;
                return n.activeElement.shadowRoot ? t(n.activeElement.shadowRoot) : n.activeElement
            }();
            if (t === u) {
                if (!a)
                    return;
                i = l
            }
            if (l !== u || a || (i = o),
            o === u && a && (i = l),
            i) {
                n.preventDefault(),
                i.focus();
                return
            }
            var c = /(\bChrome\b|\bSafari\b)\//.exec(navigator.userAgent);
            if (null != c && "Chrome" != c[1] && null == /\biPod\b|\biPad\b/g.exec(navigator.userAgent)) {
                var d = r.indexOf(u);
                if (d > -1 && (d += a ? -1 : 1),
                void 0 === (i = r[d])) {
                    n.preventDefault(),
                    (i = a ? l : o).focus();
                    return
                }
                n.preventDefault(),
                i.focus()
            }
        }
        ;
        var i, s = (i = r(7845)) && i.__esModule ? i : {
            default: i
        };
        t.exports = n.default
    },
    7845: function(t, n) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        }),
        n.default = function t(n) {
            return [].slice.call(n.querySelectorAll("*"), 0).reduce(function(n, r) {
                return n.concat(r.shadowRoot ? t(r.shadowRoot) : [r])
            }, []).filter(i)
        }
        ;
        var r = /input|select|textarea|button|object|iframe/;
        function i(t) {
            var n, i = t.getAttribute("tabindex");
            null === i && (i = void 0);
            var s = isNaN(i);
            return (s || i >= 0) && (n = t.nodeName.toLowerCase(),
            (r.test(n) && !t.disabled || "a" === n && t.href || !s) && function(t) {
                for (var n = t, r = t.getRootNode && t.getRootNode(); n && n !== document.body; ) {
                    if (r && n === r && (n = r.host.parentNode),
                    function(t) {
                        var n = t.offsetWidth <= 0 && t.offsetHeight <= 0;
                        if (n && !t.innerHTML)
                            return !0;
                        try {
                            var r = window.getComputedStyle(t)
                              , i = r.getPropertyValue("display");
                            return n ? "contents" !== i && ("visible" !== r.getPropertyValue("overflow") || t.scrollWidth <= 0 && t.scrollHeight <= 0) : "none" === i
                        } catch (s) {
                            return console.warn("Failed to inspect element style"),
                            !1
                        }
                    }(n))
                        return !1;
                    n = n.parentNode
                }
                return !0
            }(t))
        }
        t.exports = n.default
    },
    3253: function(t, n, r) {
        "use strict";
        Object.defineProperty(n, "__esModule", {
            value: !0
        });
        var i, s = (i = r(9983)) && i.__esModule ? i : {
            default: i
        };
        n.default = s.default,
        t.exports = n.default
    },
    1852: function(t, n, r) {
        var i;
        t.exports = (i = r(7294),
        ( () => {
            var t = {
                "./node_modules/css-mediaquery/index.js"(t, n) {
                    "use strict";
                    n.match = function(t, n) {
                        return l(t).some(function(t) {
                            var r = t.inverse
                              , i = "all" === t.type || n.type === t.type;
                            if (i && r || !(i || r))
                                return !1;
                            var s = t.expressions.every(function(t) {
                                var r = t.feature
                                  , i = t.modifier
                                  , s = t.value
                                  , a = n[r];
                                if (!a)
                                    return !1;
                                switch (r) {
                                case "orientation":
                                case "scan":
                                    return a.toLowerCase() === s.toLowerCase();
                                case "width":
                                case "height":
                                case "device-width":
                                case "device-height":
                                    s = d(s),
                                    a = d(a);
                                    break;
                                case "resolution":
                                    s = c(s),
                                    a = c(a);
                                    break;
                                case "aspect-ratio":
                                case "device-aspect-ratio":
                                case "device-pixel-ratio":
                                    s = u(s),
                                    a = u(a);
                                    break;
                                case "grid":
                                case "color":
                                case "color-index":
                                case "monochrome":
                                    s = parseInt(s, 10) || 1,
                                    a = parseInt(a, 10) || 0
                                }
                                switch (i) {
                                case "min":
                                    return a >= s;
                                case "max":
                                    return a <= s;
                                default:
                                    return a === s
                                }
                            });
                            return s && !r || !s && r
                        })
                    }
                    ,
                    n.parse = l;
                    var r = /(?:(only|not)?\s*([^\s\(\)]+)(?:\s*and)?\s*)?(.+)?/i
                      , i = /\(\s*([^\s\:\)]+)\s*(?:\:\s*([^\s\)]+))?\s*\)/
                      , s = /^(?:(min|max)-)?(.+)/
                      , a = /(em|rem|px|cm|mm|in|pt|pc)?$/
                      , o = /(dpi|dpcm|dppx)?$/;
                    function l(t) {
                        return t.split(",").map(function(t) {
                            var n = (t = t.trim()).match(r)
                              , a = n[1]
                              , o = n[2]
                              , l = n[3] || ""
                              , u = {};
                            return u.inverse = !!a && "not" === a.toLowerCase(),
                            u.type = o ? o.toLowerCase() : "all",
                            l = l.match(/\([^\)]+\)/g) || [],
                            u.expressions = l.map(function(t) {
                                var n = t.match(i)
                                  , r = n[1].toLowerCase().match(s);
                                return {
                                    modifier: r[1],
                                    feature: r[2],
                                    value: n[2]
                                }
                            }),
                            u
                        })
                    }
                    function u(t) {
                        var n, r = Number(t);
                        return r || (r = (n = t.match(/^(\d+)\s*\/\s*(\d+)$/))[1] / n[2]),
                        r
                    }
                    function c(t) {
                        var n = parseFloat(t);
                        switch (String(t).match(o)[1]) {
                        case "dpcm":
                            return n / 2.54;
                        case "dppx":
                            return 96 * n;
                        default:
                            return n
                        }
                    }
                    function d(t) {
                        var n = parseFloat(t);
                        switch (String(t).match(a)[1]) {
                        case "em":
                        case "rem":
                            return 16 * n;
                        case "cm":
                            return 96 * n / 2.54;
                        case "mm":
                            return 96 * n / 2.54 / 10;
                        case "in":
                            return 96 * n;
                        case "pt":
                            return 72 * n;
                        case "pc":
                            return 72 * n / 12;
                        default:
                            return n
                        }
                    }
                },
                "./node_modules/hyphenate-style-name/index.js"(t, n, r) {
                    "use strict";
                    r.r(n),
                    r.d(n, {
                        default: () => l
                    });
                    var i = /[A-Z]/g
                      , s = /^ms-/
                      , a = {};
                    function o(t) {
                        return "-" + t.toLowerCase()
                    }
                    let l = function(t) {
                        if (a.hasOwnProperty(t))
                            return a[t];
                        var n = t.replace(i, o);
                        return a[t] = s.test(n) ? "-" + n : n
                    }
                },
                "./node_modules/matchmediaquery/index.js"(t, n, r) {
                    "use strict";
                    var i = r(/*! css-mediaquery */
                    "./node_modules/css-mediaquery/index.js").match
                      , s = "undefined" != typeof window ? window.matchMedia : null;
                    function a(t, n, r) {
                        var a = this;
                        if (s && !r) {
                            var o = s.call(window, t);
                            this.matches = o.matches,
                            this.media = o.media,
                            o.addListener(l)
                        } else
                            this.matches = i(t, n),
                            this.media = t;
                        function l(t) {
                            a.matches = t.matches,
                            a.media = t.media
                        }
                        this.addListener = function(t) {
                            o && o.addListener(t)
                        }
                        ,
                        this.removeListener = function(t) {
                            o && o.removeListener(t)
                        }
                        ,
                        this.dispose = function() {
                            o && o.removeListener(l)
                        }
                    }
                    t.exports = function(t, n, r) {
                        return new a(t,n,r)
                    }
                },
                "./node_modules/object-assign/index.js"(t) {
                    "use strict";
                    /*
object-assign
(c) Sindre Sorhus
@license MIT
*/
                    var n = Object.getOwnPropertySymbols
                      , r = Object.prototype.hasOwnProperty
                      , i = Object.prototype.propertyIsEnumerable;
                    t.exports = !function() {
                        try {
                            if (!Object.assign)
                                return !1;
                            var t = new String("abc");
                            if (t[5] = "de",
                            "5" === Object.getOwnPropertyNames(t)[0])
                                return !1;
                            for (var n = {}, r = 0; r < 10; r++)
                                n["_" + String.fromCharCode(r)] = r;
                            var i = Object.getOwnPropertyNames(n).map(function(t) {
                                return n[t]
                            });
                            if ("0123456789" !== i.join(""))
                                return !1;
                            var s = {};
                            if ("abcdefghijklmnopqrst".split("").forEach(function(t) {
                                s[t] = t
                            }),
                            "abcdefghijklmnopqrst" !== Object.keys(Object.assign({}, s)).join(""))
                                return !1;
                            return !0
                        } catch (a) {
                            return !1
                        }
                    }() ? function(t, s) {
                        for (var a, o, l = function(t) {
                            if (null == t)
                                throw TypeError("Object.assign cannot be called with null or undefined");
                            return Object(t)
                        }(t), u = 1; u < arguments.length; u++) {
                            for (var c in a = Object(arguments[u]))
                                r.call(a, c) && (l[c] = a[c]);
                            if (n) {
                                o = n(a);
                                for (var d = 0; d < o.length; d++)
                                    i.call(a, o[d]) && (l[o[d]] = a[o[d]])
                            }
                        }
                        return l
                    }
                    : Object.assign
                },
                "./node_modules/prop-types/checkPropTypes.js"(t, n, r) {
                    "use strict";
                    var i = function() {}
                      , s = r(/*! ./lib/ReactPropTypesSecret */
                    "./node_modules/prop-types/lib/ReactPropTypesSecret.js")
                      , a = {}
                      , o = r(/*! ./lib/has */
                    "./node_modules/prop-types/lib/has.js");
                    function l(t, n, r, l, u) {
                        for (var c in t)
                            if (o(t, c)) {
                                var d;
                                try {
                                    if ("function" != typeof t[c]) {
                                        var h = Error((l || "React class") + ": " + r + " type `" + c + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof t[c] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                                        throw h.name = "Invariant Violation",
                                        h
                                    }
                                    d = t[c](n, c, l, r, null, s)
                                } catch (f) {
                                    d = f
                                }
                                if (!d || d instanceof Error || i((l || "React class") + ": type specification of " + r + " `" + c + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof d + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."),
                                d instanceof Error && !(d.message in a)) {
                                    a[d.message] = !0;
                                    var p = u ? u() : "";
                                    i("Failed " + r + " type: " + d.message + (null != p ? p : ""))
                                }
                            }
                    }
                    i = function(t) {
                        var n = "Warning: " + t;
                        "undefined" != typeof console && console.error(n);
                        try {
                            throw Error(n)
                        } catch (r) {}
                    }
                    ,
                    l.resetWarningCache = function() {
                        a = {}
                    }
                    ,
                    t.exports = l
                },
                "./node_modules/prop-types/factoryWithTypeCheckers.js"(t, n, r) {
                    "use strict";
                    var i = r(/*! react-is */
                    "./node_modules/react-is/index.js")
                      , s = r(/*! object-assign */
                    "./node_modules/object-assign/index.js")
                      , a = r(/*! ./lib/ReactPropTypesSecret */
                    "./node_modules/prop-types/lib/ReactPropTypesSecret.js")
                      , o = r(/*! ./lib/has */
                    "./node_modules/prop-types/lib/has.js")
                      , l = r(/*! ./checkPropTypes */
                    "./node_modules/prop-types/checkPropTypes.js")
                      , u = function() {};
                    function c() {
                        return null
                    }
                    u = function(t) {
                        var n = "Warning: " + t;
                        "undefined" != typeof console && console.error(n);
                        try {
                            throw Error(n)
                        } catch (r) {}
                    }
                    ,
                    t.exports = function(t, n) {
                        var r = "function" == typeof Symbol && Symbol.iterator
                          , d = "<<anonymous>>"
                          , h = {
                            array: g("array"),
                            bigint: g("bigint"),
                            bool: g("boolean"),
                            func: g("function"),
                            number: g("number"),
                            object: g("object"),
                            string: g("string"),
                            symbol: g("symbol"),
                            any: p(c),
                            arrayOf: function(t) {
                                return p(function(n, r, i, s, o) {
                                    if ("function" != typeof t)
                                        return new f("Property `" + o + "` of component `" + i + "` has invalid PropType notation inside arrayOf.");
                                    var l = n[r];
                                    if (!Array.isArray(l)) {
                                        var u = y(l);
                                        return new f("Invalid " + s + " `" + o + "` of type `" + u + "` supplied to `" + i + "`, expected an array.")
                                    }
                                    for (var c = 0; c < l.length; c++) {
                                        var d = t(l, c, i, s, o + "[" + c + "]", a);
                                        if (d instanceof Error)
                                            return d
                                    }
                                    return null
                                })
                            },
                            element: p(function(n, r, i, s, a) {
                                var o = n[r];
                                if (!t(o)) {
                                    var l = y(o);
                                    return new f("Invalid " + s + " `" + a + "` of type `" + l + "` supplied to `" + i + "`, expected a single ReactElement.")
                                }
                                return null
                            }),
                            elementType: p(function(t, n, r, s, a) {
                                var o = t[n];
                                if (!i.isValidElementType(o)) {
                                    var l = y(o);
                                    return new f("Invalid " + s + " `" + a + "` of type `" + l + "` supplied to `" + r + "`, expected a single ReactElement type.")
                                }
                                return null
                            }),
                            instanceOf: function(t) {
                                return p(function(n, r, i, s, a) {
                                    if (!(n[r]instanceof t)) {
                                        var o, l = t.name || d, u = (o = n[r]).constructor && o.constructor.name ? o.constructor.name : d;
                                        return new f("Invalid " + s + " `" + a + "` of type `" + u + "` supplied to `" + i + "`, expected instance of `" + l + "`.")
                                    }
                                    return null
                                })
                            },
                            node: p(function(n, i, s, a, o) {
                                return !function n(i) {
                                    switch (typeof i) {
                                    case "number":
                                    case "string":
                                    case "undefined":
                                        return !0;
                                    case "boolean":
                                        return !i;
                                    case "object":
                                        if (Array.isArray(i))
                                            return i.every(n);
                                        if (null === i || t(i))
                                            return !0;
                                        var s = function(t) {
                                            var n = t && (r && t[r] || t["@@iterator"]);
                                            if ("function" == typeof n)
                                                return n
                                        }(i);
                                        if (!s)
                                            return !1;
                                        var a, o = s.call(i);
                                        if (s !== i.entries) {
                                            for (; !(a = o.next()).done; )
                                                if (!n(a.value))
                                                    return !1
                                        } else
                                            for (; !(a = o.next()).done; ) {
                                                var l = a.value;
                                                if (l && !n(l[1]))
                                                    return !1
                                            }
                                        return !0;
                                    default:
                                        return !1
                                    }
                                }(n[i]) ? new f("Invalid " + a + " `" + o + "` supplied to `" + s + "`, expected a ReactNode.") : null
                            }),
                            objectOf: function(t) {
                                return p(function(n, r, i, s, l) {
                                    if ("function" != typeof t)
                                        return new f("Property `" + l + "` of component `" + i + "` has invalid PropType notation inside objectOf.");
                                    var u = n[r]
                                      , c = y(u);
                                    if ("object" !== c)
                                        return new f("Invalid " + s + " `" + l + "` of type `" + c + "` supplied to `" + i + "`, expected an object.");
                                    for (var d in u)
                                        if (o(u, d)) {
                                            var h = t(u, d, i, s, l + "." + d, a);
                                            if (h instanceof Error)
                                                return h
                                        }
                                    return null
                                })
                            },
                            oneOf: function(t) {
                                return Array.isArray(t) ? p(function(n, r, i, s, a) {
                                    for (var o, l = n[r], u = 0; u < t.length; u++)
                                        if (l === (o = t[u]) ? 0 !== l || 1 / l == 1 / o : l != l && o != o)
                                            return null;
                                    var c = JSON.stringify(t, function(t, n) {
                                        return "symbol" === _(n) ? String(n) : n
                                    });
                                    return new f("Invalid " + s + " `" + a + "` of value `" + String(l) + "` supplied to `" + i + "`, expected one of " + c + ".")
                                }) : (arguments.length > 1 ? u("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).") : u("Invalid argument supplied to oneOf, expected an array."),
                                c)
                            },
                            oneOfType: function(t) {
                                if (!Array.isArray(t))
                                    return u("Invalid argument supplied to oneOfType, expected an instance of array."),
                                    c;
                                for (var n = 0; n < t.length; n++) {
                                    var r = t[n];
                                    if ("function" != typeof r)
                                        return u("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + function(t) {
                                            var n = _(t);
                                            switch (n) {
                                            case "array":
                                            case "object":
                                                return "an " + n;
                                            case "boolean":
                                            case "date":
                                            case "regexp":
                                                return "a " + n;
                                            default:
                                                return n
                                            }
                                        }(r) + " at index " + n + "."),
                                        c
                                }
                                return p(function(n, r, i, s, l) {
                                    for (var u = [], c = 0; c < t.length; c++) {
                                        var d = (0,
                                        t[c])(n, r, i, s, l, a);
                                        if (null == d)
                                            return null;
                                        d.data && o(d.data, "expectedType") && u.push(d.data.expectedType)
                                    }
                                    var h = u.length > 0 ? ", expected one of type [" + u.join(", ") + "]" : "";
                                    return new f("Invalid " + s + " `" + l + "` supplied to `" + i + "`" + h + ".")
                                })
                            },
                            shape: function(t) {
                                return p(function(n, r, i, s, o) {
                                    var l = n[r]
                                      , u = y(l);
                                    if ("object" !== u)
                                        return new f("Invalid " + s + " `" + o + "` of type `" + u + "` supplied to `" + i + "`, expected `object`.");
                                    for (var c in t) {
                                        var d = t[c];
                                        if ("function" != typeof d)
                                            return m(i, s, o, c, _(d));
                                        var h = d(l, c, i, s, o + "." + c, a);
                                        if (h)
                                            return h
                                    }
                                    return null
                                })
                            },
                            exact: function(t) {
                                return p(function(n, r, i, l, u) {
                                    var c = n[r]
                                      , d = y(c);
                                    if ("object" !== d)
                                        return new f("Invalid " + l + " `" + u + "` of type `" + d + "` supplied to `" + i + "`, expected `object`.");
                                    var h = s({}, n[r], t);
                                    for (var p in h) {
                                        var g = t[p];
                                        if (o(t, p) && "function" != typeof g)
                                            return m(i, l, u, p, _(g));
                                        if (!g)
                                            return new f("Invalid " + l + " `" + u + "` key `" + p + "` supplied to `" + i + "`.\nBad object: " + JSON.stringify(n[r], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(t), null, "  "));
                                        var v = g(c, p, i, l, u + "." + p, a);
                                        if (v)
                                            return v
                                    }
                                    return null
                                })
                            }
                        };
                        function f(t, n) {
                            this.message = t,
                            this.data = n && "object" == typeof n ? n : {},
                            this.stack = ""
                        }
                        function p(t) {
                            var r = {}
                              , i = 0;
                            function s(s, o, l, c, h, p, g) {
                                if (c = c || d,
                                p = p || l,
                                g !== a) {
                                    if (n) {
                                        var m = Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                                        throw m.name = "Invariant Violation",
                                        m
                                    }
                                    if ("undefined" != typeof console) {
                                        var y = c + ":" + l;
                                        !r[y] && i < 3 && (u("You are manually calling a React.PropTypes validation function for the `" + p + "` prop on `" + c + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."),
                                        r[y] = !0,
                                        i++)
                                    }
                                }
                                return null != o[l] ? t(o, l, c, h, p) : s ? new f(null === o[l] ? "The " + h + " `" + p + "` is marked as required in `" + c + "`, but its value is `null`." : "The " + h + " `" + p + "` is marked as required in `" + c + "`, but its value is `undefined`.") : null
                            }
                            var o = s.bind(null, !1);
                            return o.isRequired = s.bind(null, !0),
                            o
                        }
                        function g(t) {
                            return p(function(n, r, i, s, a, o) {
                                var l = n[r];
                                if (y(l) !== t) {
                                    var u = _(l);
                                    return new f("Invalid " + s + " `" + a + "` of type `" + u + "` supplied to `" + i + "`, expected `" + t + "`.",{
                                        expectedType: t
                                    })
                                }
                                return null
                            })
                        }
                        function m(t, n, r, i, s) {
                            return new f((t || "React class") + ": " + n + " type `" + r + "." + i + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + s + "`.")
                        }
                        function y(t) {
                            var n = typeof t;
                            return Array.isArray(t) ? "array" : t instanceof RegExp ? "object" : "symbol" === n || t && ("Symbol" === t["@@toStringTag"] || "function" == typeof Symbol && t instanceof Symbol) ? "symbol" : n
                        }
                        function _(t) {
                            if (null == t)
                                return "" + t;
                            var n = y(t);
                            if ("object" === n) {
                                if (t instanceof Date)
                                    return "date";
                                if (t instanceof RegExp)
                                    return "regexp"
                            }
                            return n
                        }
                        return f.prototype = Error.prototype,
                        h.checkPropTypes = l,
                        h.resetWarningCache = l.resetWarningCache,
                        h.PropTypes = h,
                        h
                    }
                },
                "./node_modules/prop-types/index.js"(t, n, r) {
                    var i = r(/*! react-is */
                    "./node_modules/react-is/index.js");
                    t.exports = r(/*! ./factoryWithTypeCheckers */
                    "./node_modules/prop-types/factoryWithTypeCheckers.js")(i.isElement, !0)
                },
                "./node_modules/prop-types/lib/ReactPropTypesSecret.js"(t) {
                    "use strict";
                    t.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"
                },
                "./node_modules/prop-types/lib/has.js"(t) {
                    t.exports = Function.call.bind(Object.prototype.hasOwnProperty)
                },
                "./node_modules/react-is/cjs/react-is.development.js"(t, n) {
                    "use strict";
                    !function() {
                        var t = "function" == typeof Symbol && Symbol.for
                          , r = t ? Symbol.for("react.element") : 60103
                          , i = t ? Symbol.for("react.portal") : 60106
                          , s = t ? Symbol.for("react.fragment") : 60107
                          , a = t ? Symbol.for("react.strict_mode") : 60108
                          , o = t ? Symbol.for("react.profiler") : 60114
                          , l = t ? Symbol.for("react.provider") : 60109
                          , u = t ? Symbol.for("react.context") : 60110
                          , c = t ? Symbol.for("react.async_mode") : 60111
                          , d = t ? Symbol.for("react.concurrent_mode") : 60111
                          , h = t ? Symbol.for("react.forward_ref") : 60112
                          , f = t ? Symbol.for("react.suspense") : 60113
                          , p = t ? Symbol.for("react.suspense_list") : 60120
                          , g = t ? Symbol.for("react.memo") : 60115
                          , m = t ? Symbol.for("react.lazy") : 60116
                          , y = t ? Symbol.for("react.block") : 60121
                          , _ = t ? Symbol.for("react.fundamental") : 60117
                          , v = t ? Symbol.for("react.responder") : 60118
                          , E = t ? Symbol.for("react.scope") : 60119;
                        function b(t) {
                            if ("object" == typeof t && null !== t) {
                                var n = t.$$typeof;
                                switch (n) {
                                case r:
                                    var p = t.type;
                                    switch (p) {
                                    case c:
                                    case d:
                                    case s:
                                    case o:
                                    case a:
                                    case f:
                                        return p;
                                    default:
                                        var y = p && p.$$typeof;
                                        switch (y) {
                                        case u:
                                        case h:
                                        case m:
                                        case g:
                                        case l:
                                            return y;
                                        default:
                                            return n
                                        }
                                    }
                                case i:
                                    return n
                                }
                            }
                        }
                        var C = !1;
                        function S(t) {
                            return b(t) === d
                        }
                        n.AsyncMode = c,
                        n.ConcurrentMode = d,
                        n.ContextConsumer = u,
                        n.ContextProvider = l,
                        n.Element = r,
                        n.ForwardRef = h,
                        n.Fragment = s,
                        n.Lazy = m,
                        n.Memo = g,
                        n.Portal = i,
                        n.Profiler = o,
                        n.StrictMode = a,
                        n.Suspense = f,
                        n.isAsyncMode = function(t) {
                            return C || (C = !0,
                            console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")),
                            S(t) || b(t) === c
                        }
                        ,
                        n.isConcurrentMode = S,
                        n.isContextConsumer = function(t) {
                            return b(t) === u
                        }
                        ,
                        n.isContextProvider = function(t) {
                            return b(t) === l
                        }
                        ,
                        n.isElement = function(t) {
                            return "object" == typeof t && null !== t && t.$$typeof === r
                        }
                        ,
                        n.isForwardRef = function(t) {
                            return b(t) === h
                        }
                        ,
                        n.isFragment = function(t) {
                            return b(t) === s
                        }
                        ,
                        n.isLazy = function(t) {
                            return b(t) === m
                        }
                        ,
                        n.isMemo = function(t) {
                            return b(t) === g
                        }
                        ,
                        n.isPortal = function(t) {
                            return b(t) === i
                        }
                        ,
                        n.isProfiler = function(t) {
                            return b(t) === o
                        }
                        ,
                        n.isStrictMode = function(t) {
                            return b(t) === a
                        }
                        ,
                        n.isSuspense = function(t) {
                            return b(t) === f
                        }
                        ,
                        n.isValidElementType = function(t) {
                            return "string" == typeof t || "function" == typeof t || t === s || t === d || t === o || t === a || t === f || t === p || "object" == typeof t && null !== t && (t.$$typeof === m || t.$$typeof === g || t.$$typeof === l || t.$$typeof === u || t.$$typeof === h || t.$$typeof === _ || t.$$typeof === v || t.$$typeof === E || t.$$typeof === y)
                        }
                        ,
                        n.typeOf = b
                    }()
                },
                "./node_modules/react-is/index.js"(t, n, r) {
                    "use strict";
                    t.exports = r(/*! ./cjs/react-is.development.js */
                    "./node_modules/react-is/cjs/react-is.development.js")
                },
                "./node_modules/shallow-equal/dist/index.esm.js"(t, n, r) {
                    "use strict";
                    function i(t, n) {
                        if (t === n)
                            return !0;
                        if (!t || !n)
                            return !1;
                        var r = Object.keys(t)
                          , i = Object.keys(n)
                          , s = r.length;
                        if (i.length !== s)
                            return !1;
                        for (var a = 0; a < s; a++) {
                            var o = r[a];
                            if (t[o] !== n[o] || !Object.prototype.hasOwnProperty.call(n, o))
                                return !1
                        }
                        return !0
                    }
                    function s(t, n) {
                        if (t === n)
                            return !0;
                        if (!t || !n)
                            return !1;
                        var r = t.length;
                        if (n.length !== r)
                            return !1;
                        for (var i = 0; i < r; i++)
                            if (t[i] !== n[i])
                                return !1;
                        return !0
                    }
                    r.r(n),
                    r.d(n, {
                        shallowEqualArrays: () => s,
                        shallowEqualObjects: () => i
                    })
                },
                "./src/Component.ts": function(t, n, r) {
                    "use strict";
                    var i = this && this.__rest || function(t, n) {
                        var r = {};
                        for (var i in t)
                            Object.prototype.hasOwnProperty.call(t, i) && 0 > n.indexOf(i) && (r[i] = t[i]);
                        if (null != t && "function" == typeof Object.getOwnPropertySymbols)
                            for (var s = 0, i = Object.getOwnPropertySymbols(t); s < i.length; s++)
                                0 > n.indexOf(i[s]) && Object.prototype.propertyIsEnumerable.call(t, i[s]) && (r[i[s]] = t[i[s]]);
                        return r
                    }
                      , s = this && this.__importDefault || function(t) {
                        return t && t.__esModule ? t : {
                            default: t
                        }
                    }
                    ;
                    Object.defineProperty(n, "__esModule", {
                        value: !0
                    });
                    var a = s(r(/*! ./useMediaQuery */
                    "./src/useMediaQuery.ts"));
                    n.default = function(t) {
                        var n = t.children
                          , r = t.device
                          , s = t.onChange
                          , o = i(t, ["children", "device", "onChange"])
                          , l = (0,
                        a.default)(o, r, s);
                        return "function" == typeof n ? n(l) : l ? n : null
                    }
                },
                "./src/Context.ts"(t, n, r) {
                    "use strict";
                    Object.defineProperty(n, "__esModule", {
                        value: !0
                    });
                    var i = (0,
                    r(/*! react */
                    "react").createContext)(void 0);
                    n.default = i
                },
                "./src/index.ts": function(t, n, r) {
                    "use strict";
                    var i = this && this.__importDefault || function(t) {
                        return t && t.__esModule ? t : {
                            default: t
                        }
                    }
                    ;
                    Object.defineProperty(n, "__esModule", {
                        value: !0
                    }),
                    n.Context = n.toQuery = n.useMediaQuery = n.default = void 0;
                    var s = i(r(/*! ./useMediaQuery */
                    "./src/useMediaQuery.ts"));
                    n.useMediaQuery = s.default;
                    var a = i(r(/*! ./Component */
                    "./src/Component.ts"));
                    n.default = a.default;
                    var o = i(r(/*! ./toQuery */
                    "./src/toQuery.ts"));
                    n.toQuery = o.default;
                    var l = i(r(/*! ./Context */
                    "./src/Context.ts"));
                    n.Context = l.default
                },
                "./src/mediaQuery.ts": function(t, n, r) {
                    "use strict";
                    var i = this && this.__assign || function() {
                        return (i = Object.assign || function(t) {
                            for (var n, r = 1, i = arguments.length; r < i; r++)
                                for (var s in n = arguments[r])
                                    Object.prototype.hasOwnProperty.call(n, s) && (t[s] = n[s]);
                            return t
                        }
                        ).apply(this, arguments)
                    }
                      , s = this && this.__rest || function(t, n) {
                        var r = {};
                        for (var i in t)
                            Object.prototype.hasOwnProperty.call(t, i) && 0 > n.indexOf(i) && (r[i] = t[i]);
                        if (null != t && "function" == typeof Object.getOwnPropertySymbols)
                            for (var s = 0, i = Object.getOwnPropertySymbols(t); s < i.length; s++)
                                0 > n.indexOf(i[s]) && Object.prototype.propertyIsEnumerable.call(t, i[s]) && (r[i[s]] = t[i[s]]);
                        return r
                    }
                      , a = this && this.__importDefault || function(t) {
                        return t && t.__esModule ? t : {
                            default: t
                        }
                    }
                    ;
                    Object.defineProperty(n, "__esModule", {
                        value: !0
                    });
                    var o = a(r(/*! prop-types */
                    "./node_modules/prop-types/index.js"))
                      , l = o.default.oneOfType([o.default.string, o.default.number])
                      , u = {
                        all: o.default.bool,
                        grid: o.default.bool,
                        aural: o.default.bool,
                        braille: o.default.bool,
                        handheld: o.default.bool,
                        print: o.default.bool,
                        projection: o.default.bool,
                        screen: o.default.bool,
                        tty: o.default.bool,
                        tv: o.default.bool,
                        embossed: o.default.bool
                    }
                      , c = {
                        orientation: o.default.oneOf(["portrait", "landscape"]),
                        scan: o.default.oneOf(["progressive", "interlace"]),
                        aspectRatio: o.default.string,
                        deviceAspectRatio: o.default.string,
                        height: l,
                        deviceHeight: l,
                        width: l,
                        deviceWidth: l,
                        color: o.default.bool,
                        colorIndex: o.default.bool,
                        monochrome: o.default.bool,
                        resolution: l,
                        type: Object.keys(u)
                    };
                    c.type;
                    var d = s(c, ["type"])
                      , h = i({
                        minAspectRatio: o.default.string,
                        maxAspectRatio: o.default.string,
                        minDeviceAspectRatio: o.default.string,
                        maxDeviceAspectRatio: o.default.string,
                        minHeight: l,
                        maxHeight: l,
                        minDeviceHeight: l,
                        maxDeviceHeight: l,
                        minWidth: l,
                        maxWidth: l,
                        minDeviceWidth: l,
                        maxDeviceWidth: l,
                        minColor: o.default.number,
                        maxColor: o.default.number,
                        minColorIndex: o.default.number,
                        maxColorIndex: o.default.number,
                        minMonochrome: o.default.number,
                        maxMonochrome: o.default.number,
                        minResolution: l,
                        maxResolution: l
                    }, d)
                      , f = i(i({}, u), h);
                    n.default = {
                        all: f,
                        types: u,
                        matchers: c,
                        features: h
                    }
                },
                "./src/toQuery.ts": function(t, n, r) {
                    "use strict";
                    var i = this && this.__importDefault || function(t) {
                        return t && t.__esModule ? t : {
                            default: t
                        }
                    }
                    ;
                    Object.defineProperty(n, "__esModule", {
                        value: !0
                    });
                    var s = i(r(/*! hyphenate-style-name */
                    "./node_modules/hyphenate-style-name/index.js"))
                      , a = i(r(/*! ./mediaQuery */
                    "./src/mediaQuery.ts"))
                      , o = function(t, n) {
                        var r = (0,
                        s.default)(t);
                        return ("number" == typeof n && (n = "".concat(n, "px")),
                        !0 === n) ? r : !1 === n ? "not ".concat(r) : "(".concat(r, ": ").concat(n, ")")
                    };
                    n.default = function(t) {
                        var n = [];
                        return Object.keys(a.default.all).forEach(function(r) {
                            var i = t[r];
                            null != i && n.push(o(r, i))
                        }),
                        n.join(" and ")
                    }
                },
                "./src/useMediaQuery.ts": function(t, n, r) {
                    "use strict";
                    var i = this && this.__importDefault || function(t) {
                        return t && t.__esModule ? t : {
                            default: t
                        }
                    }
                    ;
                    Object.defineProperty(n, "__esModule", {
                        value: !0
                    });
                    var s = r(/*! react */
                    "react")
                      , a = i(r(/*! matchmediaquery */
                    "./node_modules/matchmediaquery/index.js"))
                      , o = i(r(/*! hyphenate-style-name */
                    "./node_modules/hyphenate-style-name/index.js"))
                      , l = r(/*! shallow-equal */
                    "./node_modules/shallow-equal/dist/index.esm.js")
                      , u = i(r(/*! ./toQuery */
                    "./src/toQuery.ts"))
                      , c = i(r(/*! ./Context */
                    "./src/Context.ts"))
                      , d = function(t) {
                        if (t)
                            return Object.keys(t).reduce(function(n, r) {
                                return n[(0,
                                o.default)(r)] = t[r],
                                n
                            }, {})
                    }
                      , h = function() {
                        var t = (0,
                        s.useRef)(!1);
                        return (0,
                        s.useEffect)(function() {
                            t.current = !0
                        }, []),
                        t.current
                    }
                      , f = function(t) {
                        var n = (0,
                        s.useContext)(c.default)
                          , r = function() {
                            return d(t) || d(n)
                        }
                          , i = (0,
                        s.useState)(r)
                          , a = i[0]
                          , o = i[1];
                        return (0,
                        s.useEffect)(function() {
                            var t = r();
                            (0,
                            l.shallowEqualObjects)(a, t) || o(t)
                        }, [t, n]),
                        a
                    }
                      , p = function(t) {
                        var n = function() {
                            return t.query || (0,
                            u.default)(t)
                        }
                          , r = (0,
                        s.useState)(n)
                          , i = r[0]
                          , a = r[1];
                        return (0,
                        s.useEffect)(function() {
                            var t = n();
                            i !== t && a(t)
                        }, [t]),
                        i
                    }
                      , g = function(t, n) {
                        var r = function() {
                            return (0,
                            a.default)(t, n || {}, !!n)
                        }
                          , i = (0,
                        s.useState)(r)
                          , o = i[0]
                          , l = i[1]
                          , u = h();
                        return (0,
                        s.useEffect)(function() {
                            if (u) {
                                var t = r();
                                return l(t),
                                function() {
                                    t && t.dispose()
                                }
                            }
                        }, [t, n]),
                        o
                    }
                      , m = function(t) {
                        var n = (0,
                        s.useState)(t.matches)
                          , r = n[0]
                          , i = n[1];
                        return (0,
                        s.useEffect)(function() {
                            var n = function(t) {
                                i(t.matches)
                            };
                            return t.addListener(n),
                            i(t.matches),
                            function() {
                                t.removeListener(n)
                            }
                        }, [t]),
                        r
                    };
                    n.default = function(t, n, r) {
                        var i = f(n)
                          , a = p(t);
                        if (!a)
                            throw Error("Invalid or missing MediaQuery!");
                        var o = g(a, i)
                          , l = m(o)
                          , u = h();
                        return (0,
                        s.useEffect)(function() {
                            u && r && r(l)
                        }, [l]),
                        (0,
                        s.useEffect)(function() {
                            return function() {
                                o && o.dispose()
                            }
                        }, []),
                        l
                    }
                },
                react(t) {
                    "use strict";
                    t.exports = i
                }
            }
              , n = {};
            function r(i) {
                var s = n[i];
                if (void 0 !== s)
                    return s.exports;
                var a = n[i] = {
                    exports: {}
                };
                return t[i].call(a.exports, a, a.exports, r),
                a.exports
            }
            return r.d = (t, n) => {
                for (var i in n)
                    r.o(n, i) && !r.o(t, i) && Object.defineProperty(t, i, {
                        enumerable: !0,
                        get: n[i]
                    })
            }
            ,
            r.o = (t, n) => Object.prototype.hasOwnProperty.call(t, n),
            r.r = t => {
                "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
                    value: "Module"
                }),
                Object.defineProperty(t, "__esModule", {
                    value: !0
                })
            }
            ,
            r("./src/index.ts")
        }
        )())
    },
    1107: function(t, n, r) {
        var i = r(3454)
          , s = r(1876).Buffer;
        t.exports = function(t, n, a) {
            "use strict";
            function o(t) {
                return t && "object" == typeof t && "default"in t ? t : {
                    default: t
                }
            }
            var l, u, c, d, h, f, p, g = o(t), m = o(n), y = o(a);
            function _(t, n) {
                var r = Object.keys(t);
                if (Object.getOwnPropertySymbols) {
                    var i = Object.getOwnPropertySymbols(t);
                    n && (i = i.filter(function(n) {
                        return Object.getOwnPropertyDescriptor(t, n).enumerable
                    })),
                    r.push.apply(r, i)
                }
                return r
            }
            function v(t) {
                for (var n = 1; n < arguments.length; n++) {
                    var r = null != arguments[n] ? arguments[n] : {};
                    n % 2 ? _(Object(r), !0).forEach(function(n) {
                        var i, s;
                        i = t,
                        s = r[n],
                        n in i ? Object.defineProperty(i, n, {
                            value: s,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0
                        }) : i[n] = s
                    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(r)) : _(Object(r)).forEach(function(n) {
                        Object.defineProperty(t, n, Object.getOwnPropertyDescriptor(r, n))
                    })
                }
                return t
            }
            function E(t) {
                return (E = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
                    return typeof t
                }
                : function(t) {
                    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
                }
                )(t)
            }
            function b(t, n) {
                if (!(t instanceof n))
                    throw TypeError("Cannot call a class as a function")
            }
            function C(t, n) {
                for (var r = 0; r < n.length; r++) {
                    var i = n[r];
                    i.enumerable = i.enumerable || !1,
                    i.configurable = !0,
                    "value"in i && (i.writable = !0),
                    Object.defineProperty(t, i.key, i)
                }
            }
            function S(t, n, r) {
                return n && C(t.prototype, n),
                r && C(t, r),
                Object.defineProperty(t, "prototype", {
                    writable: !1
                }),
                t
            }
            function A(t, n) {
                if ("function" != typeof n && null !== n)
                    throw TypeError("Super expression must either be null or a function");
                t.prototype = Object.create(n && n.prototype, {
                    constructor: {
                        value: t,
                        writable: !0,
                        configurable: !0
                    }
                }),
                Object.defineProperty(t, "prototype", {
                    writable: !1
                }),
                n && T(t, n)
            }
            function N(t) {
                return (N = Object.setPrototypeOf ? Object.getPrototypeOf : function(t) {
                    return t.__proto__ || Object.getPrototypeOf(t)
                }
                )(t)
            }
            function T(t, n) {
                return (T = Object.setPrototypeOf || function(t, n) {
                    return t.__proto__ = n,
                    t
                }
                )(t, n)
            }
            function I(t) {
                if (void 0 === t)
                    throw ReferenceError("this hasn't been initialised - super() hasn't been called");
                return t
            }
            function O(t) {
                var n = function() {
                    if ("undefined" == typeof Reflect || !Reflect.construct || Reflect.construct.sham)
                        return !1;
                    if ("function" == typeof Proxy)
                        return !0;
                    try {
                        return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {})),
                        !0
                    } catch (t) {
                        return !1
                    }
                }();
                return function() {
                    var r, i = N(t);
                    if (n) {
                        var s = N(this).constructor;
                        r = Reflect.construct(i, arguments, s)
                    } else
                        r = i.apply(this, arguments);
                    return function(t, n) {
                        if (n && ("object" == typeof n || "function" == typeof n))
                            return n;
                        if (void 0 !== n)
                            throw TypeError("Derived constructors may only return object or undefined");
                        return I(t)
                    }(this, r)
                }
            }
            function w() {
                return (w = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function(t, n, r) {
                    var i = function(t, n) {
                        for (; !Object.prototype.hasOwnProperty.call(t, n) && null !== (t = N(t)); )
                            ;
                        return t
                    }(t, n);
                    if (i) {
                        var s = Object.getOwnPropertyDescriptor(i, n);
                        return s.get ? s.get.call(arguments.length < 3 ? t : r) : s.value
                    }
                }
                ).apply(this, arguments)
            }
            function k(t, n) {
                return function(t) {
                    if (Array.isArray(t))
                        return t
                }(t) || function(t, n) {
                    var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                    if (null != r) {
                        var i, s, a = [], o = !0, l = !1;
                        try {
                            for (r = r.call(t); !(o = (i = r.next()).done) && (a.push(i.value),
                            !n || a.length !== n); o = !0)
                                ;
                        } catch (u) {
                            l = !0,
                            s = u
                        } finally {
                            try {
                                o || null == r.return || r.return()
                            } finally {
                                if (l)
                                    throw s
                            }
                        }
                        return a
                    }
                }(t, n) || R(t, n) || function() {
                    throw TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                }()
            }
            function U(t) {
                return function(t) {
                    if (Array.isArray(t))
                        return M(t)
                }(t) || function(t) {
                    if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"])
                        return Array.from(t)
                }(t) || R(t) || function() {
                    throw TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                }()
            }
            function R(t, n) {
                if (t) {
                    if ("string" == typeof t)
                        return M(t, n);
                    var r = Object.prototype.toString.call(t).slice(8, -1);
                    return "Object" === r && t.constructor && (r = t.constructor.name),
                    "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? M(t, n) : void 0
                }
            }
            function M(t, n) {
                (null == n || n > t.length) && (n = t.length);
                for (var r = 0, i = Array(n); r < n; r++)
                    i[r] = t[r];
                return i
            }
            function P(t, n) {
                var r = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
                if (!r) {
                    if (Array.isArray(t) || (r = R(t)) || n && t && "number" == typeof t.length) {
                        r && (t = r);
                        var i = 0
                          , s = function() {};
                        return {
                            s: s,
                            n: function() {
                                return i >= t.length ? {
                                    done: !0
                                } : {
                                    done: !1,
                                    value: t[i++]
                                }
                            },
                            e: function(t) {
                                throw t
                            },
                            f: s
                        }
                    }
                    throw TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
                }
                var a, o = !0, l = !1;
                return {
                    s: function() {
                        r = r.call(t)
                    },
                    n: function() {
                        var t = r.next();
                        return o = t.done,
                        t
                    },
                    e: function(t) {
                        l = !0,
                        a = t
                    },
                    f: function() {
                        try {
                            o || null == r.return || r.return()
                        } finally {
                            if (l)
                                throw a
                        }
                    }
                }
            }
            var L = function() {
                function t() {}
                return Object.defineProperty(t, "OS_VERSION", {
                    get: function() {
                        return "undefined" != typeof navigator && navigator.userAgent ? navigator.userAgent.replace(/,/g, ".") : "noAgent"
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t, "SDK_VERSION", {
                    get: function() {
                        return "3.1.33"
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t, "SDK_MAJOR_VERSION", {
                    get: function() {
                        return t.SDK_VERSION.split(".")[0]
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t, "DEFAULT_MAX_UNREAD_COUNT_OF_SUPER_GROUP_CHANNEL", {
                    get: function() {
                        return 100
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t, "INTERNAL_CALL", {
                    get: function() {
                        return "ic"
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t
            }()
              , D = {}
              , x = function() {
                function t(t) {
                    this._container = t
                }
                return t.create = function(n, r) {
                    return D[n] = new t(r),
                    D[n]
                }
                ,
                t.get = function(t) {
                    return t || (t = id.getInstance()._iid),
                    D[t]
                }
                ,
                Object.defineProperty(t.prototype, "container", {
                    get: function() {
                        return this._container
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.get = function(t) {
                    return this._container[t]
                }
                ,
                t.prototype.set = function(t, n) {
                    this._container[t] = n
                }
                ,
                t.prototype.remove = function(t) {
                    this._container.hasOwnProperty(t) && delete this._container[t]
                }
                ,
                t
            }()
              , F = function(t, n) {
                return (F = Object.setPrototypeOf || ({
                    __proto__: []
                })instanceof Array && function(t, n) {
                    t.__proto__ = n
                }
                || function(t, n) {
                    for (var r in n)
                        Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r])
                }
                )(t, n)
            };
            function H(t, n) {
                if ("function" != typeof n && null !== n)
                    throw TypeError("Class extends value " + String(n) + " is not a constructor or null");
                function r() {
                    this.constructor = t
                }
                F(t, n),
                t.prototype = null === n ? Object.create(n) : (r.prototype = n.prototype,
                new r)
            }
            var j = function() {
                return (j = Object.assign || function(t) {
                    for (var n, r = 1, i = arguments.length; r < i; r++)
                        for (var s in n = arguments[r])
                            Object.prototype.hasOwnProperty.call(n, s) && (t[s] = n[s]);
                    return t
                }
                ).apply(this, arguments)
            };
            function G(t, n, r, i) {
                return new (r || (r = Promise))(function(s, a) {
                    function o(t) {
                        try {
                            u(i.next(t))
                        } catch (n) {
                            a(n)
                        }
                    }
                    function l(t) {
                        try {
                            u(i.throw(t))
                        } catch (n) {
                            a(n)
                        }
                    }
                    function u(t) {
                        var n;
                        t.done ? s(t.value) : ((n = t.value)instanceof r ? n : new r(function(t) {
                            t(n)
                        }
                        )).then(o, l)
                    }
                    u((i = i.apply(t, n || [])).next())
                }
                )
            }
            function B(t, n) {
                var r, i, s, a, o = {
                    label: 0,
                    sent: function() {
                        if (1 & s[0])
                            throw s[1];
                        return s[1]
                    },
                    trys: [],
                    ops: []
                };
                return a = {
                    next: l(0),
                    throw: l(1),
                    return: l(2)
                },
                "function" == typeof Symbol && (a[Symbol.iterator] = function() {
                    return this
                }
                ),
                a;
                function l(a) {
                    return function(l) {
                        return function(a) {
                            if (r)
                                throw TypeError("Generator is already executing.");
                            for (; o; )
                                try {
                                    if (r = 1,
                                    i && (s = 2 & a[0] ? i.return : a[0] ? i.throw || ((s = i.return) && s.call(i),
                                    0) : i.next) && !(s = s.call(i, a[1])).done)
                                        return s;
                                    switch (i = 0,
                                    s && (a = [2 & a[0], s.value]),
                                    a[0]) {
                                    case 0:
                                    case 1:
                                        s = a;
                                        break;
                                    case 4:
                                        return o.label++,
                                        {
                                            value: a[1],
                                            done: !1
                                        };
                                    case 5:
                                        o.label++,
                                        i = a[1],
                                        a = [0];
                                        continue;
                                    case 7:
                                        a = o.ops.pop(),
                                        o.trys.pop();
                                        continue;
                                    default:
                                        if (!(s = (s = o.trys).length > 0 && s[s.length - 1]) && (6 === a[0] || 2 === a[0])) {
                                            o = 0;
                                            continue
                                        }
                                        if (3 === a[0] && (!s || a[1] > s[0] && a[1] < s[3])) {
                                            o.label = a[1];
                                            break
                                        }
                                        if (6 === a[0] && o.label < s[1]) {
                                            o.label = s[1],
                                            s = a;
                                            break
                                        }
                                        if (s && o.label < s[2]) {
                                            o.label = s[2],
                                            o.ops.push(a);
                                            break
                                        }
                                        s[2] && o.ops.pop(),
                                        o.trys.pop();
                                        continue
                                    }
                                    a = n.call(t, o)
                                } catch (l) {
                                    a = [6, l],
                                    i = 0
                                } finally {
                                    r = s = 0
                                }
                            if (5 & a[0])
                                throw a[1];
                            return {
                                value: a[0] ? a[1] : void 0,
                                done: !0
                            }
                        }([a, l])
                    }
                }
            }
            function V(t, n, r) {
                if (r || 2 == arguments.length)
                    for (var i, s = 0, a = n.length; s < a; s++)
                        !i && s in n || (i || (i = Array.prototype.slice.call(n, 0, s)),
                        i[s] = n[s]);
                return t.concat(i || Array.prototype.slice.call(n))
            }
            var q, z = function(t) {
                function n(r, i) {
                    var s = t.call(this, i) || this;
                    return s.name = "SendBirdException",
                    s.code = i || 0,
                    s.message = r,
                    Object.setPrototypeOf(s, n.prototype),
                    s
                }
                return H(n, t),
                Object.defineProperty(n.prototype, "isInvalidTokenError", {
                    get: function() {
                        return this.code === n.INVALID_TOKEN
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n.prototype, "isSessionKeyExpiredError", {
                    get: function() {
                        return this.code === n.SESSION_KEY_EXPIRED
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n.prototype, "isSessionTokenExpiredError", {
                    get: function() {
                        return this.code === n.SESSION_TOKEN_EXPIRED
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n.prototype, "isSessionTokenRevokedError", {
                    get: function() {
                        return this.code === n.SESSION_TOKEN_REVOKED
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "INVALID_TOKEN", {
                    get: function() {
                        return 400111
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "SESSION_KEY_EXPIRED", {
                    get: function() {
                        return 400309
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "USER_DEACTIVATED", {
                    get: function() {
                        return 400300
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "NON_EXISTING_USER", {
                    get: function() {
                        return 400301
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "SESSION_TOKEN_EXPIRED", {
                    get: function() {
                        return 400302
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "SESSION_TOKEN_REVOKED", {
                    get: function() {
                        return 400310
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "INVALID_INITIALIZATION", {
                    get: function() {
                        return 800100
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "CONNECTION_REQUIRED", {
                    get: function() {
                        return 800101
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "CONNECTION_CANCELED", {
                    get: function() {
                        return 800102
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "INVALID_PARAMETER", {
                    get: function() {
                        return 800110
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "NETWORK_ERROR", {
                    get: function() {
                        return 800120
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "NETWORK_ROUTING_ERROR", {
                    get: function() {
                        return 800121
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "MALFORMED_DATA", {
                    get: function() {
                        return 800130
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "MALFORMED_ERROR_DATA", {
                    get: function() {
                        return 800140
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "WRONG_CHANNEL_TYPE", {
                    get: function() {
                        return 800150
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "MARK_AS_READ_RATE_LIMIT_EXCEEDED", {
                    get: function() {
                        return 800160
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "QUERY_IN_PROGRESS", {
                    get: function() {
                        return 800170
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "ACK_TIMEOUT", {
                    get: function() {
                        return 800180
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "LOGIN_TIMEOUT", {
                    get: function() {
                        return 800190
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "WEBSOCKET_CONNECTION_CLOSED", {
                    get: function() {
                        return 800200
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "WEBSOCKET_CONNECTION_FAILED", {
                    get: function() {
                        return 800210
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "REQUEST_FAILED", {
                    get: function() {
                        return 800220
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "FILE_UPLOAD_CANCEL_FAILED", {
                    get: function() {
                        return 800230
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "REQUEST_CANCELED", {
                    get: function() {
                        return 800240
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "REQUEST_DUPLICATED", {
                    get: function() {
                        return 800250
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "FILE_SIZE_LIMIT_EXCEEDED", {
                    get: function() {
                        return 800260
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "SESSION_TOKEN_REQUEST_FAILED", {
                    get: function() {
                        return 800500
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "SESSION_REFRESH_SUCCESS", {
                    get: function() {
                        return 800501
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "SESSION_REFRESH_FAILED", {
                    get: function() {
                        return 800502
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "CHANNEL_NOT_FOUND", {
                    get: function() {
                        return 900500
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "USER_NOT_MEMBER", {
                    get: function() {
                        return 900020
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                n
            }(Error), K = function() {
                function t() {
                    this.sessionToken = null,
                    this.sessionKey = null,
                    this.eKey = null
                }
                return t.prototype.hasSession = function() {
                    return !!this.sessionKey
                }
                ,
                t
            }(), W = {}, Y = function() {
                function t(t, n) {
                    void 0 === n && (n = {});
                    var r = this;
                    this._iid = t,
                    Object.keys(n).forEach(function(t) {
                        var i = n[t];
                        "function" == typeof i && (r[t] = r.getClonedClass(i))
                    }),
                    W[t] = this
                }
                return t.get = function(t) {
                    return t ? W[t] : {}
                }
                ,
                t.prototype.getClonedClass = function(t) {
                    var n = this._iid;
                    return function(r) {
                        function i() {
                            for (var t = [], n = 0; n < arguments.length; n++)
                                t[n] = arguments[n];
                            return r.apply(this, t) || this
                        }
                        return H(i, r),
                        Object.defineProperty(i, "_iid", {
                            get: function() {
                                return n
                            },
                            enumerable: !1,
                            configurable: !0
                        }),
                        Object.defineProperty(i, "_name", {
                            get: function() {
                                return t.name
                            },
                            enumerable: !1,
                            configurable: !0
                        }),
                        Object.defineProperty(i.prototype, "_iid", {
                            get: function() {
                                return n
                            },
                            enumerable: !1,
                            configurable: !0
                        }),
                        i
                    }(t)
                }
                ,
                t
            }(), Q = {
                verbose: "VERBOSE",
                info: "INFO",
                debug: "DEBUG",
                warn: "WARN",
                error: "ERROR",
                none: "NONE"
            }, J = function(t) {
                A(r, t);
                var n = O(r);
                function r() {
                    return b(this, r),
                    n.apply(this, arguments)
                }
                return S(r, [{
                    key: "log",
                    value: function(t) {
                        for (var n, r, i, s, a, o = this.getLogLevelText(t); o.length < 8; )
                            o += " ";
                        for (var l = arguments.length, u = Array(l > 1 ? l - 1 : 0), c = 1; c < l; c++)
                            u[c - 1] = arguments[c];
                        switch (u.unshift("[".concat(o, "]")),
                        t) {
                        case "verbose":
                            (n = console).log.apply(n, u);
                            break;
                        case "debug":
                            (r = console).log.apply(r, u);
                            break;
                        case "info":
                            (i = console).info.apply(i, u);
                            break;
                        case "warn":
                            (s = console).warn.apply(s, u);
                            break;
                        case "error":
                            (a = console).error.apply(a, u)
                        }
                    }
                }, {
                    key: "groupStart",
                    value: function() {
                        var t;
                        (t = console).group.apply(t, arguments)
                    }
                }, {
                    key: "groupEnd",
                    value: function() {
                        var t;
                        (t = console).groupEnd.apply(t, arguments)
                    }
                }]),
                r
            }(function() {
                function t() {
                    b(this, t)
                }
                return S(t, [{
                    key: "getLogLevelText",
                    value: function(t) {
                        return Q[t]
                    }
                }]),
                t
            }()), Z = {
                DEBUG: "debug",
                PRODUCTION: "production"
            }, $ = Z.PRODUCTION, X = {
                VERBOSE: "verbose",
                DEBUG: "debug",
                INFO: "info",
                WARN: "warn",
                ERROR: "error",
                NONE: "none"
            }, ee = [X.NONE, X.ERROR, X.WARN, X.INFO, X.DEBUG, X.VERBOSE], et = X.WARN, en = ee.indexOf(et), er = [new J], ei = function() {
                function t() {
                    b(this, t)
                }
                return S(t, null, [{
                    key: "Mode",
                    get: function() {
                        return Z
                    }
                }, {
                    key: "mode",
                    get: function() {
                        return $
                    },
                    set: function(n) {
                        Object.keys(t.Mode).map(function(n) {
                            return t.Mode[n]
                        }).indexOf(n) > -1 && ($ = n)
                    }
                }, {
                    key: "supportedLogLevels",
                    get: function() {
                        return X
                    }
                }, {
                    key: "logLevel",
                    get: function() {
                        return ee[en]
                    },
                    set: function(t) {
                        ee.includes(t) || (t = et),
                        en = ee.indexOf(t)
                    }
                }, {
                    key: "defaultLogLevel",
                    get: function() {
                        return et
                    }
                }, {
                    key: "isDisplayableLogLevel",
                    value: function(t) {
                        var n = ee.indexOf(t);
                        return 0 <= n && n <= en
                    }
                }, {
                    key: "log",
                    value: function(n) {
                        for (var r = arguments.length, i = Array(r > 1 ? r - 1 : 0), s = 1; s < r; s++)
                            i[s - 1] = arguments[s];
                        t.isDisplayableLogLevel(n) && er.forEach(function(t) {
                            return t.log.apply(t, [n].concat(i))
                        })
                    }
                }, {
                    key: "verbose",
                    value: function() {
                        for (var n = arguments.length, r = Array(n), i = 0; i < n; i++)
                            r[i] = arguments[i];
                        t.log.apply(t, [X.VERBOSE].concat(r))
                    }
                }, {
                    key: "debug",
                    value: function() {
                        for (var n = arguments.length, r = Array(n), i = 0; i < n; i++)
                            r[i] = arguments[i];
                        t.log.apply(t, [X.DEBUG].concat(r))
                    }
                }, {
                    key: "info",
                    value: function() {
                        for (var n = arguments.length, r = Array(n), i = 0; i < n; i++)
                            r[i] = arguments[i];
                        t.log.apply(t, [X.INFO].concat(r))
                    }
                }, {
                    key: "warn",
                    value: function() {
                        for (var n = arguments.length, r = Array(n), i = 0; i < n; i++)
                            r[i] = arguments[i];
                        t.log.apply(t, [X.WARN].concat(r))
                    }
                }, {
                    key: "error",
                    value: function() {
                        for (var n = arguments.length, r = Array(n), i = 0; i < n; i++)
                            r[i] = arguments[i];
                        t.log.apply(t, [X.ERROR].concat(r))
                    }
                }, {
                    key: "group",
                    value: function() {
                        for (var n = arguments.length, r = Array(n), i = 0; i < n; i++)
                            r[i] = arguments[i];
                        var s = [];
                        Array.isArray(r[r.length - 1]) && (s = r.pop()),
                        s.some(function(n) {
                            return t.isDisplayableLogLevel(n.level)
                        }) && er.filter(function(t) {
                            return t instanceof J
                        }).forEach(function(t) {
                            t.groupStart.apply(t, r),
                            s.forEach(function(n) {
                                return t.log.apply(t, [n.level].concat(U(n.messages)))
                            }),
                            t.groupEnd()
                        })
                    }
                }]),
                t
            }(), es = function() {
                function t() {
                    b(this, t),
                    this._queue = [],
                    this.locked = !1
                }
                return S(t, [{
                    key: "lock",
                    value: function(t) {
                        var n = this;
                        this.locked ? this._queue.push(t) : (this.locked = !0,
                        t(function() {
                            return n.unlock()
                        }))
                    }
                }, {
                    key: "unlock",
                    value: function() {
                        if (this.locked = !1,
                        this._queue.length > 0) {
                            var t = this._queue.shift();
                            this.lock(t)
                        }
                    }
                }]),
                t
            }(), ea = function() {
                function t(n) {
                    b(this, t),
                    this.sb = n,
                    this.mutex = new es,
                    this.pingTimer = null,
                    this.pingTimeoutTimer = null
                }
                return S(t, [{
                    key: "ping",
                    value: function() {
                        var t = this
                          , n = Y.get(this.sb._iid).Command.bPing()
                          , r = x.get(this.sb._iid).container
                          , i = r.wsAdapter
                          , s = r.pongTimeout;
                        i.client.send(n),
                        ei.debug("`PING`"),
                        this.pingTimeoutTimer = setTimeout(function() {
                            ei.debug("`PING` timeout."),
                            t.stop(),
                            i.client.handler && i.client.handler.onError()
                        }, s)
                    }
                }, {
                    key: "pong",
                    value: function() {
                        this.pingTimeoutTimer && (clearTimeout(this.pingTimeoutTimer),
                        this.pingTimeoutTimer = null)
                    }
                }, {
                    key: "refreshTimer",
                    value: function() {
                        var t = this
                          , n = x.get(this.sb._iid).container.pingInterval;
                        this.mutex.lock(function(r) {
                            t.stop(),
                            t.pingTimer = setInterval(function() {
                                t.ping()
                            }, n),
                            r()
                        })
                    }
                }, {
                    key: "start",
                    value: function() {
                        this.refreshTimer(),
                        this.ping()
                    }
                }, {
                    key: "stop",
                    value: function() {
                        this.pingTimer && (clearInterval(this.pingTimer),
                        this.pingTimer = null),
                        this.pingTimeoutTimer && (clearTimeout(this.pingTimeoutTimer),
                        this.pingTimeoutTimer = null)
                    }
                }]),
                t
            }(), eo = function() {
                return "undefined" == typeof document && "undefined" != typeof navigator && "ReactNative" == navigator.product
            }, el = function() {
                return "undefined" == typeof window && void 0 !== i && ("node" === i.title || void 0 !== i.versions && i.versions.node || "[object process]" === String(i))
            };
            (e_ = q || (q = {})).FILE = "file",
            e_.BLOB = "blob",
            e_.BLOB_LIKE_OBJECT = "blobLikeObject",
            e_.URL = "url";
            var eu = function() {
                function t() {}
                return t.isFileLikeObject = function(t) {
                    return "object" == typeof t && null !== t && t.hasOwnProperty("name") && "string" == typeof t.name && t.hasOwnProperty("uri") && "string" == typeof t.uri && t.hasOwnProperty("type") && "string" == typeof t.type
                }
                ,
                t.convertFileToDataUrl = function(t) {
                    return new Promise(function(n, r) {
                        var i = new FileReader;
                        i.onload = function(t) {
                            return n(i.result)
                        }
                        ,
                        i.onerror = function(t) {
                            return r(i.error)
                        }
                        ,
                        i.readAsDataURL(t)
                    }
                    )
                }
                ,
                t.convertFileToArrayBuffer = function(t) {
                    return new Promise(function(n, r) {
                        var i = new FileReader;
                        i.onload = function(t) {
                            return n(i.result)
                        }
                        ,
                        i.onerror = function(t) {
                            return r(i.error)
                        }
                        ,
                        i.readAsArrayBuffer(t)
                    }
                    )
                }
                ,
                t.convertDataUrlToByteArray = function(t) {
                    for (var n = t.split(","), r = n[0].match(/:(.*?);/)[1], i = atob(n[1]), s = i.length, a = new Uint8Array(s); s--; )
                        a[s] = i.charCodeAt(s);
                    return [a, r]
                }
                ,
                t.convertDataURLtoFile = function(n, r) {
                    var i = t.convertDataUrlToByteArray(n)
                      , s = i[0]
                      , a = i[1];
                    return new File([s],r,{
                        type: a
                    })
                }
                ,
                t.convertDataURLtoBlob = function(n) {
                    var r = t.convertDataUrlToByteArray(n)
                      , i = r[0]
                      , s = r[1];
                    return new Blob([i],{
                        type: s
                    })
                }
                ,
                t.convertArrayBufferToFile = function(t, n) {
                    return new File([t],n)
                }
                ,
                t.isFile = function(t) {
                    return "undefined" != typeof window && "File"in window && "undefined" != typeof File && t instanceof File
                }
                ,
                t.isBlob = function(t) {
                    return "undefined" != typeof window && "Blob"in window && "undefined" != typeof Blob && t instanceof Blob
                }
                ,
                t.isFileTypeBlob = function(t) {
                    return t === q.BLOB || t === q.FILE
                }
                ,
                t.convertBlobToBuffer = function(n) {
                    return G(void 0, void 0, void 0, function() {
                        var r;
                        return B(t, function(i) {
                            switch (i.label) {
                            case 0:
                                return [4, t.convertFileToArrayBuffer(n)];
                            case 1:
                                return r = i.sent(),
                                [2, s.from(r)]
                            }
                        })
                    })
                }
                ,
                t
            }()
              , ec = [z.CONNECTION_REQUIRED, z.NETWORK_ERROR, z.ACK_TIMEOUT, z.WEBSOCKET_CONNECTION_CLOSED, z.WEBSOCKET_CONNECTION_FAILED, z.FILE_UPLOAD_CANCEL_FAILED, z.REQUEST_CANCELED, 500901, 500910, 900200]
              , ed = [z.SESSION_TOKEN_EXPIRED, z.SESSION_TOKEN_REVOKED, z.USER_DEACTIVATED, z.NON_EXISTING_USER]
              , eh = [z.WEBSOCKET_CONNECTION_CLOSED, z.WEBSOCKET_CONNECTION_FAILED]
              , ef = function() {
                function t() {}
                return t.deepEqual = function(t, n) {
                    if (t !== n) {
                        var r = j({}, t)
                          , i = j({}, n);
                        return (!r.hasOwnProperty("messageId") || !i.hasOwnProperty("messageId") || r.messageId === i.messageId) && (!r.hasOwnProperty("reqId") || !i.hasOwnProperty("reqId") || r.reqId === i.reqId) && (r.hasOwnProperty("messageId") && delete r.messageId,
                        r.hasOwnProperty("reqId") && delete r.reqId,
                        i.hasOwnProperty("messageId") && delete i.messageId,
                        i.hasOwnProperty("reqId") && delete i.reqId,
                        JSON.stringify(r) === JSON.stringify(i))
                    }
                    return !0
                }
                ,
                t.isResendableError = function(t) {
                    return t > 0 && ec.indexOf(t) >= 0
                }
                ,
                t.isAutoResendableError = function(t) {
                    return t > 0 && eh.indexOf(t) >= 0
                }
                ,
                t.isNonAutoReconnectableError = function(t) {
                    return t > 0 && ed.indexOf(t) >= 0
                }
                ,
                t.isFile = function(t) {
                    return eu.isFileLikeObject(t) || (el() ? void 0 !== s && t instanceof s : "undefined" != typeof Blob ? t instanceof Blob : "undefined" != typeof File && t instanceof File)
                }
                ,
                t
            }()
              , ep = function() {
                function t(t) {
                    var n = this;
                    this.fields = {},
                    t && Object.keys(t).forEach(function(r) {
                        n.fields[r] = {
                            value: t[r]
                        },
                        ef.isFile(t[r]) && (n.fields[r].filename = t[r].name)
                    }),
                    this.options = {},
                    this.internal = !1,
                    this.upload = {
                        reqId: null,
                        deleteRequest: null,
                        progressHandler: null
                    }
                }
                return t.prototype.add = function(t, n, r) {
                    void 0 === r && (r = null),
                    this.fields[t] = {
                        value: n,
                        filename: r
                    }
                }
                ,
                t.prototype.remove = function(t) {
                    this.fields.hasOwnProperty(t) && delete this.fields[t]
                }
                ,
                t.prototype.yield = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n, r, s, a, o, l, u, c, d, h, f = this;
                        return B(this, function(p) {
                            switch (p.label) {
                            case 0:
                                for (t = !1,
                                n = Object.keys(this.fields),
                                r = 0; r < n.length; r++)
                                    if (l = n[r],
                                    ef.isFile(this.fields[l].value)) {
                                        t = !0;
                                        break
                                    }
                                if (!t)
                                    return [3, 10];
                                s = new m.default,
                                a = 0,
                                o = n,
                                p.label = 1;
                            case 1:
                                return a < o.length ? (l = o[a],
                                u = this.fields[l],
                                ef.isFile(u.value) ? (c = u.value).filename || c.name ? (s.append(l, u.value, c.filename || c.name),
                                [3, 6]) : [3, 2] : [3, 7]) : [3, 9];
                            case 2:
                                return c.data ? (s.append(l, u.value, c.data.name),
                                [3, 6]) : [3, 3];
                            case 3:
                                return d = u.value,
                                "undefined" != typeof window && void 0 !== i && i.title.endsWith("node") && i.versions && i.versions.node && "undefined" != typeof Blob && d instanceof Blob || "undefined" != typeof File && d instanceof File ? [4, eu.convertBlobToBuffer(d)] : [3, 5];
                            case 4:
                                d = p.sent(),
                                p.label = 5;
                            case 5:
                                s.append(l, d, "unnamed"),
                                p.label = 6;
                            case 6:
                                return [3, 8];
                            case 7:
                                eo() && Array.isArray(u.value) ? s.append(l, String(u.value)) : s.append(l, u.value),
                                p.label = 8;
                            case 8:
                                return a++,
                                [3, 1];
                            case 9:
                                return [2, s];
                            case 10:
                                return h = {},
                                Object.keys(this.fields).forEach(function(t) {
                                    h[t] = f.fields[t].value
                                }),
                                [2, h]
                            }
                        })
                    })
                }
                ,
                t
            }()
              , eg = function(t, n, r) {
                return void 0 === r && (r = null),
                new Promise(function(i, s) {
                    var a = function(n, a) {
                        void 0 === a && (a = null),
                        r && (x.get(t).get("isErrorFirstInCallback") ? r(n, a) : r(a, n)),
                        n ? s(n) : i(a)
                    };
                    a.isPromisifyCallback = !0,
                    n(a)
                }
                )
            }
              , em = function() {
                function t(n) {
                    b(this, t),
                    this.sb = n,
                    this.cls = Y.get(this.sb._iid)
                }
                return S(t, [{
                    key: "checkRouting",
                    value: function(t) {
                        if (this.sb.customApiHost && this.sb.customWsHost)
                            "function" == typeof t && t(null, {
                                apiHost: this.sb.customApiHost,
                                wsHost: this.sb.customWsHost
                            });
                        else {
                            var n = this.sb.getApplicationId();
                            t(null, {
                                apiHost: "https://api-".concat(n, ".sendbird.com"),
                                wsHost: "wss://ws-".concat(n, ".sendbird.com")
                            })
                        }
                    }
                }, {
                    key: "_buildUrl",
                    value: function(t) {
                        var n = t.apiHost
                          , r = t.url
                          , i = t.params;
                        return r ? i && i.internal ? "".concat(n, "/v").concat(L.SDK_MAJOR_VERSION, "/sdk").concat(r) : "".concat(n, "/v").concat(L.SDK_MAJOR_VERSION).concat(r) : n
                    }
                }, {
                    key: "_createHeader",
                    value: function() {
                        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}
                          , n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
                          , r = n.noSessionKey
                          , i = n.accessToken
                          , s = void 0 === i ? null : i
                          , a = t instanceof m.default && "function" == typeof t.getHeaders ? t.getHeaders() : {}
                          , o = x.get(this.sb._iid).container
                          , l = o.appId
                          , u = o.auth
                          , c = o.extensions
                          , d = o.getUserAgentWithExtensions
                          , h = id.getAppVersion()
                          , f = "JS,".concat(L.OS_VERSION, ",").concat(L.SDK_VERSION, ",").concat(l);
                        return h && (f += ",".concat(h)),
                        a.SendBird = f,
                        a["SB-User-Agent"] = encodeURIComponent(d(c)),
                        !(void 0 !== r && r) && u.sessionKey && (a["Session-Key"] = u.sessionKey),
                        s && (a["App-Id"] = l,
                        a["Access-Token"] = s),
                        a["Request-Sent-Timestamp"] = (new Date).getTime().toString(),
                        t instanceof m.default && eo() && (a["Content-Type"] = "multipart/form-data"),
                        a
                    }
                }, {
                    key: "_createQuery",
                    value: function(t) {
                        var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                        try {
                            var r = [];
                            return Object.keys(n).forEach(function(t) {
                                var i = n[t];
                                if (null != i) {
                                    var s = "";
                                    s = "object" === E(i) ? Array.isArray(i) ? i.map(function(t) {
                                        return encodeURIComponent("string" == typeof t ? t.trim() : t)
                                    }).join(",") : encodeURIComponent(JSON.stringify(i)) : encodeURIComponent(i),
                                    r.push("".concat(t, "=").concat(s))
                                }
                            }),
                            r.length > 0 ? "".concat(t, "?").concat(r.join("&")) : t
                        } catch (i) {
                            return ei.debug("createWithEncodedGetParams is failed. - ", i),
                            t
                        }
                    }
                }, {
                    key: "_request",
                    value: function(t, n, r, i) {
                        var s = this;
                        this.checkRouting(function(a, o) {
                            if (a)
                                i(new z("Request failed.",z.REQUEST_FAILED), null);
                            else {
                                var l = s._buildUrl({
                                    apiHost: o.apiHost,
                                    url: n,
                                    params: r
                                });
                                (r ? r.yield() : Promise.resolve({})).then(function(a) {
                                    var o = s._createHeader(a, r ? r.options : {})
                                      , u = [{
                                        level: ei.supportedLogLevels.DEBUG,
                                        messages: ["url:", n]
                                    }, {
                                        level: ei.supportedLogLevels.DEBUG,
                                        messages: ["data:", a]
                                    }]
                                      , c = null;
                                    switch (t) {
                                    case "GET":
                                    case "DELETE":
                                        c = s._createQuery(l, a);
                                        break;
                                    case "POST":
                                    case "PUT":
                                        c = l
                                    }
                                    var d = null;
                                    if (("undefined" == typeof ServiceWorker || "undefined" == typeof ServiceWorkerRegistration || "undefined" != typeof ServiceWorkerContainer) && "undefined" == typeof Worker || el() || "function" != typeof fetch)
                                        switch (t) {
                                        case "GET":
                                            d = g.default.get(c, {
                                                headers: o,
                                                validateStatus: s._validateStatus
                                            });
                                            break;
                                        case "POST":
                                            var h = {
                                                headers: o,
                                                validateStatus: s._validateStatus,
                                                onUploadProgress: function(t) {
                                                    r.upload.progressHandler && r.upload.progressHandler(t, r.upload.reqId)
                                                }
                                            };
                                            if (a instanceof m.default) {
                                                var f = null;
                                                "function" == typeof AbortController ? (f = new AbortController,
                                                h.signal = f.signal) : (f = g.default.CancelToken.source(),
                                                h.cancelToken = f.token);
                                                var p = s.cls.FileMessageQueue
                                                  , y = r.upload.reqId;
                                                y && (u.push({
                                                    level: ei.supportedLogLevels.DEBUG,
                                                    messages: ["request id:", y]
                                                }),
                                                p.uploadRequest[y] = f)
                                            }
                                            d = g.default.post(c, "function" == typeof a.getBuffer ? a.getBuffer() : a, h);
                                            break;
                                        case "PUT":
                                            d = g.default.put(c, a, {
                                                headers: o,
                                                validateStatus: s._validateStatus
                                            });
                                            break;
                                        case "DELETE":
                                            d = g.default.delete(c, {
                                                headers: o,
                                                validateStatus: s._validateStatus
                                            })
                                        }
                                    else {
                                        var _ = {
                                            method: t,
                                            headers: o
                                        };
                                        switch (t) {
                                        case "GET":
                                            break;
                                        case "POST":
                                            if (a instanceof m.default) {
                                                if ("function" == typeof AbortController) {
                                                    var v = new AbortController
                                                      , E = v.signal;
                                                    _.signal = E;
                                                    var b = s.cls.FileMessageQueue
                                                      , C = r.upload.reqId;
                                                    C && (u.push({
                                                        level: ei.supportedLogLevels.DEBUG,
                                                        messages: ["request id:", C]
                                                    }),
                                                    b.uploadRequest[C] = v)
                                                }
                                                _.body = "function" == typeof a.getBuffer ? a.getBuffer() : a
                                            } else
                                                o["Content-Type"] = "application/json; charset=utf-8",
                                                _.body = JSON.stringify(a);
                                            break;
                                        case "PUT":
                                            a instanceof m.default ? _.body = "function" == typeof a.getBuffer ? a.getBuffer() : a : (o["Content-Type"] = "application/json; charset=utf-8",
                                            _.body = JSON.stringify(a))
                                        }
                                        d = fetch(c, _).then(function(t) {
                                            return t.json().then(function(n) {
                                                if (!s._validateStatus(t.status))
                                                    throw {
                                                        request: {
                                                            isAbort: !1
                                                        },
                                                        response: {
                                                            data: n
                                                        }
                                                    };
                                                return Promise.resolve({
                                                    data: n
                                                })
                                            })
                                        })
                                    }
                                    ei.group("".concat(t, " request"), u),
                                    u = [],
                                    d.then(function(n) {
                                        try {
                                            var s = n.data;
                                            "POST" === t && "function" == typeof r.upload.deleteRequest && r.upload.deleteRequest(),
                                            u.push({
                                                level: ei.supportedLogLevels.DEBUG,
                                                messages: ["data:", s]
                                            }),
                                            i(null, s)
                                        } catch (a) {
                                            throw {
                                                code: 888e3,
                                                rawError: a
                                            }
                                        }
                                    }).catch(function(a) {
                                        if (888e3 === a.code)
                                            throw a.rawError;
                                        "POST" === t && "function" == typeof r.upload.deleteRequest && r.upload.deleteRequest();
                                        var o = s._handleError(a);
                                        if (u.push({
                                            level: ei.supportedLogLevels.DEBUG,
                                            messages: ["error:", o]
                                        }),
                                        n && r) {
                                            if (r.options && r.options.isSessionRefresh)
                                                i(o, null);
                                            else {
                                                var l = x.get(s.sb._iid).container.sessionManager;
                                                l.isSessionError(o) ? l.refreshSessionIfExpiredError(o).then(function() {
                                                    return i(new z("Session is refreshed successfully.",z.SESSION_REFRESH_SUCCESS), null)
                                                }).catch(function(t) {
                                                    return i(new z("Session refresh failed.",z.SESSION_REFRESH_FAILED), null)
                                                }) : i(o, null)
                                            }
                                        } else
                                            i(o, null)
                                    }).finally(function() {
                                        return ei.group("".concat(t, " response"), u)
                                    })
                                })
                            }
                        })
                    }
                }, {
                    key: "_validateStatus",
                    value: function(t) {
                        return t >= 200 && t < 400
                    }
                }, {
                    key: "_handleError",
                    value: function(t) {
                        var n = t.request
                          , r = t.response;
                        if (n) {
                            if (n.isAbort || n.aborted)
                                return new z("Request has been canceled.",z.REQUEST_CANCELED);
                            if (r) {
                                var i = r.data
                                  , s = i ? i.message : "Request failed."
                                  , a = i ? i.code : z.REQUEST_FAILED;
                                return new z(s,a)
                            }
                            return new z("Request failed.",z.REQUEST_FAILED)
                        }
                        return new z("There was a network error.",z.NETWORK_ERROR)
                    }
                }, {
                    key: "get",
                    value: function(t, n, r) {
                        this._request("GET", t, n, r)
                    }
                }, {
                    key: "dummyCall",
                    value: function(t) {
                        this._request("GET", null, null, t)
                    }
                }, {
                    key: "post",
                    value: function(t, n, r) {
                        this._request("POST", t, n, r)
                    }
                }, {
                    key: "put",
                    value: function(t, n, r) {
                        this._request("PUT", t, n, r)
                    }
                }, {
                    key: "delete",
                    value: function(t, n, r) {
                        this._request("DELETE", t, n, r)
                    }
                }, {
                    key: "refreshSessionKey",
                    value: function(n, r) {
                        var i = this
                          , s = n.accessToken;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_SESSION_KEY.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep;
                                l.add("expiring_session", !0),
                                l.options.isSessionRefresh = !0,
                                l.options.noSessionKey = !0,
                                l.options.accessToken = s,
                                i.post(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "updateCurrentUserInfo",
                    value: function(n, r) {
                        var i = this
                          , s = n.nickname
                          , a = n.profileUrl
                          , o = n.profileImage
                          , l = n.preferredLanguages;
                        this.sb.ConnectionManager.ready(function(n, u) {
                            if (n)
                                r(n, null);
                            else {
                                var c = t.Path.USERS_USERID.replace("%s", encodeURIComponent(u.userId))
                                  , d = new ep;
                                s && d.add("nickname", s),
                                a && d.add("profile_url", a),
                                o && d.add("profile_file", o, o.name),
                                l && d.add("preferred_languages", l),
                                i.put(c, d, r)
                            }
                        })
                    }
                }, {
                    key: "getMyGroupChannelChangeLogs",
                    value: function(n, r) {
                        var i = this;
                        return eg(this.sb._iid, function(r) {
                            var s = n.ts
                              , a = n.token
                              , o = n.customTypes
                              , l = n.includeEmpty
                              , u = n.includeFrozen;
                            i.sb.ConnectionManager.ready(function(n, c) {
                                if (n)
                                    r(n, null);
                                else {
                                    var d = t.Path.USERS_USERID_MY_GROUP_CHANNEL_CHANGELOGS.replace("%s", encodeURIComponent(c.userId))
                                      , h = new ep({
                                        show_read_receipt: !0,
                                        show_delivery_receipt: !0,
                                        show_member: !0
                                    });
                                    a && h.add("token", a),
                                    s && h.add("change_ts", s),
                                    o && o.length > 0 && h.add("custom_types", o),
                                    "boolean" == typeof l && h.add("show_empty", l),
                                    "boolean" == typeof u && h.add("show_frozen", u),
                                    i.get(d, h, r)
                                }
                            })
                        }, r)
                    }
                }, {
                    key: "getChannelInvitationPreference",
                    value: function(n, r) {
                        var i = this;
                        this.sb.ConnectionManager.ready(function(n, s) {
                            if (n)
                                r(n, null);
                            else {
                                var a = t.Path.USERS_USERID_GROUP_CHANNEL_INVITATION_PREFERENCE.replace("%s", encodeURIComponent(s.userId));
                                i.get(a, null, r)
                            }
                        })
                    }
                }, {
                    key: "getGroupChannelCount",
                    value: function(n, r) {
                        var i = this
                          , s = n.memberStateFilter;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = i.cls.GroupChannel
                                  , l = t.Path.USERS_USERID_GROUP_CHANNEL_COUNT.replace("%s", encodeURIComponent(a.userId))
                                  , u = "";
                                switch (s) {
                                case o.MemberStateFilter.JOINED:
                                    u = "joined";
                                    break;
                                case o.MemberStateFilter.INVITED:
                                    u = "invited";
                                    break;
                                case o.MemberStateFilter.INVITED_BY_FRIEND:
                                    u = "invited_by_friend";
                                    break;
                                case o.MemberStateFilter.INVITED_BY_NON_FRIEND:
                                    u = "invited_by_non_friend";
                                    break;
                                case o.MemberStateFilter.LEFT:
                                    u = "left";
                                default:
                                    u = "all"
                                }
                                var c = new ep({
                                    state: u
                                });
                                i.get(l, c, r)
                            }
                        })
                    }
                }, {
                    key: "getUnreadItemCount",
                    value: function(n, r) {
                        var i = this
                          , s = n.keys;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_UNREAD_ITEM_COUNT.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep({
                                    item_keys: s
                                });
                                i.get(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "getTotalUnreadMessageCount",
                    value: function(n, r) {
                        var i = this
                          , s = n.customTypesFilter
                          , a = n.superChannelFilter;
                        this.sb.ConnectionManager.ready(function(n, o) {
                            if (n)
                                r(n, null);
                            else {
                                var l = t.Path.USERS_USERID_UNREAD_MESSAGE_COUNT.replace("%s", encodeURIComponent(o.userId))
                                  , u = new ep({
                                    super_mode: a
                                });
                                null !== s && s.length > 0 && u.add("custom_types", s),
                                i.get(l, u, r)
                            }
                        })
                    }
                }, {
                    key: "getTotalUnreadChannelCount",
                    value: function(n, r) {
                        var i = this
                          , s = n.customTypesFilter
                          , a = n.superChannelFilter;
                        this.sb.ConnectionManager.ready(function(n, o) {
                            if (n)
                                r(n, null);
                            else {
                                var l = t.Path.USERS_USERID_UNREAD_CHANNEL_COUNT.replace("%s", encodeURIComponent(o.userId))
                                  , u = new ep({
                                    super_mode: a
                                });
                                null !== s && s.length > 0 && u.add("custom_types", s),
                                i.get(l, u, r)
                            }
                        })
                    }
                }, {
                    key: "searchMessages",
                    value: function(n, r) {
                        var i = this
                          , s = n.keyword
                          , a = n.limit
                          , o = n.reverse
                          , l = n.exactMatch
                          , u = n.channelUrl
                          , c = n.channelCustomType
                          , d = n.messageTimestampFrom
                          , h = n.messageTimestampTo
                          , f = n.order
                          , p = n.nextToken
                          , g = n.advancedQuery
                          , m = n.targetFields;
                        this.sb.ConnectionManager.ready(function(n, y) {
                            if (n)
                                r(n, null);
                            else {
                                var _ = t.Path.SEARCH_MESSAGE
                                  , v = new ep({
                                    limit: a,
                                    reverse: o,
                                    query: s,
                                    custom_type: c
                                });
                                d && v.add("message_ts_from", d),
                                h && v.add("message_ts_to", h),
                                u && v.add("channel_url", u),
                                f && v.add("sort_field", f),
                                "boolean" == typeof l && v.add("exact_match", l),
                                null !== p && p.length > 0 && v.add("after", p),
                                "boolean" == typeof g && v.add("advanced_query", g),
                                m && Array.isArray(m) && v.add("target_fields", m),
                                i.get(_, v, r)
                            }
                        })
                    }
                }, {
                    key: "markAsReadAll",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrls;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_MARKASREADALL.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep;
                                s && l.add("channel_urls", s),
                                i.put(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "markAsDelivered",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.userId;
                        this.sb.ConnectionManager.ready(function(n, o) {
                            if (n)
                                r(n, null);
                            else {
                                var l = t.Path.GROUPCHANNELS_CHANNELURL_MESSAGES_MARKASDELIVERED.replace("%s", encodeURIComponent(s))
                                  , u = new ep;
                                a && u.add("user_id", a),
                                i.put(l, u, r)
                            }
                        })
                    }
                }, {
                    key: "setChannelInvitationPreference",
                    value: function(n, r) {
                        var i = this
                          , s = n.isAutoAccept;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_GROUP_CHANNEL_INVITATION_PREFERENCE.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep({
                                    auto_accept: s
                                });
                                i.put(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "blockUser",
                    value: function(n, r) {
                        var i = this
                          , s = n.blockedUserId;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_BLOCK.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep({
                                    target_id: s
                                });
                                i.post(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "unblockUser",
                    value: function(n, r) {
                        var i = this
                          , s = n.unblockedUserId;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_BLOCK_TARGETID.replace("%s", encodeURIComponent(a.userId)).replace("%s", encodeURIComponent(s));
                                i.delete(o, null, r)
                            }
                        })
                    }
                }, {
                    key: "getPushTriggerOption",
                    value: function(n, r) {
                        var i = this;
                        this.sb.ConnectionManager.ready(function(n, s) {
                            if (n)
                                r(n, null);
                            else {
                                var a = t.Path.USERS_USERID_PUSHPREFERENCE.replace("%s", encodeURIComponent(s.userId));
                                i.get(a, null, r)
                            }
                        })
                    }
                }, {
                    key: "setPushTriggerOption",
                    value: function(n, r) {
                        var i = this
                          , s = n.pushTriggerOption;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_PUSHPREFERENCE.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep({
                                    push_trigger_option: s
                                });
                                i.put(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "getPushTokens",
                    value: function(n, r) {
                        var i = this
                          , s = n.ts
                          , a = n.token
                          , o = n.type;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = t.Path.USERS_USERID_PUSH_DEVICE_TOKENS.replace("%s", encodeURIComponent(l.userId)).replace("%s", encodeURIComponent(o))
                                  , c = new ep;
                                a && c.add("token", a),
                                s && c.add("created_ts", s),
                                i.get(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "getPushTemplate",
                    value: function(n, r) {
                        var i = this;
                        this.sb.ConnectionManager.ready(function(n, s) {
                            if (n)
                                r(n, null);
                            else {
                                var a = t.Path.USERS_USERID_PUSH_TEMPLATE.replace("%s", encodeURIComponent(s.userId));
                                i.get(a, null, r)
                            }
                        })
                    }
                }, {
                    key: "setPushTemplate",
                    value: function(n, r) {
                        var i = this
                          , s = n.templateName;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_PUSH_TEMPLATE.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep({
                                    name: s
                                });
                                i.put(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "getDoNotDisturb",
                    value: function(n, r) {
                        var i = this;
                        this.sb.ConnectionManager.ready(function(n, s) {
                            if (n)
                                r(n, null);
                            else {
                                var a = t.Path.USERS_USERID_PUSHPREFERENCE.replace("%s", encodeURIComponent(s.userId));
                                i.get(a, null, r)
                            }
                        })
                    }
                }, {
                    key: "setDoNotDisturb",
                    value: function(n, r) {
                        var i = this
                          , s = n.doNotDisturbOn
                          , a = n.startHour
                          , o = n.startMin
                          , l = n.endHour
                          , u = n.endMin
                          , c = n.timezone;
                        this.sb.ConnectionManager.ready(function(n, d) {
                            if (n)
                                r(n, null);
                            else {
                                var h = t.Path.USERS_USERID_PUSHPREFERENCE.replace("%s", encodeURIComponent(d.userId))
                                  , f = new ep({
                                    do_not_disturb: s,
                                    start_hour: a,
                                    start_min: o,
                                    end_hour: l,
                                    end_min: u,
                                    timezone: c
                                });
                                i.put(h, f, r)
                            }
                        })
                    }
                }, {
                    key: "getSnoozePeriod",
                    value: function(n, r) {
                        var i = this;
                        this.sb.ConnectionManager.ready(function(n, s) {
                            if (n)
                                r(n, null);
                            else {
                                var a = t.Path.USERS_USERID_PUSHPREFERENCE.replace("%s", encodeURIComponent(s.userId));
                                i.get(a, null, r)
                            }
                        })
                    }
                }, {
                    key: "setSnoozePeriod",
                    value: function(n, r) {
                        var i = this
                          , s = n.snoozeOn
                          , a = n.startTs
                          , o = n.endTs;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = t.Path.USERS_USERID_PUSHPREFERENCE.replace("%s", encodeURIComponent(l.userId))
                                  , c = new ep({
                                    snooze_enabled: s,
                                    snooze_start_ts: a,
                                    snooze_end_ts: o
                                });
                                i.put(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "registerGCMPushToken",
                    value: function(n, r) {
                        var i = this
                          , s = n.token;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_PUSH_GCM.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep({
                                    gcm_reg_token: s,
                                    always_push: !0
                                });
                                i.post(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "unregisterGCMPushToken",
                    value: function(n, r) {
                        var i = this
                          , s = n.token;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_PUSH_GCM_TOKEN.replace("%s", encodeURIComponent(a.userId)).replace("%s", encodeURIComponent(s));
                                i.delete(o, null, r)
                            }
                        })
                    }
                }, {
                    key: "unregisterAllGCMPushTokens",
                    value: function(n, r) {
                        var i = this;
                        this.sb.ConnectionManager.ready(function(n, s) {
                            if (n)
                                r(n, null);
                            else {
                                var a = t.Path.USERS_USERID_PUSH_GCM.replace("%s", encodeURIComponent(s.userId));
                                i.delete(a, null, r)
                            }
                        })
                    }
                }, {
                    key: "registerAPNSPushToken",
                    value: function(n, r) {
                        var i = this
                          , s = n.token;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_PUSH_APNS.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep({
                                    apns_device_token: s,
                                    always_push: !0
                                });
                                i.post(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "unregisterAPNSPushToken",
                    value: function(n, r) {
                        var i = this
                          , s = n.token;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_PUSH_APNS_TOKEN.replace("%s", encodeURIComponent(a.userId)).replace("%s", encodeURIComponent(s));
                                i.delete(o, null, r)
                            }
                        })
                    }
                }, {
                    key: "unregisterAllAPNSPushTokens",
                    value: function(n, r) {
                        var i = this;
                        this.sb.ConnectionManager.ready(function(n, s) {
                            if (n)
                                r(n, null);
                            else {
                                var a = t.Path.USERS_USERID_PUSH_APNS.replace("%s", encodeURIComponent(s.userId));
                                i.delete(a, null, r)
                            }
                        })
                    }
                }, {
                    key: "unregisterAllPushTokens",
                    value: function(n, r) {
                        var i = this;
                        this.sb.ConnectionManager.ready(function(n, s) {
                            if (n)
                                r(n, null);
                            else {
                                var a = t.Path.USERS_USERID_PUSH.replace("%s", encodeURIComponent(s.userId));
                                i.delete(a, null, r)
                            }
                        })
                    }
                }, {
                    key: "loadFriendList",
                    value: function(n, r) {
                        var i = this
                          , s = n.token
                          , a = n.limit;
                        this.sb.ConnectionManager.ready(function(n, o) {
                            if (n)
                                r(n, null);
                            else {
                                var l = t.Path.FRIENDS.replace("%s", encodeURIComponent(o.userId))
                                  , u = new ep({
                                    limit: a,
                                    token: s
                                });
                                i.get(l, u, r)
                            }
                        })
                    }
                }, {
                    key: "getFriendChangeLogsByToken",
                    value: function(n, r) {
                        var i = this
                          , s = n.token;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.FRIENDS_CHANGE_LOGS.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep;
                                s && l.add("token", s),
                                i.get(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "addFriends",
                    value: function(n, r) {
                        var i = this
                          , s = n.userIds;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.FRIENDS.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep({
                                    user_ids: s
                                });
                                i.post(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "deleteFriends",
                    value: function(n, r) {
                        var i = this
                          , s = n.userIds;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.FRIENDS.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep({
                                    user_ids: s
                                });
                                i.delete(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "uploadFriendDiscoveries",
                    value: function(n, r) {
                        var i = this
                          , s = n.discoveries;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.FRIENDS_DISCOVERIES.replace("%s", encodeURIComponent(a.userId))
                                  , l = [];
                                s.forEach(function(t) {
                                    l.push({
                                        friend_discovery_key: t.friendDiscoveryKey,
                                        friend_name: "string" == typeof t.friendName || t.friendName ? t.friendName : null
                                    })
                                });
                                var u = new ep({
                                    friend_discoveries: l
                                });
                                i.put(o, u, r)
                            }
                        })
                    }
                }, {
                    key: "deleteFriendDiscoveries",
                    value: function(n, r) {
                        var i = this
                          , s = n.discoveryKeys;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.FRIENDS_DISCOVERIES.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep({
                                    friend_discovery_keys: s
                                });
                                i.delete(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "loadUserList",
                    value: function(n, r) {
                        var i = this
                          , s = n.token
                          , a = n.limit
                          , o = n.userIdsFilter
                          , l = n.metaDataKeyFilter
                          , u = n.metaDataValuesFilter
                          , c = n.nicknameStartsWithFilter;
                        this.sb.ConnectionManager.ready(function(n, d) {
                            if (n)
                                r(n, null);
                            else {
                                var h = t.Path.USERS
                                  , f = new ep({
                                    token: s,
                                    limit: a
                                });
                                o && o.length > 0 && f.add("user_ids", o),
                                l && u && u.length > 0 && (f.add("metadatakey", l),
                                f.add("metadatavalues_in", u)),
                                c && f.add("nickname_startswith", c),
                                i.get(h, f, r)
                            }
                        })
                    }
                }, {
                    key: "loadBlockedUserList",
                    value: function(n, r) {
                        var i = this
                          , s = n.token
                          , a = n.limit
                          , o = n.userIdsFilter;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = t.Path.USERS_USERID_BLOCK.replace("%s", encodeURIComponent(l.userId))
                                  , c = new ep({
                                    token: s,
                                    limit: a
                                });
                                o && o.length > 0 && c.add("user_ids", o),
                                i.get(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "createUserMetaData",
                    value: function(n, r) {
                        var i = this
                          , s = n.metaData;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_METADATA.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep({
                                    metadata: s
                                });
                                i.post(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "updateUserMetaData",
                    value: function(n, r) {
                        var i = this
                          , s = n.metaData
                          , a = n.upsert;
                        this.sb.ConnectionManager.ready(function(n, o) {
                            if (n)
                                r(n, null);
                            else {
                                var l = t.Path.USERS_USERID_METADATA.replace("%s", encodeURIComponent(o.userId))
                                  , u = new ep({
                                    metadata: s,
                                    upsert: a
                                });
                                i.put(l, u, r)
                            }
                        })
                    }
                }, {
                    key: "deleteUserMetaData",
                    value: function(n, r) {
                        var i = this
                          , s = n.metaDataKey;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_METADATA_KEY.replace("%s", encodeURIComponent(a.userId)).replace("%s", encodeURIComponent(s));
                                i.delete(o, null, r)
                            }
                        })
                    }
                }, {
                    key: "deleteAllUserMetaData",
                    value: function(n, r) {
                        var i = this;
                        this.sb.ConnectionManager.ready(function(n, s) {
                            if (n)
                                r(n, null);
                            else {
                                var a = t.Path.USERS_USERID_METADATA.replace("%s", encodeURIComponent(s.userId));
                                i.delete(a, null, r)
                            }
                        })
                    }
                }, {
                    key: "getMessageChangeLogs",
                    value: function(n, r) {
                        var i = this;
                        return eg(this.sb._iid, function(r) {
                            var s = n.channelUrl
                              , a = n.ts
                              , o = n.timestamp
                              , l = n.token
                              , u = n.isOpenChannel
                              , c = n.includeMetaArray
                              , d = n.includeReaction
                              , h = n.includeReactions
                              , f = n.includeReplies
                              , p = n.includeParentMessageText
                              , g = n.includeThreadInfo
                              , m = n.replyType
                              , y = n.includeParentMessageInfo;
                            i.sb.ConnectionManager.ready(function(n, _) {
                                if (n)
                                    r(n, null);
                                else {
                                    var v = u ? t.Path.OPENCHANNELS_CHANNELURL_MESSAGES_CHANGELOGS.replace("%s", encodeURIComponent(s)) : t.Path.GROUPCHANNELS_CHANNELURL_MESSAGES_CHANGELOGS.replace("%s", encodeURIComponent(s))
                                      , E = new ep;
                                    l && E.add("token", l),
                                    a && E.add("change_ts", a),
                                    o && E.add("change_ts", o),
                                    "boolean" == typeof c && E.add("with_sorted_meta_array", c),
                                    "boolean" == typeof h ? E.add("include_reactions", h) : E.add("include_reactions", "boolean" == typeof d && d),
                                    "boolean" == typeof g && E.add("include_thread_info", g),
                                    "string" == typeof m ? E.add("include_reply_type", m) : E.add("include_reply_type", "boolean" == typeof f && f ? i.cls.BaseMessage.ReplyType.ALL : i.cls.BaseMessage.ReplyType.NONE),
                                    "boolean" == typeof y ? E.add("include_parent_message_info", y) : E.add("include_parent_message_info", "boolean" == typeof p && p),
                                    i.get(v, E, r)
                                }
                            })
                        }, r)
                    }
                }, {
                    key: "getMyMutedInfo",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.userId
                          , o = n.isGroupChannel;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = o ? t.Path.GROUPCHANNELS_CHANNELURL_MUTE_USERID.replace("%s", encodeURIComponent(s)).replace("%s", encodeURIComponent(a)) : t.Path.OPENCHANNELS_CHANNELURL_MUTE_USERID.replace("%s", encodeURIComponent(s)).replace("%s", encodeURIComponent(a));
                                i.get(u, null, r)
                            }
                        })
                    }
                }, {
                    key: "loadBannedUserList",
                    value: function(n, r) {
                        var i = this
                          , s = n.token
                          , a = n.limit
                          , o = n.channelUrl
                          , l = n.isOpenChannel;
                        this.sb.ConnectionManager.ready(function(n, u) {
                            if (n)
                                r(n, null);
                            else {
                                var c = l ? t.Path.OPENCHANNELS_CHANNELURL_BAN.replace("%s", encodeURIComponent(o)) : t.Path.GROUPCHANNELS_CHANNELURL_BAN.replace("%s", encodeURIComponent(o))
                                  , d = new ep({
                                    token: s,
                                    limit: a
                                });
                                i.get(c, d, r)
                            }
                        })
                    }
                }, {
                    key: "loadMutedUserList",
                    value: function(n, r) {
                        var i = this
                          , s = n.token
                          , a = n.limit
                          , o = n.channelUrl
                          , l = n.isOpenChannel;
                        this.sb.ConnectionManager.ready(function(n, u) {
                            if (n)
                                r(n, null);
                            else {
                                var c = l ? t.Path.OPENCHANNELS_CHANNELURL_MUTE.replace("%s", encodeURIComponent(o)) : t.Path.GROUPCHANNELS_CHANNELURL_MUTE.replace("%s", encodeURIComponent(o))
                                  , d = new ep({
                                    token: s,
                                    limit: a
                                });
                                i.get(c, d, r)
                            }
                        })
                    }
                }, {
                    key: "getMessageList",
                    value: function(n, r) {
                        var i = this;
                        return eg(this.sb._iid, function(r) {
                            var s = n.channel
                              , a = n.token
                              , o = n.tokenType
                              , l = n.isInclusive
                              , u = n.prevResultSize
                              , c = void 0 === u ? 0 : u
                              , d = n.nextResultSize
                              , h = void 0 === d ? 0 : d
                              , f = n.shouldReverse
                              , p = n.messageType
                              , g = n.customType
                              , m = n.customTypes
                              , y = n.senderUserIds
                              , _ = n.includeMetaArray
                              , v = n.includeReaction
                              , E = n.includeReactions
                              , b = n.includeReplies
                              , C = n.includeParentMessageText
                              , S = n.includeThreadInfo
                              , A = n.replyType
                              , N = n.includeParentMessageInfo
                              , T = n.showSubchannelMessagesOnly
                              , I = n.rootMessageId
                              , O = n.parentMessageId;
                            i.sb.ConnectionManager.ready(function(n, u) {
                                if (n)
                                    r(n, null);
                                else {
                                    var d = s.isOpenChannel() ? t.Path.OPENCHANNELS_CHANNELURL_MESSAGES.replace("%s", s.url) : t.Path.GROUPCHANNELS_CHANNELURL_MESSAGES.replace("%s", s.url)
                                      , w = new ep({
                                        is_sdk: String(!0),
                                        prev_limit: String(c),
                                        next_limit: String(h),
                                        include: String(l),
                                        reverse: String(f)
                                    });
                                    "timestamp" === o ? w.add("message_ts", a) : "messageId" === o && w.add("message_id", String(a)),
                                    p && w.add("message_type", String(p)),
                                    Array.isArray(m) && (0 === m.length && ("string" == typeof g ? m.push(g) : m.push("*")),
                                    w.add("custom_types", m)),
                                    Array.isArray(y) && y.length > 0 && w.add("sender_ids", y),
                                    "boolean" == typeof _ && w.add("with_sorted_meta_array", _),
                                    "boolean" == typeof E ? w.add("include_reactions", E) : w.add("include_reactions", "boolean" == typeof v && v),
                                    "boolean" == typeof S && w.add("include_thread_info", S),
                                    "string" == typeof A ? w.add("include_reply_type", A) : w.add("include_reply_type", "boolean" == typeof b && b ? i.cls.BaseMessage.ReplyType.ALL : i.cls.BaseMessage.ReplyType.NONE),
                                    "boolean" == typeof N ? w.add("include_parent_message_info", N) : w.add("include_parent_message_info", "boolean" == typeof C && C),
                                    "boolean" == typeof T && s.isOpenChannel() && w.add("show_subchannel_messages_only", T),
                                    I && w.add("root_message_id", I),
                                    O && w.add("parent_message_id", O),
                                    i.get(d, w, r)
                                }
                            })
                        }, r)
                    }
                }, {
                    key: "checkMessageHugeGap",
                    value: function(n, r) {
                        var i = this;
                        return eg(this.sb._iid, function(r) {
                            var s = n.channelUrl;
                            n.channelType;
                            var a = n.messageType
                              , o = n.customTypes
                              , l = n.senderUserIds
                              , u = void 0 === l ? [] : l
                              , c = n.includeReactions
                              , d = n.includeMetaArray
                              , h = n.showSubchannelMessagesOnly
                              , f = n.threshold
                              , p = n.previous
                              , g = n.next
                              , m = "".concat(t.Path.GROUPCHANNELS_CHANNELURL_MESSAGES_GAP.replace("%s", encodeURIComponent(s)))
                              , y = new ep({
                                huge_gap_threshold: f,
                                prev_start_ts: p.from,
                                prev_end_ts: p.to,
                                prev_cache_count: p.cachedCount,
                                next_start_ts: g.from,
                                next_end_ts: g.to,
                                next_cache_count: g.cachedCount,
                                reverse: !0,
                                custom_types: void 0 === o ? ["*"] : o,
                                message_type: void 0 === a ? "" : a,
                                include_reactions: void 0 === c || c,
                                with_sorted_meta_array: void 0 !== d && d,
                                show_subchannel_messages_only: void 0 !== h && h
                            });
                            Array.isArray(u) && u.length > 0 && y.add("sender_ids", u),
                            i.get(m, y, r)
                        }, r)
                    }
                }, {
                    key: "translateUserMessage",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.messageId
                          , l = n.translationTargetLanguages;
                        this.sb.ConnectionManager.ready(function(n, u) {
                            if (n)
                                r(n, null);
                            else {
                                var c = a ? t.Path.OPENCHANNELS_CHANNELURL_MESSAGES_MESSAGEID_TRANSLATION.replace("%s", encodeURIComponent(s)).replace("%s", o) : t.Path.GROUPCHANNELS_CHANNELURL_MESSAGES_MESSAGEID_TRANSLATION.replace("%s", encodeURIComponent(s)).replace("%s", o)
                                  , d = new ep({
                                    target_langs: l
                                });
                                i.post(c, d, r)
                            }
                        })
                    }
                }, {
                    key: "getMessage",
                    value: function(n, r) {
                        var i = this
                          , s = n.channel
                          , a = n.messageId
                          , o = n.includeMetaArray
                          , l = n.includeReactions
                          , u = n.includeParentMessageText
                          , c = n.includeThreadInfo
                          , d = n.includeParentMessageInfo;
                        this.sb.ConnectionManager.ready(function(n, h) {
                            if (n)
                                r(n, null);
                            else {
                                var f = s.isOpenChannel() ? t.Path.OPENCHANNELS_CHANNELURL_MESSAGES_MESSAGEID.replace("%s", encodeURIComponent(s.url)).replace("%s", encodeURIComponent(a)) : t.Path.GROUPCHANNELS_CHANNELURL_MESSAGES_MESSAGEID.replace("%s", encodeURIComponent(s.url)).replace("%s", encodeURIComponent(a))
                                  , p = new ep({
                                    is_sdk: String(!0)
                                });
                                "boolean" == typeof o && p.add("with_sorted_meta_array", o),
                                "boolean" == typeof l && p.add("include_reactions", l),
                                "boolean" == typeof c && p.add("include_thread_info", c),
                                "boolean" == typeof d ? p.add("include_parent_message_info", d) : p.add("include_parent_message_info", "boolean" == typeof u && u),
                                i.get(f, p, r)
                            }
                        })
                    }
                }, {
                    key: "deleteMessage",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.messageId;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = a ? t.Path.OPENCHANNELS_CHANNELURL_MESSAGES_MESSAGEID.replace("%s", encodeURIComponent(s)).replace("%s", encodeURIComponent(o)) : t.Path.GROUPCHANNELS_CHANNELURL_MESSAGES_MESSAGEID.replace("%s", encodeURIComponent(s)).replace("%s", encodeURIComponent(o));
                                i.delete(u, null, r)
                            }
                        })
                    }
                }, {
                    key: "muteUser",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.userId
                          , o = n.description
                          , l = n.seconds
                          , u = n.isGroupChannel;
                        this.sb.ConnectionManager.ready(function(n, c) {
                            if (n)
                                r(n, null);
                            else {
                                var d = u ? t.Path.GROUPCHANNELS_CHANNELURL_MUTE.replace("%s", encodeURIComponent(s)) : t.Path.OPENCHANNELS_CHANNELURL_MUTE.replace("%s", encodeURIComponent(s))
                                  , h = new ep({
                                    user_id: a
                                });
                                l && (l > 0 || -1 !== l) && h.add("seconds", l),
                                o && h.add("description", o),
                                i.post(d, h, r)
                            }
                        })
                    }
                }, {
                    key: "unmuteUser",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.userId
                          , o = n.isGroupChannel;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = o ? t.Path.GROUPCHANNELS_CHANNELURL_MUTE_USERID.replace("%s", encodeURIComponent(s)).replace("%s", encodeURIComponent(a)) : t.Path.OPENCHANNELS_CHANNELURL_MUTE_USERID.replace("%s", encodeURIComponent(s)).replace("%s", encodeURIComponent(a));
                                i.delete(u, null, r)
                            }
                        })
                    }
                }, {
                    key: "banUser",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.userId
                          , o = n.description
                          , l = n.seconds
                          , u = n.isGroupChannel;
                        this.sb.ConnectionManager.ready(function(n, c) {
                            if (n)
                                r(n, null);
                            else {
                                var d = u ? t.Path.GROUPCHANNELS_CHANNELURL_BAN.replace("%s", encodeURIComponent(s)) : t.Path.OPENCHANNELS_CHANNELURL_BAN.replace("%s", encodeURIComponent(s))
                                  , h = new ep({
                                    user_id: a
                                });
                                o && h.add("description", o),
                                h.add("seconds", String(l)),
                                i.post(d, h, r)
                            }
                        })
                    }
                }, {
                    key: "unbanUser",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.userId
                          , o = n.isGroupChannel;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = o ? t.Path.GROUPCHANNELS_CHANNELURL_BAN_USERID.replace("%s", encodeURIComponent(s)).replace("%s", encodeURIComponent(a)) : t.Path.OPENCHANNELS_CHANNELURL_BAN_USERID.replace("%s", encodeURIComponent(s)).replace("%s", encodeURIComponent(a));
                                i.delete(u, null, r)
                            }
                        })
                    }
                }, {
                    key: "getMetaCounters",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.keys;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = a ? t.Path.OPENCHANNELS_CHANNELURL_METACOUNTER.replace("%s", encodeURIComponent(s)) : t.Path.GROUPCHANNELS_CHANNELURL_METACOUNTER.replace("%s", encodeURIComponent(s))
                                  , c = new ep({
                                    keys: o
                                });
                                i.get(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "createMetaCounters",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.metaCounter;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = a ? t.Path.OPENCHANNELS_CHANNELURL_METACOUNTER.replace("%s", encodeURIComponent(s)) : t.Path.GROUPCHANNELS_CHANNELURL_METACOUNTER.replace("%s", encodeURIComponent(s))
                                  , c = new ep({
                                    metacounter: o
                                });
                                i.post(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "updateMetaCounters",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.metaCounter
                          , l = n.upsert
                          , u = n.mode;
                        this.sb.ConnectionManager.ready(function(n, c) {
                            if (n)
                                r(n, null);
                            else {
                                var d = a ? t.Path.OPENCHANNELS_CHANNELURL_METACOUNTER.replace("%s", encodeURIComponent(s)) : t.Path.GROUPCHANNELS_CHANNELURL_METACOUNTER.replace("%s", encodeURIComponent(s))
                                  , h = new ep({
                                    metacounter: o,
                                    upsert: l,
                                    mode: u
                                });
                                i.put(d, h, r)
                            }
                        })
                    }
                }, {
                    key: "deleteMetaCounter",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.key;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = a ? t.Path.OPENCHANNELS_CHANNELURL_METACOUNTER_KEY.replace("%s", encodeURIComponent(s)).replace("%s", o) : t.Path.GROUPCHANNELS_CHANNELURL_METACOUNTER_KEY.replace("%s", encodeURIComponent(s)).replace("%s", o);
                                i.delete(u, null, r)
                            }
                        })
                    }
                }, {
                    key: "deleteAllMetaCounters",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel;
                        this.sb.ConnectionManager.ready(function(n, o) {
                            if (n)
                                r(n, null);
                            else {
                                var l = a ? t.Path.OPENCHANNELS_CHANNELURL_METACOUNTER.replace("%s", encodeURIComponent(s)) : t.Path.GROUPCHANNELS_CHANNELURL_METACOUNTER.replace("%s", encodeURIComponent(s));
                                i.delete(l, null, r)
                            }
                        })
                    }
                }, {
                    key: "getMetaData",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.keys;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = a ? t.Path.OPENCHANNELS_CHANNELURL_METADATA.replace("%s", encodeURIComponent(s)) : t.Path.GROUPCHANNELS_CHANNELURL_METADATA.replace("%s", encodeURIComponent(s))
                                  , c = new ep({
                                    keys: o,
                                    include_ts: !0
                                });
                                i.get(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "createMetaData",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.metaData;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = a ? t.Path.OPENCHANNELS_CHANNELURL_METADATA.replace("%s", encodeURIComponent(s)) : t.Path.GROUPCHANNELS_CHANNELURL_METADATA.replace("%s", encodeURIComponent(s))
                                  , c = new ep({
                                    metadata: o,
                                    include_ts: !0
                                });
                                i.post(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "updateMetaData",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.metaData
                          , l = n.upsert;
                        this.sb.ConnectionManager.ready(function(n, u) {
                            if (n)
                                r(n, null);
                            else {
                                var c = a ? t.Path.OPENCHANNELS_CHANNELURL_METADATA.replace("%s", encodeURIComponent(s)) : t.Path.GROUPCHANNELS_CHANNELURL_METADATA.replace("%s", encodeURIComponent(s))
                                  , d = new ep({
                                    metadata: o,
                                    upsert: l,
                                    include_ts: !0
                                });
                                i.put(c, d, r)
                            }
                        })
                    }
                }, {
                    key: "deleteMetaData",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.key;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = a ? t.Path.OPENCHANNELS_CHANNELURL_METADATA_KEY.replace("%s", encodeURIComponent(s)).replace("%s", o) : t.Path.GROUPCHANNELS_CHANNELURL_METADATA_KEY.replace("%s", encodeURIComponent(s)).replace("%s", o)
                                  , c = new ep({
                                    include_ts: !0
                                });
                                i.delete(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "deleteAllMetaData",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel;
                        this.sb.ConnectionManager.ready(function(n, o) {
                            if (n)
                                r(n, null);
                            else {
                                var l = a ? t.Path.OPENCHANNELS_CHANNELURL_METADATA.replace("%s", encodeURIComponent(s)) : t.Path.GROUPCHANNELS_CHANNELURL_METADATA.replace("%s", encodeURIComponent(s))
                                  , u = new ep({
                                    include_ts: !0
                                });
                                i.delete(l, u, r)
                            }
                        })
                    }
                }, {
                    key: "loadOperatorList",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.token
                          , l = n.limit;
                        this.sb.ConnectionManager.ready(function(n, u) {
                            if (n)
                                r(n, null);
                            else {
                                var c = a ? t.Path.OPENCHANNELS_OPERATORS.replace("%s", encodeURIComponent(s)) : t.Path.GROUPCHANNELS_OPERATORS.replace("%s", encodeURIComponent(s))
                                  , d = new ep({
                                    token: o,
                                    limit: l
                                });
                                i.get(c, d, r)
                            }
                        })
                    }
                }, {
                    key: "getOpenChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.internalCall;
                        this.sb.ConnectionManager.ready(function(n, o) {
                            if (n)
                                r(n, null);
                            else {
                                var l = t.Path.OPENCHANNELS_CHANNELURL.replace("%s", encodeURIComponent(s))
                                  , u = new ep({});
                                u.internal = a === L.INTERNAL_CALL,
                                i.get(l, u, r)
                            }
                        })
                    }
                }, {
                    key: "loadOpenChannelList",
                    value: function(n, r) {
                        var i = this
                          , s = n.token
                          , a = n.limit
                          , o = n.nameKeyword
                          , l = n.urlKeyword
                          , u = n.customTypes
                          , c = n.includeFrozen
                          , d = n.includeMetaData;
                        this.sb.ConnectionManager.ready(function(n, h) {
                            if (n)
                                r(n, null);
                            else {
                                var f = t.Path.OPENCHANNELS
                                  , p = new ep({
                                    token: s,
                                    limit: a
                                });
                                o && p.add("name_contains", o),
                                l && p.add("url_contains", l),
                                u && u.length > 0 && p.add("custom_types", u),
                                "boolean" == typeof c && p.add("show_frozen", c),
                                "boolean" == typeof d && p.add("show_metadata", d),
                                i.get(f, p, r)
                            }
                        })
                    }
                }, {
                    key: "loadParticipantList",
                    value: function(n, r) {
                        var i = this
                          , s = n.token
                          , a = n.limit
                          , o = n.channelUrl;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = t.Path.OPENCHANNELS_CHANNELURL_PARTICIPANTS.replace("%s", encodeURIComponent(o))
                                  , c = new ep({
                                    token: s,
                                    limit: a
                                });
                                i.get(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "createOpenChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.name
                          , a = n.coverUrlOrImage
                          , o = n.data
                          , l = n.operatorUserIds
                          , u = n.customType
                          , c = n.channelUrl;
                        this.sb.ConnectionManager.ready(function(n, d) {
                            if (n)
                                r(n, null);
                            else {
                                var h = t.Path.OPENCHANNELS
                                  , f = new ep;
                                "string" == typeof a && f.add("cover_url", a),
                                ef.isFile(a) && f.add("cover_file", a),
                                null !== c && "string" == typeof c && f.add("channel_url", c),
                                null !== s && "string" == typeof s && f.add("name", s),
                                o && f.add("data", o),
                                l && (Array.isArray(l) ? f.add("operators", l) : f.add("operators", [l])),
                                u && f.add("custom_type", u),
                                i.post(h, f, r)
                            }
                        })
                    }
                }, {
                    key: "updateOpenChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.name
                          , o = n.coverUrlOrImage
                          , l = n.data
                          , u = n.operatorUserIds
                          , c = n.customType;
                        this.sb.ConnectionManager.ready(function(n, d) {
                            if (n)
                                r(n, null);
                            else {
                                var h = t.Path.OPENCHANNELS_CHANNELURL.replace("%s", encodeURIComponent(s))
                                  , f = new ep;
                                "string" == typeof o && f.add("cover_url", o),
                                ef.isFile(o) && f.add("cover_file", o, o.name),
                                null !== a && "string" == typeof a && f.add("name", a),
                                null !== l && "string" == typeof l && f.add("data", l),
                                null !== u && (Array.isArray(u) ? f.add("operator_ids", u) : f.add("operator_ids", [u])),
                                null !== c && "string" == typeof c && f.add("custom_type", c),
                                i.put(h, f, r)
                            }
                        })
                    }
                }, {
                    key: "deleteOpenChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.OPENCHANNELS_CHANNELURL.replace("%s", encodeURIComponent(s));
                                i.delete(o, null, r)
                            }
                        })
                    }
                }, {
                    key: "getGroupChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.showMember
                          , o = n.internalCall;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = t.Path.GROUPCHANNELS_CHANNELURL.replace("%s", encodeURIComponent(s))
                                  , c = new ep({
                                    show_member: a,
                                    show_read_receipt: !0,
                                    show_delivery_receipt: !0
                                });
                                c.internal = o === L.INTERNAL_CALL,
                                i.get(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "loadGroupChannelList",
                    value: function(n, r) {
                        var i = this
                          , s = n.token
                          , a = n.limit
                          , o = n.includeEmpty
                          , l = n.order
                          , u = n.userIdsFilter
                          , c = n.nicknameContainsFilter
                          , d = n.nicknameStartsWithFilter
                          , h = n.nicknameExactMatchFilter
                          , f = n.channelNameContainsFilter
                          , p = n.channelUrlsFilter
                          , g = n.customTypesFilter
                          , m = n.customTypeStartsWithFilter
                          , y = n.memberStateFilter
                          , _ = n.superChannelFilter
                          , v = n.publicChannelFilter
                          , E = n.unreadChannelFilter
                          , b = n.metadataOrderKeyFilter
                          , C = n.metadataKey
                          , S = n.metadataValues
                          , A = n.metadataValueStartsWith
                          , N = n.hiddenChannelFilter
                          , T = n.searchFilter
                          , I = n.includeFrozen
                          , O = n.includeMetaData;
                        return eg(this.sb._iid, function(n) {
                            i.sb.ConnectionManager.ready(function(r, w) {
                                if (r)
                                    n(r, null);
                                else {
                                    var k = t.Path.MYGROUPCHANNELS.replace("%s", encodeURIComponent(w.userId))
                                      , U = new ep({
                                        token: s,
                                        limit: a,
                                        order: l,
                                        show_member: !0,
                                        show_read_receipt: !0,
                                        show_delivery_receipt: !0,
                                        show_empty: String(o),
                                        member_state_filter: y
                                    });
                                    g && g.length > 0 && U.add("custom_types", g),
                                    c && U.add("members_nickname_contains", c),
                                    d && U.add("members_nickname_startswith", d),
                                    h && U.add("members_nickname", h),
                                    f && U.add("name_contains", f),
                                    T && T.hasOwnProperty("search_query") && T.hasOwnProperty("search_fields") && (U.add("search_query", T.search_query),
                                    U.add("search_fields", T.search_fields)),
                                    u && u.userIds && u.userIds.length > 0 && (u.includeMode ? (U.add("members_include_in", u.userIds),
                                    U.add("query_type", u.queryType.toUpperCase())) : U.add("members_exactly_in", u.userIds)),
                                    p && p.length > 0 && U.add("channel_urls", p),
                                    U.add("super_mode", _),
                                    U.add("public_mode", v),
                                    U.add("unread_filter", E),
                                    b && U.add("metadata_order_key", b),
                                    C && U.add("metadata_key", C),
                                    S && S.length > 0 && U.add("metadata_values", S),
                                    A && U.add("metadata_value_startswith", A),
                                    m && U.add("custom_type_startswith", m),
                                    N && U.add("hidden_mode", N),
                                    "boolean" == typeof I && U.add("show_frozen", I),
                                    "boolean" == typeof O && U.add("show_metadata", O),
                                    i.get(k, U, n)
                                }
                            })
                        }, r)
                    }
                }, {
                    key: "loadPublicGroupChannelList",
                    value: function(n, r) {
                        var i = this
                          , s = n.token
                          , a = n.limit
                          , o = n.includeEmpty
                          , l = n.order
                          , u = n.channelNameContainsFilter
                          , c = n.channelUrlsFilter
                          , d = n.customTypesFilter
                          , h = n.customTypeStartsWithFilter
                          , f = n.superChannelFilter
                          , p = n.membershipFilter
                          , g = n.metadataOrderKeyFilter
                          , m = n.metadataKey
                          , y = n.metadataValues
                          , _ = n.metadataValueStartsWith
                          , v = n.includeFrozen
                          , E = n.includeMetaData;
                        this.sb.ConnectionManager.ready(function(n, b) {
                            if (n)
                                r(n, null);
                            else {
                                var C = i.cls.GroupChannel
                                  , S = t.Path.GROUPCHANNELS
                                  , A = new ep({
                                    token: s,
                                    limit: a,
                                    order: l,
                                    show_member: !0,
                                    show_read_receipt: !0,
                                    show_delivery_receipt: !0,
                                    show_empty: String(o),
                                    public_mode: C.PublicChannelFilter.PUBLIC,
                                    public_membership_mode: p
                                });
                                d && d.length > 0 && A.add("custom_types", d),
                                u && A.add("name_contains", u),
                                c && c.length > 0 && A.add("channel_urls", c),
                                A.add("super_mode", f),
                                g && A.add("metadata_order_key", g),
                                m && A.add("metadata_key", m),
                                y && y.length > 0 && A.add("metadata_values", y),
                                _ && A.add("metadata_value_startswith", _),
                                h && A.add("custom_type_startswith", h),
                                "boolean" == typeof v && A.add("show_frozen", v),
                                "boolean" == typeof E && A.add("show_metadata", E),
                                i.get(S, A, r)
                            }
                        })
                    }
                }, {
                    key: "createGroupChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.isDistinct
                          , a = n.isSuper
                          , o = n.isBroadcast
                          , l = n.isPublic
                          , u = n.channelUrl
                          , c = n.isDiscoverable
                          , d = n.isStrict
                          , h = n.name
                          , f = n.data
                          , p = n.customType
                          , g = n.coverUrl
                          , m = n.coverImage
                          , y = n.accessCode
                          , _ = n.isEphemeral
                          , v = n._invitedUserIds
                          , E = void 0 === v ? [] : v
                          , b = n.operatorUserIds
                          , C = n.messageSurvivalSeconds;
                        this.sb.ConnectionManager.ready(function(n, v) {
                            if (n)
                                r(n, null);
                            else {
                                var S = t.Path.GROUPCHANNELS
                                  , A = new ep({
                                    user_ids: [v.userId].concat(U(E)).filter(function(t, n, r) {
                                        return n === r.indexOf(t)
                                    })
                                });
                                null !== g && "string" == typeof g && A.add("cover_url", g),
                                ef.isFile(m) && A.add("cover_file", m, m.name),
                                null !== u && A.add("channel_url", u),
                                null !== s && A.add("is_distinct", s),
                                null !== a && A.add("is_super", a),
                                null !== o && A.add("is_broadcast", o),
                                null !== l && A.add("is_public", l),
                                null !== c && A.add("is_discoverable", c),
                                null !== d && A.add("strict", d),
                                null !== _ && A.add("is_ephemeral", _),
                                y && A.add("access_code", y),
                                null !== h && "string" == typeof h && A.add("name", h),
                                f && A.add("data", f),
                                p && A.add("custom_type", p),
                                Array.isArray(b) && b.length > 0 && A.add("operator_ids", b),
                                null !== C && C > -1 && A.add("message_survival_seconds", C),
                                i.post(S, A, r)
                            }
                        })
                    }
                }, {
                    key: "updateGroupChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.isDistinct
                          , a = n.isPublic
                          , o = n.channelUrl
                          , l = n.isDiscoverable
                          , u = n.name
                          , c = n.data
                          , d = n.customType
                          , h = n.coverUrl
                          , f = n.coverImage
                          , p = n.accessCode
                          , g = n.operatorUserIds
                          , m = n.messageSurvivalSeconds;
                        this.sb.ConnectionManager.ready(function(n, y) {
                            if (n)
                                r(n, null);
                            else {
                                var _ = t.Path.GROUPCHANNELS_CHANNELURL.replace("%s", encodeURIComponent(o))
                                  , v = new ep;
                                null !== s && v.add("is_distinct", s),
                                null !== a && v.add("is_public", a),
                                null !== l && v.add("is_discoverable", l),
                                null !== p && v.add("access_code", p),
                                null !== h && "string" == typeof h && v.add("cover_url", h),
                                ef.isFile(f) && v.add("cover_file", f, f.name),
                                null !== u && "string" == typeof u && v.add("name", u),
                                null !== c && "string" == typeof c && v.add("data", c),
                                null !== d && "string" == typeof d && v.add("custom_type", d),
                                null !== g && (Array.isArray(g) ? v.add("operator_ids", g) : g && v.add("operator_ids", [g])),
                                null !== m && m > -1 && v.add("message_survival_seconds", m),
                                i.put(_, v, r)
                            }
                        })
                    }
                }, {
                    key: "addOperators",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = void 0 !== a && a
                          , l = n.operatorUserIds;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (!n) {
                                var u = (o ? t.Path.OPENCHANNELS_CHANNELURL_OPERATORS : t.Path.GROUPCHANNELS_CHANNELURL_OPERATORS).replace("%s", encodeURIComponent(s))
                                  , c = new ep({
                                    operator_ids: l
                                });
                                i.post(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "removeOperators",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = void 0 !== a && a
                          , l = n.operatorUserIds;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (!n) {
                                var u = (o ? t.Path.OPENCHANNELS_CHANNELURL_OPERATORS : t.Path.GROUPCHANNELS_CHANNELURL_OPERATORS).replace("%s", encodeURIComponent(s))
                                  , c = new ep({
                                    operator_ids: l
                                });
                                i.delete(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "inviteToGroupChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.userIds;
                        this.sb.ConnectionManager.ready(function(n, o) {
                            if (n)
                                r(n, null);
                            else {
                                var l = t.Path.GROUPCHANNELS_CHANNELURL_INVITE.replace("%s", encodeURIComponent(s))
                                  , u = new ep({
                                    user_ids: a
                                });
                                i.post(l, u, r)
                            }
                        })
                    }
                }, {
                    key: "acceptInvitation",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.accessCode;
                        this.sb.ConnectionManager.ready(function(n, o) {
                            if (n)
                                r(n, null);
                            else {
                                var l = t.Path.GROUPCHANNELS_CHANNELURL_ACCEPT_INVITATION.replace("%s", encodeURIComponent(s))
                                  , u = new ep({
                                    user_id: o.userId
                                });
                                a && u.add("access_code", a),
                                i.put(l, u, r)
                            }
                        })
                    }
                }, {
                    key: "declineInvitation",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.GROUPCHANNELS_CHANNELURL_DECLINE_INVITATION.replace("%s", encodeURIComponent(s))
                                  , l = new ep({
                                    user_id: a.userId
                                });
                                i.put(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "joinGroupChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.accessCode;
                        this.sb.ConnectionManager.ready(function(n, o) {
                            if (n)
                                r(n, null);
                            else {
                                var l = t.Path.GROUPCHANNELS_CHANNELURL_JOIN.replace("%s", encodeURIComponent(s))
                                  , u = new ep({
                                    user_id: o.userId
                                });
                                a && u.add("access_code", a),
                                i.put(l, u, r)
                            }
                        })
                    }
                }, {
                    key: "leaveGroupChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.GROUPCHANNELS_CHANNELURL_LEAVE.replace("%s", encodeURIComponent(s))
                                  , l = new ep({
                                    user_id: a.userId
                                });
                                i.put(o, l, r)
                            }
                        })
                    }
                }, {
                    key: "hideGroupChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.hidePreviousMessages
                          , o = n.allowAutoUnhide;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = t.Path.GROUPCHANNELS_CHANNELURL_HIDE.replace("%s", encodeURIComponent(s))
                                  , c = new ep({
                                    user_id: l.userId,
                                    hide_previous_messages: a,
                                    allow_auto_unhide: o
                                });
                                i.put(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "unhideGroupChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.GROUPCHANNELS_CHANNELURL_HIDE.replace("%s", encodeURIComponent(s));
                                i.delete(o, null, r)
                            }
                        })
                    }
                }, {
                    key: "freeze",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isGroupChannel
                          , o = n.freezing;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = a ? t.Path.GROUPCHANNELS_CHANNELURL_FREEZE.replace("%s", encodeURIComponent(s)) : t.Path.OPENCHANNELS_CHANNELURL_FREEZE.replace("%s", encodeURIComponent(s))
                                  , c = new ep({
                                    freeze: o
                                });
                                i.put(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "deleteGroupChannel",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.GROUPCHANNELS_CHANNELURL.replace("%s", encodeURIComponent(s));
                                i.delete(o, null, r)
                            }
                        })
                    }
                }, {
                    key: "loadMemberList",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.token
                          , o = n.limit
                          , l = n.mutedMemberFilter
                          , u = n.order
                          , c = n.memberStateFilter
                          , d = n.nicknameStartsWithFilter;
                        this.sb.ConnectionManager.ready(function(n, h) {
                            if (n)
                                r(n, null);
                            else {
                                var f = t.Path.GROUPCHANNELS_MEMBERS.replace("%s", encodeURIComponent(s))
                                  , p = new ep({
                                    token: a,
                                    limit: o,
                                    order: u.toLowerCase(),
                                    muted_member_filter: l.toLowerCase(),
                                    member_state_filter: c,
                                    show_member_is_muted: !0,
                                    show_read_receipt: !0,
                                    show_delivery_receipt: !0
                                });
                                d && p.add("nickname_startswith", d),
                                i.get(f, p, r)
                            }
                        })
                    }
                }, {
                    key: "report",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.reportCategory
                          , l = n.reportingUserId
                          , u = n.reportDescription;
                        this.sb.ConnectionManager.ready(function(n, c) {
                            if (n)
                                r(n, null);
                            else {
                                var d = t.Path.REPORT_CHANNELS.replace("%s", encodeURIComponent(a ? "open_channels" : "group_channels")).replace("%s", encodeURIComponent(s))
                                  , h = new ep({
                                    report_category: o
                                });
                                null != l && h.add("reporting_user_id", l),
                                null != u && h.add("report_description", u),
                                i.post(d, h, r)
                            }
                        })
                    }
                }, {
                    key: "reportUser",
                    value: function(n, r) {
                        var i = this
                          , s = n.offendingUserId
                          , a = n.channelUrl
                          , o = n.isOpenChannel
                          , l = n.reportCategory
                          , u = n.reportingUserId
                          , c = n.reportDescription;
                        this.sb.ConnectionManager.ready(function(n, d) {
                            if (n)
                                r(n, null);
                            else {
                                var h = t.Path.REPORT_USERS.replace("%s", encodeURIComponent(s))
                                  , f = new ep({
                                    channel_url: a,
                                    channel_type: o ? "open_channels" : "group_channels",
                                    report_category: l
                                });
                                null != u && f.add("reporting_user_id", u),
                                null != c && f.add("report_description", c),
                                i.post(h, f, r)
                            }
                        })
                    }
                }, {
                    key: "reportMessage",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.messageId
                          , l = n.reportCategory
                          , u = n.reportingUserId
                          , c = n.reportDescription
                          , d = n.offendingUserId;
                        this.sb.ConnectionManager.ready(function(n, h) {
                            if (n)
                                r(n, null);
                            else {
                                var f = t.Path.REPORT_MESSAGES.replace("%s", encodeURIComponent(a ? "open_channels" : "group_channels")).replace("%s", encodeURIComponent(s)).replace("%s", encodeURIComponent(o))
                                  , p = new ep({
                                    report_category: l,
                                    offending_user_id: d
                                });
                                null != u && p.add("reporting_user_id", u),
                                null != c && p.add("report_description", c),
                                i.post(f, p, r)
                            }
                        })
                    }
                }, {
                    key: "sendUserMessage",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.isOpenChannel
                          , o = n.message
                          , l = n.data
                          , u = n.customType
                          , c = n.translationTargetLanguages
                          , d = n.metaArrays
                          , h = n.mentionType
                          , f = n.mentionedUserIds
                          , p = n.mentionedMessageTemplate
                          , g = n.pushNotificationDeliveryOption
                          , m = n.rootMessageId
                          , y = n.parentMessageId
                          , _ = n.appleCriticalAlertOptions
                          , v = n.isReplyToChannel;
                        this.sb.ConnectionManager.ready(function(n, E) {
                            if (n)
                                r(n, null);
                            else {
                                var b = i.cls.FileMessageParams
                                  , C = a ? t.Path.OPENCHANNELS_CHANNELURL_MESSAGES.replace("%s", encodeURIComponent(s)) : t.Path.GROUPCHANNELS_CHANNELURL_MESSAGES.replace("%s", encodeURIComponent(s))
                                  , S = new ep({
                                    message_type: "MESG",
                                    user_id: E.userId,
                                    message: o,
                                    mention_type: h,
                                    mentioned_user_ids: []
                                });
                                null != l && S.add("data", l),
                                null != u && S.add("custom_type", u),
                                c && S.add("translation_target_langs", c),
                                d && d.length > 0 && S.add("sorted_metaarray", d.map(function(t) {
                                    return t.encode()
                                })),
                                h === i.cls.BaseMessageParams.MentionType.CHANNEL ? S.add("mentioned_user_ids", []) : Array.isArray(f) && f.length > 0 && S.add("mentioned_user_ids", f),
                                p && S.add("mentioned_message_template", p),
                                g && g !== b.PushNotificationDeliveryOption.DEFAULT && S.add("push_option", g),
                                m && S.add("root_message_id", m),
                                y && S.add("parent_message_id", y),
                                _ && S.add("apple_critical_alert_options", _.serialize()),
                                v && S.add("reply_to_channel", v),
                                i.post(C, S, r)
                            }
                        })
                    }
                }, {
                    key: "sendFileMessage",
                    value: function(n, r) {
                        var i = this
                          , s = n.reqId
                          , a = n.channelUrl
                          , o = n.isOpenChannel
                          , l = n.fileUrl
                          , u = n.fileName
                          , c = n.fileSize
                          , d = n.fileType
                          , h = n.data
                          , f = n.customType
                          , p = n.thumbnailSizes
                          , g = n.requireAuth
                          , m = n.metaArrays
                          , y = n.mentionType
                          , _ = n.mentionedUserIds
                          , v = n.pushNotificationDeliveryOption
                          , E = n.rootMessageId
                          , b = n.parentMessageId
                          , C = n.appleCriticalAlertOptions
                          , S = n.isReplyToChannel;
                        this.sb.ConnectionManager.ready(function(n, A) {
                            if (n)
                                r(n, null);
                            else {
                                var N = i.cls.FileMessageParams
                                  , T = o ? t.Path.OPENCHANNELS_CHANNELURL_MESSAGES.replace("%s", encodeURIComponent(a)) : t.Path.GROUPCHANNELS_CHANNELURL_MESSAGES.replace("%s", encodeURIComponent(a))
                                  , I = new ep({
                                    message_type: "FILE",
                                    user_id: A.userId,
                                    url: l,
                                    mention_type: y,
                                    mentioned_user_ids: [],
                                    req_id: s
                                });
                                null != u && I.add("file_name", u),
                                null != c && I.add("file_size", c),
                                null != d && I.add("file_type", d),
                                null != h && I.add("custom_field", h),
                                null != f && I.add("custom_type", f),
                                p && I.add("thumbnails", p),
                                g && I.add("require_auth", g),
                                m && m.length > 0 && I.add("sorted_metaarray", m.map(function(t) {
                                    return t.encode()
                                })),
                                y === i.cls.BaseMessageParams.MentionType.CHANNEL ? I.add("mentioned_user_ids", []) : Array.isArray(_) && _.length > 0 && I.add("mentioned_user_ids", _),
                                v && v !== N.PushNotificationDeliveryOption.DEFAULT && I.add("push_option", v),
                                E && I.add("root_message_id", E),
                                b && I.add("parent_message_id", b),
                                C && I.add("apple_critical_alert_options", C.serialize()),
                                S && I.add("reply_to_channel", S),
                                i.post(T, I, r)
                            }
                        })
                    }
                }, {
                    key: "uploadFile",
                    value: function(n, r) {
                        var i = this
                          , s = n.file
                          , a = n.thumbnailSizes
                          , o = n.channelUrl
                          , l = n.progressHandler
                          , u = n.reqId;
                        this.sb.ConnectionManager.ready(function(n, c) {
                            if (n)
                                r(n, null);
                            else {
                                var d = x.get(i.sb._iid).container.appInfo;
                                if (d) {
                                    if ("number" == typeof s.size || s.size || (s.size = 0),
                                    "number" == typeof s.size) {
                                        if (s.size <= d.uploadSizeLimit) {
                                            var h = t.Path.STORAGE_FILE
                                              , f = new ep;
                                            if (f.add("file", s, s.name),
                                            o && "string" == typeof o && f.add("channel_url", o),
                                            a)
                                                for (var p = 0; p < a.length; p++)
                                                    f.add("thumbnail" + (p + 1), a[p].maxWidth + "," + a[p].maxHeight);
                                            f.upload.reqId = u,
                                            f.upload.deleteRequest = function() {
                                                var t = i.cls.FileMessageQueue;
                                                t.uploadRequest[u] && delete t.uploadRequest[u]
                                            }
                                            ,
                                            f.upload.progressHandler = function(t) {
                                                l && "function" == typeof l && l(t, u)
                                            }
                                            ,
                                            i.post(h, f, r)
                                        } else
                                            r(new z("The file size exceeded the upload limit: ".concat(d.uploadSizeLimit),z.FILE_SIZE_LIMIT_EXCEEDED), null)
                                    } else
                                        r(new z("Invalid file size: ".concat(s.size),z.INVALID_PARAMETER), null)
                                } else
                                    r(new z("Connection should be made first.",z.CONNECTION_REQUIRED), null)
                            }
                        })
                    }
                }, {
                    key: "registerScheduledUserMessage",
                    value: function(n, r) {
                        var i = this
                          , s = n.groupChannelParams
                          , a = n.channelUrl
                          , o = n.isOpenChannel;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = o ? t.Path.OPENCHANNELS_CHANNELURL_SCHEDULED_MESSAGES.replace("%s", encodeURIComponent(a)) : t.Path.GROUPCHANNELS_CHANNELURL_SCHEDULED_MESSAGES.replace("%s", encodeURIComponent(a))
                                  , c = new ep({
                                    scheduled_dt: s._getScheduleString(),
                                    user_id: l.userId,
                                    message: s.message,
                                    data: s.data
                                });
                                s.customType && c.add("custom_type", s.customType),
                                s.metaArrayKeys && Object.keys(s.metaArrayKeys).length > 0 && c.add("metaarray", s.metaArrayKeys),
                                s.mentionType && c.add("mention_type", s._mentionType),
                                s._mentionType === i.cls.BaseMessageParams.MentionType.CHANNEL ? c.add("mentioned_user_ids", []) : Array.isArray(s._mentionedUserIds) && s._mentionedUserIds.length > 0 && c.add("mentioned_user_ids", s._mentionedUserIds),
                                s.translationTargetLanguages && s.translationTargetLanguages.length > 0 && c.add("translation_target_langs", s.translationTargetLanguages),
                                s.pushNotificationDeliveryOption && s.pushNotificationDeliveryOption !== i.cls.BaseMessageParams.PushNotificationDeliveryOption.DEFAULT && c.add("push_option", s.pushNotificationDeliveryOption),
                                s.appleCriticalAlertOptions && c.add("apple_critical_alert_options", s.appleCriticalAlertOptions.serialize()),
                                i.post(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "getMyPushTriggerOption",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_PUSHPREFERENCE_CHANNELURL.replace("%s", encodeURIComponent(a.userId)).replace("%s", encodeURIComponent(s));
                                i.get(o, null, r)
                            }
                        })
                    }
                }, {
                    key: "setMyPushTriggerOption",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.pushTriggerOption
                          , o = n.enable;
                        this.sb.ConnectionManager.ready(function(n, l) {
                            if (n)
                                r(n, null);
                            else {
                                var u = t.Path.USERS_USERID_PUSHPREFERENCE_CHANNELURL.replace("%s", encodeURIComponent(l.userId)).replace("%s", encodeURIComponent(s))
                                  , c = new ep;
                                a && c.add("push_trigger_option", a),
                                "boolean" == typeof o && c.add("enable", o),
                                i.put(u, c, r)
                            }
                        })
                    }
                }, {
                    key: "setMyCountPreference",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl
                          , a = n.countPreference;
                        this.sb.ConnectionManager.ready(function(n, o) {
                            if (n)
                                r(n, null);
                            else {
                                var l = t.Path.USERS_COUNT_PREFERENCE.replace("%s", encodeURIComponent(o.userId)).replace("%s", encodeURIComponent(s))
                                  , u = new ep({
                                    count_preference: a
                                });
                                i.put(l, u, r)
                            }
                        })
                    }
                }, {
                    key: "resetMyHistory",
                    value: function(n, r) {
                        var i = this
                          , s = n.channelUrl;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.GROUPCHANNELS_RESET_USER_HISTORY.replace("%s", encodeURIComponent(s));
                                i.put(o, null, r)
                            }
                        })
                    }
                }, {
                    key: "addReaction",
                    value: function(n, r) {
                        var i = this
                          , s = n.isGroupChannel
                          , a = n.channelUrl
                          , o = n.messageId
                          , l = n.key;
                        this.sb.ConnectionManager.ready(function(n, u) {
                            if (n)
                                r(n, null);
                            else {
                                var c = s ? t.Path.GROUPCHANNELS_CHANNELURL_MESSAGES_MESSAGEID_REACTION.replace("%s", encodeURIComponent(a)).replace("%s", encodeURIComponent(o)) : t.Path.OPENCHANNELS_CHANNELURL_MESSAGES_MESSAGEID_REACTION.replace("%s", encodeURIComponent(a)).replace("%s", encodeURIComponent(o))
                                  , d = new ep({
                                    reaction: l
                                });
                                i.post(c, d, r)
                            }
                        })
                    }
                }, {
                    key: "deleteReaction",
                    value: function(n, r) {
                        var i = this
                          , s = n.isGroupChannel
                          , a = n.channelUrl
                          , o = n.messageId
                          , l = n.key;
                        this.sb.ConnectionManager.ready(function(n, u) {
                            if (n)
                                r(n, null);
                            else {
                                var c = s ? t.Path.GROUPCHANNELS_CHANNELURL_MESSAGES_MESSAGEID_REACTION.replace("%s", encodeURIComponent(a)).replace("%s", encodeURIComponent(o)) : t.Path.OPENCHANNELS_CHANNELURL_MESSAGES_MESSAGEID_REACTION.replace("%s", encodeURIComponent(a)).replace("%s", encodeURIComponent(o))
                                  , d = new ep({
                                    reaction: l
                                });
                                i.delete(c, d, r)
                            }
                        })
                    }
                }, {
                    key: "getAllEmoji",
                    value: function(n) {
                        var r = this;
                        this.sb.ConnectionManager.ready(function(i, s) {
                            i ? n(i, null) : r.get(t.Path.EMOJI_CATEGORIES, null, n)
                        })
                    }
                }, {
                    key: "getEmojiCategory",
                    value: function(n, r) {
                        var i = this
                          , s = n.categoryId;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.EMOJI_CATEGORIES_CATEGORYID.replace("%s", s);
                                i.get(o, null, r)
                            }
                        })
                    }
                }, {
                    key: "getEmoji",
                    value: function(n, r) {
                        var i = this
                          , s = n.emojiKey;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.EMOJIS_EMOJIKEY.replace("%s", s);
                                i.get(o, null, r)
                            }
                        })
                    }
                }, {
                    key: "getAllowFriendDiscovery",
                    value: function(n) {
                        var r = this;
                        this.sb.ConnectionManager.ready(function(i, s) {
                            if (i)
                                n(i, null);
                            else {
                                var a = t.Path.USERS_USERID_ALLOW_FRIEND_DISCOVERY.replace("%s", encodeURIComponent(s.userId));
                                r.get(a, null, n)
                            }
                        })
                    }
                }, {
                    key: "setAllowFriendDiscovery",
                    value: function(n, r) {
                        var i = this
                          , s = n.allowFriendDiscovery;
                        this.sb.ConnectionManager.ready(function(n, a) {
                            if (n)
                                r(n, null);
                            else {
                                var o = t.Path.USERS_USERID_ALLOW_FRIEND_DISCOVERY.replace("%s", encodeURIComponent(a.userId))
                                  , l = new ep;
                                "boolean" == typeof s && l.add("allow_friend_discovery", s),
                                i.put(o, l, r)
                            }
                        })
                    }
                }], [{
                    key: "Path",
                    get: function() {
                        return {
                            USERS: "/users",
                            USERS_USERID: "/users/%s",
                            USERS_USERID_LOGIN: "/users/%s/login",
                            USERS_USERID_SESSION_KEY: "/users/%s/session_key",
                            USERS_USERID_METADATA: "/users/%s/metadata",
                            USERS_USERID_METADATA_KEY: "/users/%s/metadata/%s",
                            USERS_USERID_MARKASREADALL: "/users/%s/mark_as_read_all",
                            USERS_USERID_MY_GROUP_CHANNEL_CHANGELOGS: "/users/%s/my_group_channels/changelogs",
                            USERS_USERID_UNREAD_ITEM_COUNT: "/users/%s/unread_item_count",
                            USERS_USERID_UNREAD_MESSAGE_COUNT: "/users/%s/unread_message_count",
                            USERS_USERID_UNREAD_CHANNEL_COUNT: "/users/%s/unread_channel_count",
                            USERS_USERID_PUSH_GCM_TOKEN: "/users/%s/push/gcm/%s",
                            USERS_USERID_PUSH_GCM: "/users/%s/push/gcm",
                            USERS_USERID_PUSH_DEVICE_TOKENS: "/users/%s/push/%s/device_tokens",
                            USERS_USERID_PUSHPREFERENCE_CHANNELURL: "/users/%s/push_preference/%s",
                            USERS_USERID_PUSHPREFERENCE: "/users/%s/push_preference/",
                            USERS_USERID_PUSH_TEMPLATE: "/users/%s/push/template",
                            USERS_USERID_BLOCK: "/users/%s/block",
                            USERS_USERID_BLOCK_TARGETID: "/users/%s/block/%s",
                            USERS_USERID_PUSH_APNS_TOKEN: "/users/%s/push/apns/%s",
                            USERS_USERID_PUSH_APNS: "/users/%s/push/apns",
                            USERS_USERID_PUSH: "/users/%s/push",
                            USERS_USERID_GROUP_CHANNEL_INVITATION_PREFERENCE: "/users/%s/channel_invitation_preference",
                            USERS_USERID_GROUP_CHANNEL_COUNT: "/users/%s/group_channel_count",
                            USERS_COUNT_PREFERENCE: "/users/%s/count_preference/%s",
                            USERS_USERID_ALLOW_FRIEND_DISCOVERY: "/users/%s/allow_friend_discovery",
                            OPENCHANNELS: "/open_channels",
                            OPENCHANNELS_CHANNELURL: "/open_channels/%s",
                            OPENCHANNELS_CHANNELURL_MESSAGES: "/open_channels/%s/messages",
                            OPENCHANNELS_CHANNELURL_MESSAGES_MESSAGEID: "/open_channels/%s/messages/%s",
                            OPENCHANNELS_CHANNELURL_MESSAGES_MESSAGEID_TRANSLATION: "/open_channels/%s/messages/%s/translation",
                            OPENCHANNELS_CHANNELURL_MESSAGES_CHANGELOGS: "/open_channels/%s/messages/changelogs",
                            OPENCHANNELS_CHANNELURL_SCHEDULED_MESSAGES: "/open_channels/%s/scheduled_messages",
                            OPENCHANNELS_CHANNELURL_PARTICIPANTS: "/open_channels/%s/participants",
                            OPENCHANNELS_CHANNELURL_OPERATORS: "/open_channels/%s/operators",
                            OPENCHANNELS_CHANNELURL_METADATA: "/open_channels/%s/metadata",
                            OPENCHANNELS_CHANNELURL_METADATA_KEY: "/open_channels/%s/metadata/%s",
                            OPENCHANNELS_CHANNELURL_METACOUNTER: "/open_channels/%s/metacounter",
                            OPENCHANNELS_CHANNELURL_METACOUNTER_KEY: "/open_channels/%s/metacounter/%s",
                            OPENCHANNELS_CHANNELURL_BAN: "/open_channels/%s/ban",
                            OPENCHANNELS_CHANNELURL_BAN_USERID: "/open_channels/%s/ban/%s",
                            OPENCHANNELS_CHANNELURL_MUTE: "/open_channels/%s/mute",
                            OPENCHANNELS_CHANNELURL_MUTE_USERID: "/open_channels/%s/mute/%s",
                            OPENCHANNELS_CHANNELURL_FREEZE: "/open_channels/%s/freeze",
                            OPENCHANNELS_OPERATORS: "/open_channels/%s/operators",
                            OPENCHANNELS_CHANNELURL_MESSAGES_MESSAGEID_REACTION: "/open_channels/%s/messages/%s/reactions",
                            GROUPCHANNELS: "/group_channels",
                            MYGROUPCHANNELS: "/users/%s/my_group_channels",
                            GROUPCHANNELS_CHANNELURL: "/group_channels/%s",
                            GROUPCHANNELS_CHANNELURL_INVITE: "/group_channels/%s/invite",
                            GROUPCHANNELS_CHANNELURL_ACCEPT_INVITATION: "/group_channels/%s/accept",
                            GROUPCHANNELS_CHANNELURL_DECLINE_INVITATION: "/group_channels/%s/decline",
                            GROUPCHANNELS_CHANNELURL_HIDE: "/group_channels/%s/hide",
                            GROUPCHANNELS_CHANNELURL_LEAVE: "/group_channels/%s/leave",
                            GROUPCHANNELS_CHANNELURL_JOIN: "/group_channels/%s/join",
                            GROUPCHANNELS_CHANNELURL_OPERATORS: "/group_channels/%s/operators",
                            GROUPCHANNELS_CHANNELURL_MESSAGES: "/group_channels/%s/messages",
                            GROUPCHANNELS_CHANNELURL_MESSAGES_MARKASREAD: "/group_channels/%s/messages/mark_as_read",
                            GROUPCHANNELS_CHANNELURL_MESSAGES_MARKASDELIVERED: "/group_channels/%s/messages/mark_as_delivered",
                            GROUPCHANNELS_CHANNELURL_MESSAGES_TOTALCOUNT: "/group_channels/%s/messages/total_count",
                            GROUPCHANNELS_CHANNELURL_MESSAGES_UNREADCOUNT: "/group_channels/%s/messages/unread_count",
                            GROUPCHANNELS_CHANNELURL_MESSAGES_MESSAGEID: "/group_channels/%s/messages/%s",
                            GROUPCHANNELS_CHANNELURL_MESSAGES_MESSAGEID_TRANSLATION: "/group_channels/%s/messages/%s/translation",
                            GROUPCHANNELS_CHANNELURL_MESSAGES_CHANGELOGS: "/group_channels/%s/messages/changelogs",
                            GROUPCHANNELS_CHANNELURL_MESSAGES_GAP: "/group_channels/%s/messages_gap",
                            GROUPCHANNELS_CHANNELURL_SCHEDULED_MESSAGES: "/group_channels/%s/scheduled_messages",
                            GROUPCHANNELS_CHANNELURL_MEMBERS: "/group_channels/%s/members",
                            GROUPCHANNELS_CHANNELURL_METADATA: "/group_channels/%s/metadata",
                            GROUPCHANNELS_CHANNELURL_METADATA_KEY: "/group_channels/%s/metadata/%s",
                            GROUPCHANNELS_CHANNELURL_METACOUNTER: "/group_channels/%s/metacounter",
                            GROUPCHANNELS_CHANNELURL_METACOUNTER_KEY: "/group_channels/%s/metacounter/%s",
                            GROUPCHANNELS_RESET_USER_HISTORY: "/group_channels/%s/reset_user_history",
                            GROUPCHANNELS_OPERATORS: "/group_channels/%s/operators",
                            GROUPCHANNELS_MEMBERS: "/group_channels/%s/members",
                            GROUPCHANNELS_CHANNELURL_BAN: "/group_channels/%s/ban",
                            GROUPCHANNELS_CHANNELURL_BAN_USERID: "/group_channels/%s/ban/%s",
                            GROUPCHANNELS_CHANNELURL_MUTE: "/group_channels/%s/mute",
                            GROUPCHANNELS_CHANNELURL_MUTE_USERID: "/group_channels/%s/mute/%s",
                            GROUPCHANNELS_CHANNELURL_FREEZE: "/group_channels/%s/freeze",
                            GROUPCHANNELS_CHANNELURL_MESSAGES_MESSAGEID_REACTION: "/group_channels/%s/messages/%s/reactions",
                            STORAGE_FILE: "/storage/file",
                            STORAGE_PROFILE: "/storage/profile_image",
                            FRIENDS: "/users/%s/friends",
                            FRIENDS_CHANGE_LOGS: "/users/%s/friends/changelogs",
                            FRIENDS_DISCOVERIES: "/users/%s/friend_discoveries",
                            SEARCH_MESSAGE: "/search/messages",
                            REPORT_USERS: "/report/users/%s",
                            REPORT_CHANNELS: "/report/%s/%s",
                            REPORT_MESSAGES: "/report/%s/%s/messages/%s",
                            EMOJIS_EMOJIKEY: "/emojis/%s",
                            EMOJI_CATEGORIES: "/emoji_categories",
                            EMOJI_CATEGORIES_CATEGORYID: "/emoji_categories/%s"
                        }
                    }
                }]),
                t
            }()
              , ey = function() {
                function t(n, r) {
                    b(this, t),
                    this.sb = n,
                    this.ws = null,
                    this.wsHost = null,
                    this.WebSocket = null,
                    this.handler = r || new t.ConnectionHandler,
                    this.explicitDisconnect = !1,
                    this.lastActiveMillis = 0;
                    try {
                        this.WebSocket = "undefined" == typeof WebSocket ? y.default : WebSocket
                    } catch (i) {
                        this.WebSocket = WebSocket
                    }
                }
                return S(t, [{
                    key: "connect",
                    value: function(t, n, r) {
                        var i = this;
                        ei.debug("`WebSocketClient.connect` called.");
                        var s = x.get(this.sb._iid).container
                          , a = s.pinger
                          , o = s.auth
                          , l = s.extensions
                          , u = s.getUserAgentWithExtensions
                          , c = s.sessionManager
                          , d = id.getAppVersion();
                        this.wsHost = r;
                        try {
                            var h = "/?p=JS" + "&pv=".concat(encodeURIComponent(L.OS_VERSION)) + "&sv=".concat(encodeURIComponent(L.SDK_VERSION)) + "&ai=".concat(encodeURIComponent(this.sb.getApplicationId()));
                            if (d && (h += "&av=".concat(encodeURIComponent(d))),
                            o.sessionKey ? h += "&key=".concat(encodeURIComponent(o.sessionKey)) : h += "&user_id=".concat(encodeURIComponent(t), "&access_token=").concat(encodeURIComponent(n)),
                            h += "&active=1" + "&SB-User-Agent=".concat(encodeURIComponent(u(l))) + "&Request-Sent-Timestamp=".concat((new Date).getTime().toString()) + "&include_extra_data=".concat(encodeURIComponent("premium_feature_list,file_upload_size_limit,application_attributes,emoji_hash")),
                            c.handler && (h += "&expiring_session=1"),
                            h += "&use_local_cache=1",
                            this.ws = new this.WebSocket(this.wsHost + h),
                            !this.ws)
                                return this.sb.isReconnectingOnError = !0,
                                void this.handler.onError({
                                    message: "ws does not exist."
                                })
                        } catch (f) {
                            return this.sb.isReconnectingOnError = !0,
                            void this.handler.onError(f)
                        }
                        try {
                            this.sb.getDebugMode() && "undefined" != typeof window && (window.ws = this.ws)
                        } catch (p) {
                            ei.debug("`window` object does not exist.")
                        }
                        var g = !1;
                        this.ws.onopen = function(t) {
                            ei.debug("`WebSocket.onopen` called."),
                            i.handler.onOpen(t)
                        }
                        ,
                        this.ws.onmessage = function(t) {
                            i.active();
                            for (var n = t.data.split("\n"), r = 0; r < n.length; r++) {
                                var s = n[r];
                                if (s && "string" == typeof s) {
                                    try {
                                        if ("PONG" === s.substring(0, 4)) {
                                            a.pong();
                                            continue
                                        }
                                    } catch (o) {
                                        ei.debug("`WebSocket.onmessage` command check error:", o)
                                    }
                                    i.handler.onMessage(s)
                                }
                            }
                        }
                        ,
                        this.ws.onerror = function(t) {
                            ei.debug("`WebSocket.onerror` called:", t),
                            a && a.stop(),
                            g = !0,
                            i.sb.isReconnectingOnError = !0,
                            i.handler.onError(t)
                        }
                        ,
                        this.ws.onclose = function(t) {
                            ei.group("`WebSocket.onclose` called.", [{
                                level: ei.supportedLogLevels.DEBUG,
                                messages: ["e", t]
                            }, {
                                level: ei.supportedLogLevels.DEBUG,
                                messages: ["explicitDisconnect", i.explicitDisconnect]
                            }]),
                            a && a.stop(),
                            i.explicitDisconnect ? i.handler.onClose(t) : g || i.handler.onError(t),
                            i.explicitDisconnect = !1
                        }
                    }
                }, {
                    key: "disconnect",
                    value: function(t, n) {
                        ei.group("`WebSocketClient.onclose` called.", [{
                            level: ei.supportedLogLevels.DEBUG,
                            messages: ["explicit", t]
                        }]);
                        var r = x.get(this.sb._iid).container.pinger;
                        r && r.stop(),
                        this.explicitDisconnect = !0 === t,
                        this.ws && (this.ws.onopen = function() {}
                        ,
                        this.ws.onmessage = function() {}
                        ,
                        this.ws.onclose = function() {
                            n && n()
                        }
                        ,
                        this.ws.onerror = function() {}
                        ,
                        this.ws.close(),
                        this.ws = null),
                        this.explicitDisconnect ? this.handler.onClose() : this.handler.onError(),
                        this.explicitDisconnect = !1
                    }
                }, {
                    key: "send",
                    value: function(t, n) {
                        if (1 !== this.ws.readyState)
                            n && n(new z("Connection is not valid. Please reconnect.",z.WEBSOCKET_CONNECTION_CLOSED), null);
                        else {
                            var r = x.get(this.sb._iid).container.pinger;
                            this.ws.send(t.encode()),
                            "PING" !== t.command && r.refreshTimer(),
                            n && n(null, null)
                        }
                    }
                }, {
                    key: "active",
                    value: function() {
                        this.lastActiveMillis = (new Date).getTime()
                    }
                }, {
                    key: "getConnectionState",
                    value: function() {
                        try {
                            return 1 === this.ws.readyState ? this.sb.ConnectionState.OPEN : 0 === this.ws.readyState ? this.sb.ConnectionState.CONNECTING : this.sb.ConnectionState.CLOSED
                        } catch (t) {
                            return this.sb.ConnectionState.CLOSED
                        }
                    }
                }]),
                t
            }();
            ey.ConnectionHandler = S(function t() {
                b(this, t),
                this.onReady = function() {}
                ,
                this.onOpen = function() {}
                ,
                this.onClose = function() {}
                ,
                this.onMessage = function() {}
                ,
                this.onError = function() {}
            });
            var e_, ev, eE = {}, eb = function() {
                function t() {
                    this._observers = []
                }
                return t.of = function(n) {
                    return eE[n] || (eE[n] = new t),
                    eE[n]
                }
                ,
                t.prototype.invokeConnect = function() {
                    for (var t = 0, n = this._observers; t < n.length; t++) {
                        var r = n[t];
                        r.onConnect && r.onConnect()
                    }
                }
                ,
                t.prototype.invokeDisconnect = function() {
                    for (var t = 0, n = this._observers; t < n.length; t++) {
                        var r = n[t];
                        r.onDisconnect && r.onDisconnect()
                    }
                }
                ,
                t.prototype.addObserver = function(t) {
                    this._observers.push(t)
                }
                ,
                t.prototype.removeObserver = function(t) {
                    var n = this._observers.indexOf(t);
                    n > -1 && this._observers.splice(n, 1)
                }
                ,
                t
            }();
            (eC = ev || (ev = {}))[eC.EVENT_CHANNEL_CHANGED = 0] = "EVENT_CHANNEL_CHANGED",
            eC[eC.EVENT_USER_RECEIVED_INVITATION = 1] = "EVENT_USER_RECEIVED_INVITATION",
            eC[eC.EVENT_USER_DECLINED_INVITATION = 2] = "EVENT_USER_DECLINED_INVITATION",
            eC[eC.EVENT_USER_JOINED = 3] = "EVENT_USER_JOINED",
            eC[eC.EVENT_USER_LEFT = 4] = "EVENT_USER_LEFT",
            eC[eC.EVENT_CHANNEL_ENTER = 5] = "EVENT_CHANNEL_ENTER",
            eC[eC.EVENT_CHANNEL_EXIT = 6] = "EVENT_CHANNEL_EXIT",
            eC[eC.EVENT_CHANNEL_FROZEN = 7] = "EVENT_CHANNEL_FROZEN",
            eC[eC.EVENT_CHANNEL_UNFROZEN = 8] = "EVENT_CHANNEL_UNFROZEN",
            eC[eC.EVENT_CHANNEL_HIDDEN = 9] = "EVENT_CHANNEL_HIDDEN",
            eC[eC.EVENT_CHANNEL_UNHIDDEN = 10] = "EVENT_CHANNEL_UNHIDDEN",
            eC[eC.EVENT_TYPING_STATUS_UPDATED = 11] = "EVENT_TYPING_STATUS_UPDATED",
            eC[eC.EVENT_OPERATOR_UPDATED = 12] = "EVENT_OPERATOR_UPDATED",
            eC[eC.EVENT_CHANNEL_METADATA_UPDATED = 13] = "EVENT_CHANNEL_METADATA_UPDATED",
            eC[eC.EVENT_CHANNEL_METADATA_DELETED = 14] = "EVENT_CHANNEL_METADATA_DELETED",
            eC[eC.EVENT_CHANNEL_METACOUNTER_UPDATED = 15] = "EVENT_CHANNEL_METACOUNTER_UPDATED",
            eC[eC.EVENT_CHANNEL_METACOUNTER_DELETED = 16] = "EVENT_CHANNEL_METACOUNTER_DELETED",
            eC[eC.EVENT_CHANNEL_DELETED = 17] = "EVENT_CHANNEL_DELETED",
            eC[eC.EVENT_USER_MUTED = 18] = "EVENT_USER_MUTED",
            eC[eC.EVENT_USER_UNMUTED = 19] = "EVENT_USER_UNMUTED",
            eC[eC.EVENT_USER_BANNED = 20] = "EVENT_USER_BANNED",
            eC[eC.EVENT_USER_UNBANNED = 21] = "EVENT_USER_UNBANNED",
            eC[eC.EVENT_MESSAGE_RECEIVED = 22] = "EVENT_MESSAGE_RECEIVED",
            eC[eC.EVENT_MESSAGE_SENT = 23] = "EVENT_MESSAGE_SENT",
            eC[eC.EVENT_MESSAGE_UPDATED = 24] = "EVENT_MESSAGE_UPDATED",
            eC[eC.EVENT_MESSAGE_DELETED = 25] = "EVENT_MESSAGE_DELETED",
            eC[eC.EVENT_READ_RECEIPT_UPDATED = 26] = "EVENT_READ_RECEIPT_UPDATED",
            eC[eC.EVENT_DELIVERY_RECEIPT_UPDATED = 27] = "EVENT_DELIVERY_RECEIPT_UPDATED",
            eC[eC.EVENT_MENTION = 28] = "EVENT_MENTION",
            eC[eC.EVENT_REACTION_UPDATED = 29] = "EVENT_REACTION_UPDATED",
            eC[eC.EVENT_THREAD_INFO_UPDATED = 30] = "EVENT_THREAD_INFO_UPDATED",
            eC[eC.CHANNEL_BACKGROUND = 1e3] = "CHANNEL_BACKGROUND",
            eC[eC.CHANNEL_CHANGELOG = 1001] = "CHANNEL_CHANGELOG",
            eC[eC.MESSAGE_BACKGROUND = 1002] = "MESSAGE_BACKGROUND",
            eC[eC.MESSAGE_FILL = 1003] = "MESSAGE_FILL",
            eC[eC.MESSAGE_CHANGELOG = 1004] = "MESSAGE_CHANGELOG",
            eC[eC.LOCAL_MESSAGE_PENDING_CREATED = 2e3] = "LOCAL_MESSAGE_PENDING_CREATED",
            eC[eC.LOCAL_MESSAGE_FAILED = 2001] = "LOCAL_MESSAGE_FAILED",
            eC[eC.LOCAL_MESSAGE_CANCELED = 2002] = "LOCAL_MESSAGE_CANCELED",
            eC[eC.LOCAL_MESSAGE_RESEND_STARTED = 2003] = "LOCAL_MESSAGE_RESEND_STARTED",
            eC[eC.MESSAGE_COLLECTION_FILTER_MISMATCH = 2004] = "MESSAGE_COLLECTION_FILTER_MISMATCH";
            var eC, eS, eA = {}, eN = function() {
                function t() {
                    this._observers = []
                }
                return t.of = function(n) {
                    return eA[n] || (eA[n] = new t),
                    eA[n]
                }
                ,
                t.prototype.addObserver = function(t) {
                    this._observers.push(t)
                }
                ,
                t.prototype.removeObserver = function(t) {
                    var n = this._observers.indexOf(t);
                    n >= 0 && this._observers.splice(n, 1)
                }
                ,
                t.prototype.send = function(t) {
                    for (var n = 0, r = this._observers; n < r.length; n++)
                        r[n].onevent(t)
                }
                ,
                t
            }(), eT = function() {
                function t(n) {
                    b(this, t),
                    this.sb = n,
                    this.cls = Y.get(this.sb._iid),
                    this.client = new ey(this.sb),
                    this.connectParams = {
                        retryCount: 1
                    },
                    this.reconnectParams = {
                        interval: 3,
                        retryCount: 3,
                        multiplier: 2,
                        maxInterval: 24
                    },
                    this.connectCount = 0,
                    this.reconnectCount = 0,
                    this.reconnectDelay = 0
                }
                return S(t, [{
                    key: "isConnected",
                    get: function() {
                        return this.client && this.client.getConnectionState() === this.sb.ConnectionState.OPEN
                    }
                }, {
                    key: "connect",
                    value: function(t, n) {
                        var r = this
                          , i = x.get(this.sb._iid).container
                          , s = i.auth
                          , a = i.apiClient
                          , o = i.commandHandler;
                        s.sessionToken = n || null;
                        var l = this.cls.GroupChannel
                          , u = null
                          , c = new ey.ConnectionHandler;
                        this.client = new ey(this.sb,c),
                        c.onMessage = function(t) {
                            o.onRawCommandReceived(t)
                        }
                        ,
                        this.sb.loginHandler = function(t, n) {
                            if (r.sb.connecting = !1,
                            r.sb.reconnecting = !1,
                            t)
                                r.disconnect({
                                    clearSession: !0,
                                    err: t
                                }, null);
                            else {
                                clearInterval(r.sb.globalTimer);
                                var i = eN.of(r.sb._iid)
                                  , s = function() {
                                    l.cachedChannels && Object.keys(l.cachedChannels).forEach(function(t) {
                                        var n = l.cachedChannels[t];
                                        n.invalidateTypingStatus() && (Object.keys(r.sb.channelHandlers).forEach(function(t) {
                                            r.sb.channelHandlers[t].onTypingStatusUpdated(n)
                                        }),
                                        i.send({
                                            source: ev.EVENT_TYPING_STATUS_UPDATED,
                                            payload: {
                                                channel: n
                                            }
                                        }))
                                    })
                                };
                                s(),
                                r.sb.globalTimer = setInterval(function() {
                                    return s()
                                }, 1e3),
                                r.flushConnectionCallbacks(null, n),
                                r.sb.ConnectionManager.processAllReadyHandler(null)
                            }
                        }
                        ,
                        c.onOpen = function() {
                            r.connectCount = 0,
                            r.sb.loginTimer = setTimeout(function() {
                                r.sb.loginTimer = null,
                                r.sb.onLoginTimerCancel = null,
                                r.flushConnectionCallbacks(new z("Connection timeout.",z.LOGIN_TIMEOUT), null),
                                r.sb.disconnect(null)
                            }, r.sb.Options.websocketResponseTimeout),
                            r.sb.onLoginTimerCancel = function() {
                                r.connectCount = 0,
                                r.flushConnectionCallbacks(new z("Connection has been canceled.",z.REQUEST_FAILED), null)
                            }
                            ,
                            r.sb.connecting = !1
                        }
                        ,
                        c.onError = function(i) {
                            if (ei.debug("Connect: `WebSocketClient.ConnectionHandler.onError` called.", i),
                            s.sessionKey)
                                r.sb.isReconnectingOnError = !0,
                                r.sb.ConnectionManager.errorAllReadyHandler(),
                                r.reconnect(t, !0),
                                r.sb.connecting = !1;
                            else if (r.connectCount < r.connectParams.retryCount)
                                r.connectCount++,
                                r.client.connect(t, n, u);
                            else {
                                var a = i ? i.message : "Unknown error occurred.";
                                r.connectCount = 0,
                                r.flushConnectionCallbacks(new z("Websocket connection failed. ".concat(a),z.WEBSOCKET_CONNECTION_FAILED), null),
                                r.sb.connecting = !1
                            }
                        }
                        ,
                        c.onClose = function() {
                            ei.debug("Connect: `WebSocketClient.ConnectionHandler.onClose` called."),
                            r.connectCount = 0,
                            r.sb.connecting = !1
                        }
                        ,
                        a.checkRouting(function(i, s) {
                            if (i)
                                return r.sb.connecting = !1,
                                void r.flushConnectionCallbacks(new z("Connection routing failed.",z.REQUEST_FAILED), null);
                            u = s.wsHost,
                            a.dummyCall(function(t) {
                                t && ei.error("API dummy call failed:", t)
                            }),
                            r.client.connect(t, n, u)
                        })
                    }
                }, {
                    key: "reconnect",
                    value: function(t) {
                        var n = this
                          , r = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                          , i = x.get(this.sb._iid).container
                          , s = i.auth
                          , a = i.apiClient
                          , o = i.commandHandler
                          , l = i.ackStateMap
                          , u = i.sessionManager
                          , c = this.cls.OpenChannel;
                        if (this.sb.connecting = !1,
                        this.sb.reconnecting = !0,
                        this.sb.reconnectTimer)
                            ei.debug("Reconnect: still reconnecting.");
                        else {
                            if ((this.reconnectCount += 1,
                            this.reconnectCount <= 1) ? (r && (Object.keys(l).forEach(function(t) {
                                var n = l[t];
                                n && (clearTimeout(n.timer),
                                (0,
                                n.handler)(new z("Command received no ack.",z.ACK_TIMEOUT), null)),
                                delete l[t]
                            }),
                            eb.of(this.sb._iid).invokeDisconnect(),
                            Object.keys(this.sb.connectionHandlers).forEach(function(t) {
                                n.sb.connectionHandlers[t].onReconnectStarted()
                            })),
                            this.reconnectDelay = 0) : this.reconnectDelay = Math.min(1e3 * this.reconnectParams.interval * Math.pow(this.reconnectParams.multiplier, this.reconnectCount - 2), this.reconnectParams.maxInterval > 0 ? 1e3 * this.reconnectParams.maxInterval : Number.MAX_SAFE_INTEGER),
                            !t || !s.sessionKey || this.reconnectParams.retryCount > 0 && this.reconnectCount > this.reconnectParams.retryCount)
                                return this.disconnect({
                                    clearSession: !1,
                                    err: new z("Websocket connection failed with a number of retries.",z.WEBSOCKET_CONNECTION_FAILED)
                                }, null),
                                this.reconnectCount = 0,
                                Object.keys(this.sb.connectionHandlers).forEach(function(t) {
                                    n.sb.connectionHandlers[t].onReconnectFailed()
                                }),
                                this.sb.connecting = !1,
                                this.sb.reconnecting = !1,
                                this.sb.isReconnectingOnError = !1,
                                void this.sb.ConnectionManager.errorAllReadyHandler();
                            this.sb.onReconnectTimerCancel = function() {
                                n.reconnectCount = 0
                            }
                            ,
                            this.sb.reconnectTimer = setTimeout(function() {
                                n.sb.reconnectTimer = null,
                                n.sb.onReconnectTimerCancel = null,
                                n.client && n.client.disconnect(!0);
                                var r = new ey.ConnectionHandler;
                                n.client = new ey(n.sb,r),
                                n.sb.loginHandler = function(r, i) {
                                    r ? u.isSessionError(r) ? u.refreshSessionIfExpiredError(r).then(function() {
                                        clearTimeout(n.sb.reconnectTimer),
                                        n.sb.reconnectTimer = null,
                                        n.reconnectCount = 0,
                                        n.reconnect(t, !1)
                                    }).catch(function() {}) : (clearTimeout(n.sb.reconnectTimer),
                                    n.sb.reconnectTimer = null,
                                    n.reconnect(t, !1)) : (n.reconnectCount = 0,
                                    n.sb.connecting = !1,
                                    n.sb.reconnecting = !1,
                                    n.sb.isReconnectingOnError = !1,
                                    eb.of(n.sb._iid).invokeConnect(),
                                    Object.keys(n.sb.connectionHandlers).forEach(function(t) {
                                        n.sb.connectionHandlers[t].onReconnectSucceeded()
                                    }),
                                    n.sb.ConnectionManager.processAllReadyHandler(null),
                                    n.sb.isReconnectingOnError && Object.keys(n.sb.ConnectionManager.networkHandlers).forEach(function(t) {
                                        n.sb.ConnectionManager.networkHandlers[t].onReconnected()
                                    }),
                                    Object.keys(c.enteredChannels).forEach(function(t) {
                                        c.enteredChannels[t].enter(function(r, i) {
                                            if (r) {
                                                var s = n.cls.FileMessageQueue;
                                                delete c.enteredChannels[t],
                                                s.delete(t)
                                            }
                                        })
                                    }))
                                }
                                ,
                                r.onOpen = function() {
                                    ei.debug("Reconnect: `WebSocketClient.ConnectionHandler.onOpen` called."),
                                    n.sb.loginTimer = setTimeout(function() {
                                        ei.debug("Reconnect: `loginTimer` timeout."),
                                        n.sb.loginTimer = null,
                                        n.reconnect(t, !0)
                                    }, n.sb.Options.websocketResponseTimeout),
                                    n.sb.onLoginTimerCancel = null
                                }
                                ,
                                r.onMessage = function(t) {
                                    o.onRawCommandReceived(t)
                                }
                                ,
                                r.onError = function(r) {
                                    ei.debug("Reconnect: `WebSocketClient.ConnectionHandler.onError` called.", r),
                                    n.sb.isReconnectingOnError = !0,
                                    n.sb.ConnectionManager.errorAllReadyHandler(),
                                    n.reconnect(t, !0)
                                }
                                ,
                                r.onClose = function() {
                                    ei.debug("Reconnect: `WebSocketClient.ConnectionHandler.onClose` called."),
                                    n.sb.reconnecting = !1
                                }
                                ,
                                a.checkRouting(function(r, i) {
                                    r ? n.reconnect(t, !0) : (n.sb.getCurrentApiHost() !== i.apiHost && a.get("/", null, function() {}),
                                    n.client.connect(t, null, i.wsHost))
                                })
                            }, this.reconnectDelay)
                        }
                    }
                }, {
                    key: "disconnect",
                    value: function(t, n) {
                        var r = x.get(this.sb._iid)
                          , i = r.container.ackStateMap
                          , s = this.cls
                          , a = s.GroupChannel
                          , o = s.OpenChannel
                          , l = t.clearSession
                          , u = t.err;
                        this.sb.loginTimer && (clearTimeout(this.sb.loginTimer),
                        this.sb.onLoginTimerCancel && (this.sb.onLoginTimerCancel(),
                        this.sb.onLoginTimerCancel = null),
                        this.sb.loginTimer = null),
                        this.sb.reconnectTimer && (clearTimeout(this.sb.reconnectTimer),
                        this.sb.onReconnectTimerCancel && (this.sb.onReconnectTimerCancel(),
                        this.sb.onReconnectTimerCancel = null),
                        this.sb.reconnectTimer = null),
                        this.client && (this.reconnectCount = 0,
                        this.client.disconnect(!0),
                        this.client = null),
                        Object.keys(i).forEach(function(t) {
                            var n = i[t];
                            n && (clearTimeout(n.timer),
                            (0,
                            n.handler)(new z("WebSocket connection must be made first.",z.WEBSOCKET_CONNECTION_CLOSED), null))
                        }),
                        r.set("ackStateMap", {}),
                        l && (o.clearEnteredChannels(),
                        o.clearCache(),
                        a.clearCache(),
                        this.sb.globalTimer && (clearInterval(this.sb.globalTimer),
                        this.sb.globalTimer = null),
                        this.sb.currentUser = null,
                        r.set("subscribedUnreadMessageCount", {
                            all: 0,
                            custom_types: {},
                            ts: 0
                        }),
                        r.set("auth", new K)),
                        u && (this.flushConnectionCallbacks(u, null),
                        this.sb.connecting = !1,
                        this.sb.reconnecting = !1,
                        this.sb.isReconnectingOnError = !1),
                        n && n(null, null)
                    }
                }, {
                    key: "flushConnectionCallbacks",
                    value: function(t, n) {
                        var r = this
                          , i = x.get(this.sb._iid).container
                          , s = i.store
                          , a = i.localCacheEnabled
                          , o = this.sb.connectionCallbacks;
                        if (this.sb.connectionCallbacks = [],
                        t) {
                            if (a) {
                                var l = this.sb._getCurrentUserDataKey();
                                ef.isNonAutoReconnectableError(t.code) ? s.remove(l).catch(function(t) {
                                    return ei.debug("Sendbird connect store remove error: ", t)
                                }).finally(function() {
                                    return o.forEach(function(n) {
                                        return n(t, null)
                                    })
                                }) : s.get(l).then(function(t) {
                                    r.sb._populateVaultFromCurrentUserData(t)
                                }).catch(function(t) {
                                    ei.debug("Sendbird connect store fetch error: ", t)
                                }).finally(function() {
                                    r.sb.currentUser ? o.forEach(function(n) {
                                        return n(t, r.sb.currentUser)
                                    }) : o.forEach(function(n) {
                                        return n(t, null)
                                    })
                                })
                            } else
                                o.forEach(function(n) {
                                    return n(t, null)
                                })
                        } else
                            eb.of(this.sb._iid).invokeConnect(),
                            a ? s.set({
                                key: this.sb._getCurrentUserDataKey(),
                                value: this._createCurrentUserData(n),
                                generation: 1
                            }).catch(function(t) {
                                return ei.debug("Sendbird connect store write error: ", t)
                            }).finally(function() {
                                return o.forEach(function(t) {
                                    return t(null, r.sb.currentUser)
                                })
                            }) : o.forEach(function(t) {
                                return t(null, n)
                            })
                    }
                }, {
                    key: "_createCurrentUserData",
                    value: function(t) {
                        var n = x.get(this.sb._iid).container
                          , r = n.auth
                          , i = n.maxUnreadCountOfSuperGroupChannel
                          , s = n.profileImageEncryption
                          , a = n.appInfo
                          , o = n.connectedAt
                          , l = n.firstConnectedAt
                          , u = n.concurrentCallLimit
                          , c = n.backOffDelay
                          , d = {
                            currentUser: (t || this.sb.currentUser).serialize(),
                            maxUnreadCountOfSuperGroupChannel: L.DEFAULT_MAX_UNREAD_COUNT_OF_SUPER_GROUP_CHANNEL,
                            profileImageEncryption: !1
                        };
                        return r.sessionKey && (d.sessionKey = r.sessionKey),
                        r.eKey && (d.eKey = r.eKey),
                        i && (d.maxUnreadCountOfSuperGroupChannel = i),
                        s && (d.profileImageEncryption = s),
                        a && (d.appInfo = a._objectify()),
                        o && l && (d.connectedAt = o,
                        d.firstConnectedAt = l),
                        u && c && (d.concurrentCallLimit = u,
                        d.backOffDelay = c),
                        d
                    }
                }]),
                t
            }(), eI = function() {
                function t(n) {
                    var r = n.type
                      , i = n.nullable
                      , s = n.optional
                      , a = n.optionalIf
                      , o = n.ignoreIf
                      , l = n.defaultValue
                      , u = n.constraint;
                    b(this, t),
                    this.type = r,
                    this.nullable = void 0 !== i && i,
                    this.optional = void 0 !== s && s,
                    this.optionalIf = void 0 === a ? null : a,
                    this.ignoreIf = void 0 === o ? null : o,
                    this.defaultValue = void 0 === l ? null : l,
                    this.constraint = void 0 === u ? null : u
                }
                return S(t, [{
                    key: "isMatchingType",
                    value: function(t) {
                        var n = function(n, r) {
                            return "string" == typeof r ? E(n) === r || "array" === r && Array.isArray(n) || "file" === r && ef.isFile(n) || "null" === r && null === n || "date" === r && n instanceof Date : "function" == typeof r ? n instanceof r : "object" === E(r) && Object.keys(r).map(function(t) {
                                return r[t]
                            }).indexOf(t) > -1
                        };
                        return n(t, this.type) || Array.isArray(this.type) && this.type.some(function(r) {
                            return n(t, r)
                        }) || this.nullable && null === t
                    }
                }], [{
                    key: "parse",
                    value: function(n, r) {
                        for (n = t.toArray(n); n.length > 0 && void 0 === n[n.length - 1]; )
                            n.pop();
                        var i = !1
                          , s = null;
                        "callback" === r[r.length - 1].type && ("function" == typeof n[n.length - 1] && (s = n.pop()),
                        r.pop(),
                        i = !0);
                        var a = []
                          , o = null
                          , l = 0;
                        return r.forEach(function(r) {
                            "function" == typeof r.ignoreIf && r.ignoreIf(n) ? a.push(r.hasOwnProperty("defaultValue") ? r.defaultValue : null) : r.isMatchingType(n[l]) ? (r.nullable && null === n[l] || !r.constraint || r.constraint(n[l]) || (o = t.error),
                            a.push(n[l]),
                            l++) : r.optional || "function" == typeof r.optionalIf && r.optionalIf(n) ? a.push(r.hasOwnProperty("defaultValue") ? r.defaultValue : null) : (o = t.error,
                            a.push(n[l]),
                            l++)
                        }),
                        i && s && a.push(s),
                        n.length !== l && (o = t.error),
                        [o].concat(a)
                    }
                }, {
                    key: "error",
                    get: function() {
                        return new z("Invalid parameter.",z.INVALID_PARAMETER)
                    }
                }, {
                    key: "toArray",
                    value: function(t) {
                        for (var n = [], r = 0; r < t.length; r++)
                            n.push(t[r]);
                        return n
                    }
                }]),
                t
            }(), eO = function() {
                function t(n) {
                    b(this, t),
                    this.sb = n,
                    this.authCount = 0,
                    this.readyHandlers = [],
                    this.networkHandlers = {},
                    this.authenticateTimer = 1e4,
                    this.authInfoRequester = null
                }
                return S(t, [{
                    key: "addReadyHandler",
                    value: function(t) {
                        t && "function" == typeof t && this.readyHandlers.push(t)
                    }
                }, {
                    key: "ready",
                    value: function(t) {
                        var n = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1]
                          , r = x.get(this.sb._iid).container
                          , i = r.auth
                          , s = r.isInBackground;
                        n && i.hasSession() ? t && (this.sb.currentUser ? t(null, this.sb.currentUser) : (this.addReadyHandler(t),
                        this.errorAllReadyHandler()),
                        this.sb.getConnectionState() !== this.sb.ConnectionState.CLOSED || s || this.sb.reconnect()) : (this.addReadyHandler(t),
                        this.sb.isReconnectingOnError ? this.errorAllReadyHandler() : this.sb.getConnectionState() === this.sb.ConnectionState.OPEN ? this.processAllReadyHandler(null) : this.sb.getConnectionState() === this.sb.ConnectionState.CONNECTING || this.errorAllReadyHandler())
                    }
                }, {
                    key: "processAllReadyHandler",
                    value: function(t) {
                        if (this.readyHandlers.length > 0) {
                            var n = this.sb.currentUser
                              , r = this.readyHandlers;
                            this.readyHandlers = [],
                            r.forEach(function(r) {
                                r && "function" == typeof r && r(t, n)
                            })
                        }
                    }
                }, {
                    key: "errorAllReadyHandler",
                    value: function() {
                        var t = x.get(this.sb._iid).container.auth;
                        this.processAllReadyHandler(t && t.hasSession() ? new z("WebSocket connection must be made first.",z.WEBSOCKET_CONNECTION_CLOSED) : new z("Connection should be made first.",z.CONNECTION_REQUIRED))
                    }
                }, {
                    key: "NetworkHandler",
                    value: function() {
                        this.onReconnected = function() {}
                    }
                }, {
                    key: "addNetworkHandler",
                    value: function(t, n) {
                        ei.warn("`ConnectionManager` will be deprecated."),
                        this.networkHandlers[t] = n
                    }
                }, {
                    key: "removeNetworkHandler",
                    value: function(t) {
                        ei.warn("`ConnectionManager` will be deprecated."),
                        delete this.networkHandlers[t]
                    }
                }, {
                    key: "removeAllNetworkHandler",
                    value: function() {
                        ei.warn("`ConnectionManager` will be deprecated."),
                        this.networkHandlers = {}
                    }
                }, {
                    key: "authenticate",
                    value: function(t) {
                        var n = this;
                        if (ei.warn("`ConnectionManager` will be deprecated."),
                        this.sb.getConnectionState() === this.sb.ConnectionState.OPEN || this.sb.reconnecting)
                            this.sb.connecting = !1,
                            t(null, this.sb.currentUser);
                        else if (this.authInfoRequester && "function" == typeof this.authInfoRequester) {
                            this.sb.connecting = !0,
                            this.authCount++;
                            var r = setTimeout(function() {
                                r = null,
                                n.authCount--,
                                0 === n.authCount && 0 === n.sb.connectionCallbacks.length && (n.sb.connecting = !1),
                                n.errorAllReadyHandler(),
                                t(new z("Connection should be made first.",z.CONNECTION_REQUIRED), null)
                            }, this.authenticateTimer);
                            this.authInfoRequester(function(i) {
                                if (r) {
                                    clearTimeout(r),
                                    r = null,
                                    n.authCount--;
                                    var s = function(r, i) {
                                        n.sb.connecting = !1,
                                        t(r, null)
                                    };
                                    i && i.hasOwnProperty("userId") ? i.accessToken ? i.apiHost && i.wsHost ? n.sb.connect(i.userId, i.accessToken, i.apiHost, i.wsHost, s) : n.sb.connect(i.userId, i.accessToken, s) : i.apiHost && i.wsHost ? n.sb.connect(i.userId, i.apiHost, i.wsHost, s) : n.sb.connect(i.userId, s) : t(eI.error, null)
                                }
                            })
                        } else
                            t(eI.error, null)
                    }
                }]),
                t
            }(), ew = function() {
                this.onSessionExpired = function() {}
                ,
                this.onSessionTokenRequired = function(t, n) {
                    return t(null)
                }
                ,
                this.onSessionError = function(t) {}
                ,
                this.onSessionRefreshed = function() {}
                ,
                this.onSessionClosed = function() {}
            }, ek = function() {
                function t() {
                    b(this, t),
                    this.handler = null,
                    this.resolvers = []
                }
                return S(t, [{
                    key: "_refreshSessionToken",
                    value: function() {
                        var n = this;
                        return new Promise(function(r, i) {
                            var s = null
                              , a = function() {
                                s && (clearTimeout(s),
                                s = null)
                            }
                              , o = function() {
                                s && (a(),
                                i(t.sessionTokenRequestFailedError))
                            };
                            s = setTimeout(function() {
                                return o()
                            }, 3e4),
                            n.handler.onSessionTokenRequired(function(t) {
                                s && (a(),
                                r(t))
                            }, o)
                        }
                        )
                    }
                }, {
                    key: "_refreshSessionKey",
                    value: function() {
                        var n = this;
                        return new Promise(function(r, i) {
                            var s = x.get(n._iid).container
                              , a = s.auth
                              , o = s.wsAdapter;
                            a.sessionToken ? o.isConnected ? n._refreshSessionKeyByCommand().then(function() {
                                return r()
                            }).catch(function(t) {
                                t.isSessionTokenExpiredError ? i(t) : n._refreshSessionKeyByApi().then(function() {
                                    return r()
                                }).catch(function(t) {
                                    return i(t)
                                })
                            }) : n._refreshSessionKeyByApi().then(function() {
                                return r()
                            }).catch(function(t) {
                                return i(t)
                            }) : i(t.sessionTokenNotFoundError)
                        }
                        )
                    }
                }, {
                    key: "_refreshSessionKeyByCommand",
                    value: function() {
                        var n = this;
                        return new Promise(function(r, i) {
                            var s = id.getInstance(n._iid)
                              , a = x.get(n._iid).container.auth
                              , o = Y.get(n._iid).Command
                              , l = o.bSessionRefresh({
                                token: a.sessionToken,
                                requestId: o.generateRequestId()
                            });
                            s.sendCommand(l, function(n, o) {
                                if (!s.getErrorFirstCallback()) {
                                    var l = [n, o];
                                    o = l[0],
                                    n = l[1]
                                }
                                n ? i(n) : o ? o.hasOwnProperty("error") ? i(t.sessionKeyRefreshFailedError) : (o.hasOwnProperty("new_key") && (a.sessionKey = o.new_key),
                                r()) : i(t.sessionKeyRefreshFailedError)
                            })
                        }
                        )
                    }
                }, {
                    key: "_refreshSessionKeyByApi",
                    value: function() {
                        var n = this;
                        return new Promise(function(r, i) {
                            !function s(a) {
                                if (a < 3) {
                                    var o = x.get(n._iid).container
                                      , l = o.auth
                                      , u = o.apiClient
                                      , c = {};
                                    l.sessionToken && (c.accessToken = l.sessionToken),
                                    u.refreshSessionKey(c, function(t, n) {
                                        if (t)
                                            t.isSessionTokenExpiredError || t.isSessionTokenRevokedError ? i(t) : s(a + 1);
                                        else {
                                            var o = n.key;
                                            l.sessionKey = o,
                                            r()
                                        }
                                    })
                                } else
                                    i(t.sessionKeyRefreshFailedError)
                            }(0)
                        }
                        )
                    }
                }, {
                    key: "_handleSessionToken",
                    value: function(n) {
                        var r = this;
                        n ? (x.get(this._iid).container.auth.sessionToken = n,
                        this._refreshSessionKey().then(function() {
                            return r._handleSessionRefreshSuccess()
                        }).catch(function() {
                            return r._handleSessionRefreshError(t.sessionTokenRequestFailedError)
                        })) : this._handleSessionClosed(t.sessionTokenRequestFailedError)
                    }
                }, {
                    key: "_handleSessionRefreshSuccess",
                    value: function() {
                        this.handler.onSessionRefreshed(),
                        this._flushResolvers(null)
                    }
                }, {
                    key: "_handleSessionRefreshError",
                    value: function(t) {
                        this._cancelConnection(),
                        this.handler.onSessionError(t),
                        this._flushResolvers(t)
                    }
                }, {
                    key: "_handleSessionClosed",
                    value: function(t) {
                        this._cancelConnection(),
                        this.handler.onSessionClosed(),
                        this._flushResolvers(t)
                    }
                }, {
                    key: "_cancelConnection",
                    value: function() {
                        var t = id.getInstance(this._iid);
                        t.reconnecting && (Object.keys(t.connectionHandlers).forEach(function(n) {
                            t.connectionHandlers[n].onReconnectFailed()
                        }),
                        t.reconnecting = !1),
                        t.disconnect()
                    }
                }, {
                    key: "_flushResolvers",
                    value: function(t) {
                        for (var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, r = 0; r < this.resolvers.length; r++)
                            t ? this.resolvers[r].reject(t) : this.resolvers[r].resolve(n);
                        this.resolvers = []
                    }
                }, {
                    key: "setHandler",
                    value: function(t) {
                        t instanceof ew && (this.handler = t)
                    }
                }, {
                    key: "isSessionError",
                    value: function(t) {
                        return t.isSessionTokenExpiredError || t.isSessionTokenRevokedError || t.isSessionKeyExpiredError
                    }
                }, {
                    key: "refreshSessionToken",
                    value: function() {
                        var n = this;
                        return new Promise(function(r, i) {
                            n.handler ? (n.resolvers.push({
                                resolve: r,
                                reject: i
                            }),
                            1 === n.resolvers.length && n._refreshSessionToken().then(function(t) {
                                return n._handleSessionToken(t)
                            }).catch(function() {
                                return n._handleSessionRefreshError(t.sessionTokenRequestFailedError)
                            })) : r()
                        }
                        )
                    }
                }, {
                    key: "refreshSessionKey",
                    value: function() {
                        var t = this;
                        return new Promise(function(n, r) {
                            t.handler ? (t.resolvers.push({
                                resolve: n,
                                reject: r
                            }),
                            1 === t.resolvers.length && t._refreshSessionKey().then(function() {
                                return t._handleSessionRefreshSuccess()
                            }).catch(function(n) {
                                n.isSessionTokenExpiredError ? t._refreshSessionToken().then(function(n) {
                                    return t._handleSessionToken(n)
                                }).catch(function(n) {
                                    return t._handleSessionRefreshError(n)
                                }) : n.isSessionTokenRevokedError ? t._handleSessionClosed(n) : t._handleSessionRefreshError(n)
                            })) : n()
                        }
                        )
                    }
                }, {
                    key: "refreshSessionIfExpiredError",
                    value: function(t) {
                        var n = this;
                        return t.isSessionTokenExpiredError ? this.refreshSessionToken() : t.isSessionKeyExpiredError ? this.refreshSessionKey() : t.isSessionTokenRevokedError ? new Promise(function(t, r) {
                            return r(n.closeSession())
                        }
                        ) : Promise.reject(t)
                    }
                }, {
                    key: "closeSession",
                    value: function() {
                        var n = t.sessionTokenRequestFailedError;
                        return this._handleSessionClosed(n),
                        n
                    }
                }], [{
                    key: "sessionTokenNotFoundError",
                    get: function() {
                        return new z("Session token is not found.",z.SESSION_TOKEN_EXPIRED)
                    }
                }, {
                    key: "sessionTokenExpiredError",
                    get: function() {
                        return new z("Session token is expired.",z.SESSION_TOKEN_EXPIRED)
                    }
                }, {
                    key: "sessionKeyRefreshFailedError",
                    get: function() {
                        return new z("Failed to refresh the session key.",z.SESSION_KEY_REFRESH_FAILED)
                    }
                }, {
                    key: "sessionTokenRequestFailedError",
                    get: function() {
                        return new z("Failed to get the session token.",z.SESSION_TOKEN_REQUEST_FAILED)
                    }
                }]),
                t
            }(), eU = function() {
                function t(t) {
                    var n = this;
                    this.sb = t,
                    this.unsubscribes = [],
                    this.isOnline = !1,
                    this.onlineWorker = function() {
                        n.isOnline = !0;
                        var t = x.get(n.sb._iid).container.auth;
                        n.sb.reconnecting || n.sb.connecting || !t.sessionKey || n.sb.getConnectionState() === n.sb.ConnectionState.OPEN || n.sb.reconnect()
                    }
                    ,
                    this.offlineWorker = function() {
                        n.isOnline = !1,
                        n.sb.setIsProcessingAutoResend(!1);
                        var t = x.get(n.sb._iid).container
                          , r = t.auth
                          , i = t.pinger;
                        n.sb.reconnecting || n.sb.connecting || !r.sessionKey || (i && i.stop(),
                        n.sb.reconnect())
                    }
                    ,
                    this.onlineListener = function(t) {
                        try {
                            if ("undefined" != typeof window && window.addEventListener && "ononline"in window && "onoffline"in window && "undefined" != typeof navigator && "boolean" == typeof navigator.onLine)
                                return window.addEventListener("online", t),
                                function() {
                                    return window.removeEventListener("online", t, !1)
                                }
                        } catch (n) {
                            ei.debug("There is no `window.addEventListener.ononline` or `navigator.onLine`")
                        }
                        return function() {}
                    }
                    ,
                    this.offlineListener = function(t) {
                        try {
                            if ("undefined" != typeof window && window.addEventListener && "ononline"in window && "onoffline"in window && "undefined" != typeof navigator && "boolean" == typeof navigator.onLine)
                                return window.addEventListener("offline", t),
                                function() {
                                    return window.removeEventListener("offline", t, !1)
                                }
                        } catch (n) {
                            ei.debug("There is no `window.addEventListener.ononline` or `navigator.onLine`")
                        }
                        return function() {}
                    }
                    ,
                    this.setOnlineListener = function(t) {
                        Boolean(t) && "function" == typeof t && (n.onlineListener = t)
                    }
                    ,
                    this.setOfflineListener = function(t) {
                        Boolean(t) && "function" == typeof t && (n.offlineListener = t)
                    }
                    ,
                    this.sb = t,
                    "undefined" != typeof window && "undefined" != typeof navigator && "boolean" == typeof navigator.onLine && (this.isOnline = window.navigator.onLine)
                }
                return t.prototype.start = function() {
                    this.unsubscribes = [this.onlineListener(this.onlineWorker), this.offlineListener(this.offlineWorker)]
                }
                ,
                t.prototype.stop = function() {
                    this.unsubscribes.forEach(function(t) {
                        try {
                            null == t || t()
                        } catch (n) {}
                    })
                }
                ,
                t
            }(), eR = (new Date).getTime(), eM = function() {
                function t(n, r) {
                    var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
                    switch (b(this, t),
                    this.command = n,
                    this.requestId = i,
                    arguments.length) {
                    case 1:
                        if (!n || n.length <= 4)
                            this.command = "NOOP",
                            this.payload = "{}";
                        else if (this.decode(n),
                        this.isRequestIdCommand) {
                            var s = this.getJsonElement();
                            s && (this.requestId = s.req_id || "")
                        }
                        break;
                    case 2:
                    case 3:
                        !this.requestId && this.isRequestIdCommand && (this.requestId = t.generateRequestId()),
                        r.req_id = this.requestId || "",
                        this.payload = JSON.stringify(r)
                    }
                }
                return S(t, [{
                    key: "isRequestIdCommand",
                    get: function() {
                        return this.isAckRequired || "EROR" === this.command
                    }
                }, {
                    key: "isAckRequired",
                    get: function() {
                        return "LOGI" === this.command || "MESG" === this.command || "FILE" === this.command || "ENTR" === this.command || "EXIT" === this.command || "READ" === this.command || "MEDI" === this.command || "FEDI" === this.command
                    }
                }, {
                    key: "encode",
                    value: function() {
                        return this.command + this.payload + "\n"
                    }
                }, {
                    key: "decode",
                    value: function(t) {
                        t = t.trim(),
                        this.command = t.substring(0, 4),
                        this.payload = t.substring(4)
                    }
                }, {
                    key: "getJsonElement",
                    value: function() {
                        return JSON.parse(this.payload)
                    }
                }], [{
                    key: "bSessionRefresh",
                    value: function(t) {
                        return new this("LOGI",{
                            token: t.token,
                            expiring_session: 1
                        },t.requestId)
                    }
                }, {
                    key: "bPing",
                    value: function() {
                        return new this("PING",{
                            id: (new Date).getTime(),
                            active: 1
                        })
                    }
                }, {
                    key: "bMessage",
                    value: function(t) {
                        var n = t.channelUrl
                          , r = t.message
                          , i = t.data
                          , s = t.customType
                          , a = t.metaArrays
                          , o = t.mentionType
                          , l = t.mentionedUserIds
                          , u = t.mentionedMessageTemplate
                          , c = t.translationTargetLanguages
                          , d = t.pushNotificationDeliveryOption
                          , h = t.appleCriticalAlertOptions
                          , f = t.requestId
                          , p = t.silent
                          , g = void 0 !== p && p
                          , m = t.rootMessageId
                          , y = void 0 === m ? null : m
                          , _ = t.parentMessageId
                          , v = void 0 === _ ? null : _
                          , E = t.isReplyToChannel
                          , b = void 0 !== E && E
                          , C = Y.get(this._iid)
                          , S = C.UserMessageParams
                          , A = C.BaseMessageParams
                          , N = {};
                        return N.channel_url = n,
                        N.message = r,
                        N.data = i,
                        a && a.length > 0 && (N.metaarray = a.map(function(t) {
                            return t.encode()
                        })),
                        o && (N.mention_type = o),
                        N.mentioned_user_ids = [],
                        o === A.MentionType.CHANNEL ? N.mentioned_user_ids = [] : Array.isArray(l) && l.length > 0 && (N.mentioned_user_ids = l),
                        u && (N.mentioned_message_template = u),
                        s && (N.custom_type = s),
                        c && c.length > 0 && (N.target_langs = c),
                        d && d !== S.PushNotificationDeliveryOption.DEFAULT && (N.push_option = d),
                        h && (N.apple_critical_alert_options = h.serialize()),
                        g && (N.silent = g),
                        y && (N.root_message_id = y),
                        v && (N.parent_message_id = v),
                        b && (N.reply_to_channel = b),
                        new this("MESG",N,void 0 === f ? null : f)
                    }
                }, {
                    key: "bFile",
                    value: function(t) {
                        var n = t.channelUrl
                          , r = t.url
                          , i = t.name
                          , s = t.type
                          , a = t.size
                          , o = t.data
                          , l = t.customType
                          , u = t.thumbnailSizes
                          , c = t.requireAuth
                          , d = t.metaArrays
                          , h = t.mentionType
                          , f = t.mentionedUserIds
                          , p = t.pushNotificationDeliveryOption
                          , g = t.appleCriticalAlertOptions
                          , m = t.requestId
                          , y = t.silent
                          , _ = void 0 !== y && y
                          , v = t.rootMessageId
                          , E = void 0 === v ? null : v
                          , b = t.parentMessageId
                          , C = void 0 === b ? null : b
                          , S = t.isReplyToChannel
                          , A = void 0 !== S && S
                          , N = Y.get(this._iid)
                          , T = N.BaseMessageParams
                          , I = N.FileMessageParams
                          , O = {};
                        return O.channel_url = n,
                        O.url = r,
                        O.name = i || "",
                        O.type = s || "",
                        O.size = a || 0,
                        O.custom = o,
                        l && (O.custom_type = l),
                        u && (O.thumbnails = u),
                        c && (O.require_auth = c),
                        d && d.length > 0 && (O.metaarray = d.map(function(t) {
                            return t.encode()
                        })),
                        h && (O.mention_type = h),
                        O.mentioned_user_ids = [],
                        h === T.MentionType.CHANNEL ? O.mentioned_user_ids = [] : Array.isArray(f) && f.length > 0 && (O.mentioned_user_ids = f),
                        p && p !== I.PushNotificationDeliveryOption.DEFAULT && (O.push_option = p),
                        g && (O.apple_critical_alert_options = g.serialize()),
                        _ && (O.silent = _),
                        E && (O.root_message_id = E),
                        C && (O.parent_message_id = C),
                        A && (O.reply_to_channel = A),
                        new this("FILE",O,void 0 === m ? null : m)
                    }
                }, {
                    key: "bUpdateUserMessage",
                    value: function(t) {
                        var n = t.channelUrl
                          , r = t.messageId
                          , i = t.appleCriticalAlertOptions
                          , s = t.message
                          , a = void 0 === s ? null : s
                          , o = t.data
                          , l = void 0 === o ? null : o
                          , u = t.customType
                          , c = void 0 === u ? null : u
                          , d = t.mentionType
                          , h = void 0 === d ? null : d
                          , f = t.mentionedUserIds
                          , p = void 0 === f ? null : f
                          , g = t.mentionedMessageTemplate
                          , m = void 0 === g ? null : g
                          , y = t.metaArrayParams
                          , _ = void 0 === y ? null : y
                          , v = Y.get(this._iid).BaseMessageParams
                          , E = {};
                        return E.channel_url = n,
                        E.msg_id = r,
                        null != a && void 0 !== a && (E.message = a),
                        null != l && void 0 !== l && (E.data = l),
                        null != c && void 0 !== c && (E.custom_type = c),
                        h && (E.mention_type = h),
                        h === v.MentionType.CHANNEL ? E.mentioned_user_ids = [] : Array.isArray(p) && p.length >= 0 && (E.mentioned_user_ids = p),
                        m && (E.mentioned_message_template = m),
                        _ && (E.metaarray = _),
                        i && (E.apple_critical_alert_options = i.serialize()),
                        new this("MEDI",E)
                    }
                }, {
                    key: "bUpdateFileMessage",
                    value: function(t) {
                        var n = t.channelUrl
                          , r = t.messageId
                          , i = t.appleCriticalAlertOptions
                          , s = t.data
                          , a = void 0 === s ? null : s
                          , o = t.customType
                          , l = void 0 === o ? null : o
                          , u = t.mentionType
                          , c = void 0 === u ? null : u
                          , d = t.mentionedUserIds
                          , h = void 0 === d ? null : d
                          , f = t.metaArrayParams
                          , p = void 0 === f ? null : f
                          , g = Y.get(this._iid).BaseMessageParams
                          , m = {};
                        return m.channel_url = n,
                        m.msg_id = r,
                        null != a && void 0 !== a && (m.data = a),
                        null != l && void 0 !== l && (m.custom_type = l),
                        c && (m.mention_type = c),
                        c === g.MentionType.CHANNEL ? m.mentioned_user_ids = [] : Array.isArray(h) && h.length >= 0 && (m.mentioned_user_ids = h),
                        p && (m.metaarray = p),
                        i && (m.apple_critical_alert_options = i.serialize()),
                        new this("FEDI",m)
                    }
                }, {
                    key: "bRead",
                    value: function(t) {
                        var n = t.channelUrl
                          , r = {};
                        return r.channel_url = n,
                        new this("READ",r)
                    }
                }, {
                    key: "bMessageAck",
                    value: function(t) {
                        var n = t.channelUrl
                          , r = t.messageId
                          , i = {};
                        return i.channel_url = n,
                        i.msg_id = r,
                        new this("MACK",i)
                    }
                }, {
                    key: "bTypeStart",
                    value: function(t) {
                        var n = t.channelUrl
                          , r = t.time
                          , i = {};
                        return i.channel_url = n,
                        i.time = r,
                        new this("TPST",i)
                    }
                }, {
                    key: "bTypeEnd",
                    value: function(t) {
                        var n = t.channelUrl
                          , r = t.time
                          , i = {};
                        return i.channel_url = n,
                        i.time = r,
                        new this("TPEN",i)
                    }
                }, {
                    key: "bEnter",
                    value: function(t) {
                        var n = t.channelUrl
                          , r = {};
                        return r.channel_url = n,
                        new this("ENTR",r)
                    }
                }, {
                    key: "bExit",
                    value: function(t) {
                        var n = t.channelUrl
                          , r = {};
                        return r.channel_url = n,
                        new this("EXIT",r)
                    }
                }, {
                    key: "generateRequestId",
                    value: function() {
                        return String(++eR)
                    }
                }]),
                t
            }(), eP = function() {
                function t(t) {
                    void 0 === t && (t = {}),
                    this._emojiHash = t.emoji_hash || "",
                    this._uploadSizeLimit = t.file_upload_size_limit ? 1048576 * t.file_upload_size_limit : Number.MAX_VALUE,
                    this._useReaction = !!t.use_reaction,
                    this._applicationAttributes = t.application_attributes || [],
                    this._premiumFeatureList = t.premium_feature_list || [],
                    this._disableSupergroupMack = t.disable_supergroup_mack || !1
                }
                return Object.defineProperty(t.prototype, "emojiHash", {
                    get: function() {
                        return this._emojiHash
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "uploadSizeLimit", {
                    get: function() {
                        return this._uploadSizeLimit
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "isUsingReaction", {
                    get: function() {
                        return this._useReaction
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "applicationAttributes", {
                    get: function() {
                        return this._applicationAttributes
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "premiumFeatureList", {
                    get: function() {
                        return this._premiumFeatureList
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "isSupergroupMackDisabled", {
                    get: function() {
                        return this._disableSupergroupMack
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "enabledChannelMemberShipHistory", {
                    get: function() {
                        return this._applicationAttributes.includes("channel_membership_history")
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype._objectify = function() {
                    var t = {};
                    return t.emoji_hash = this._emojiHash,
                    this._uploadSizeLimit !== Number.MAX_VALUE && (t.file_upload_size_limit = this._uploadSizeLimit / 1048576),
                    t.use_reaction = this._useReaction,
                    t.application_attributes = this._applicationAttributes,
                    t.premium_feature_list = this._premiumFeatureList,
                    t.disable_supergroup_mack = this._disableSupergroupMack,
                    t
                }
                ,
                t
            }(), eL = function() {
                function t(t) {
                    this._source = t
                }
                return Object.defineProperty(t.prototype, "source", {
                    get: function() {
                        return this._source
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "isFromEvent", {
                    get: function() {
                        return this._source >= 2e3
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t
            }(), eD = function(t) {
                return G(void 0, void 0, void 0, function() {
                    return B(this, function(n) {
                        return [2, new Promise(function(n) {
                            return setTimeout(n, t)
                        }
                        )]
                    })
                })
            }, ex = function() {
                var t = (new Date).getTime();
                return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(n) {
                    var r = (t + 16 * Math.random()) % 16 | 0;
                    return t = Math.floor(t / 16),
                    ("x" === n ? r : 3 & r | 8).toString(16)
                })
            }, eF = new Map, eH = new Map, ej = function() {
                function t(n) {
                    var r = n.key
                      , i = n.concurrentCallLimit
                      , s = n.backOffDelay;
                    this._holdersKey = t.createSemaphoreHoldersKey(r),
                    this._resolversKey = t.createSemaphoreResolversKey(r),
                    this._numLocks = void 0 === i ? 2 : i,
                    this._backOffDelay = void 0 === s ? 0 : s,
                    this.holders || (this.holders = []),
                    this.resolvers || (this.resolvers = [])
                }
                return t.createSemaphoreHoldersKey = function(t) {
                    return "collection@semaphore_holders_for:" + t
                }
                ,
                t.createSemaphoreResolversKey = function(t) {
                    return "collection@semaphore_resolvers_for:" + t
                }
                ,
                t.createChainProcessStateKey = function(t) {
                    return "collection@semaphore_chain_process_state_for:" + t
                }
                ,
                Object.defineProperty(t.prototype, "numLocksAvailable", {
                    get: function() {
                        return this._numLocks - this.holders.length
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "resolvers", {
                    get: function() {
                        return eH[this._resolversKey]
                    },
                    set: function(t) {
                        eH[this._resolversKey] = t
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "holders", {
                    get: function() {
                        return eF[this._holdersKey]
                    },
                    set: function(t) {
                        eF[this._holdersKey] = t
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.tryObtainLock = function() {
                    this.numLocksAvailable > 0 && this.resolvers.length > 0 && this.giveLockToFirstResolver()
                }
                ,
                t.prototype.giveLockToFirstResolver = function() {
                    var t = this.resolvers.shift();
                    this.holders = V(V([], this.holders, !0), [t.key], !1),
                    t.resolver(t.key)
                }
                ,
                t.prototype.queueForLock = function() {
                    return G(this, void 0, void 0, function() {
                        var t = this;
                        return B(this, function(n) {
                            return [2, new Promise(function(n) {
                                var r = {
                                    key: ex(),
                                    resolver: function(t) {
                                        return n(t)
                                    }
                                };
                                t.resolvers.push(r),
                                t.tryObtainLock()
                            }
                            )]
                        })
                    })
                }
                ,
                t.prototype.releaseLock = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return (n = this.holders.indexOf(t)) >= 0 ? (this.holders.splice(n, 1),
                                [4, eD(this._backOffDelay)]) : [3, 2];
                            case 1:
                                r.sent(),
                                this.tryObtainLock(),
                                r.label = 2;
                            case 2:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t
            }();
            (eG = eS || (eS = {}))[eG.IDLE = 0] = "IDLE",
            eG[eG.RUNNING = 1] = "RUNNING",
            eG[eG.END = 2] = "END";
            var eG, eB, eV = function() {}, eq = function() {
                function t(t, n, r, i) {
                    void 0 === r && (r = 2),
                    void 0 === i && (i = 10),
                    this._worker = null,
                    this._state = eS.IDLE,
                    this._retryCount = 0,
                    this._retryLimit = 3,
                    this._isPaused = !1,
                    this.onProgress = eV,
                    this.onStop = eV,
                    this.onError = eV,
                    this.onEnd = eV,
                    this._key = t,
                    this._worker = n,
                    this._semaphore = new ej({
                        key: t,
                        concurrentCallLimit: r,
                        backOffDelay: i
                    })
                }
                return Object.defineProperty(t.prototype, "isIdle", {
                    get: function() {
                        return this._state === eS.IDLE
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "isRunning", {
                    get: function() {
                        return this._state === eS.RUNNING
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "isDone", {
                    get: function() {
                        return this._state === eS.END
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "isPaused", {
                    get: function() {
                        return this._isPaused
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "retryCount", {
                    get: function() {
                        return this._retryCount
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "retryLimit", {
                    get: function() {
                        return this._retryLimit
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.resume = function(t, n) {
                    return void 0 === n && (n = !1),
                    this._isPaused = !1,
                    this.isDone && n && (this._state = eS.IDLE),
                    this.run(t)
                }
                ,
                t.prototype.run = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                return this._isPaused || !this.isIdle ? [3, 5] : (n = this,
                                [4, this._semaphore.queueForLock()]);
                            case 1:
                                n._key = s.sent(),
                                this._state = eS.RUNNING,
                                s.label = 2;
                            case 2:
                                return s.trys.push([2, 4, , 5]),
                                [4, this._worker(t)];
                            case 3:
                                return r = s.sent(),
                                this._retryCount = 0,
                                this.onProgress(r),
                                r.hasNext ? (this._state = eS.IDLE,
                                this._isPaused ? (this._semaphore.releaseLock(this._key),
                                this.onStop()) : (this.run(r.nextParams),
                                this._semaphore.releaseLock(this._key))) : (this._state = eS.END,
                                this._semaphore.releaseLock(this._key),
                                this.onEnd(),
                                this._isPaused && this.onStop()),
                                [3, 5];
                            case 4:
                                return i = s.sent(),
                                ei.warn("Collection sync run error: ", i),
                                this._state = eS.IDLE,
                                this._semaphore.releaseLock(this._key),
                                this.onError(i),
                                this._retryCount < this._retryLimit ? (this._retryCount++,
                                ei.debug("Failed collection sync retry count: ", this._retryCount),
                                this.run(t)) : (ei.debug("Failed collection sync all retries failed."),
                                this.stop(),
                                this.onStop()),
                                [3, 5];
                            case 5:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.stop = function() {
                    this._isPaused = !0
                }
                ,
                t
            }(), ez = function() {
                function t(t) {
                    var n = t.top
                      , r = t.bottom;
                    this.top = n,
                    this.bottom = r
                }
                return t.prototype.include = function(t) {
                    return this.top <= t && t <= this.bottom
                }
                ,
                t.prototype.overlap = function(t) {
                    return this.include(t.top) || this.include(t.bottom)
                }
                ,
                t
            }(), eK = {}, eW = function() {
                function t(t) {
                    var n = t.iid
                      , r = t.limit
                      , i = this;
                    this._token = "",
                    this._sync = null,
                    this._syncRange = new ez({
                        top: Number.MAX_SAFE_INTEGER,
                        bottom: 0
                    }),
                    this._completed = !1,
                    this._pkIndex = Date.now(),
                    this._iid = n,
                    this._limit = void 0 === r ? e4 : r;
                    var s = Y.get(this._iid).GroupChannel
                      , a = x.get(this._iid)
                      , o = a.get("currentUserId")
                      , l = a.get("apiClient")
                      , u = a.get("store")
                      , c = e9.of(this._iid)
                      , d = eN.of(this._iid)
                      , h = "sendbird:".concat(o, "@groupchannel/sync");
                    this._sync = new eq(h,function(t) {
                        return G(i, void 0, void 0, function() {
                            var t, n, r, i, a, o, f = this;
                            return B(this, function(p) {
                                switch (p.label) {
                                case 0:
                                    return t = {
                                        hasNext: !0,
                                        nextParams: ""
                                    },
                                    [4, u.get(h)];
                                case 1:
                                    if ((n = p.sent()) && n.completed)
                                        return [3, 10];
                                    n && (this._token = n.token,
                                    this._syncRange = n.range,
                                    this._pkIndex = n.primaryKeyIndex),
                                    r = {
                                        token: this._token,
                                        limit: this._limit,
                                        includeEmpty: !0,
                                        order: "chronological"
                                    },
                                    p.label = 2;
                                case 2:
                                    return p.trys.push([2, 6, , 9]),
                                    [4, l.loadGroupChannelList(r)];
                                case 3:
                                    return a = (i = p.sent()).channels.map(function(t) {
                                        return i.ts && (t.ts = i.ts),
                                        t.cached_primary_key = f._pkIndex--,
                                        s.upsert(t)
                                    }),
                                    this._syncRange.top = Math.min(this._syncRange.top, Math.min.apply(Math, a.map(function(t) {
                                        return t.createdAt
                                    }))),
                                    this._syncRange.bottom = Math.max(this._syncRange.bottom, Math.max.apply(Math, a.map(function(t) {
                                        return t.createdAt
                                    }))),
                                    t.hasNext = a.length >= this._limit,
                                    t.nextParams = this._token = i.next,
                                    this._token || (t.hasNext = !1),
                                    this._completed = !t.hasNext,
                                    ei.debug("Group channel collection background sync fetched channels count: ", a.length),
                                    [4, c.upsert(a)];
                                case 4:
                                    return p.sent(),
                                    [4, u.set({
                                        key: h,
                                        value: {
                                            token: this._token,
                                            range: this._syncRange,
                                            completed: this._completed,
                                            primaryKeyIndex: this._pkIndex
                                        },
                                        generation: 1
                                    })];
                                case 5:
                                    return p.sent(),
                                    o = {
                                        source: ev.CHANNEL_BACKGROUND,
                                        payload: {
                                            channels: a
                                        }
                                    },
                                    d.send(o),
                                    [3, 9];
                                case 6:
                                    return p.sent().isInvalidTokenError ? [4, u.remove(h)] : [3, 8];
                                case 7:
                                    p.sent(),
                                    p.label = 8;
                                case 8:
                                    return [3, 9];
                                case 9:
                                    return [3, 11];
                                case 10:
                                    ei.debug("Group channel collection background sync has finished."),
                                    t.hasNext = !1,
                                    p.label = 11;
                                case 11:
                                    return [2, t]
                                }
                            })
                        })
                    }
                    )
                }
                return t.of = function(n, r) {
                    return void 0 === r && (r = e4),
                    eK[n] || (eK[n] = new t({
                        iid: n,
                        limit: r
                    })),
                    eK[n]
                }
                ,
                Object.defineProperty(t.prototype, "range", {
                    get: function() {
                        return this._syncRange
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "completed", {
                    get: function() {
                        return this._completed
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.resume = function() {
                    ei.debug("Group channel collection background sync has resumed."),
                    this._sync.resume("")
                }
                ,
                t.prototype.pause = function() {
                    ei.debug("Group channel collection background sync has paused."),
                    this._sync.stop()
                }
                ,
                t
            }(), eY = {}, eQ = function() {
                function t(t) {
                    var n = t.iid
                      , r = this;
                    this._token = 0,
                    this._sync = null,
                    this._pkIndex = Date.now(),
                    this._iid = n;
                    var i = Y.get(this._iid).GroupChannel
                      , s = x.get(this._iid);
                    this._token = s.get("firstConnectedAt") / 1e3;
                    var a = s.get("currentUserId")
                      , o = s.get("store")
                      , l = s.get("apiClient")
                      , u = s.container.localCacheEnabled
                      , c = e9.of(this._iid)
                      , d = eN.of(this._iid)
                      , h = "sendbird:".concat(a, "@groupchannel/changelogs");
                    this._sync = new eq(h,function(t) {
                        return G(r, void 0, void 0, function() {
                            var t, n, r, s, a, f, p, g, m = this;
                            return B(this, function(y) {
                                switch (y.label) {
                                case 0:
                                    return t = {
                                        hasNext: !0,
                                        nextParams: ""
                                    },
                                    u ? [4, o.get(h)] : [3, 2];
                                case 1:
                                    return r = y.sent(),
                                    [3, 3];
                                case 2:
                                    r = null,
                                    y.label = 3;
                                case 3:
                                    (n = r) && (this._token = n.token,
                                    this._pkIndex = n.primaryKeyIndex),
                                    s = {},
                                    "number" == typeof this._token ? s.ts = this._token : s.token = this._token,
                                    y.label = 4;
                                case 4:
                                    return y.trys.push([4, 10, , 13]),
                                    [4, l.getMyGroupChannelChangeLogs(s)];
                                case 5:
                                    return f = {
                                        updatedChannels: (a = y.sent()).updated.map(function(t) {
                                            return t.cached_primary_key = m._pkIndex--,
                                            i.upsert(t)
                                        }),
                                        deletedChannelUrls: a.deleted
                                    },
                                    t.hasNext = a.has_more,
                                    (f.updatedChannels.length > 0 || f.deletedChannelUrls.length > 0) && (t.nextParams = this._token = a.next),
                                    ei.debug("Group channel collection changelog sync update channels count: ", f.updatedChannels.length),
                                    ei.debug("Group channel collection changelog sync deleted channel urls count: ", f.deletedChannelUrls.length),
                                    u ? [4, c.upsert(f.updatedChannels)] : [3, 9];
                                case 6:
                                    return y.sent(),
                                    [4, c.remove(f.deletedChannelUrls)];
                                case 7:
                                    return y.sent(),
                                    [4, o.set({
                                        key: h,
                                        value: {
                                            token: this._token,
                                            primaryKeyIndex: this._pkIndex
                                        },
                                        generation: 1
                                    })];
                                case 8:
                                    y.sent(),
                                    y.label = 9;
                                case 9:
                                    return p = {
                                        source: ev.CHANNEL_CHANGELOG,
                                        payload: f
                                    },
                                    d.send(p),
                                    [2, t];
                                case 10:
                                    return (g = y.sent()).isInvalidTokenError ? [4, o.remove(h)] : [3, 12];
                                case 11:
                                    y.sent(),
                                    y.label = 12;
                                case 12:
                                    throw g;
                                case 13:
                                    return [2]
                                }
                            })
                        })
                    }
                    )
                }
                return t.of = function(n) {
                    return eY[n] || (eY[n] = new t({
                        iid: n
                    })),
                    eY[n]
                }
                ,
                t.prototype.resume = function() {
                    ei.debug("Group channel collection changelog sync has resumed."),
                    this._sync.resume(0, !0)
                }
                ,
                t.prototype.pause = function() {
                    ei.debug("Group channel collection changelog sync has paused."),
                    this._sync.stop()
                }
                ,
                t
            }(), eJ = function(t, n) {
                for (var r = 0; r < t.length; r++)
                    if (t[r].url === n.url)
                        return r;
                return -1
            }, eZ = function(t, n, r) {
                if (t.length > 0) {
                    for (var i = 0, s = t.length - 1, a = Math.floor((i + s) / 2); i < s; ) {
                        var o = eX(t[a], n, r);
                        if (o > 0)
                            a = Math.floor((i + (s = a)) / 2);
                        else {
                            if (!(o < 0))
                                return a;
                            a = Math.floor(((i = a + 1) + s) / 2)
                        }
                    }
                    return eX(t[a], n, r) > 0 ? a : a + 1
                }
                return t.length
            }, e$ = function(t, n) {
                return n - t
            }, eX = function(t, n, r) {
                switch (r) {
                case eB.LATEST_LAST_MESSAGE:
                    if (t.lastMessage && !n.lastMessage)
                        return -1;
                    if (!t.lastMessage && n.lastMessage)
                        return 1;
                    if (t.lastMessage && n.lastMessage) {
                        var i, s = t.lastMessage.createdAt;
                        if (0 == (i = n.lastMessage.createdAt - s)) {
                            var a = t.createdAt;
                            0 == (i = n.createdAt - a) && (i = e$(t.cachedPrimaryKey, n.cachedPrimaryKey))
                        }
                        return i
                    }
                    return s = t.createdAt,
                    0 == (i = n.createdAt - s) && (i = e$(t.cachedPrimaryKey, n.cachedPrimaryKey)),
                    i;
                case eB.CHRONOLOGICAL:
                    return 0 == (i = n.createdAt - t.createdAt) && (i = e$(t.cachedPrimaryKey, n.cachedPrimaryKey)),
                    i;
                case eB.CHANNEL_NAME_ALPHABETICAL:
                    return 0 === (i = t.name.localeCompare(n.name)) && (i = e$(t.cachedPrimaryKey, n.cachedPrimaryKey)),
                    i
                }
            }, e0 = function() {}, e1 = {
                NAME_ALPHABETICAL: ["name", "-pk"],
                CHRONOLOGICAL: ["-createdAt", "-pk"],
                LATEST_LAST_MESSAGE: ["-lastMessageCreatedAt", "-createdAt", "-pk"]
            }, e2 = {
                LATEST: ["channelUrl", "-createdAt", "-messageId"],
                LATEST_UNSENT: ["channelUrl", "sendingStatus", "createdAt"],
                CHILD_MESSAGE_FIRST: ["channelUrl", "-parentMessageId", "-createdAt"]
            }, e3 = function() {
                function t() {}
                return t.prototype.isNetworkConnected = function() {
                    return !("undefined" == typeof navigator || !navigator.onLine)
                }
                ,
                t.ready = function() {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(t) {
                            return "undefined" != typeof navigator && navigator && "boolean" == typeof navigator.onLine ? [2, navigator.onLine] : [2, new Promise(function(t, n) {
                                g.default.get("https://www.google.com").then(function() {
                                    return t(!0)
                                }).catch(function() {
                                    return t(!1)
                                })
                            }
                            )]
                        })
                    })
                }
                ,
                t
            }(), e4 = 40;
            (e5 = eB || (eB = {})).LATEST_LAST_MESSAGE = "latest_last_message",
            e5.CHRONOLOGICAL = "chronological",
            e5.CHANNEL_NAME_ALPHABETICAL = "channel_name_alphabetical";
            var e5, e6, e8 = function() {
                function t(t) {
                    var n = t.iid
                      , r = t.filter
                      , i = t.order
                      , s = t.limit
                      , a = void 0 === s ? 20 : s
                      , o = this;
                    this._channels = [],
                    this._token = null,
                    this._hasMore = !0,
                    this._iid = n,
                    this._filter = r,
                    this._order = i,
                    this._limit = a,
                    this._syncLimit = Math.max(a, e4),
                    this._eventObserver = {
                        onevent: function(t) {
                            return G(o, void 0, void 0, function() {
                                return B(this, function(n) {
                                    return [2, this._handleEvent(t)]
                                })
                            })
                        }
                    },
                    this._eventHandler = {
                        onChannelsAdded: e0,
                        onChannelsUpdated: e0,
                        onChannelsDeleted: e0
                    };
                    var l = x.get(this._iid);
                    this._localCacheEnabled = l.container.localCacheEnabled,
                    this._localCacheEnabled && (this._backgroundSync = eW.of(this._iid, this._syncLimit),
                    this._backgroundSync.resume()),
                    this._changelogSync = eQ.of(this._iid),
                    this._changelogSync.resume(),
                    eN.of(this._iid).addObserver(this._eventObserver),
                    this._connectionStateObserver = {
                        onConnect: function() {
                            o._localCacheEnabled && o._backgroundSync.resume(),
                            o._changelogSync.resume()
                        },
                        onDisconnect: function() {
                            return G(o, void 0, void 0, function() {
                                return B(this, function(t) {
                                    switch (t.label) {
                                    case 0:
                                        return [4, e3.ready()];
                                    case 1:
                                        return t.sent() || (this._localCacheEnabled && this._backgroundSync.pause(),
                                        this._changelogSync.pause()),
                                        [2]
                                    }
                                })
                            })
                        }
                    },
                    eb.of(this._iid).addObserver(this._connectionStateObserver)
                }
                return t.prototype._handleEvent = function(t) {
                    var n = this
                      , r = t.source
                      , i = t.payload
                      , s = x.get(this._iid)
                      , a = new eL(r);
                    switch (r) {
                    case ev.CHANNEL_BACKGROUND:
                        break;
                    case ev.CHANNEL_CHANGELOG:
                        var o = i.updatedChannels
                          , l = i.deletedChannelUrls
                          , u = o.filter(function(t) {
                            return n._filter.match(t)
                        });
                        this._addChannelsToView(u, {
                            context: a
                        }),
                        this._removeChannelsFromView(l, {
                            context: a
                        });
                        break;
                    case ev.EVENT_USER_DECLINED_INVITATION:
                        var c = s.get("currentUserId")
                          , d = i.channel;
                        i.invitee.userId === c ? this._removeChannelsFromView([d.url], {
                            context: a
                        }) : this._filter.match(d) ? this._addChannelsToView([d], {
                            context: a
                        }) : this._removeChannelsFromView([d.url], {
                            context: a
                        });
                        break;
                    case ev.EVENT_USER_LEFT:
                        c = s.get("currentUserId"),
                        d = i.channel,
                        i.user.userId === c ? this._removeChannelsFromView([d.url], {
                            context: a
                        }) : this._filter.match(d) ? this._addChannelsToView([d], {
                            context: a
                        }) : this._removeChannelsFromView([d.url], {
                            context: a
                        });
                        break;
                    case ev.EVENT_USER_BANNED:
                    case ev.EVENT_USER_UNBANNED:
                        break;
                    case ev.EVENT_USER_MUTED:
                    case ev.EVENT_USER_UNMUTED:
                    case ev.EVENT_TYPING_STATUS_UPDATED:
                    case ev.EVENT_OPERATOR_UPDATED:
                    case ev.EVENT_CHANNEL_METADATA_UPDATED:
                    case ev.EVENT_CHANNEL_METADATA_DELETED:
                    case ev.EVENT_CHANNEL_METACOUNTER_UPDATED:
                    case ev.EVENT_CHANNEL_METACOUNTER_DELETED:
                    case ev.EVENT_READ_RECEIPT_UPDATED:
                    case ev.EVENT_USER_RECEIVED_INVITATION:
                    case ev.EVENT_USER_JOINED:
                    case ev.EVENT_CHANNEL_FROZEN:
                    case ev.EVENT_CHANNEL_UNFROZEN:
                    case ev.EVENT_CHANNEL_HIDDEN:
                    case ev.EVENT_CHANNEL_UNHIDDEN:
                    case ev.EVENT_CHANNEL_CHANGED:
                        d = i.channel,
                        this._filter.match(d) ? this._addChannelsToView([d], {
                            context: a
                        }) : this._removeChannelsFromView([d.url], {
                            context: a
                        });
                        break;
                    case ev.EVENT_CHANNEL_DELETED:
                        var h = i.channelUrl;
                        this._removeChannelsFromView([h], {
                            context: a
                        })
                    }
                }
                ,
                t.prototype._getRemoteChannels = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n, r;
                        return B(this, function(i) {
                            var s;
                            switch (i.label) {
                            case 0:
                                return t = Y.get(this._iid).GroupChannel,
                                [4, x.get(this._iid).get("apiClient").loadGroupChannelList(j(j({}, this._filter), {
                                    order: this._order,
                                    token: this._token,
                                    limit: this._limit,
                                    userIdsFilter: this._filter.userIdsFilter,
                                    searchFilter: (s = this._filter.searchFilter).searchQuery && s.searchFields ? {
                                        search_query: s.searchQuery,
                                        search_fields: s.searchFields.join(",").toLocaleLowerCase()
                                    } : {}
                                }))];
                            case 1:
                                return r = (n = i.sent()).channels.map(function(r) {
                                    return "number" == typeof n.ts && (r.ts = n.ts),
                                    t.upsert(r)
                                }),
                                [4, e9.of(this._iid).upsert(r)];
                            case 2:
                                return i.sent(),
                                [2, [r, n.next]]
                            }
                        })
                    })
                }
                ,
                t.prototype._addChannelsToView = function(t, n) {
                    void 0 === n && (n = {});
                    for (var r = n.context, i = void 0 === r ? null : r, s = [], a = [], o = 0; o < t.length; o++) {
                        var l = t[o]
                          , u = eJ(this._channels, l);
                        if (u < 0)
                            s.push(l),
                            (c = eZ(this._channels, l, this._order)) === this._channels.length ? this._channels.push(l) : this._channels.splice(c, 0, l);
                        else {
                            a.push(l),
                            this._channels.splice(u, 1);
                            var c = eZ(this._channels, l, this._order);
                            this._channels.splice(c, 0, l)
                        }
                    }
                    i && (s.length > 0 && this._eventHandler.onChannelsAdded(i, s),
                    a.length > 0 && this._eventHandler.onChannelsUpdated(i, a))
                }
                ,
                t.prototype._removeChannelsFromView = function(t, n) {
                    void 0 === n && (n = {});
                    for (var r = n.context, i = void 0 === r ? null : r, s = [], a = 0; a < t.length; a++) {
                        var o = t[a]
                          , l = this._channels.map(function(t) {
                            return t.url
                        }).indexOf(o);
                        l >= 0 && (s.push(this._channels[l].url),
                        this._channels.splice(l, 1))
                    }
                    return i && s.length > 0 && this._eventHandler.onChannelsDeleted(i, s),
                    s
                }
                ,
                Object.defineProperty(t.prototype, "channelList", {
                    get: function() {
                        return this._channels
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "hasMore", {
                    get: function() {
                        return this._hasMore
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.loadMore = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n, r, i, s;
                        return B(this, function(a) {
                            switch (a.label) {
                            case 0:
                                return this._hasMore ? [4, e3.ready()] : [3, 5];
                            case 1:
                                return a.sent() ? [3, 3] : (ei.debug("Group channel collection loadMore() from the cache."),
                                n = (t = e9.of(this._iid)).getNextContainerToken(this._order, this._channels),
                                [4, t.getNextChannels(this._filter, this._order, n, this._limit)]);
                            case 2:
                                return i = a.sent(),
                                this._addChannelsToView(i),
                                [2, i];
                            case 3:
                                return ei.debug("Group channel collection loadMore() from the server."),
                                [4, this._getRemoteChannels()];
                            case 4:
                                return i = (r = a.sent())[0],
                                s = r[1],
                                this._token = s,
                                this._token || (this._hasMore = !1),
                                this._addChannelsToView(i),
                                [2, i];
                            case 5:
                                return [2, []]
                            }
                        })
                    })
                }
                ,
                t.prototype.dispose = function() {
                    eb.of(this._iid).removeObserver(this._connectionStateObserver),
                    this._localCacheEnabled && this._backgroundSync.pause(),
                    this._changelogSync.pause(),
                    eN.of(this._iid).removeObserver(this._eventObserver)
                }
                ,
                t.prototype.setGroupChannelCollectionHandler = function(t) {
                    this._eventHandler = t
                }
                ,
                t.GroupChannelOrder = eB,
                t
            }(), e7 = {}, e9 = function() {
                function t(t) {
                    var n = t.iid
                      , r = t.collection;
                    this._collection = null,
                    this._pkIndex = Date.now(),
                    this._lastFetchedPrimaryKey = Date.now(),
                    this._iid = n,
                    this._collection = void 0 === r ? null : r,
                    e7[n] = this
                }
                return t.of = function(t) {
                    return e7[t]
                }
                ,
                t.prototype._serialize = function(t) {
                    var n = this._createPk();
                    return t.cachedPrimaryKey = n,
                    j(j({}, t.serialize()), {
                        lastMessageCreatedAt: t.lastMessage ? t.lastMessage.createdAt : -1,
                        pk: n
                    })
                }
                ,
                t.prototype._deserialize = function(t) {
                    return t ? Y.get(this._iid).GroupChannel.buildFromSerializedData(t) : null
                }
                ,
                Object.defineProperty(t.prototype, "_localCacheEnabled", {
                    get: function() {
                        return x.get(this._iid).get("localCacheEnabled")
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype._createPk = function() {
                    return this._pkIndex++
                }
                ,
                t.prototype._fetch = function(t, n, r) {
                    return G(this, void 0, void 0, function() {
                        var i, s, a, o, l, u, c, d = this;
                        return B(this, function(h) {
                            switch (h.label) {
                            case 0:
                                if (!this._localCacheEnabled)
                                    return [3, 2];
                                switch (i = e1.LATEST_LAST_MESSAGE,
                                n) {
                                case eB.CHANNEL_NAME_ALPHABETICAL:
                                    i = e1.NAME_ALPHABETICAL;
                                    break;
                                case eB.CHRONOLOGICAL:
                                    i = e1.CHRONOLOGICAL;
                                    break;
                                case eB.LATEST_LAST_MESSAGE:
                                    i = e1.LATEST_LAST_MESSAGE
                                }
                                return a = (s = r.containerToken).lastMessageCreatedAt,
                                o = s.createdAt,
                                l = s.name,
                                u = s.lastFetchedPrimaryKey,
                                c = {
                                    where: function(r) {
                                        switch (n) {
                                        case eB.LATEST_LAST_MESSAGE:
                                            if (r.lastMessageCreatedAt > a || r.lastMessageCreatedAt === a && e$(u, r.pk) >= 0 || r.lastMessageCreatedAt < 0 && (r.createdAt > o || r.createdAt === o && e$(u, r.pk) >= 0))
                                                return !1;
                                            break;
                                        case eB.CHANNEL_NAME_ALPHABETICAL:
                                            var i = r.name.localeCompare(l);
                                            if (i < 0 || 0 === i && e$(u, r.pk) >= 0)
                                                return !1;
                                            break;
                                        case eB.CHRONOLOGICAL:
                                            if (r.createdAt > o || r.createdAt === o && e$(u, r.pk) >= 0)
                                                return !1
                                        }
                                        return t.match(d._deserialize(r))
                                    },
                                    index: i
                                },
                                [4, this._collection.query(c).fetch({
                                    limit: r.limit
                                })];
                            case 1:
                                return [2, h.sent().map(function(t) {
                                    return d._deserialize(t)
                                })];
                            case 2:
                                return [2, []]
                            }
                        })
                    })
                }
                ,
                t.prototype.getNextContainerToken = function(t, n) {
                    switch (t) {
                    case eB.LATEST_LAST_MESSAGE:
                        return n.length > 0 ? {
                            lastMessageCreatedAt: (r = n[n.length - 1]).lastMessage ? r.lastMessage.createdAt : -1,
                            createdAt: r.createdAt,
                            lastFetchedPrimaryKey: r.cachedPrimaryKey
                        } : {
                            lastMessageCreatedAt: Number.MAX_SAFE_INTEGER,
                            createdAt: Number.MAX_SAFE_INTEGER,
                            lastFetchedPrimaryKey: this._lastFetchedPrimaryKey
                        };
                    case eB.CHRONOLOGICAL:
                        return n.length > 0 ? {
                            createdAt: (r = n[n.length - 1]).createdAt,
                            lastFetchedPrimaryKey: r.cachedPrimaryKey
                        } : {
                            createdAt: Number.MAX_SAFE_INTEGER,
                            lastFetchedPrimaryKey: this._lastFetchedPrimaryKey
                        };
                    case eB.CHANNEL_NAME_ALPHABETICAL:
                        var r;
                        return n.length > 0 ? {
                            name: (r = n[n.length - 1]).name,
                            lastFetchedPrimaryKey: r.cachedPrimaryKey
                        } : {
                            name: "",
                            lastFetchedPrimaryKey: this._lastFetchedPrimaryKey
                        }
                    }
                }
                ,
                t.prototype.get = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return this._localCacheEnabled ? (n = this._deserialize,
                                [4, this._collection.getByKey(t)]) : [3, 2];
                            case 1:
                                return [2, n.apply(this, [r.sent()])];
                            case 2:
                                return [2, null]
                            }
                        })
                    })
                }
                ,
                t.prototype.getNextChannels = function(t, n, r, i) {
                    return void 0 === i && (i = 100),
                    G(this, void 0, void 0, function() {
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                return [4, this._fetch(t, n, {
                                    containerToken: r,
                                    limit: i
                                })];
                            case 1:
                                return [2, s.sent()]
                            }
                        })
                    })
                }
                ,
                t.prototype.upsert = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r = this;
                        return B(this, function(i) {
                            switch (i.label) {
                            case 0:
                                return this._localCacheEnabled ? (n = t.map(function(t) {
                                    return r._serialize(t)
                                }),
                                [4, this._collection.upsertMany(n)]) : [3, 2];
                            case 1:
                                i.sent(),
                                i.label = 2;
                            case 2:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.remove = function(t) {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return this._localCacheEnabled ? [4, this._collection.removeIf({
                                    where: {
                                        url: {
                                            "/in": t
                                        }
                                    }
                                })] : [3, 3];
                            case 1:
                                return n.sent(),
                                [4, id.getInstance(this._iid).clearCachedMessages(t)];
                            case 2:
                                n.sent(),
                                n.label = 3;
                            case 3:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.clear = function() {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(t) {
                            switch (t.label) {
                            case 0:
                                return this._localCacheEnabled ? [4, this._collection.clear()] : [3, 2];
                            case 1:
                                t.sent(),
                                t.label = 2;
                            case 2:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t
            }(), te = function() {
                function t() {
                    this.messageType = "",
                    this.customTypes = ["*"],
                    this.senderUserIds = [],
                    this.sendingStatus = null
                }
                return t.prototype.clone = function() {
                    var n = new t
                      , r = JSON.parse(JSON.stringify(this));
                    return Object.keys(r).forEach(function(t) {
                        n[t] = r[t]
                    }),
                    n
                }
                ,
                t.prototype.match = function(t) {
                    return !!((!this.messageType || this.messageType === t.messageType) && (this.customTypes.includes("*") || this.customTypes.includes(t.customType)) && (!(this.senderUserIds.length > 0) || (t.isUserMessage() || t.isFileMessage()) && this.senderUserIds.includes(t.sender.userId))) && (!this.sendingStatus || this.sendingStatus === t.sendingStatus)
                }
                ,
                t
            }(), tt = function(t, n) {
                if (t.length > 0) {
                    for (var r = 0, i = t.length - 1, s = Math.floor((r + i) / 2); r < i; ) {
                        var a = t[s].createdAt - n.createdAt;
                        if (a > 0)
                            s = Math.floor((r + (i = s)) / 2);
                        else {
                            if (!(a < 0))
                                return s;
                            s = Math.floor(((r = s + 1) + i) / 2)
                        }
                    }
                    return t[s].createdAt > n.createdAt ? s : s + 1
                }
                return t.length
            }, tn = function(t) {
                var n = t.channel
                  , r = t.ts
                  , i = t.prevLimit
                  , s = t.nextLimit
                  , a = t.filter
                  , o = {
                    channel: n,
                    token: r,
                    tokenType: "timestamp",
                    isInclusive: !0,
                    prevResultSize: void 0 === i ? 0 : i,
                    nextResultSize: void 0 === s ? 0 : s,
                    shouldReverse: !1,
                    includeMetaArray: !0,
                    includeReactions: !0,
                    includeThreadInfo: !0,
                    includeReplies: !0,
                    includeParentMessageText: !0,
                    showSubchannelMessagesOnly: !0
                };
                if (a) {
                    var l = a.messageType
                      , u = a.customTypes
                      , c = a.senderUserIds;
                    l && (o.messageType = l),
                    u.length > 0 && (o.customTypes = u),
                    c.length > 0 && (o.senderUserIds = c)
                }
                return o
            }, tr = function(t, n, r) {
                if (r.length > 0) {
                    var i = r.map(function(t) {
                        return t.createdAt
                    });
                    n.includes("prev") && (t.top = Math.min.apply(Math, V([t.top], i, !1))),
                    n.includes("next") && (t.bottom = Math.max.apply(Math, V([t.bottom], i, !1)))
                }
            }, ti = function(t) {
                return new Promise(function(n, r) {
                    setTimeout(function() {
                        return n()
                    }, t)
                }
                )
            }, ts = {};
            (ta = e6 || (e6 = {})).SUCCEEDED = "succeeded",
            ta.UNSENT = "unsent";
            var ta, to, tl = function() {
                function t(t) {
                    var n = t.iid
                      , r = t.collections;
                    this._iid = n,
                    this._collections = r,
                    ts[n] = this
                }
                return t.of = function(t) {
                    return ts[t]
                }
                ,
                t.prototype._serialize = function(t) {
                    return t.serialize()
                }
                ,
                t.prototype._deserialize = function(t) {
                    if (t) {
                        var n = j(j({}, t), {
                            messageId: parseInt(t.messageId)
                        })
                          , r = Y.get(this._iid)
                          , i = r.UserMessage
                          , s = r.FileMessage
                          , a = r.AdminMessage;
                        if ("user" === n.messageType)
                            return i.buildFromSerializedData(n);
                        if ("file" === n.messageType)
                            return s.buildFromSerializedData(n);
                        if ("admin" === n.messageType)
                            return a.buildFromSerializedData(n)
                    }
                    return null
                }
                ,
                t.deserialize = function(t, n) {
                    if (n) {
                        var r = j(j({}, n), {
                            messageId: parseInt(n.messageId)
                        })
                          , i = Y.get(t)
                          , s = i.UserMessage
                          , a = i.FileMessage
                          , o = i.AdminMessage;
                        if ("user" === r.messageType)
                            return s.buildFromSerializedData(r);
                        if ("file" === r.messageType)
                            return a.buildFromSerializedData(r);
                        if ("admin" === r.messageType)
                            return o.buildFromSerializedData(r)
                    }
                    return null
                }
                ,
                Object.defineProperty(t.prototype, "_localCacheEnabled", {
                    get: function() {
                        return x.get(this._iid).get("localCacheEnabled")
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype._getMessageCollectionByType = function(t) {
                    return t ? this._collections[t] : this._collections.succeeded
                }
                ,
                t.prototype._getIndexByCollection = function(t) {
                    return "UnsentMessage" === t.name ? e2.LATEST_UNSENT : e2.LATEST
                }
                ,
                t.prototype._fetch = function(t, n, r) {
                    return G(this, void 0, void 0, function() {
                        var i, s = this;
                        return B(this, function(a) {
                            switch (a.label) {
                            case 0:
                                return this._localCacheEnabled ? (i = {
                                    where: function(i) {
                                        if (!i || t && i.channelUrl !== t || r.parentMessageId && i.parentMessageId !== r.parentMessageId)
                                            return !1;
                                        if (r.backward) {
                                            if (i.createdAt <= r.token)
                                                return !1
                                        } else if (i.createdAt >= r.token)
                                            return !1;
                                        return !!n.match(s._deserialize(i))
                                    },
                                    index: r.index,
                                    backward: r.backward
                                },
                                [4, r.collection.query(i)]) : [3, 3];
                            case 1:
                                return [4, a.sent().fetch({
                                    limit: r.limit
                                })];
                            case 2:
                                return [2, Promise.all(a.sent().map(function(t) {
                                    return G(s, void 0, void 0, function() {
                                        var n, i, s;
                                        return B(this, function(a) {
                                            switch (a.label) {
                                            case 0:
                                                return n = this._deserialize(t),
                                                (i = t.messageParams) && i.file && eu.isFileTypeBlob(i.fileType) && "string" == typeof n._messageParams.file ? (s = n._messageParams,
                                                [4, r.collection.getBlob(i.file)]) : [3, 2];
                                            case 1:
                                                s._file = a.sent(),
                                                a.label = 2;
                                            case 2:
                                                return [2, n]
                                            }
                                        })
                                    })
                                }))];
                            case 3:
                                return [2, []]
                            }
                        })
                    })
                }
                ,
                t.fetch = function(n, r, i) {
                    return G(this, void 0, void 0, function() {
                        var s, a = this;
                        return B(this, function(o) {
                            switch (o.label) {
                            case 0:
                                return s = {
                                    where: function(s) {
                                        if (!s)
                                            return !1;
                                        if (i.backward) {
                                            if (s.createdAt <= i.token)
                                                return !1
                                        } else if (s.createdAt >= i.token)
                                            return !1;
                                        return !!r.match(t.deserialize(n, s))
                                    },
                                    index: i.index,
                                    backward: i.backward
                                },
                                [4, i.collection.query(s)];
                            case 1:
                                return [4, o.sent().fetch({
                                    limit: i.limit
                                })];
                            case 2:
                                return [2, Promise.all(o.sent().map(function(r) {
                                    return G(a, void 0, void 0, function() {
                                        var s, a, o;
                                        return B(this, function(l) {
                                            switch (l.label) {
                                            case 0:
                                                return s = t.deserialize(n, r),
                                                (a = r.messageParams) && a.file && eu.isFileTypeBlob(a.fileType) && "string" == typeof s._messageParams.file ? (o = s._messageParams,
                                                [4, i.collection.getBlob(a.file)]) : [3, 2];
                                            case 1:
                                                o.file = l.sent(),
                                                l.label = 2;
                                            case 2:
                                                return [2, s]
                                            }
                                        })
                                    })
                                }))]
                            }
                        })
                    })
                }
                ,
                t.prototype.get = function(t, n) {
                    return G(this, void 0, void 0, function() {
                        var r, i;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                return this._localCacheEnabled ? (r = this._getMessageCollectionByType(n),
                                i = this._deserialize,
                                [4, r.getByKey(t)]) : [3, 2];
                            case 1:
                                return [2, i.apply(this, [s.sent()])];
                            case 2:
                                return [2, null]
                            }
                        })
                    })
                }
                ,
                t.prototype.getPreviousAndNextMessages = function(t, n, r, i, s) {
                    return void 0 === i && (i = 30),
                    G(this, void 0, void 0, function() {
                        var a, o;
                        return B(this, function(l) {
                            switch (l.label) {
                            case 0:
                                return [4, this.getPreviousMessages(t, n, r, i, s)];
                            case 1:
                                return a = l.sent(),
                                [4, this.getNextMessages(t, n, r, i, s)];
                            case 2:
                                return o = l.sent(),
                                [2, function(t) {
                                    for (var n = [], r = {}, i = 0; i < t.length; i++) {
                                        var s = t[i];
                                        s.messageId ? r[s.messageId] || (r[s.messageId] = !0,
                                        n.push(s)) : n.push(s)
                                    }
                                    return n
                                }(V(V([], a, !0), o, !0))]
                            }
                        })
                    })
                }
                ,
                t.prototype.getPreviousMessages = function(t, n, r, i, s) {
                    return void 0 === i && (i = 30),
                    G(this, void 0, void 0, function() {
                        var a;
                        return B(this, function(o) {
                            switch (o.label) {
                            case 0:
                                return a = this._getMessageCollectionByType(s),
                                [4, this._fetch(t, n, {
                                    token: r,
                                    limit: i,
                                    backward: !1,
                                    collection: a,
                                    index: this._getIndexByCollection(a)
                                })];
                            case 1:
                                return [2, o.sent().reverse()]
                            }
                        })
                    })
                }
                ,
                t.prototype.getNextMessages = function(t, n, r, i, s) {
                    return void 0 === i && (i = 30),
                    G(this, void 0, void 0, function() {
                        var a;
                        return B(this, function(o) {
                            switch (o.label) {
                            case 0:
                                return a = this._getMessageCollectionByType(s),
                                [4, this._fetch(t, n, {
                                    token: r,
                                    limit: i,
                                    backward: !0,
                                    collection: a,
                                    index: this._getIndexByCollection(a)
                                })];
                            case 1:
                                return [2, o.sent()]
                            }
                        })
                    })
                }
                ,
                t.prototype.getAllChildMessages = function(t, n, r) {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(i) {
                            switch (i.label) {
                            case 0:
                                return [4, this._fetch(t.channelUrl, n, {
                                    token: Date.now(),
                                    limit: null,
                                    collection: r,
                                    backward: !1,
                                    index: e2.CHILD_MESSAGE_FIRST,
                                    parentMessageId: t.messageId
                                })];
                            case 1:
                                return [2, i.sent()]
                            }
                        })
                    })
                }
                ,
                t.prototype.getUnsentMessages = function(t, n) {
                    return G(this, void 0, void 0, function() {
                        var r;
                        return B(this, function(i) {
                            switch (i.label) {
                            case 0:
                                return r = this._getMessageCollectionByType(e6.UNSENT),
                                [4, this._fetch(t, n, {
                                    token: 0,
                                    limit: null,
                                    collection: r,
                                    backward: !0,
                                    index: e2.LATEST_UNSENT
                                })];
                            case 1:
                                return [2, i.sent()]
                            }
                        })
                    })
                }
                ,
                t.prototype.getAllUnsentMessages = function(n) {
                    return G(this, void 0, void 0, function() {
                        var r;
                        return B(this, function(i) {
                            switch (i.label) {
                            case 0:
                                return r = this._getMessageCollectionByType(e6.UNSENT),
                                [4, t.fetch(this._iid, n, {
                                    token: Date.now(),
                                    limit: null,
                                    collection: r,
                                    backward: !1,
                                    index: e2.LATEST_UNSENT
                                })];
                            case 1:
                                return [2, i.sent()]
                            }
                        })
                    })
                }
                ,
                t.prototype.countBetween = function(t, n, r, i, s) {
                    return G(this, void 0, void 0, function() {
                        var a, o = this;
                        return B(this, function(l) {
                            switch (l.label) {
                            case 0:
                                return this._localCacheEnabled ? (a = {
                                    where: function(s) {
                                        return s.channelUrl === t && !(r > s.createdAt || s.createdAt > i) && n.match(o._deserialize(s))
                                    },
                                    index: e2.LATEST
                                },
                                [4, this._getMessageCollectionByType(s).query(a)]) : [3, 3];
                            case 1:
                                return [4, l.sent().count()];
                            case 2:
                                return [2, l.sent()];
                            case 3:
                                return [2, 0]
                            }
                        })
                    })
                }
                ,
                t.prototype._serializeMessages = function(t, n) {
                    return G(this, void 0, void 0, function() {
                        var r, i, s = this;
                        return B(this, function(a) {
                            switch (a.label) {
                            case 0:
                                return r = this._getMessageCollectionByType(n),
                                i = [],
                                [4, Promise.all(t.map(function(t) {
                                    return G(s, void 0, void 0, function() {
                                        var n, s;
                                        return B(this, function(a) {
                                            switch (a.label) {
                                            case 0:
                                                return (n = t.serialize()) ? ((n = j({}, n)).messageParams && (n.messageParams = j({}, n.messageParams)),
                                                t.sendingStatus && "succeeded" !== t.sendingStatus ? n.messageId = "unsent-".concat(t.reqId) : n.messageId = "".concat(t.messageId),
                                                t.isFileMessage() && t._messageParams && t._messageParams.file && eu.isBlob(t._messageParams.file) && eu.isFileTypeBlob(t._messageParams.fileType) ? [4, r.saveBlob(t._messageParams.file, t.reqId)] : [3, 2]) : [3, 3];
                                            case 1:
                                                s = a.sent(),
                                                n.messageParams.file = s,
                                                a.label = 2;
                                            case 2:
                                                i.push(n),
                                                a.label = 3;
                                            case 3:
                                                return [2]
                                            }
                                        })
                                    })
                                }))];
                            case 1:
                                return a.sent(),
                                [2, i]
                            }
                        })
                    })
                }
                ,
                t.prototype.upsert = function(t, n) {
                    return G(this, void 0, void 0, function() {
                        var r, i, s, a, o, l, u, c, d, h, f, p, g, m, y;
                        return B(this, function(_) {
                            switch (_.label) {
                            case 0:
                                return this._localCacheEnabled ? (r = id.getInstance(this._iid),
                                i = this._getMessageCollectionByType(n),
                                [4, this._serializeMessages(t, n)]) : [3, 13];
                            case 1:
                                return s = _.sent(),
                                [4, i.upsertMany(s)];
                            case 2:
                                if (_.sent(),
                                n && n !== e6.SUCCEEDED)
                                    return [3, 13];
                                a = [],
                                o = [],
                                l = 0,
                                _.label = 3;
                            case 3:
                                return l < t.length ? (u = t[l]).sendingStatus && u.sendingStatus === r.MessageSendingStatus.SUCCEEDED && u.updatedAt > 0 ? (d = (c = a).concat,
                                [4, this._locallyUpdateChildMessages(u, e6.SUCCEEDED)]) : [3, 6] : [3, 7];
                            case 4:
                                return a = d.apply(c, [_.sent()]),
                                f = (h = o).concat,
                                [4, this._locallyUpdateChildMessages(u, e6.UNSENT)];
                            case 5:
                                o = f.apply(h, [_.sent()]),
                                _.label = 6;
                            case 6:
                                return l++,
                                [3, 3];
                            case 7:
                                return a.length > 0 ? (p = this._getMessageCollectionByType(e6.SUCCEEDED),
                                [4, this._serializeMessages(a, e6.SUCCEEDED)]) : [3, 10];
                            case 8:
                                return g = _.sent(),
                                [4, p.upsertMany(g)];
                            case 9:
                                _.sent(),
                                _.label = 10;
                            case 10:
                                return o.length > 0 ? (m = this._getMessageCollectionByType(e6.UNSENT),
                                [4, this._serializeMessages(o, e6.UNSENT)]) : [3, 13];
                            case 11:
                                return y = _.sent(),
                                [4, m.upsertMany(y)];
                            case 12:
                                _.sent(),
                                _.label = 13;
                            case 13:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype._locallyUpdateChildMessages = function(t, n) {
                    return G(this, void 0, void 0, function() {
                        var r, i, s;
                        return B(this, function(a) {
                            switch (a.label) {
                            case 0:
                                return r = new te,
                                i = [],
                                s = this._getMessageCollectionByType(n),
                                [4, this.getAllChildMessages(t, r, s)];
                            case 1:
                                return a.sent().forEach(function(n) {
                                    n.applyParentMessage(t) && i.push(n)
                                }),
                                [2, i]
                            }
                        })
                    })
                }
                ,
                t.prototype.remove = function(t, n) {
                    return G(this, void 0, void 0, function() {
                        var r, i;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                return this._localCacheEnabled ? [4, ti(500)] : [3, 3];
                            case 1:
                                return s.sent(),
                                r = this._getMessageCollectionByType(n),
                                i = {
                                    messageId: {
                                        "/in": t.map(function(t) {
                                            return "".concat(t)
                                        })
                                    }
                                },
                                [4, r.removeIf({
                                    where: i
                                })];
                            case 2:
                                s.sent(),
                                s.label = 3;
                            case 3:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.removeUnsentMessages = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a, o;
                        return B(this, function(l) {
                            switch (l.label) {
                            case 0:
                                return n = t.channelUrl,
                                r = t.sendingStatus,
                                i = t.reqIds,
                                s = [],
                                this._localCacheEnabled ? [4, ti(500)] : [3, 3];
                            case 1:
                                return l.sent(),
                                a = this._getMessageCollectionByType(e6.UNSENT),
                                o = {
                                    channelUrl: {
                                        "=": n
                                    }
                                },
                                r && (o.sendingStatus = {
                                    "=": r
                                }),
                                i && i.length > 0 && (o.reqId = {
                                    "/in": i
                                }),
                                [4, a.removeIf({
                                    where: o
                                })];
                            case 2:
                                s = l.sent(),
                                l.label = 3;
                            case 3:
                                return [2, s]
                            }
                        })
                    })
                }
                ,
                t.prototype.removeFailedMessages = function(t, n) {
                    return G(this, void 0, void 0, function() {
                        var r, i, s, a;
                        return B(this, function(o) {
                            switch (o.label) {
                            case 0:
                                return r = [],
                                this._localCacheEnabled ? [4, ti(500)] : [3, 3];
                            case 1:
                                return o.sent(),
                                i = this._getMessageCollectionByType(e6.UNSENT),
                                s = id.getInstance(this._iid),
                                a = {
                                    channelUrl: {
                                        "=": t
                                    },
                                    sendingStatus: {
                                        "=": s.MessageSendingStatus.FAILED
                                    }
                                },
                                n && n.length > 0 && (a.reqId = {
                                    "/in": n
                                }),
                                [4, i.removeIf({
                                    where: a
                                })];
                            case 2:
                                r = o.sent(),
                                o.label = 3;
                            case 3:
                                return [2, r]
                            }
                        })
                    })
                }
                ,
                t.prototype.clearByChannelUrl = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n = this;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return [4, Promise.all(Object.keys(e6).map(function(r) {
                                    return n._getMessageCollectionByType(e6[r]).removeIf({
                                        where: {
                                            channelUrl: {
                                                "=": t
                                            }
                                        }
                                    })
                                }))];
                            case 1:
                                return r.sent(),
                                [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.clear = function(t) {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return this._localCacheEnabled ? [4, this._getMessageCollectionByType(t).clear()] : [3, 2];
                            case 1:
                                n.sent(),
                                n.label = 2;
                            case 2:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.clearAll = function() {
                    return G(this, void 0, void 0, function() {
                        var t = this;
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return this._localCacheEnabled ? [4, Promise.all(Object.keys(e6).map(function(n) {
                                    return t.clear(e6[n])
                                }))] : [3, 2];
                            case 1:
                                n.sent(),
                                n.label = 2;
                            case 2:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.clearAbove = function(t, n) {
                    return G(this, void 0, void 0, function() {
                        var r, i;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                return this._localCacheEnabled ? (r = this._getMessageCollectionByType(n),
                                i = {
                                    createdAt: {
                                        "<": t
                                    }
                                },
                                [4, r.removeIf({
                                    where: i
                                })]) : [3, 2];
                            case 1:
                                s.sent(),
                                s.label = 2;
                            case 2:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t
            }(), tu = function() {
                function t() {
                    this.messageId = null,
                    this.userId = null,
                    this.key = null,
                    this.operation = "",
                    this.updatedAt = null
                }
                return t.createFromJson = function(t) {
                    var n = parseInt(t.msg_id)
                      , r = t.user_id
                      , i = t.operation
                      , s = t.reaction
                      , a = t.updated_at;
                    if (n && "string" == typeof r && "string" == typeof i && ["add", "delete"].indexOf(i.toLowerCase()) >= 0 && "string" == typeof s && s && "number" == typeof a) {
                        var o = new this;
                        return o.messageId = n,
                        o.userId = r,
                        o.key = s,
                        o.operation = i.toLowerCase(),
                        o.updatedAt = a,
                        o
                    }
                    return null
                }
                ,
                t
            }(), tc = function(t) {
                return Object.keys(t).forEach(function(n) {
                    t[n] && "object" == typeof t[n] && tc(t[n])
                }),
                Object.freeze(t)
            }, td = function() {
                function t() {}
                return t.serialize = function(t, n) {
                    void 0 === n && (n = null);
                    var r = JSON.parse(JSON.stringify(t));
                    return n && n(r),
                    tc(r)
                }
                ,
                t.serializeWithoutFreeze = function(t, n) {
                    void 0 === n && (n = null);
                    var r = JSON.parse(JSON.stringify(t));
                    return n && n(r),
                    r
                }
                ,
                t.deserialize = function(t, n) {
                    void 0 === n && (n = null);
                    var r = JSON.parse(JSON.stringify(t));
                    return n && n(r),
                    r
                }
                ,
                t
            }(), th = {
                TIMESTAMP: "timestamp",
                MESSAGE_ID: "messageId"
            }, tf = new WeakMap, tp = function() {
                function t(n) {
                    b(this, t),
                    this.messageId = 0,
                    this.messageType = t.MESSAGE_TYPE_BASE,
                    this.channelUrl = "",
                    this.data = null,
                    this.customType = null,
                    this.silent = !1,
                    this.createdAt = 0,
                    this.updatedAt = 0,
                    this.channelType = null,
                    this.metaArrays = [],
                    this.reactions = [],
                    this.mentionType = null,
                    this.mentionedUsers = [],
                    this.mentionedUserIds = [],
                    this.mentionedMessageTemplate = null,
                    this.sendingStatus = null,
                    tf.set(this, 0),
                    this.parentMessageId = 0,
                    this.parentMessageText = null,
                    this.threadInfo = null,
                    this.isReplyToChannel = !1,
                    this.parentMessage = null,
                    this.ogMetaData = null,
                    this.isOperatorMessage = !1,
                    this.appleCriticalAlertOptions = null,
                    this.reqId = "",
                    this._isAutoResendRegistered = !1,
                    n && this.__update(n)
                }
                return S(t, [{
                    key: "serialize",
                    value: function(t) {
                        var n = this;
                        return td.serialize(this, function(r) {
                            r.hasOwnProperty("_sender") && (r.sender = r._sender,
                            delete r._sender),
                            r.hasOwnProperty("_isAutoResendRegistered") && (r.isAutoResendRegistered = r._isAutoResendRegistered,
                            delete r._isAutoResendRegistered),
                            n.appleCriticalAlertOptions && (r.appleCriticalAlertOptions = n.appleCriticalAlertOptions.serialize()),
                            t && t(r)
                        })
                    }
                }, {
                    key: "isIdentical",
                    value: function(t) {
                        return !("object" !== E(t) || !t.hasOwnProperty("messageId")) && (0 !== this.messageId && 0 !== t.messageId ? this.messageId === t.messageId : this.reqId === t.reqId)
                    }
                }, {
                    key: "isEqual",
                    value: function(t) {
                        return ef.deepEqual(this, t)
                    }
                }, {
                    key: "isOpenChannel",
                    value: function() {
                        var t = Y.get(this._iid).BaseChannel;
                        return this.channelType === t.CHANNEL_TYPE_OPEN
                    }
                }, {
                    key: "isGroupChannel",
                    value: function() {
                        var t = Y.get(this._iid).BaseChannel;
                        return this.channelType === t.CHANNEL_TYPE_GROUP
                    }
                }, {
                    key: "isUserMessage",
                    value: function() {
                        return this.messageType === t.MESSAGE_TYPE_USER
                    }
                }, {
                    key: "isAdminMessage",
                    value: function() {
                        return this.messageType === t.MESSAGE_TYPE_ADMIN
                    }
                }, {
                    key: "isFileMessage",
                    value: function() {
                        return this.messageType === t.MESSAGE_TYPE_FILE
                    }
                }, {
                    key: "__update",
                    value: function(t) {
                        var n = this
                          , r = id.getInstance(this._iid)
                          , i = Y.get(this._iid)
                          , s = i.User
                          , a = i.BaseChannel
                          , o = i.BaseMessageParams
                          , l = i.BaseMessage
                          , u = i.Reaction
                          , c = i.MessageMetaArray
                          , d = i.ThreadInfo
                          , h = i.OGMetaData
                          , f = i.AppleCriticalAlertOptions;
                        if (t.hasOwnProperty("msg_id") && t.msg_id && (this.messageId = parseInt(t.msg_id)),
                        t.hasOwnProperty("type"))
                            switch (t.type) {
                            case "MESG":
                                this.messageType = l.MESSAGE_TYPE_USER;
                                break;
                            case "FILE":
                                this.messageType = l.MESSAGE_TYPE_FILE;
                                break;
                            case "BRDM":
                            case "ADMM":
                                this.messageType = l.MESSAGE_TYPE_ADMIN
                            }
                        t.hasOwnProperty("message_id") && t.message_id && (this.messageId = parseInt(t.message_id)),
                        this.channelUrl = t.hasOwnProperty("channel_url") ? String(t.channel_url) : "",
                        this.data = t.hasOwnProperty("data") ? String(t.data) : "",
                        this.customType = t.hasOwnProperty("custom_type") ? String(t.custom_type) : "",
                        t.hasOwnProperty("silent") && (this.silent = t.silent),
                        this.createdAt = t.hasOwnProperty("ts") ? parseInt(t.ts) : 0,
                        t.hasOwnProperty("created_at") && (this.createdAt = parseInt(t.created_at)),
                        this.updatedAt = t.hasOwnProperty("updated_at") ? parseInt(t.updated_at) : 0,
                        this.channelType = t.hasOwnProperty("channel_type") ? String(t.channel_type) : a.CHANNEL_TYPE_GROUP;
                        var p = t.hasOwnProperty("metaarray") ? t.metaarray : {}
                          , g = t.hasOwnProperty("metaarray_key_order") ? t.metaarray_key_order : Object.keys(p).sort(function(t, n) {
                            return t.localeCompare(n)
                        });
                        this.metaArrays = [];
                        for (var m = 0; m < g.length; m++) {
                            var y = g[m];
                            this.metaArrays.push(new c(y,p[y] || []))
                        }
                        if (t.hasOwnProperty("sorted_metaarray")) {
                            var _ = t.sorted_metaarray;
                            Array.isArray(_) && (this.metaArrays = _.map(function(t) {
                                return new c(t.key,t.value)
                            }))
                        }
                        if (this.reactions = [],
                        t.hasOwnProperty("reactions") && Array.isArray(t.reactions))
                            for (var E = 0; E < t.reactions.length; E++) {
                                var b = u.createFromJson(t.reactions[E]);
                                b && this.reactions.push(b)
                            }
                        if (this.mentionType = t.hasOwnProperty("mention_type") ? t.mention_type : o.MentionType.USERS,
                        this.mentionedUsers = [],
                        t.hasOwnProperty("mentioned_users") && t.mentioned_users.forEach(function(t) {
                            var r = new s(t);
                            n.mentionedUsers.push(r)
                        }),
                        this.mentionedUserIds = [],
                        t.hasOwnProperty("mentioned_user_ids") && (this.mentionedUserIds = t.mentioned_user_ids),
                        t.hasOwnProperty("mentioned_message_template") && t.mentioned_message_template && (this.mentionedMessageTemplate = t.mentioned_message_template),
                        this.sendingStatus = this.messageId > 0 ? r.MessageSendingStatus.SUCCEEDED : r.MessageSendingStatus.FAILED,
                        t.hasOwnProperty("sending_status") && (this.sendingStatus = t.sending_status),
                        t.hasOwnProperty("root_message_id") && t.root_message_id && tf.set(this, parseInt(t.root_message_id)),
                        t.hasOwnProperty("parent_message_id") && t.parent_message_id && (this.parentMessageId = parseInt(t.parent_message_id)),
                        this.threadInfo = new d(t.thread_info),
                        this.isReplyToChannel = !!t.hasOwnProperty("is_reply_to_channel") && t.is_reply_to_channel,
                        t.hasOwnProperty("parent_message_info")) {
                            var C = v({}, t.parent_message_info);
                            t.parent_message_info.hasOwnProperty("file") && (C.require_auth = !!t.parent_message_info.file.require_auth);
                            var S = {
                                channelType: this.channelType,
                                channelUrl: this.channelUrl
                            };
                            switch (this.parentMessage = a.buildMessage(C, S),
                            this.parentMessage.messageType) {
                            case l.MESSAGE_TYPE_USER:
                                this.parentMessageText = this.parentMessage.message;
                                break;
                            case l.MESSAGE_TYPE_FILE:
                                this.parentMessageText = this.parentMessage.name
                            }
                        }
                        t.hasOwnProperty("og_tag") && (this.ogMetaData = new h(t.og_tag)),
                        t.hasOwnProperty("is_op_msg") && (this.isOperatorMessage = t.is_op_msg),
                        t.hasOwnProperty("apple_critical_alert_options") && (this.appleCriticalAlertOptions = new f(t.apple_critical_alert_options)),
                        t.hasOwnProperty("is_auto_resend_registered") && (this._isAutoResendRegistered = t.is_auto_resend_registered),
                        this.reqId = t.hasOwnProperty("req_id") ? t.req_id : ""
                    }
                }, {
                    key: "getMetaArraysByKeys",
                    value: function(t) {
                        return Array.isArray(t) ? this.metaArrays.filter(function(n) {
                            return t.indexOf(n.key) > -1
                        }) : []
                    }
                }, {
                    key: "metaArray",
                    get: function() {
                        var t = {};
                        return this.metaArrays.forEach(function(n) {
                            t[n.key] = n.value
                        }),
                        t
                    },
                    set: function(t) {
                        if ("object" === E(t) && t) {
                            var n = Y.get(this._iid).MessageMetaArray
                              , r = [];
                            Object.keys(t).forEach(function(i) {
                                r.push(new n(i,t[i]))
                            }),
                            this.metaArrays = r
                        }
                    }
                }, {
                    key: "getMetaArrayByKeys",
                    value: function(t) {
                        var n = {};
                        return this.getMetaArraysByKeys(t).forEach(function(t) {
                            n[t.key] = t.value
                        }),
                        n
                    }
                }, {
                    key: "applyReactionEvent",
                    value: function(t) {
                        var n = this
                          , r = Y.get(this._iid).Reaction
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: tu,
                            constraint: function(t) {
                                return parseInt(t.messageId) === parseInt(n.messageId)
                            }
                        })])
                          , a = k(s, 2);
                        if (i = a[0],
                        t = a[1],
                        !i) {
                            for (var o = !1, l = 0; l < this.reactions.length; l++)
                                if (this.reactions[l].key === t.key) {
                                    this.reactions[l]._applyEvent(t),
                                    this.reactions[l].isEmpty && this.reactions.splice(l, 1),
                                    o = !0;
                                    break
                                }
                            o || "add" !== t.operation || this.reactions.push(new r(t.key,[t.userId],t.updatedAt))
                        }
                    }
                }, {
                    key: "_getThreadedMessageList",
                    value: function(n, r, i, s) {
                        var a = this
                          , o = Y.get(this._iid).ThreadedMessageListParams
                          , l = null
                          , u = eI.parse(arguments, [new eI({
                            type: "number"
                        }), new eI({
                            type: "string",
                            constraint: function(t) {
                                return Object.values(th).includes(t)
                            }
                        }), new eI({
                            type: o,
                            constraint: function(t) {
                                return t._validate()
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , c = k(u, 5);
                        return l = c[0],
                        n = c[1],
                        r = c[2],
                        i = c[3],
                        s = c[4],
                        eg(this._iid, function(s) {
                            if (l)
                                s(l, null);
                            else {
                                var o = Y.get(a._iid)
                                  , u = o.GroupChannel
                                  , c = o.OpenChannel;
                                a.isGroupChannel() ? u.getChannel(a.channelUrl, L.INTERNAL_CALL, function(o, l) {
                                    if (id.getInstance(a._iid).getErrorFirstCallback()) {
                                        var u = [o, l];
                                        l = u[0],
                                        o = u[1]
                                    }
                                    l ? s(l, null) : x.get(a._iid).container.apiClient.getMessageList(v(v({
                                        channel: o,
                                        token: n,
                                        tokenType: r
                                    }, i), {}, {
                                        shouldReverse: i.reverse,
                                        parentMessageId: a.messageId,
                                        includeThreadInfo: !0,
                                        replyType: t.ReplyType.ALL
                                    })).then(function(t) {
                                        var n = Y.get(a._iid).BaseChannel
                                          , r = t.messages.map(function(t) {
                                            return n.buildMessage(t, o)
                                        }).filter(function(t) {
                                            return null !== t
                                        });
                                        s(null, {
                                            parentMessage: r.filter(function(t) {
                                                return t.messageId === a.messageId
                                            })[0],
                                            threadedReplies: r.filter(function(t) {
                                                return t.parentMessageId === a.messageId
                                            })
                                        })
                                    }).catch(function(t) {
                                        s(t, null)
                                    })
                                }) : a.isOpenChannel() && c.getChannel(a.channelUrl, L.INTERNAL_CALL, function(o, l) {
                                    if (id.getInstance(a._iid).getErrorFirstCallback()) {
                                        var u = [o, l];
                                        l = u[0],
                                        o = u[1]
                                    }
                                    l ? s(l, null) : x.get(a._iid).container.apiClient.getMessageList(v(v({
                                        channel: o,
                                        token: n,
                                        tokenType: r
                                    }, i), {}, {
                                        shouldReverse: i.reverse,
                                        parentMessageId: a.messageId,
                                        includeThreadInfo: !0,
                                        replyType: t.ReplyType.ALL
                                    })).then(function(t) {
                                        var n = Y.get(a._iid).BaseChannel
                                          , r = t.messages.map(function(t) {
                                            return n.buildMessage(t, o)
                                        }).filter(function(t) {
                                            return null !== t
                                        });
                                        s(null, {
                                            parentMessage: r.filter(function(t) {
                                                return t.messageId === a.messageId
                                            })[0],
                                            threadedReplies: r.filter(function(t) {
                                                return t.parentMessageId === a.messageId
                                            })
                                        })
                                    }).catch(function(t) {
                                        s(t, null)
                                    })
                                })
                            }
                        }, s)
                    }
                }, {
                    key: "getThreadedMessagesByTimestamp",
                    value: function(t, n, r) {
                        return this._getThreadedMessageList(t, th.TIMESTAMP, n, r)
                    }
                }, {
                    key: "applyThreadInfoUpdateEvent",
                    value: function(t) {
                        var n = this
                          , r = Y.get(this._iid).ThreadInfoUpdateEvent
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: r,
                            constraint: function(t) {
                                return parseInt(t.targetMessageId) === parseInt(n.messageId)
                            }
                        })])
                          , a = k(s, 2);
                        return i = a[0],
                        t = a[1],
                        !i && (this.threadInfo = t.threadInfo,
                        !0)
                    }
                }, {
                    key: "applyParentMessage",
                    value: function(t) {
                        if (this.parentMessageId === t.messageId) {
                            var n = this.parentMessage.updatedAt;
                            if (t.updatedAt >= n)
                                return this.parentMessage = t,
                                !0
                        }
                        return !1
                    }
                }, {
                    key: "_setRootMessageId",
                    value: function(t) {
                        tf.set(this, t)
                    }
                }], [{
                    key: "MESSAGE_TYPE_BASE",
                    get: function() {
                        return "base"
                    }
                }, {
                    key: "MESSAGE_TYPE_ADMIN",
                    get: function() {
                        return "admin"
                    }
                }, {
                    key: "MESSAGE_TYPE_USER",
                    get: function() {
                        return "user"
                    }
                }, {
                    key: "MESSAGE_TYPE_FILE",
                    get: function() {
                        return "file"
                    }
                }, {
                    key: "SendingStatus",
                    get: function() {
                        return {
                            NONE: "none",
                            PENDING: "pending",
                            FAILED: "failed",
                            CANCELED: "canceled",
                            SUCCEEDED: "succeeded"
                        }
                    }
                }, {
                    key: "ReplyType",
                    get: function() {
                        return {
                            ALL: "all",
                            NONE: "none",
                            ONLY_REPLY_TO_CHANNEL: "only_reply_to_channel"
                        }
                    }
                }, {
                    key: "getMessage",
                    value: function(t, n) {
                        var r = this
                          , i = Y.get(this._iid)
                          , s = i.BaseChannel
                          , a = i.MessageRetrievalParams
                          , o = null
                          , l = eI.parse(arguments, [new eI({
                            type: a,
                            constraint: function(t) {
                                return t._validate()
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , u = k(l, 3);
                        return o = u[0],
                        t = u[1],
                        n = u[2],
                        eg(this._iid, function(n) {
                            if (o)
                                n(o, null);
                            else {
                                var i = Y.get(r._iid)
                                  , a = i.GroupChannel
                                  , l = i.OpenChannel;
                                switch (t.channelType) {
                                case s.CHANNEL_TYPE_GROUP:
                                    a.getChannel(t.channelUrl, L.INTERNAL_CALL, function(i, a) {
                                        if (id.getInstance(r._iid).getErrorFirstCallback()) {
                                            var o = [i, a];
                                            a = o[0],
                                            i = o[1]
                                        }
                                        a ? n(a, null) : x.get(r._iid).container.apiClient.getMessage(v({
                                            channel: i
                                        }, t), function(t, r) {
                                            t ? n(t, null) : n(null, s.buildMessage(r, i))
                                        })
                                    });
                                    break;
                                case s.CHANNEL_TYPE_OPEN:
                                    l.getChannel(t.channelUrl, L.INTERNAL_CALL, function(i, a) {
                                        if (id.getInstance(r._iid).getErrorFirstCallback()) {
                                            var o = [i, a];
                                            a = o[0],
                                            i = o[1]
                                        }
                                        a ? n(a, null) : x.get(r._iid).container.apiClient.getMessage(v({
                                            channel: i
                                        }, t), function(t, r) {
                                            t ? n(t, null) : n(null, s.buildMessage(r, i))
                                        })
                                    })
                                }
                            }
                        }, n)
                    }
                }]),
                t
            }(), tg = function() {
                function t(t) {
                    this.nickname = "",
                    this.plainProfileUrl = "",
                    this.userId = "",
                    this.connectionStatus = "",
                    this.lastSeenAt = null,
                    this.metaData = {},
                    this.isActive = !0,
                    this.friendDiscoveryKey = null,
                    this.friendName = null,
                    this._preferredLanguages = null,
                    this.requireAuth = null,
                    t && this.__update(t)
                }
                return t.objectify = function(t) {
                    var n = t.userId
                      , r = t.nickname
                      , i = t.plainProfileUrl
                      , s = t.connectionStatus
                      , a = t.lastSeenAt
                      , o = t.metaData
                      , l = t.isActive
                      , u = t.friendDiscoveryKey
                      , c = t.friendName
                      , d = t.preferredLanguages
                      , h = t.requireAuth;
                    return {
                        user_id: void 0 === n ? null : n,
                        nickname: void 0 === r ? "" : r,
                        profile_url: void 0 === i ? "" : i,
                        is_online: void 0 === s ? "" : s,
                        last_seen_at: void 0 === a ? 0 : a,
                        metadata: void 0 === o ? {} : o,
                        is_active: void 0 === l || l,
                        friend_discovery_key: void 0 === u ? null : u,
                        friend_name: void 0 === c ? null : c,
                        preferred_languages: void 0 === d ? null : d,
                        require_auth_for_profile_image: void 0 !== h && h
                    }
                }
                ,
                t.buildFromSerializedData = function(t) {
                    var n = Y.get(this._iid).User
                      , r = td.deserialize(t);
                    return new n(n.objectify(r))
                }
                ,
                Object.defineProperty(t.prototype, "preferredLanguages", {
                    get: function() {
                        return this._preferredLanguages
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.__update = function(n) {
                    var r = x.get(this._iid).container.auth;
                    n.hasOwnProperty("guest_id") && (this.userId = n.guest_id),
                    n.hasOwnProperty("user_id") && (this.userId = n.user_id),
                    n.hasOwnProperty("name") && (this.nickname = n.name),
                    n.hasOwnProperty("nickname") && (this.nickname = n.nickname),
                    n.hasOwnProperty("require_auth_for_profile_image") ? this.requireAuth = n.require_auth_for_profile_image : this.requireAuth = null,
                    (n.hasOwnProperty("image") || n.hasOwnProperty("profile_url")) && (this.plainProfileUrl = n.image || n.profile_url || "",
                    Object.defineProperty(this, "profileUrl", {
                        value: this.requireAuth ? "".concat(this.plainProfileUrl, "?auth=").concat(r.eKey) : this.plainProfileUrl,
                        configurable: !0,
                        writable: !1
                    })),
                    n.hasOwnProperty("is_online") ? n.is_online === t.NON_AVAILABLE ? this.connectionStatus = t.NON_AVAILABLE : this.connectionStatus = n.is_online ? t.ONLINE : t.OFFLINE : this.connectionStatus = t.NON_AVAILABLE,
                    n.hasOwnProperty("last_seen_at") ? this.lastSeenAt = parseInt(n.last_seen_at) : this.lastSeenAt = 0,
                    n.hasOwnProperty("metadata") ? this.metaData = n.metadata : this.metaData = {},
                    n.hasOwnProperty("is_active") ? this.isActive = void 0 === n.is_active || n.is_active : this.isActive = !0,
                    n.hasOwnProperty("friend_discovery_key") ? this.friendDiscoveryKey = n.friend_discovery_key : this.friendDiscoveryKey = null,
                    n.hasOwnProperty("friend_name") ? this.friendName = n.friend_name : this.friendName = null,
                    n.hasOwnProperty("preferred_languages") ? this._preferredLanguages = n.preferred_languages || null : this._preferredLanguages = null
                }
                ,
                t.prototype._updateMetaData = function(t, n) {
                    var r = this;
                    void 0 === n && (n = !1);
                    var i = Y.get(this._iid).GroupChannel;
                    Object.keys(t).forEach(function(i) {
                        n ? delete r.metaData[i] : r.metaData[i] = t[i]
                    }),
                    Object.keys(i.cachedChannels).forEach(function(t) {
                        if (i.cachedChannels.hasOwnProperty(t)) {
                            var n = i.cachedChannels[t];
                            n.memberMap.hasOwnProperty(r.userId) && (n.memberMap[r.userId].metaData = r.metaData)
                        }
                    })
                }
                ,
                t.prototype.serialize = function() {
                    return td.serialize(this, function(t) {
                        t.hasOwnProperty("_preferredLanguages") && (t.preferredLanguages = t._preferredLanguages,
                        delete t._preferredLanguages)
                    })
                }
                ,
                t.prototype.getOriginalProfileUrl = function() {
                    var t = "";
                    if (((t = (t = this.plainProfileUrl.indexOf("://") > -1 ? this.plainProfileUrl.split("/")[2] : this.plainProfileUrl.split("/")[0]).split("?")[0]).indexOf("sendbird.com") > -1 || t.indexOf("sendbirdtest.com") > -1 || t.indexOf("intoz.com") > -1 || t.indexOf("file-local") > -1) && this.plainProfileUrl.indexOf(t + "/profile_images/") > -1) {
                        var n = this.plainProfileUrl.replace("profile_images/", "");
                        return n === this.plainProfileUrl ? "" : n
                    }
                    return ""
                }
                ,
                t.prototype.createMetaData = function(t, n) {
                    var r, i = this, s = null;
                    return r = eI.parse(arguments, [new eI({
                        type: "object",
                        constraint: function(t) {
                            return Object.keys(t).length > 0 && !Array.isArray(t)
                        }
                    }), new eI({
                        type: "callback"
                    })]),
                    s = r[0],
                    t = r[1],
                    n = r[2],
                    eg(this._iid, function(n) {
                        s ? n(s, null) : x.get(i._iid).container.apiClient.createUserMetaData({
                            metaData: t
                        }, function(t, r) {
                            t || i._updateMetaData(r),
                            n(t, r)
                        })
                    }, n)
                }
                ,
                t.prototype.updateMetaData = function(t, n, r) {
                    var i, s = this, a = null;
                    return i = eI.parse(arguments, [new eI({
                        type: "object",
                        constraint: function(t) {
                            return !Array.isArray(t) && Object.keys(t).length > 0 && Object.keys(t).map(function(n) {
                                return t[n]
                            }).every(function(t) {
                                return "string" == typeof t
                            })
                        }
                    }), new eI({
                        type: "boolean",
                        optional: !0,
                        defaultValue: !1
                    }), new eI({
                        type: "callback"
                    })]),
                    a = i[0],
                    t = i[1],
                    n = i[2],
                    r = i[3],
                    eg(this._iid, function(r) {
                        a ? r(a, null) : x.get(s._iid).container.apiClient.updateUserMetaData({
                            metaData: t,
                            upsert: n
                        }, function(t, n) {
                            t || s._updateMetaData(n),
                            r(t, n)
                        })
                    }, r)
                }
                ,
                t.prototype.deleteMetaData = function(t, n) {
                    var r, i = this, s = null;
                    return r = eI.parse(arguments, [new eI({
                        type: "string",
                        constraint: function(t) {
                            return t.length > 0
                        }
                    }), new eI({
                        type: "callback"
                    })]),
                    s = r[0],
                    t = r[1],
                    n = r[2],
                    eg(this._iid, function(n) {
                        if (s)
                            n(s, null);
                        else {
                            var r = {};
                            r[t] = "",
                            x.get(i._iid).container.apiClient.deleteUserMetaData({
                                metaDataKey: t
                            }, function(t, s) {
                                t || i._updateMetaData(r, !0),
                                n(t, s)
                            })
                        }
                    }, n)
                }
                ,
                t.prototype.deleteAllMetaData = function(t) {
                    var n = this;
                    return eg(this._iid, function(t) {
                        var r = n.metaData;
                        x.get(n._iid).container.apiClient.deleteAllUserMetaData({}, function(i, s) {
                            i || n._updateMetaData(r, !0),
                            t(i, s)
                        })
                    }, t)
                }
                ,
                Object.defineProperty(t, "NON_AVAILABLE", {
                    get: function() {
                        return "nonavailable"
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t, "ONLINE", {
                    get: function() {
                        return "online"
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t, "OFFLINE", {
                    get: function() {
                        return "offline"
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t
            }(), tm = function() {
                function t(t, n) {
                    this._source = t,
                    this._sendingStatus = n
                }
                return Object.defineProperty(t.prototype, "source", {
                    get: function() {
                        return this._source
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "isFromEvent", {
                    get: function() {
                        return this._source >= 2e3
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "sendingStatus", {
                    get: function() {
                        return this._sendingStatus
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t
            }(), ty = {}, t_ = function(t, n) {
                return "sendbird:".concat(t, "@channel/").concat(n, "/message/sync")
            }, tv = function() {
                function t(t) {
                    var n = t.iid
                      , r = t.channel
                      , i = t.limit
                      , s = this;
                    this._prevSync = null,
                    this._nextSync = null,
                    this._syncRange = new ez({
                        top: Number.MAX_SAFE_INTEGER,
                        bottom: -1
                    }),
                    this._isPrevSyncComplete = !1,
                    this._isNextSyncComplete = !1,
                    this._iid = n,
                    this._channel = r,
                    this._limit = void 0 === i ? tT : i;
                    var a = Y.get(this._iid).BaseChannel
                      , o = x.get(this._iid)
                      , l = o.get("currentUserId")
                      , u = o.get("store")
                      , c = o.get("apiClient")
                      , d = tl.of(this._iid)
                      , h = eN.of(this._iid)
                      , f = t_(l, this._channel.url)
                      , p = o.container.concurrentCallLimit
                      , g = o.container.backOffDelay;
                    this._prevSync = new eq(f,function(t) {
                        return G(s, void 0, void 0, function() {
                            var t, n, i, s, o, l, p, g, m, y = this;
                            return B(this, function(_) {
                                switch (_.label) {
                                case 0:
                                    return t = {
                                        hasNext: !0,
                                        nextParams: null
                                    },
                                    [4, u.get(f)];
                                case 1:
                                    return (n = _.sent()) && n.isPrevSyncComplete ? [3, 7] : (n && (this._syncRange = n.range,
                                    this._isPrevSyncComplete = n.isPrevSyncComplete),
                                    i = tn({
                                        channel: this._channel,
                                        ts: this._syncRange.top,
                                        prevLimit: this._limit
                                    }),
                                    [4, c.getMessageList(i)]);
                                case 2:
                                    return s = _.sent(),
                                    o = [],
                                    l = s.messages.map(function(t) {
                                        var n = a.buildMessage(t, y._channel);
                                        return (n.isUserMessage() || n.isFileMessage()) && n._isSentByMe() && o.push(n.reqId),
                                        n
                                    }),
                                    p = this.getMinCreatedAt(l),
                                    this._syncRange.top = Math.min(this._syncRange.top, p),
                                    this._syncRange.bottom < 0 && (this._syncRange.bottom = this.getMaxCreatedAt(l)),
                                    this._isPrevSyncComplete = l.length < this._limit,
                                    ei.debug("Message collection background sync fetched messages count: ", l.length),
                                    [4, d.upsert(l)];
                                case 3:
                                    return _.sent(),
                                    o.length > 0 ? [4, d.removeUnsentMessages({
                                        channelUrl: this._channel.url,
                                        reqIds: o
                                    })] : [3, 5];
                                case 4:
                                    _.sent(),
                                    _.label = 5;
                                case 5:
                                    return g = {
                                        range: this._syncRange,
                                        isPrevSyncComplete: this._isPrevSyncComplete,
                                        isNextSyncComplete: n ? n.isNextSyncComplete : this._isNextSyncComplete
                                    },
                                    [4, u.set({
                                        key: f,
                                        value: g,
                                        generation: 1
                                    })];
                                case 6:
                                    return _.sent(),
                                    m = {
                                        source: ev.MESSAGE_BACKGROUND,
                                        payload: {
                                            channel: r,
                                            messages: l
                                        }
                                    },
                                    h.send(m),
                                    t.hasNext = !this._isPrevSyncComplete,
                                    [3, 8];
                                case 7:
                                    ei.debug("Message collection background sync has finished."),
                                    t.hasNext = !1,
                                    _.label = 8;
                                case 8:
                                    return [2, t]
                                }
                            })
                        })
                    }
                    ,p,g),
                    this._nextSync = new eq(f,function(t) {
                        return G(s, void 0, void 0, function() {
                            var t, n, i, s, o, l, p, g, m, y = this;
                            return B(this, function(_) {
                                switch (_.label) {
                                case 0:
                                    return t = {
                                        hasNext: !0,
                                        nextParams: null
                                    },
                                    [4, u.get(f)];
                                case 1:
                                    return (n = _.sent()) ? (this._syncRange = n.range,
                                    i = tn({
                                        channel: this._channel,
                                        ts: this._syncRange.bottom,
                                        nextLimit: this._limit
                                    }),
                                    [4, c.getMessageList(i)]) : [3, 7];
                                case 2:
                                    return s = _.sent(),
                                    o = [],
                                    l = s.messages.map(function(t) {
                                        var n = a.buildMessage(t, y._channel);
                                        return (n.isUserMessage() || n.isFileMessage()) && n._isSentByMe() && o.push(n.reqId),
                                        n
                                    }),
                                    p = this.getMaxCreatedAt(l),
                                    this._syncRange.bottom = Math.max(this._syncRange.bottom, p),
                                    this._isNextSyncComplete = l.length < this._limit,
                                    [4, d.upsert(l)];
                                case 3:
                                    return _.sent(),
                                    o.length > 0 ? [4, d.removeUnsentMessages({
                                        channelUrl: this._channel.url,
                                        reqIds: o
                                    })] : [3, 5];
                                case 4:
                                    _.sent(),
                                    _.label = 5;
                                case 5:
                                    return g = {
                                        range: this._syncRange,
                                        isPrevSyncComplete: n ? n.isPrevSyncComplete : this._isPrevSyncComplete,
                                        isNextSyncComplete: this._isNextSyncComplete
                                    },
                                    [4, u.set({
                                        key: f,
                                        value: g,
                                        generation: 1
                                    })];
                                case 6:
                                    _.sent(),
                                    m = {
                                        source: ev.MESSAGE_BACKGROUND,
                                        payload: {
                                            channel: r,
                                            messages: l
                                        }
                                    },
                                    h.send(m),
                                    t.hasNext = !this._isNextSyncComplete,
                                    _.label = 7;
                                case 7:
                                    return [2, t]
                                }
                            })
                        })
                    }
                    ,p,g)
                }
                return t.of = function(n, r, i) {
                    return void 0 === i && (i = tT),
                    ty[n] || (ty[n] = {}),
                    ty[n][r.url] || (ty[n][r.url] = new t({
                        iid: n,
                        channel: r,
                        limit: i
                    })),
                    ty[n][r.url]
                }
                ,
                Object.defineProperty(t.prototype, "range", {
                    get: function() {
                        return this._syncRange
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.resume = function() {
                    ei.debug("Message collection background sync has resumed."),
                    this._isPrevSyncComplete || this._prevSync.resume(null),
                    this._isNextSyncComplete || this._nextSync.resume(null)
                }
                ,
                t.prototype.pause = function() {
                    ei.debug("Message collection background sync has paused."),
                    this._prevSync.stop(),
                    this._nextSync.stop()
                }
                ,
                t.prototype.getMinCreatedAt = function(t) {
                    var n = Number.MAX_SAFE_INTEGER;
                    return t.forEach(function(t) {
                        var r = t.createdAt;
                        r < n && (n = r)
                    }),
                    n
                }
                ,
                t.prototype.getMaxCreatedAt = function(t) {
                    var n = 0;
                    return t.forEach(function(t) {
                        var r = t.createdAt;
                        r > n && (n = r)
                    }),
                    n
                }
                ,
                t
            }(), tE = {}, tb = function(t, n) {
                return "sendbird:".concat(t, "@channel/").concat(n, "/message/changelogs")
            }, tC = function() {
                function t(t) {
                    var n = t.iid
                      , r = t.channel
                      , i = this;
                    this._token = 0,
                    this._sync = null,
                    this._iid = n,
                    this._channel = r;
                    var s = Y.get(this._iid).BaseChannel
                      , a = x.get(this._iid)
                      , o = a.get("currentUserId")
                      , l = a.get("store")
                      , u = a.get("apiClient")
                      , c = a.container.localCacheEnabled
                      , d = tl.of(this._iid)
                      , h = eN.of(this._iid)
                      , f = tb(o, this._channel.url);
                    this._sync = new eq(f,function(t) {
                        return G(i, void 0, void 0, function() {
                            var t, n, i, o, p, g, m, y, _, v, E = this;
                            return B(this, function(b) {
                                switch (b.label) {
                                case 0:
                                    return t = {
                                        hasNext: !0,
                                        nextParams: ""
                                    },
                                    c ? [4, l.get(f)] : [3, 2];
                                case 1:
                                    return i = b.sent(),
                                    [3, 3];
                                case 2:
                                    i = null,
                                    b.label = 3;
                                case 3:
                                    n = i,
                                    this._token = n ? n.token : a.get("firstConnectedAt") / 1e3,
                                    o = {
                                        channelUrl: this._channel.url,
                                        isOpenChannel: this._channel.isOpenChannel(),
                                        includeMetaArray: !0,
                                        includeReactions: !0,
                                        includeReplies: !0,
                                        includeParentMessageText: !0,
                                        includeThreadInfo: !0
                                    },
                                    "number" == typeof this._token ? o.timestamp = this._token : o.token = this._token,
                                    b.label = 4;
                                case 4:
                                    return b.trys.push([4, 12, , 15]),
                                    [4, u.getMessageChangeLogs(o)];
                                case 5:
                                    return m = {
                                        updatedMessages: g = (p = b.sent()).updated.map(function(t) {
                                            return s.buildMessage(t, E._channel)
                                        }),
                                        deletedMessageIds: p.deleted.map(function(t) {
                                            return parseInt(t.message_id)
                                        })
                                    },
                                    t.hasNext = p.has_more,
                                    (m.updatedMessages.length > 0 || m.deletedMessageIds.length > 0) && (t.nextParams = this._token = p.next),
                                    c ? (y = [],
                                    g.forEach(function(t) {
                                        (t.isUserMessage() || t.isFileMessage()) && t._isSentByMe() && y.push(t.reqId)
                                    }),
                                    y.length > 0 ? [4, d.removeUnsentMessages({
                                        channelUrl: this._channel.url,
                                        reqIds: y
                                    })] : [3, 7]) : [3, 11];
                                case 6:
                                    b.sent(),
                                    b.label = 7;
                                case 7:
                                    return [4, d.upsert(g)];
                                case 8:
                                    return b.sent(),
                                    [4, d.remove(m.deletedMessageIds)];
                                case 9:
                                    return b.sent(),
                                    [4, l.set({
                                        key: f,
                                        value: {
                                            token: this._token
                                        },
                                        generation: 1
                                    })];
                                case 10:
                                    b.sent(),
                                    b.label = 11;
                                case 11:
                                    return ei.debug("Message collection changelog sync update messages count: ", m.updatedMessages.length),
                                    ei.debug("Message collection changelog sync deleted message ids count: ", m.deletedMessageIds.length),
                                    _ = {
                                        source: ev.MESSAGE_CHANGELOG,
                                        payload: j({
                                            channel: r
                                        }, m)
                                    },
                                    h.send(_),
                                    [2, t];
                                case 12:
                                    return (v = b.sent()).isInvalidTokenError ? [4, l.remove(f)] : [3, 14];
                                case 13:
                                    b.sent(),
                                    b.label = 14;
                                case 14:
                                    throw v;
                                case 15:
                                    return [2]
                                }
                            })
                        })
                    }
                    )
                }
                return t.of = function(n, r) {
                    return tE[n] || (tE[n] = {}),
                    tE[n][r.url] || (tE[n][r.url] = new t({
                        iid: n,
                        channel: r
                    })),
                    tE[n][r.url]
                }
                ,
                t.prototype.resume = function() {
                    ei.debug("Message collection changelog sync has resumed."),
                    this._sync.resume(null, !0)
                }
                ,
                t.prototype.pause = function() {
                    ei.debug("Message collection changelog sync has paused."),
                    this._sync.stop()
                }
                ,
                t
            }();
            (tS = to || (to = {})).CACHE_AND_REPLACE_BY_API = "cache_and_replace_by_api",
            tS.CACHE_ONLY = "cache_only";
            var tS, tA, tN = function() {
                function t() {
                    this._onCacheResult = null,
                    this._onApiResult = null
                }
                return t.prototype.invokeCacheResult = function(t, n) {
                    this._onCacheResult(t, n)
                }
                ,
                t.prototype.invokeApiResult = function(t, n) {
                    this._onApiResult(t, n)
                }
                ,
                t.prototype.onCacheResult = function(t) {
                    return this._onCacheResult = t,
                    this
                }
                ,
                t.prototype.onApiResult = function(t) {
                    return this._onApiResult = t,
                    this
                }
                ,
                t
            }();
            (tG = tA || (tA = {}))[tG.BACKGROUND_SYNC_CLOSE = 0] = "BACKGROUND_SYNC_CLOSE",
            tG[tG.BACKGROUND_SYNC_OPEN = 1] = "BACKGROUND_SYNC_OPEN",
            tG[tG.FILL = 2] = "FILL",
            tG[tG.USER_CALL = 3] = "USER_CALL";
            var tT = 100
              , tI = new ez({
                top: Number.MAX_SAFE_INTEGER,
                bottom: 0
            })
              , tO = new Map
              , tw = function(t) {
                return "sendbird@message/fill/".concat(t, "/").concat(ex())
            }
              , tk = function() {
                function t(t) {
                    var n = t.iid
                      , r = t.channel
                      , i = t.startingPoint
                      , s = t.filter
                      , a = t.limit
                      , o = void 0 === a ? 100 : a
                      , l = this;
                    this._hugeGapCheckTimer = null,
                    this._messages = [],
                    this._syncRange = new ez(j({}, tI)),
                    this._hasPrevious = !0,
                    this._hasNext = !0,
                    this._unsentMessages = [],
                    this._iid = n,
                    this._channel = r,
                    this._startingPoint = i,
                    this._filter = s,
                    this._limit = o,
                    this._syncLimit = Math.max(o, tT),
                    this._eventObserver = {
                        onevent: function(t) {
                            return G(l, void 0, void 0, function() {
                                return B(this, function(n) {
                                    switch (n.label) {
                                    case 0:
                                        return [4, this._handleEvent(t)];
                                    case 1:
                                        return n.sent(),
                                        [2]
                                    }
                                })
                            })
                        }
                    },
                    this._eventHandler = {
                        onMessagesAdded: e0,
                        onMessagesUpdated: e0,
                        onMessagesDeleted: e0,
                        onChannelUpdated: e0,
                        onChannelDeleted: e0,
                        onHugeGapDetected: e0
                    };
                    var u = x.get(this._iid);
                    this._localCacheEnabled = u.container.localCacheEnabled,
                    this._localCacheEnabled && (this._backgroundSync = tv.of(this._iid, this._channel, this._syncLimit),
                    this._backgroundSync.resume()),
                    this._changelogSync = tC.of(this._iid, this._channel),
                    this._changelogSync.resume(),
                    this._connectionObserver = {
                        onConnect: function() {
                            l._checkHugeGap(),
                            l._localCacheEnabled && l._backgroundSync.resume(),
                            l._changelogSync.resume()
                        },
                        onDisconnect: function() {
                            return G(l, void 0, void 0, function() {
                                return B(this, function(t) {
                                    switch (t.label) {
                                    case 0:
                                        return [4, e3.ready()];
                                    case 1:
                                        return t.sent() || (this._previousFillSync.stop(),
                                        this._nextFillSync.stop(),
                                        this._localCacheEnabled && this._backgroundSync.pause(),
                                        this._changelogSync.pause()),
                                        [2]
                                    }
                                })
                            })
                        }
                    },
                    this._previousFillSync = new eq(tw("prev"),function(t) {
                        return G(l, void 0, void 0, function() {
                            var n, r, i;
                            return B(this, function(s) {
                                switch (s.label) {
                                case 0:
                                    return [4, this._getRemoteMessages({
                                        ts: t,
                                        prevLimit: this._syncLimit
                                    })];
                                case 1:
                                    return (n = s.sent()).length > 0 ? (r = Math.min.apply(Math, n.map(function(t) {
                                        return t.createdAt
                                    })),
                                    this._syncRange.top = Math.min(this._syncRange.top, r),
                                    i = new tm(ev.MESSAGE_FILL,n[0].sendingStatus),
                                    this._addOnlyMessageToView(n, {
                                        context: i
                                    }),
                                    [2, {
                                        hasNext: n.length < this._syncLimit || this._syncRange.top >= r,
                                        nextParams: this._syncRange.top
                                    }]) : [2, {
                                        hasNext: !1,
                                        nextParams: 0
                                    }]
                                }
                            })
                        })
                    }
                    ),
                    this._nextFillSync = new eq(tw("next"),function(t) {
                        return G(l, void 0, void 0, function() {
                            var n, r, i;
                            return B(this, function(s) {
                                switch (s.label) {
                                case 0:
                                    return [4, this._getRemoteMessages({
                                        ts: t,
                                        nextLimit: this._syncLimit
                                    })];
                                case 1:
                                    return (n = s.sent()).length > 0 ? (r = Math.max.apply(Math, n.map(function(t) {
                                        return t.createdAt
                                    })),
                                    this._syncRange.bottom = Math.max(this._syncRange.bottom, r),
                                    i = new tm(ev.MESSAGE_FILL,n[0].sendingStatus),
                                    this._addOnlyMessageToView(n, {
                                        context: i
                                    }),
                                    [2, {
                                        hasNext: n.length < this._syncLimit || this._syncRange.bottom <= r,
                                        nextParams: this._syncRange.bottom
                                    }]) : [2, {
                                        hasNext: !1,
                                        nextParams: 0
                                    }]
                                }
                            })
                        })
                    }
                    ),
                    eb.of(this._iid).addObserver(this._connectionObserver)
                }
                return t.prototype._handleEvent = function(t) {
                    var n = t.source
                      , r = t.payload
                      , i = void 0 === r ? {} : r
                      , s = id.getInstance(this._iid);
                    switch (t.source) {
                    case ev.MESSAGE_BACKGROUND:
                        break;
                    case ev.MESSAGE_CHANGELOG:
                        var a = i.channel
                          , o = i.updatedMessages
                          , l = i.deletedMessageIds;
                        if (a && a.url === this._channel.url) {
                            if (o && o.length > 0) {
                                this._removeMatchingUnsentMessagesFromView(o);
                                var u = new tm(n,o[0].sendingStatus);
                                this._addMessagesToView(o, {
                                    context: u
                                })
                            }
                            l && l.length > 0 && (d = this._removeMessagesFromView(l, {})).length > 0 && (u = new tm(n,d[0].sendingStatus),
                            this._eventHandler.onMessagesDeleted(u, this._channel, d))
                        }
                        break;
                    case ev.LOCAL_MESSAGE_PENDING_CREATED:
                    case ev.LOCAL_MESSAGE_RESEND_STARTED:
                    case ev.LOCAL_MESSAGE_CANCELED:
                        var c = (a = i.channel,
                        i.message);
                        u = new tm(n,c.sendingStatus),
                        a.url === this._channel.url && this._upsertUnsentMessagesToView([c], {
                            context: u
                        });
                        break;
                    case ev.EVENT_MESSAGE_SENT:
                        if (a = i.channel,
                        c = i.message,
                        a.url === this._channel.url) {
                            var d = this._removeMatchingUnsentMessagesFromView([c]);
                            if (this._hasNext)
                                d.length > 0 && (u = new tm(n,d[0].sendingStatus),
                                this._eventHandler.onMessagesDeleted(u, a, d));
                            else {
                                this._addMessagesToView([c], {});
                                var u = new tm(n,c.sendingStatus);
                                d.length > 0 ? this._eventHandler.onMessagesUpdated(u, a, [c]) : this._eventHandler.onMessagesAdded(u, a, [c])
                            }
                        }
                        break;
                    case ev.EVENT_MESSAGE_RECEIVED:
                        a = i.channel,
                        c = i.message,
                        a.url !== this._channel.url || this._hasNext || (u = new tm(n,c.sendingStatus),
                        this._addMessagesToView([c], {
                            context: u
                        }));
                        break;
                    case ev.LOCAL_MESSAGE_FAILED:
                        a = i.channel,
                        c = i.message,
                        a.url === this._channel.url && c.sendingStatus === s.MessageSendingStatus.FAILED && (u = new tm(n,c.sendingStatus),
                        this._upsertUnsentMessagesToView([c], {
                            context: u
                        }));
                        break;
                    case ev.EVENT_MESSAGE_UPDATED:
                        a = i.channel,
                        c = i.message,
                        a.url === this._channel.url && (u = new tm(n,c.sendingStatus),
                        this._addMessagesToView([c], {
                            context: u,
                            isUpdateOnly: !0
                        }));
                        break;
                    case ev.EVENT_MESSAGE_DELETED:
                        var h = (a = i.channel,
                        i.messageId);
                        a.url === this._channel.url && (tO.delete(h),
                        (d = this._removeMessagesFromView([h], {})).length > 0 && (u = new tm(n,d[0].sendingStatus),
                        this._eventHandler.onMessagesDeleted(u, this._channel, d)));
                        break;
                    case ev.EVENT_DELIVERY_RECEIPT_UPDATED:
                    case ev.EVENT_READ_RECEIPT_UPDATED:
                        if ((a = i.channel).isGroupChannel()) {
                            o = [];
                            for (var f = 0, p = this._messages; f < p.length; f++)
                                c = p[f],
                                (tO.get(c.messageId) || 0) !== (_ = this.channel.getUnreadMemberCount(c)) && (o.push(c),
                                _ > 0 ? tO.set(c.messageId, _) : tO.delete(c.messageId));
                            o.length > 0 && (u = new tm(n,o[0].sendingStatus),
                            this._eventHandler.onMessagesUpdated(u, a, o))
                        }
                        break;
                    case ev.EVENT_USER_LEFT:
                        var g = x.get(this._iid)
                          , m = (a = i.channel,
                        i.user)
                          , y = g.get("currentUserId");
                        if (m.userId !== y) {
                            o = [];
                            for (var _, v = 0, E = this._messages; v < E.length; v++)
                                c = E[v],
                                (tO.get(c.messageId) || 0) !== (_ = this.channel.getUnreadMemberCount(c)) && (o.push(c),
                                _ > 0 ? tO.set(c.messageId, _) : tO.delete(c.messageId));
                            o.length > 0 && (u = new tm(n,o[0].sendingStatus),
                            this._eventHandler.onMessagesUpdated(u, a, o))
                        } else
                            u = new eL(n),
                            this._eventHandler.onChannelDeleted(u, a.url);
                        break;
                    case ev.EVENT_CHANNEL_CHANGED:
                    case ev.EVENT_USER_RECEIVED_INVITATION:
                    case ev.EVENT_USER_JOINED:
                    case ev.EVENT_CHANNEL_FROZEN:
                    case ev.EVENT_CHANNEL_UNFROZEN:
                    case ev.EVENT_CHANNEL_HIDDEN:
                    case ev.EVENT_CHANNEL_UNHIDDEN:
                    case ev.EVENT_USER_MUTED:
                    case ev.EVENT_USER_UNMUTED:
                    case ev.EVENT_TYPING_STATUS_UPDATED:
                    case ev.EVENT_OPERATOR_UPDATED:
                    case ev.EVENT_CHANNEL_METADATA_UPDATED:
                    case ev.EVENT_CHANNEL_METADATA_DELETED:
                    case ev.EVENT_CHANNEL_METACOUNTER_UPDATED:
                    case ev.EVENT_CHANNEL_METACOUNTER_DELETED:
                        a = i.channel,
                        u = new eL(n),
                        this._eventHandler.onChannelUpdated(u, a);
                        break;
                    case ev.EVENT_CHANNEL_DELETED:
                        a = i.channel,
                        u = new eL(n),
                        this._eventHandler.onChannelDeleted(u, a.url)
                    }
                }
                ,
                t.prototype._createRemoteMessageParams = function(t) {
                    var n = t.prevLimit
                      , r = t.nextLimit
                      , i = new (Y.get(this._iid)).MessageListParams;
                    return i.isInclusive = !0,
                    i.prevResultSize = void 0 === n ? 0 : n,
                    i.nextResultSize = void 0 === r ? 0 : r,
                    i.includeMetaArray = !0,
                    i.includeReactions = !0,
                    i.includeThreadInfo = !0,
                    i.includeReplies = !0,
                    i.includeParentMessageText = !0,
                    this._filter.messageType && (i.messageType = this._filter.messageType),
                    this._filter.customTypes.length > 0 && (i.customTypes = this._filter.customTypes),
                    this._filter.senderUserIds.length > 0 && (i.senderUserIds = this._filter.senderUserIds),
                    i
                }
                ,
                t.prototype._getRemoteMessages = function(t) {
                    var n = t.ts
                      , r = t.prevLimit
                      , i = void 0 === r ? 0 : r
                      , s = t.nextLimit
                      , a = void 0 === s ? 0 : s;
                    return G(this, void 0, void 0, function() {
                        var t, r, s, o;
                        return B(this, function(l) {
                            switch (l.label) {
                            case 0:
                                return t = [],
                                i > 0 ? (s = this._createRemoteMessageParams({
                                    prevLimit: i,
                                    nextLimit: 0
                                }),
                                [4, this._channel.getMessagesByTimestamp(n, s)]) : [3, 2];
                            case 1:
                                r = l.sent(),
                                t = t.concat(r),
                                this._hasPrevious = r.length >= i,
                                l.label = 2;
                            case 2:
                                return a > 0 ? (s = this._createRemoteMessageParams({
                                    prevLimit: 0,
                                    nextLimit: a
                                }),
                                [4, this._channel.getMessagesByTimestamp(n, s)]) : [3, 4];
                            case 3:
                                o = l.sent(),
                                t = t.concat(o),
                                this._hasNext = o.length >= a,
                                l.label = 4;
                            case 4:
                                return t.length > 0 ? [4, this._upsertRemotelyFetchedMessages(t)] : [3, 6];
                            case 5:
                                l.sent(),
                                l.label = 6;
                            case 6:
                                return [2, t]
                            }
                        })
                    })
                }
                ,
                t.prototype._upsertRemotelyFetchedMessages = function(t, n) {
                    return void 0 === n && (n = {}),
                    G(this, void 0, void 0, function() {
                        var r, i, s, a;
                        return B(this, function(o) {
                            switch (o.label) {
                            case 0:
                                return i = void 0 === (r = n.context) ? null : r,
                                s = tl.of(this._iid),
                                a = t.map(function(t) {
                                    return t.reqId
                                }),
                                [4, s.removeUnsentMessages({
                                    channelUrl: this.channel.url,
                                    reqIds: a
                                })];
                            case 1:
                                return o.sent(),
                                this._removeMatchingUnsentMessagesFromView(t, {
                                    context: i
                                }),
                                [4, s.upsert(t, e6.SUCCEEDED)];
                            case 2:
                                return o.sent(),
                                [2]
                            }
                        })
                    })
                }
                ,
                t.prototype._checkHugeGap = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n, r, i, s, a, o, l, u, c, d, h, f, p, g = this;
                        return B(this, function(m) {
                            switch (m.label) {
                            case 0:
                                return m.trys.push([0, 12, , 13]),
                                t = Y.get(this._iid).BaseChannel,
                                n = x.get(this._iid).get("apiClient"),
                                this._messages.length > 0 ? (r = tl.of(this._iid),
                                s = i = {
                                    from: this._messages[0].createdAt,
                                    to: Math.min(this._syncRange.top, this._messages[this._messages.length - 1].createdAt),
                                    cachedCount: 0
                                },
                                [4, r.countBetween(this._channel.url, this._filter, i.from, i.to)]) : [3, 8];
                            case 1:
                                return s.cachedCount = m.sent(),
                                o = a = {
                                    from: Math.max(this._syncRange.bottom, this._messages[0].createdAt),
                                    to: this.hasNext ? this._messages[this._messages.length - 1].createdAt : Number.MAX_SAFE_INTEGER,
                                    cachedCount: 0
                                },
                                [4, r.countBetween(this._channel.url, this._filter, a.from, a.to)];
                            case 2:
                                return o.cachedCount = m.sent(),
                                l = {
                                    iid: this._iid,
                                    channelUrl: this._channel.url,
                                    channelType: this._channel.channelType,
                                    filter: this._filter,
                                    previous: i,
                                    next: a
                                },
                                [4, n.checkMessageHugeGap(j(j({}, l), l.filter))];
                            case 3:
                                return (c = {
                                    isHugeGap: !!(u = m.sent()).is_huge_gap,
                                    previousMessages: u.prev_messages.map(function(n) {
                                        return t.buildMessage(n, g._channel)
                                    }) || [],
                                    previousHasMore: !!u.prev_hasmore,
                                    nextMessages: u.next_messages.map(function(n) {
                                        return t.buildMessage(n, g._channel)
                                    }) || [],
                                    nextHasMore: !!u.next_hasmore
                                }).isHugeGap ? [3, 6] : (h = V(V([], c.previousMessages, !0), c.nextMessages, !0),
                                ei.debug("Message collection non-huge gap message fill count: ", h.length),
                                h.length > 0 ? (f = new tm(ev.MESSAGE_FILL,h[0].sendingStatus),
                                [4, this._upsertRemotelyFetchedMessages(h, {
                                    context: f
                                })]) : [3, 5]);
                            case 4:
                                m.sent(),
                                this._addOnlyMessageToView(h, {
                                    context: f
                                }),
                                this._extendSyncRange(["prev"], c.previousMessages),
                                this._extendSyncRange(["next"], c.nextMessages),
                                c.previousHasMore && this._previousFillSync.run(this._syncRange.top),
                                c.nextHasMore && this._nextFillSync.run(this._syncRange.bottom),
                                m.label = 5;
                            case 5:
                                return [3, 7];
                            case 6:
                                setTimeout(function() {
                                    return g._eventHandler.onHugeGapDetected()
                                }, 10),
                                m.label = 7;
                            case 7:
                                return [3, 11];
                            case 8:
                                return d = Math.floor(this._syncLimit / 2),
                                [4, this._getRemoteMessages({
                                    ts: this._startingPoint,
                                    prevLimit: d,
                                    nextLimit: d
                                })];
                            case 9:
                                return (h = m.sent()).length > 0 ? (f = new tm(ev.MESSAGE_FILL,h[0].sendingStatus),
                                [4, this._upsertRemotelyFetchedMessages(h, {
                                    context: f
                                })]) : [3, 11];
                            case 10:
                                m.sent(),
                                this._addOnlyMessageToView(h, {
                                    context: f
                                }),
                                this._extendSyncRange(["prev", "next"], this._messages),
                                m.label = 11;
                            case 11:
                                return [3, 13];
                            case 12:
                                return p = m.sent(),
                                ei.warn("Message collection huge gap checker error: ", p),
                                this._hugeGapCheckTimer = setTimeout(function() {
                                    g._hugeGapCheckTimer = null,
                                    g._checkHugeGap()
                                }, 3e3),
                                [3, 13];
                            case 13:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype._extendSyncRange = function(t, n) {
                    if (n.length > 0) {
                        var r = n.map(function(t) {
                            return t.createdAt
                        });
                        t.includes("prev") && (this._syncRange.top = Math.min.apply(Math, V([this._syncRange.top], r, !1))),
                        t.includes("next") && (this._syncRange.bottom = Math.max.apply(Math, V([this._syncRange.bottom], r, !1)))
                    }
                }
                ,
                t.prototype._updateChildMessagesInView = function(t) {
                    var n = [];
                    return this._messages.forEach(function(r) {
                        r.applyParentMessage(t) && n.push(r)
                    }),
                    n
                }
                ,
                t.prototype._addOnlyMessageToView = function(t, n) {
                    void 0 === n && (n = {});
                    var r = n.context
                      , i = void 0 === r ? null : r;
                    n.isUpdateOnly;
                    for (var s = id.getInstance(this._iid), a = [], o = 0; o < t.length; o++) {
                        var l = t[o];
                        if (l.sendingStatus === s.MessageSendingStatus.SUCCEEDED) {
                            var u = this._messages.map(function(t) {
                                return t.messageId
                            }).indexOf(l.messageId);
                            if (this._filter.match(l)) {
                                var c = this._channel.getUnreadMemberCount(l);
                                if (tO.set(l.messageId, c),
                                -1 === u) {
                                    var d = tt(this._messages, l);
                                    a.push(l),
                                    this._messages.splice(d, 0, l)
                                }
                            }
                        }
                    }
                    i && a.length > 0 && this._eventHandler.onMessagesAdded(i, this._channel, a)
                }
                ,
                t.prototype._addMessagesToView = function(t, n) {
                    void 0 === n && (n = {});
                    for (var r = n.context, i = void 0 === r ? null : r, s = n.isUpdateOnly, a = void 0 !== s && s, o = id.getInstance(this._iid), l = [], u = [], c = [], d = 0; d < t.length; d++) {
                        var h = t[d];
                        if (h.sendingStatus === o.MessageSendingStatus.SUCCEEDED) {
                            var f = this._messages.map(function(t) {
                                return t.messageId
                            }).indexOf(h.messageId);
                            if (this._filter.match(h)) {
                                var p = this._channel.getUnreadMemberCount(h);
                                if (tO.set(h.messageId, p),
                                f >= 0) {
                                    if (u.push(h),
                                    this._messages[f] = h,
                                    h.updatedAt > 0) {
                                        var g = this._updateChildMessagesInView(h);
                                        u = u.concat(g)
                                    }
                                } else if (!a) {
                                    var m = tt(this._messages, h);
                                    l.push(h),
                                    this._messages.splice(m, 0, h)
                                }
                            } else
                                f >= 0 && (c.push(h),
                                this._messages.splice(f, 1))
                        }
                    }
                    i && (l.length > 0 && this._eventHandler.onMessagesAdded(i, this._channel, l),
                    u.length > 0 && this._eventHandler.onMessagesUpdated(i, this._channel, u),
                    c.length > 0 && this._eventHandler.onMessagesDeleted(i, this._channel, c))
                }
                ,
                t.prototype._removeMessagesFromView = function(t, n) {
                    void 0 === n && (n = {});
                    for (var r = n.context, i = void 0 === r ? null : r, s = [], a = 0; a < t.length; a++) {
                        var o = t[a]
                          , l = this._messages.map(function(t) {
                            return t.messageId
                        }).indexOf(o);
                        if (l >= 0) {
                            var u = this._messages[l];
                            s.push(u),
                            this._messages.splice(l, 1)
                        }
                    }
                    return i && s.length > 0 && this._eventHandler.onMessagesDeleted(i, this._channel, s),
                    s
                }
                ,
                t.prototype._upsertUnsentMessagesToView = function(t, n) {
                    void 0 === n && (n = {});
                    for (var r = n.context, i = void 0 === r ? null : r, s = [], a = [], o = [], l = 0; l < t.length; l++) {
                        var u = t[l]
                          , c = this._unsentMessages.map(function(t) {
                            return t.reqId
                        }).indexOf(u.reqId);
                        if (this._filter.match(u)) {
                            if (c >= 0)
                                a.push(u),
                                this._unsentMessages[c] = u;
                            else {
                                var d = tt(this._unsentMessages, u);
                                s.push(u),
                                this._unsentMessages.splice(d, 0, u)
                            }
                        } else
                            c >= 0 && (this._unsentMessages.splice(c, 1),
                            o.push(u))
                    }
                    i && (s.length > 0 && this._eventHandler.onMessagesAdded(i, this._channel, s),
                    a.length > 0 && this._eventHandler.onMessagesUpdated(i, this._channel, a),
                    o.length > 0 && this._eventHandler.onMessagesDeleted(i, this._channel, o))
                }
                ,
                t.prototype._removeMatchingUnsentMessagesFromView = function(t, n) {
                    void 0 === n && (n = {});
                    for (var r = n.context, i = void 0 === r ? null : r, s = [], a = 0; a < t.length; a++) {
                        var o = t[a];
                        if ((o.isUserMessage() || o.isFileMessage()) && o._isSentByMe()) {
                            var l = this._unsentMessages.map(function(t) {
                                return t.reqId
                            }).indexOf(o.reqId);
                            if (l >= 0) {
                                var u = this._unsentMessages[l];
                                s.push(u),
                                this._unsentMessages.splice(l, 1)
                            }
                        }
                    }
                    return i && s.length > 0 && this._eventHandler.onMessagesDeleted(i, this._channel, s),
                    s
                }
                ,
                t.prototype._removeFailedMessagesFromView = function(t) {
                    var n = id.getInstance(this._iid)
                      , r = []
                      , i = []
                      , s = this._unsentMessages.map(function(t) {
                        return t.reqId
                    });
                    if (t)
                        for (var a = 0; a < t.length; a++) {
                            var o = t[a]
                              , l = s.indexOf(o.reqId);
                            l >= 0 && this._unsentMessages[l].sendingStatus === n.MessageSendingStatus.FAILED ? r.push(this._unsentMessages[l]) : i.push(this._unsentMessages[l])
                        }
                    else
                        for (var u = 0, c = this._unsentMessages; u < c.length; u++)
                            (o = c[u]).sendingStatus === n.MessageSendingStatus.FAILED ? r.push(o) : i.push(o);
                    return this._unsentMessages = i,
                    r
                }
                ,
                t._processNextAutoResend = function(t) {
                    if (t.isCacheEnabled && !t.isInBackground && t.getConnectionState() === t.ConnectionState.OPEN)
                        try {
                            var n = t.getAutoResendQueue();
                            if (n.length > 0) {
                                t.getIsProcessingAutoResend() || (ei.debug("Auto-resend queue started."),
                                t.setIsProcessingAutoResend(!0));
                                var r = n[0];
                                ei.debug("Processing auto-resend for message request id: ", r.reqId),
                                Y.get(t._iid).GroupChannel.getChannel(r.channelUrl, L.INTERNAL_CALL, function(n, i) {
                                    var s;
                                    if (t.getErrorFirstCallback() && (i = (s = [n, i])[0],
                                    n = s[1]),
                                    i)
                                        throw i;
                                    r.isUserMessage() ? n._autoResendUserMessage(r) : r.isFileMessage() && n._autoResendFileMessage(r)
                                })
                            } else
                                ei.debug("Auto-resend queue finished."),
                                t.setIsProcessingAutoResend(!1)
                        } catch (i) {
                            ei.warn("Process auto-resend error: ", i),
                            t.setIsProcessingAutoResend(!1)
                        }
                }
                ,
                t._completeCurrentAndProcessNextAutoResend = function(t, n) {
                    if (t.isCacheEnabled && n._isAutoResendRegistered) {
                        var r = t.getAutoResendQueue();
                        if (n.sendingStatus !== t.MessageSendingStatus.SUCCEEDED && (n.sendingStatus !== t.MessageSendingStatus.FAILED || ef.isAutoResendableError(n.errorCode))) {
                            if (n.sendingStatus === t.MessageSendingStatus.PENDING) {
                                if (r.length > 0 && r.map(function(t) {
                                    return t.reqId
                                }).indexOf(n.reqId) > -1)
                                    return;
                                r.push(n),
                                !t.getIsProcessingAutoResend() && r.length > 0 && this._processNextAutoResend(t)
                            }
                        } else
                            r.length > 0 && n.reqId === r[0].reqId && (r.shift(),
                            this._processNextAutoResend(t))
                    }
                }
                ,
                t._processAutoResendRegisteredPendingMessages = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a, o, l, u, c, d, h;
                        return B(this, function(f) {
                            switch (f.label) {
                            case 0:
                                return n = tl.of(t._iid),
                                r = eN.of(t._iid),
                                (i = new te).sendingStatus = t.MessageSendingStatus.PENDING,
                                [4, n.getAllUnsentMessages(i)];
                            case 1:
                                s = f.sent(),
                                a = 0,
                                o = s,
                                f.label = 2;
                            case 2:
                                return a < o.length ? (l = o[a],
                                [4, t.GroupChannel.getChannel(l.channelUrl)]) : [3, 7];
                            case 3:
                                return u = f.sent(),
                                l._isAutoResendRegistered ? (new Date).getTime() <= (c = l.createdAt + 2592e5) ? (-1 === (d = t.getAutoResendQueue()).map(function(t) {
                                    return t.reqId
                                }).indexOf(l.reqId) && d.push(l),
                                [3, 6]) : [3, 4] : [3, 6];
                            case 4:
                                return ei.debug("Auto-resend registered pending messaged expired. Expiration date: ", new Date(c).toLocaleString()),
                                (h = l._clone()).sendingStatus = t.MessageSendingStatus.FAILED,
                                h.requestState = t.MessageRequestState.FAILED,
                                h._isAutoResendRegistered = !1,
                                [4, n.upsert([h], e6.UNSENT)];
                            case 5:
                                f.sent(),
                                r.send({
                                    source: ev.LOCAL_MESSAGE_FAILED,
                                    payload: {
                                        channel: u,
                                        message: h
                                    }
                                }),
                                f.label = 6;
                            case 6:
                                return a++,
                                [3, 2];
                            case 7:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t._processNonAutoResendRegisteredPendingMessages = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a, o, l, u, c;
                        return B(this, function(d) {
                            switch (d.label) {
                            case 0:
                                return n = tl.of(t._iid),
                                r = eN.of(t._iid),
                                (i = new te).sendingStatus = t.MessageSendingStatus.PENDING,
                                [4, n.getAllUnsentMessages(i)];
                            case 1:
                                s = d.sent(),
                                a = 0,
                                o = s,
                                d.label = 2;
                            case 2:
                                return a < o.length ? (l = o[a],
                                [4, t.GroupChannel.getChannel(l.channelUrl)]) : [3, 6];
                            case 3:
                                return u = d.sent(),
                                l._isAutoResendRegistered ? [3, 5] : (ei.debug("Cached pending message is not auto-resend registered. Changing its sending status to failed: ", l.reqId),
                                (c = l._clone()).sendingStatus = t.MessageSendingStatus.FAILED,
                                c.requestState = t.MessageRequestState.FAILED,
                                c.errorCode = z.ACK_TIMEOUT,
                                [4, n.upsert([c], e6.UNSENT)]);
                            case 4:
                                d.sent(),
                                r.send({
                                    source: ev.LOCAL_MESSAGE_FAILED,
                                    payload: {
                                        channel: u,
                                        message: c
                                    }
                                }),
                                d.label = 5;
                            case 5:
                                return a++,
                                [3, 2];
                            case 6:
                                return [2]
                            }
                        })
                    })
                }
                ,
                Object.defineProperty(t.prototype, "channel", {
                    get: function() {
                        return this._channel
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "succeededMessages", {
                    get: function() {
                        return this._messages
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "pendingMessages", {
                    get: function() {
                        var t = id.getInstance(this._iid);
                        return this._unsentMessages.filter(function(n) {
                            return n.sendingStatus === t.MessageSendingStatus.PENDING
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "failedMessages", {
                    get: function() {
                        var t = id.getInstance(this._iid);
                        return this._unsentMessages.filter(function(n) {
                            return n.sendingStatus === t.MessageSendingStatus.FAILED
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "startingPoint", {
                    get: function() {
                        return this._startingPoint
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "hasPrevious", {
                    get: function() {
                        return this._hasPrevious
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "hasNext", {
                    get: function() {
                        return this._hasNext
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.initialize = function(t) {
                    var n = this
                      , r = new tN;
                    this._messages = [],
                    this._syncRange = new ez(j({}, tI)),
                    this._hasNext = !0,
                    this._hasPrevious = !0;
                    var i = Math.floor(this._limit / 2)
                      , s = tl.of(this._iid)
                      , a = eN.of(this._iid);
                    switch (t) {
                    case to.CACHE_ONLY:
                        s.getPreviousAndNextMessages(this._channel.url, this._filter, this._startingPoint, i).then(function(t) {
                            return G(n, void 0, void 0, function() {
                                var n;
                                return B(this, function(i) {
                                    switch (i.label) {
                                    case 0:
                                        return [4, s.getUnsentMessages(this._channel.url, this._filter)];
                                    case 1:
                                        return n = i.sent(),
                                        this._upsertUnsentMessagesToView(n),
                                        this._addMessagesToView(t),
                                        r.invokeCacheResult(null, t),
                                        [2]
                                    }
                                })
                            })
                        }).catch(function(t) {
                            r.invokeCacheResult(t, null)
                        }).finally(function() {
                            a.addObserver(n._eventObserver)
                        });
                        break;
                    case to.CACHE_AND_REPLACE_BY_API:
                        s.getPreviousAndNextMessages(this._channel.url, this._filter, this._startingPoint, i).then(function(t) {
                            return G(n, void 0, void 0, function() {
                                var n;
                                return B(this, function(i) {
                                    switch (i.label) {
                                    case 0:
                                        return [4, s.getUnsentMessages(this._channel.url, this._filter)];
                                    case 1:
                                        return n = i.sent(),
                                        this._upsertUnsentMessagesToView(n),
                                        this._addMessagesToView(t),
                                        r.invokeCacheResult(null, t),
                                        [2]
                                    }
                                })
                            })
                        }).catch(function(t) {
                            r.invokeCacheResult(t, null)
                        }).finally(function() {
                            n._getRemoteMessages({
                                ts: n._startingPoint,
                                prevLimit: i,
                                nextLimit: i
                            }).then(function(t) {
                                n._messages = [],
                                n._addMessagesToView(t),
                                n._extendSyncRange(["prev", "next"], n._messages),
                                r.invokeApiResult(null, t)
                            }).catch(function(t) {
                                r.invokeApiResult(t, null)
                            }).finally(function() {
                                a.addObserver(n._eventObserver)
                            })
                        })
                    }
                    return r
                }
                ,
                t.prototype.loadPrevious = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return this._hasPrevious ? (t = this._messages.length > 0 ? Math.min.apply(Math, this._messages.map(function(t) {
                                    return t.createdAt
                                })) : Number.MAX_SAFE_INTEGER,
                                [4, e3.ready()]) : [3, 5];
                            case 1:
                                return r.sent() ? [3, 3] : (ei.debug("Message collection loadPrevious() from the cache."),
                                [4, tl.of(this._iid).getPreviousMessages(this._channel.url, this._filter, t, this._limit)]);
                            case 2:
                                return n = r.sent(),
                                this._addMessagesToView(n),
                                [2, n];
                            case 3:
                                return ei.debug("Message collection loadPrevious() from the server."),
                                [4, this._getRemoteMessages({
                                    ts: t,
                                    prevLimit: this._limit
                                })];
                            case 4:
                                return n = r.sent(),
                                this._addMessagesToView(n),
                                tr(this._syncRange, ["prev"], this._messages),
                                [2, n];
                            case 5:
                                return [2, []]
                            }
                        })
                    })
                }
                ,
                t.prototype.loadNext = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return this._hasNext ? (t = this._messages.length > 0 ? Math.max.apply(Math, this._messages.map(function(t) {
                                    return t.createdAt
                                })) : 0,
                                [4, e3.ready()]) : [3, 5];
                            case 1:
                                return r.sent() ? [3, 3] : (ei.debug("Message collection loadNext() from the cache."),
                                [4, tl.of(this._iid).getNextMessages(this._channel.url, this._filter, t, this._limit)]);
                            case 2:
                                return n = r.sent(),
                                this._addMessagesToView(n),
                                [2, n];
                            case 3:
                                return ei.debug("Message collection loadNext() from the server."),
                                [4, this._getRemoteMessages({
                                    ts: t,
                                    nextLimit: this._limit
                                })];
                            case 4:
                                return n = r.sent(),
                                this._addMessagesToView(n),
                                tr(this._syncRange, ["next"], this._messages),
                                [2, n];
                            case 5:
                                return [2, []]
                            }
                        })
                    })
                }
                ,
                t.prototype.removeFailedMessages = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s;
                        return B(this, function(a) {
                            switch (a.label) {
                            case 0:
                                return n = id.getInstance(this._iid),
                                r = tl.of(this._iid),
                                i = t.map(function(t) {
                                    return t.reqId
                                }),
                                [4, r.removeUnsentMessages({
                                    channelUrl: this.channel.url,
                                    sendingStatus: n.MessageSendingStatus.FAILED,
                                    reqIds: i
                                })];
                            case 1:
                                return s = a.sent(),
                                this._removeFailedMessagesFromView(t),
                                [2, s]
                            }
                        })
                    })
                }
                ,
                t.prototype.removeAllFailedMessages = function() {
                    return G(this, void 0, void 0, function() {
                        var t;
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return t = id.getInstance(this._iid),
                                [4, tl.of(this._iid).removeUnsentMessages({
                                    channelUrl: this.channel.url,
                                    sendingStatus: t.MessageSendingStatus.FAILED
                                })];
                            case 1:
                                return n.sent(),
                                this._removeFailedMessagesFromView(),
                                [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.dispose = function() {
                    this._localCacheEnabled && (this._previousFillSync.stop(),
                    this._nextFillSync.stop(),
                    this._backgroundSync.pause()),
                    this._changelogSync.pause(),
                    eb.of(this._iid).removeObserver(this._connectionObserver),
                    this._hugeGapCheckTimer && (clearTimeout(this._hugeGapCheckTimer),
                    this._hugeGapCheckTimer = null),
                    eN.of(this._iid).removeObserver(this._eventObserver)
                }
                ,
                t.prototype.setMessageCollectionHandler = function(t) {
                    this._eventHandler = t
                }
                ,
                t
            }()
              , tU = {
                TIMESTAMP: "timestamp",
                MESSAGE_ID: "messageId"
            }
              , tR = new WeakMap
              , tM = new WeakMap
              , tP = function() {
                function t(n) {
                    b(this, t),
                    this.url = "",
                    this.channelType = t.CHANNEL_TYPE_BASE,
                    this.name = "",
                    this.coverUrl = "",
                    this.creator = null,
                    this.createdAt = 0,
                    this.data = null,
                    this.customType = null,
                    this.isFrozen = !1,
                    this.isEphemeral = !1,
                    tR.set(this, {}),
                    tM.set(this, ""),
                    n && this.__update(n)
                }
                return S(t, [{
                    key: "__update",
                    value: function(t) {
                        this.url = t.hasOwnProperty("channel_url") ? String(t.channel_url) : "",
                        this.name = t.hasOwnProperty("name") ? String(t.name) : "",
                        this.coverUrl = t.hasOwnProperty("cover_url") ? String(t.cover_url) : "",
                        this.createdAt = t.hasOwnProperty("created_at") ? 1e3 * t.created_at : 0,
                        this.data = t.hasOwnProperty("data") ? String(t.data) : "",
                        this.customType = t.hasOwnProperty("custom_type") ? t.custom_type : "",
                        this.isFrozen = !!t.hasOwnProperty("freeze") && t.freeze,
                        this.isEphemeral = !!t.hasOwnProperty("is_ephemeral") && t.is_ephemeral,
                        t.hasOwnProperty("created_by") && null !== t.created_by && "object" === E(t.created_by) && Object.keys(t.created_by).length > 0 ? this.creator = new tg(t.created_by) : this.creator = null,
                        t.hasOwnProperty("metadata") && null !== t.metadata && (t.hasOwnProperty("ts") && "number" == typeof t.ts ? this._refreshMetaData(t.metadata, t.ts) : this._refreshMetaData(t.metadata, -1)),
                        t.hasOwnProperty("cached_primary_key") && (this.cachedPrimaryKey = t.cached_primary_key)
                    }
                }, {
                    key: "_addOrUpdateCachedMetaData",
                    value: function(t, n) {
                        var r = this
                          , i = tR.get(this);
                        Object.keys(t).forEach(function(s) {
                            var a = i[s]
                              , o = t[s];
                            a ? n > a.updatedAt && (a.value = o,
                            a.updatedAt = n,
                            a.isRemoved = !1) : i[s] = {
                                value: o,
                                updatedAt: n,
                                isRemoved: !1
                            },
                            e9.of(r._iid).upsert([r]).then(function() {}).catch(function(t) {
                                ei.error(t)
                            })
                        })
                    }
                }, {
                    key: "_markAsDeletedCachedMetaData",
                    value: function(t, n) {
                        var r = this
                          , i = tR.get(this);
                        t.forEach(function(t) {
                            var s = i[t];
                            s ? n > s.updatedAt && (s.isRemoved = !0,
                            s.updatedAt = n) : i[t] = {
                                value: null,
                                updatedAt: n,
                                isRemoved: !0
                            },
                            e9.of(r._iid).upsert([r]).then(function() {}).catch(function(t) {
                                ei.error(t)
                            })
                        })
                    }
                }, {
                    key: "_refreshMetaData",
                    value: function(t, n) {
                        var r = {};
                        Object.keys(t).forEach(function(i) {
                            r[i] = {
                                value: t[i],
                                updatedAt: n,
                                isRemoved: !1
                            }
                        }),
                        tR.set(this, r)
                    }
                }, {
                    key: "_clearCachedMetaData",
                    value: function() {
                        tR.set(this, {})
                    }
                }, {
                    key: "cachedPrimaryKey",
                    get: function() {
                        return tM.get(this)
                    },
                    set: function(t) {
                        tM.set(this, t)
                    }
                }, {
                    key: "isGroupChannel",
                    value: function() {
                        var t = Y.get(this._iid).BaseChannel;
                        return this.channelType === t.CHANNEL_TYPE_GROUP
                    }
                }, {
                    key: "isOpenChannel",
                    value: function() {
                        var t = Y.get(this._iid).BaseChannel;
                        return this.channelType === t.CHANNEL_TYPE_OPEN
                    }
                }, {
                    key: "createOperatorListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).OperatorListQuery(this)
                    }
                }, {
                    key: "createMessageListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).MessageListQuery(this)
                    }
                }, {
                    key: "createPreviousMessageListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).PreviousMessageListQuery(this)
                    }
                }, {
                    key: "serialize",
                    value: function() {
                        var t = this;
                        return td.serialize(this, function(n) {
                            if (null !== n.lastMessage && "object" === E(n.lastMessage)) {
                                var r = n.lastMessage;
                                r.hasOwnProperty("_sender") && (r.sender = r._sender,
                                delete r._sender,
                                n.lastMessage = r)
                            }
                            n.hasOwnProperty("_messageOffsetTimestamp") && (n.messageOffsetTimestamp = n._messageOffsetTimestamp,
                            delete n._messageOffsetTimestamp),
                            n.metadata = t.getCachedMetaData(),
                            t.cachedPrimaryKey && (n.cachedPrimaryKey = t.cachedPrimaryKey)
                        })
                    }
                }, {
                    key: "getMessageChangeLogsByTimestamp",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = null
                          , o = eI.parse(arguments, [new eI({
                            type: "number",
                            constraint: function(t) {
                                return t >= 0
                            }
                        }), new eI({
                            type: "boolean",
                            optional: !0,
                            defaultValue: !1
                        }), new eI({
                            type: "boolean",
                            optional: !0,
                            defaultValue: !1
                        }), new eI({
                            type: "callback"
                        })])
                          , l = k(o, 5);
                        return a = l[0],
                        t = l[1],
                        n = l[2],
                        r = l[3],
                        i = l[4],
                        eg(this._iid, function(i) {
                            a ? i(a, null) : x.get(s._iid).container.apiClient.getMessageChangeLogs({
                                channelUrl: s.url,
                                ts: t,
                                token: null,
                                isOpenChannel: s.isOpenChannel(),
                                includeMetaArray: n,
                                includeReactions: r
                            }).then(function(t) {
                                var n = Y.get(s._iid).BaseChannel;
                                i(null, {
                                    updatedMessages: t.updated.map(function(t) {
                                        return n.buildMessage(t, s)
                                    }),
                                    deletedMessageIds: t.deleted.map(function(t) {
                                        return parseInt(t.message_id)
                                    }),
                                    hasMore: t.has_more,
                                    token: t.next
                                })
                            }).catch(function(t) {
                                i(t, null)
                            })
                        }, i)
                    }
                }, {
                    key: "getMessageChangeLogsByToken",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = null
                          , o = eI.parse(arguments, [new eI({
                            type: "string",
                            nullable: !0
                        }), new eI({
                            type: "boolean",
                            optional: !0,
                            defaultValue: !1
                        }), new eI({
                            type: "boolean",
                            optional: !0,
                            defaultValue: !1
                        }), new eI({
                            type: "callback"
                        })])
                          , l = k(o, 5);
                        return a = l[0],
                        t = l[1],
                        n = l[2],
                        r = l[3],
                        i = l[4],
                        eg(this._iid, function(i) {
                            a ? i(a, null) : x.get(s._iid).container.apiClient.getMessageChangeLogs({
                                channelUrl: s.url,
                                ts: null,
                                token: t,
                                isOpenChannel: s.isOpenChannel(),
                                includeMetaArray: n,
                                includeReactions: r
                            }).then(function(t) {
                                var n = Y.get(s._iid).BaseChannel;
                                i(null, {
                                    updatedMessages: t.updated.map(function(t) {
                                        return n.buildMessage(t, s)
                                    }),
                                    deletedMessageIds: t.deleted.map(function(t) {
                                        return parseInt(t.message_id)
                                    }),
                                    hasMore: t.has_more,
                                    token: t.next
                                })
                            }).catch(function(t) {
                                i(t, null)
                            })
                        }, i)
                    }
                }, {
                    key: "getMessageChangeLogsSinceToken",
                    value: function(t, n, r) {
                        var i = this
                          , s = Y.get(this._iid)
                          , a = s.BaseChannel
                          , o = s.MessageChangeLogsParams
                          , l = null
                          , u = eI.parse(arguments, [new eI({
                            type: "string",
                            nullable: !0
                        }), new eI({
                            type: o,
                            constraint: function(t) {
                                return t._validate()
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , c = k(u, 4);
                        return l = c[0],
                        t = c[1],
                        n = c[2],
                        r = c[3],
                        eg(this._iid, function(r) {
                            l ? r(l, null) : x.get(i._iid).container.apiClient.getMessageChangeLogs(v({
                                channelUrl: i.url,
                                ts: null,
                                token: t,
                                isOpenChannel: i.isOpenChannel()
                            }, n)).then(function(t) {
                                r(null, {
                                    updatedMessages: t.updated.map(function(t) {
                                        return a.buildMessage(t, i)
                                    }),
                                    deletedMessageIds: t.deleted.map(function(t) {
                                        return parseInt(t.message_id)
                                    }),
                                    hasMore: t.has_more,
                                    token: t.next
                                })
                            }).catch(function(t) {
                                r(t, null)
                            })
                        }, r)
                    }
                }, {
                    key: "getMessageChangeLogsSinceTimestamp",
                    value: function(t, n, r) {
                        var i = this
                          , s = Y.get(this._iid)
                          , a = s.BaseChannel
                          , o = s.MessageChangeLogsParams
                          , l = null
                          , u = eI.parse(arguments, [new eI({
                            type: "number",
                            constraint: function(t) {
                                return t >= 0
                            }
                        }), new eI({
                            type: o,
                            constraint: function(t) {
                                return t._validate()
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , c = k(u, 4);
                        return l = c[0],
                        t = c[1],
                        n = c[2],
                        r = c[3],
                        eg(this._iid, function(r) {
                            l ? r(l, null) : x.get(i._iid).container.apiClient.getMessageChangeLogs(v({
                                channelUrl: i.url,
                                timestamp: t,
                                token: null,
                                isOpenChannel: i.isOpenChannel()
                            }, n)).then(function(t) {
                                r(null, {
                                    updatedMessages: t.updated.map(function(t) {
                                        return a.buildMessage(t, i)
                                    }),
                                    deletedMessageIds: t.deleted.map(function(t) {
                                        return parseInt(t.message_id)
                                    }),
                                    hasMore: t.has_more,
                                    token: t.next
                                })
                            }).catch(function(t) {
                                r(t, null)
                            })
                        }, r)
                    }
                }, {
                    key: "getMyMutedInfo",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            var r = id.getInstance(n._iid);
                            x.get(n._iid).container.apiClient.getMyMutedInfo({
                                channelUrl: n.url,
                                userId: r.currentUser ? r.currentUser.userId : null,
                                isGroupChannel: n.isGroupChannel()
                            }, function(n, r) {
                                var i = null;
                                n || (i = {
                                    isMuted: r.is_muted,
                                    startAt: r.start_at,
                                    endAt: r.end_at,
                                    remainingDuration: r.remaining_duration,
                                    description: r.description
                                }),
                                t(n, i)
                            })
                        }, t)
                    }
                }, {
                    key: "_parseMessageListParams",
                    value: function(t) {
                        for (var n = Y.get(this._iid), r = n.MessageListParams, i = new r, s = null, a = !1, o = 0, l = 0, u = !1, c = "", d = "", h = null, f = !1, p = !1, g = null, m = arguments.length, y = Array(m > 1 ? m - 1 : 0), _ = 1; _ < m; _++)
                            y[_ - 1] = arguments[_];
                        switch (t) {
                        case "prev":
                            var v = k(eI.parse(y, [new eI({
                                type: "number"
                            }), new eI({
                                type: "boolean"
                            }), new eI({
                                type: "number"
                            }), new eI({
                                type: "boolean"
                            }), new eI({
                                type: "string"
                            }), new eI({
                                type: "string"
                            }), new eI({
                                type: "array",
                                optional: !0
                            }), new eI({
                                type: "boolean",
                                optional: !0,
                                defaultValue: !1
                            }), new eI({
                                type: "boolean",
                                optional: !0,
                                defaultValue: !1
                            }), new eI({
                                type: "callback"
                            })]), 11);
                            s = v[0],
                            a = v[2],
                            o = v[3],
                            u = v[4],
                            c = v[5],
                            d = v[6],
                            h = v[7],
                            f = v[8],
                            p = v[9],
                            g = v[10];
                            break;
                        case "next":
                            var E = k(eI.parse(y, [new eI({
                                type: "number"
                            }), new eI({
                                type: "boolean"
                            }), new eI({
                                type: "number"
                            }), new eI({
                                type: "boolean"
                            }), new eI({
                                type: "string"
                            }), new eI({
                                type: "string"
                            }), new eI({
                                type: "array",
                                optional: !0
                            }), new eI({
                                type: "boolean",
                                optional: !0,
                                defaultValue: !1
                            }), new eI({
                                type: "boolean",
                                optional: !0,
                                defaultValue: !1
                            }), new eI({
                                type: "callback"
                            })]), 11);
                            s = E[0],
                            a = E[2],
                            l = E[3],
                            u = E[4],
                            c = E[5],
                            d = E[6],
                            h = E[7],
                            f = E[8],
                            p = E[9],
                            g = E[10];
                            break;
                        case "prevnext":
                            var b = k(eI.parse(y, [new eI({
                                type: "number"
                            }), new eI({
                                type: "number"
                            }), new eI({
                                type: "number"
                            }), new eI({
                                type: "boolean"
                            }), new eI({
                                type: "string"
                            }), new eI({
                                type: "string"
                            }), new eI({
                                type: "array",
                                optional: !0
                            }), new eI({
                                type: "boolean",
                                optional: !0,
                                defaultValue: !1
                            }), new eI({
                                type: "boolean",
                                optional: !0,
                                defaultValue: !1
                            }), new eI({
                                type: "callback"
                            })]), 11);
                            s = b[0],
                            o = b[2],
                            l = b[3],
                            u = b[4],
                            c = b[5],
                            d = b[6],
                            h = b[7],
                            f = b[8],
                            p = b[9],
                            g = b[10],
                            a = !0
                        }
                        return s ? [null, g] : (i.isInclusive = a,
                        i.prevResultSize = o,
                        i.nextResultSize = l,
                        i.reverse = u,
                        i.messageType = c,
                        i.customType = d,
                        "" === i.customType && (i.customType = "*"),
                        i.senderUserIds = h,
                        i.includeMetaArray = f,
                        i.includeReactions = p,
                        [i, g])
                    }
                }, {
                    key: "_getMessageList",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = Y.get(this._iid).MessageListParams
                          , o = null
                          , l = eI.parse(arguments, [new eI({
                            type: "number"
                        }), new eI({
                            type: "string",
                            constraint: function(t) {
                                return Object.values(tU).includes(t)
                            }
                        }), new eI({
                            type: a,
                            constraint: function(t) {
                                return t._validate()
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , u = k(l, 5);
                        return o = u[0],
                        t = u[1],
                        n = u[2],
                        r = u[3],
                        i = u[4],
                        eg(this._iid, function(i) {
                            o ? i(o, null) : x.get(s._iid).container.apiClient.getMessageList(v(v({
                                channel: s,
                                token: t,
                                tokenType: n
                            }, r), {}, {
                                shouldReverse: r.reverse
                            })).then(function(t) {
                                var n = Y.get(s._iid).BaseChannel;
                                i(null, t.messages.map(function(t) {
                                    return n.buildMessage(t, s)
                                }).filter(function(t) {
                                    return null !== t
                                }))
                            }).catch(function(t) {
                                i(t, null)
                            })
                        }, i)
                    }
                }, {
                    key: "getPreviousMessagesByTimestamp",
                    value: function(t) {
                        var n = this._parseMessageListParams.apply(this, ["prev"].concat(U(eI.toArray(arguments))))
                          , r = k(n, 2)
                          , i = r[0]
                          , s = r[1];
                        return this._getMessageList(t, tU.TIMESTAMP, i, s)
                    }
                }, {
                    key: "getNextMessagesByTimestamp",
                    value: function(t) {
                        var n = this._parseMessageListParams.apply(this, ["next"].concat(U(eI.toArray(arguments))))
                          , r = k(n, 2)
                          , i = r[0]
                          , s = r[1];
                        return this._getMessageList(t, tU.TIMESTAMP, i, s)
                    }
                }, {
                    key: "getPreviousAndNextMessagesByTimestamp",
                    value: function(t) {
                        var n = this._parseMessageListParams.apply(this, ["prevnext"].concat(U(eI.toArray(arguments))))
                          , r = k(n, 2)
                          , i = r[0]
                          , s = r[1];
                        return this._getMessageList(t, tU.TIMESTAMP, i, s)
                    }
                }, {
                    key: "getPreviousMessagesByID",
                    value: function(t) {
                        var n = this._parseMessageListParams.apply(this, ["prev"].concat(U(eI.toArray(arguments))))
                          , r = k(n, 2)
                          , i = r[0]
                          , s = r[1];
                        return this._getMessageList(t, tU.MESSAGE_ID, i, s)
                    }
                }, {
                    key: "getNextMessagesByID",
                    value: function(t) {
                        var n = this._parseMessageListParams.apply(this, ["next"].concat(U(eI.toArray(arguments))))
                          , r = k(n, 2)
                          , i = r[0]
                          , s = r[1];
                        return this._getMessageList(t, tU.MESSAGE_ID, i, s)
                    }
                }, {
                    key: "getPreviousAndNextMessagesByID",
                    value: function(t) {
                        var n = this._parseMessageListParams.apply(this, ["prevnext"].concat(U(eI.toArray(arguments))))
                          , r = k(n, 2)
                          , i = r[0]
                          , s = r[1];
                        return this._getMessageList(t, tU.MESSAGE_ID, i, s)
                    }
                }, {
                    key: "getMessagesByTimestamp",
                    value: function(t, n, r) {
                        return this._getMessageList(t, tU.TIMESTAMP, n, r)
                    }
                }, {
                    key: "getMessagesByMessageId",
                    value: function(t, n, r) {
                        return this._getMessageList(t, tU.MESSAGE_ID, n, r)
                    }
                }, {
                    key: "_sendUserMessage",
                    value: function(t) {
                        var n = this
                          , r = t.reqId
                          , i = t.message
                          , s = t.data
                          , a = t.customType
                          , o = t.metaArrays
                          , l = t.mentionType
                          , u = t.mentionedUserIds
                          , c = t.mentionedUsers
                          , d = t.mentionedMessageTemplate
                          , h = t.pushNotificationDeliveryOption
                          , f = t.rootMessageId
                          , p = t.parentMessageId
                          , g = t.translationTargetLanguages
                          , m = t.appleCriticalAlertOptions
                          , y = t.silent
                          , _ = void 0 !== y && y
                          , E = t.isReplyToChannel
                          , b = t.messageParams
                          , C = t.oldMessage
                          , S = void 0 === C ? null : C
                          , A = t.isManualResend
                          , N = void 0 !== A && A
                          , T = t.callback
                          , I = Y.get(this._iid)
                          , O = I.Command
                          , w = I.UserMessage
                          , k = id.getInstance(this._iid)
                          , U = tl.of(this._iid)
                          , R = e9.of(this._iid)
                          , M = eN.of(this._iid)
                          , P = x.get(this._iid).container.localCacheEnabled;
                        r || (r = O.generateRequestId());
                        var L = {};
                        Array.isArray(g) && g.forEach(function(t) {
                            return L[t] = ""
                        });
                        var D = w.objectify({
                            messageId: 0,
                            reqId: r,
                            user: k.currentUser || {},
                            channel: this,
                            message: i,
                            data: s,
                            customType: a,
                            metaArrays: o,
                            mentionType: l,
                            mentionedUserIds: u,
                            mentionedUsers: c,
                            mentionedMessageTemplate: d,
                            rootMessageId: f,
                            parentMessageId: p,
                            translations: L,
                            silent: _,
                            appleCriticalAlertOptions: m,
                            isReplyToChannel: E,
                            messageParams: b,
                            createdAt: (new Date).getTime()
                        })
                          , F = new w(D);
                        if (F.requestState = k.MessageRequestState.PENDING,
                        F.sendingStatus = k.MessageSendingStatus.PENDING,
                        F.requestedMentionUserIds = u,
                        F._messageParams = b,
                        !k.currentUser) {
                            var H = new z("Connection should be made first.",z.CONNECTION_REQUIRED)
                              , j = new w(D);
                            return j.requestState = k.MessageRequestState.FAILED,
                            j.sendingStatus = k.MessageSendingStatus.FAILED,
                            j.requestedMentionUserIds = u,
                            j.errorCode = H.code,
                            T(H, j),
                            F
                        }
                        return (!n.isGroupChannel() || S && S._isAutoResendRegistered ? Promise.resolve() : U.upsert([F], e6.UNSENT).then(function() {
                            M.send({
                                source: N ? ev.LOCAL_MESSAGE_RESEND_STARTED : ev.LOCAL_MESSAGE_PENDING_CREATED,
                                payload: {
                                    channel: n,
                                    message: F
                                }
                            })
                        })).then(function() {
                            var t = O.bMessage({
                                channelUrl: n.url,
                                message: i,
                                data: s,
                                customType: a,
                                metaArrays: o,
                                mentionType: l,
                                mentionedUserIds: u,
                                mentionedMessageTemplate: d,
                                requestId: r,
                                rootMessageId: f,
                                parentMessageId: p,
                                silent: _,
                                translationTargetLanguages: g,
                                pushNotificationDeliveryOption: h,
                                appleCriticalAlertOptions: m,
                                isReplyToChannel: E
                            });
                            (F.reqId = t.requestId,
                            n.isGroupChannel() && k.getConnectionState() !== k.ConnectionState.OPEN && k.currentUser && !k.connecting && !k.reconnecting && "string" == typeof a && 0 === a.indexOf("SB_VIDEOCHAT")) ? x.get(k._iid).container.apiClient.sendUserMessage({
                                channelUrl: n.url,
                                isOpenChannel: n.isOpenChannel(),
                                message: i,
                                data: s,
                                customType: a,
                                translationTargetLanguages: g,
                                metaArrays: o,
                                mentionType: l,
                                mentionedUserIds: u,
                                mentionedMessageTemplate: d,
                                pushNotificationDeliveryOption: h,
                                rootMessageId: f,
                                parentMessageId: p,
                                appleCriticalAlertOptions: m,
                                isReplyToChannel: E
                            }, function(t, i) {
                                var s = null;
                                if (t) {
                                    if (F._isAutoResendRegistered && ef.isAutoResendableError(t.code))
                                        return;
                                    (s = new w(D)).requestState = k.MessageRequestState.FAILED,
                                    s.requestedMentionUserIds = u,
                                    S && (s._isAutoResendRegistered = S._isAutoResendRegistered),
                                    t.code === z.REQUEST_CANCELED ? (s.sendingStatus = k.MessageSendingStatus.CANCELED,
                                    U.removeUnsentMessages({
                                        channelUrl: n.url,
                                        sendingStatus: k.MessageSendingStatus.PENDING,
                                        reqIds: [r]
                                    }).then(function() {
                                        M.send({
                                            source: ev.LOCAL_MESSAGE_CANCELED,
                                            payload: {
                                                channel: n,
                                                message: s
                                            }
                                        })
                                    }).catch(function(t) {
                                        return ei.error(t)
                                    }).finally(function() {
                                        T && T(new z(t.message,t.code), s)
                                    })) : (s.errorCode = t.code,
                                    s.sendingStatus = k.MessageSendingStatus.FAILED,
                                    P && ef.isAutoResendableError(t.code) && (s.sendingStatus = k.MessageSendingStatus.PENDING,
                                    s.errorCode = 0,
                                    s._isAutoResendRegistered = !0),
                                    U.upsert([s], e6.UNSENT).then(function() {
                                        tk._completeCurrentAndProcessNextAutoResend(k, s),
                                        M.send({
                                            source: ev.LOCAL_MESSAGE_FAILED,
                                            payload: {
                                                channel: n,
                                                message: s
                                            }
                                        })
                                    }).catch(function(t) {
                                        return ei.error(t)
                                    }).finally(function() {
                                        var n = s._clone();
                                        n.sendingStatus = k.MessageSendingStatus.FAILED,
                                        n.errorCode = t.code,
                                        n._isAutoResendRegistered = !1,
                                        T && T(new z(t.message,t.code), n)
                                    }))
                                } else {
                                    for (var a in (s = new w(i)).reqId = r,
                                    s.requestState = k.MessageRequestState.SUCCEEDED,
                                    s.sendingStatus = k.MessageSendingStatus.SUCCEEDED,
                                    S && (s._isAutoResendRegistered = S._isAutoResendRegistered),
                                    n.lastMessage = s,
                                    k.channelHandlers)
                                        k.channelHandlers[a].onChannelChanged(n);
                                    R.upsert([n]).then(function() {
                                        M.send({
                                            source: ev.EVENT_CHANNEL_CHANGED,
                                            payload: {
                                                channel: n
                                            }
                                        })
                                    }).then(function() {
                                        return U.removeUnsentMessages({
                                            channelUrl: n.url,
                                            sendingStatus: k.MessageSendingStatus.PENDING,
                                            reqIds: [r]
                                        })
                                    }).then(function() {
                                        return U.upsert([s], e6.SUCCEEDED)
                                    }).then(function() {
                                        tk._completeCurrentAndProcessNextAutoResend(k, s),
                                        M.send({
                                            source: ev.EVENT_MESSAGE_SENT,
                                            payload: {
                                                channel: n,
                                                message: s
                                            }
                                        })
                                    }).catch(function(t) {
                                        return ei.error(t)
                                    }).finally(function() {
                                        T && T(null, s)
                                    })
                                }
                            }) : k.sendCommand(t, function(i, s) {
                                if (k.getErrorFirstCallback()) {
                                    var a = [i, s];
                                    s = a[0],
                                    i = a[1]
                                }
                                if (s) {
                                    if (F._isAutoResendRegistered && ef.isAutoResendableError(s.code))
                                        return;
                                    var o = new w(D);
                                    o.reqId = t.requestId,
                                    o.requestState = k.MessageRequestState.FAILED,
                                    s.code === z.REQUEST_CANCELED ? (o.sendingStatus = k.MessageSendingStatus.CANCELED,
                                    n.isGroupChannel() && U.removeUnsentMessages({
                                        channelUrl: n.url,
                                        sendingStatus: k.MessageSendingStatus.PENDING,
                                        reqIds: [r]
                                    }).then(function() {
                                        M.send({
                                            source: ev.LOCAL_MESSAGE_CANCELED,
                                            payload: {
                                                channel: n,
                                                message: o
                                            }
                                        })
                                    }).catch(function(t) {
                                        return ei.error(t)
                                    }).finally(function() {
                                        T && T(new z(s.message,s.code), o)
                                    })) : (o.sendingStatus = k.MessageSendingStatus.FAILED,
                                    o.errorCode = s.code,
                                    o.requestedMentionUserIds = u,
                                    n.isGroupChannel() ? (P && ef.isAutoResendableError(s.code) && (o.sendingStatus = k.MessageSendingStatus.PENDING,
                                    o.errorCode = 0,
                                    o._isAutoResendRegistered = !0),
                                    U.upsert([o], e6.UNSENT).then(function() {
                                        return tk._completeCurrentAndProcessNextAutoResend(k, o),
                                        M.send({
                                            source: ev.LOCAL_MESSAGE_FAILED,
                                            payload: {
                                                channel: n,
                                                message: o
                                            }
                                        })
                                    }).catch(function(t) {
                                        return ei.error(t)
                                    }).finally(function() {
                                        var t = o._clone();
                                        t.sendingStatus = k.MessageSendingStatus.FAILED,
                                        t.errorCode = s.code,
                                        t._isAutoResendRegistered = !1,
                                        T && T(new z(s.message,s.code), t)
                                    })) : T && T(new z(s.message,s.code), o))
                                } else {
                                    var l = new w(v(v({}, i.getJsonElement()), {}, {
                                        messageParams: b
                                    }));
                                    l.reqId = r,
                                    l.requestState = k.MessageRequestState.SUCCEEDED,
                                    l.sendingStatus = k.MessageSendingStatus.SUCCEEDED,
                                    S && (l._isAutoResendRegistered = S._isAutoResendRegistered);
                                    var c = k.currentUser;
                                    if (c && l._sender && c.userId === l._sender.userId && (c.nickname !== l._sender.nickname && (c.nickname = l._sender.nickname),
                                    c.plainProfileUrl !== l._sender.plainProfileUrl && (c.plainProfileUrl = l._sender.plainProfileUrl),
                                    ef.deepEqual(c.metaData, l._sender.metaData) || (c.metaData = l._sender.metaData)),
                                    n.isGroupChannel()) {
                                        n.lastMessage = l,
                                        Object.keys(k.channelHandlers).forEach(function(t) {
                                            k.channelHandlers[t].onChannelChanged(n)
                                        });
                                        var d = eN.of(n._iid);
                                        e9.of(n._iid).upsert([n]).then(function() {
                                            d.send({
                                                source: ev.EVENT_CHANNEL_CHANGED,
                                                payload: {
                                                    channel: n
                                                }
                                            })
                                        }).then(function() {
                                            return U.removeUnsentMessages({
                                                channelUrl: n.url,
                                                sendingStatus: k.MessageSendingStatus.PENDING,
                                                reqIds: [r]
                                            })
                                        }).then(function() {
                                            return U.upsert([l], e6.SUCCEEDED)
                                        }).then(function() {
                                            tk._completeCurrentAndProcessNextAutoResend(k, l),
                                            d.send({
                                                source: ev.EVENT_MESSAGE_SENT,
                                                payload: {
                                                    channel: n,
                                                    message: l
                                                }
                                            })
                                        }).catch(function(t) {
                                            return ei.error(t)
                                        }).finally(function() {
                                            T && T(null, l)
                                        })
                                    } else
                                        T && T(null, l)
                                }
                            })
                        }),
                        F
                    }
                }, {
                    key: "sendUserMessage",
                    value: function() {
                        var t = eI.toArray(arguments)
                          , n = t.pop()
                          , r = null
                          , i = null
                          , s = Y.get(this._iid).UserMessageParams;
                        if ("function" == typeof n) {
                            if (t[0]instanceof s)
                                null === (i = t[0]).data && (i.data = ""),
                                null === i.customType && (i.customType = "");
                            else if ("string" == typeof t[0])
                                switch ((i = new s).data = "",
                                i.customType = "",
                                i.message = t[0],
                                t.length) {
                                case 1:
                                    break;
                                case 2:
                                    i.data = t[1] || "";
                                    break;
                                case 3:
                                    i.data = t[1] || "",
                                    i.customType = t[2] || "";
                                    break;
                                case 4:
                                    i.data = t[1] || "",
                                    i.customType = t[2] || "",
                                    i.translationTargetLanguages = Array.isArray(t[3]) ? t[3] : [t[3]];
                                    break;
                                default:
                                    r = eI.error
                                }
                            else
                                r = eI.error
                        } else
                            r = eI.error;
                        var a = x.get(this._iid).container.isErrorFirstInCallback;
                        return !r && i._validate() && i.message ? this._sendUserMessage(v(v({}, i), {}, {
                            metaArrays: i.metaArrays,
                            mentionType: i.mentionType,
                            mentionedUserIds: i._mentionedUserIds,
                            mentionedUsers: i.mentionedUsers,
                            mentionedMessageTemplate: i.mentionedMessageTemplate,
                            rootMessageId: i.rootMessageId,
                            parentMessageId: i.parentMessageId,
                            translationTargetLanguages: i._translationTargetLanguages,
                            messageParams: i,
                            callback: function(t, r) {
                                a ? n(t, r) : n(r, t)
                            }
                        })) : (a ? n(eI.error, null) : n(null, eI.error),
                        null)
                    }
                }, {
                    key: "_autoResendUserMessage",
                    value: function(t) {
                        var n = this
                          , r = id.getInstance(this._iid);
                        if (r && r.currentUser) {
                            var i = t._messageParams;
                            return new Promise(function(r, s) {
                                return n._sendUserMessage(v(v({}, i), {}, {
                                    reqId: t.reqId,
                                    metaArrays: i.metaArrays,
                                    mentionType: i.mentionType,
                                    mentionedUserIds: i._mentionedUserIds,
                                    rootMessageId: i.rootMessageId,
                                    parentMessageId: i.parentMessageId,
                                    translationTargetLanguages: i._translationTargetLanguages,
                                    pushNotificationDeliveryOption: i.pushNotificationDeliveryOption,
                                    messageParams: i,
                                    oldMessage: t,
                                    callback: function(t, n) {
                                        t ? s(t) : r(n)
                                    }
                                }))
                            }
                            )
                        }
                    }
                }, {
                    key: "_autoResendFileMessage",
                    value: function(t) {
                        var n = id.getInstance(this._iid);
                        if (n && n.currentUser) {
                            var r = this._parsePendingFileMessage(t)
                              , i = Y.get(this._iid).FileMessageQueue;
                            i.create(this).addJob(new i.Job({
                                fileInfo: r,
                                pendingMessage: t._clone(),
                                requestId: t.reqId,
                                error: r.error,
                                response: null
                            }))
                        }
                    }
                }, {
                    key: "resendUserMessage",
                    value: function(t, n) {
                        var r = this
                          , i = Y.get(this._iid)
                          , s = i.UserMessage
                          , a = i.UserMessageParams
                          , o = null
                          , l = eI.parse(arguments, [new eI({
                            type: s,
                            constraint: function(t) {
                                return 0 === t.messageId && t.isResendable() && t.reqId && t.channelUrl === r.url && "string" == typeof t.message && "string" == typeof t.data && "string" == typeof t.customType && "object" === E(t.translations) && !Array.isArray(t.translations)
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , u = k(l, 3);
                        return o = u[0],
                        t = u[1],
                        n = u[2],
                        eg(this._iid, function(n) {
                            if (o)
                                o.message += " Please check if the failed message is resend-able with `message.isResendable().`",
                                n(o, null);
                            else {
                                var i = Object.keys(t.translations)
                                  , s = a.PushNotificationDeliveryOption.DEFAULT;
                                r._sendUserMessage(v(v({}, t), {}, {
                                    mentionedUserIds: t.requestedMentionUserIds,
                                    translationTargetLanguages: i,
                                    pushNotificationDeliveryOption: s,
                                    reqId: t.reqId,
                                    messageParams: t._messageParams,
                                    isManualResend: !0,
                                    callback: n
                                }))
                            }
                        }, n)
                    }
                }, {
                    key: "updateUserMessage",
                    value: function(t, n, r, i, s) {
                        var a = this
                          , o = Y.get(this._iid)
                          , l = o.Command
                          , u = o.UserMessage
                          , c = o.UserMessageParams
                          , d = arguments
                          , h = null
                          , f = null;
                        if ("number" == typeof t)
                            switch (d.length) {
                            case 3:
                                var p = k(eI.parse(d, [new eI({
                                    type: "number"
                                }), new eI({
                                    type: c
                                }), new eI({
                                    type: "callback"
                                })]), 4);
                                h = p[0],
                                t = p[1],
                                f = p[2],
                                s = p[3];
                                break;
                            case 5:
                                f = new c;
                                var g = k(eI.parse(d, [new eI({
                                    type: "number"
                                }), new eI({
                                    type: "string",
                                    nullable: !0
                                }), new eI({
                                    type: "string",
                                    nullable: !0
                                }), new eI({
                                    type: "string",
                                    nullable: !0
                                }), new eI({
                                    type: "callback"
                                })]), 6);
                                h = g[0],
                                t = g[1],
                                n = g[2],
                                r = g[3],
                                i = g[4],
                                s = g[5],
                                f.message = n,
                                f.data = r,
                                f.customType = i
                            }
                        return eg(this._iid, function(n) {
                            if (!h && f && f._validate()) {
                                var r = l.bUpdateUserMessage(v(v({
                                    channelUrl: a.url,
                                    messageId: t
                                }, f), {}, {
                                    mentionType: f._mentionType,
                                    mentionedUserIds: f._mentionedUserIds,
                                    mentionedMessageTemplate: f.mentionedMessageTemplate
                                }))
                                  , i = id.getInstance(a._iid);
                                i.sendCommand(r, function(t, r) {
                                    if (i.getErrorFirstCallback()) {
                                        var s = [t, r];
                                        r = s[0],
                                        t = s[1]
                                    }
                                    var o = null;
                                    if (!r && (o = new u(v(v({}, t.getJsonElement()), {}, {
                                        messageParams: f
                                    })),
                                    a.isGroupChannel())) {
                                        var l = !1;
                                        a.lastMessage ? (a.lastMessage.createdAt < o.createdAt || a.lastMessage.createdAt === o.createdAt && a.lastMessage.messageId === o.messageId && a.lastMessage.updatedAt < o.updatedAt) && (a.lastMessage = o,
                                        l = !0) : (a.lastMessage = o,
                                        l = !0);
                                        var c = eN.of(a._iid);
                                        !o.silent && l && (Object.keys(i.channelHandlers).forEach(function(t) {
                                            i.channelHandlers[t].onChannelChanged(a)
                                        }),
                                        e9.of(a._iid).upsert([a]).then(function() {
                                            c.send({
                                                source: ev.EVENT_CHANNEL_CHANGED,
                                                payload: {
                                                    channel: a
                                                }
                                            })
                                        }).catch(function(t) {
                                            return ei.error(t)
                                        })),
                                        tl.of(a._iid).upsert([o], e6.SUCCEEDED).then(function() {
                                            c.send({
                                                source: ev.EVENT_MESSAGE_UPDATED,
                                                payload: {
                                                    channel: a,
                                                    message: o
                                                }
                                            })
                                        }).catch(function(t) {
                                            return ei.error(t)
                                        })
                                    }
                                    n(r, o)
                                })
                            } else
                                n(eI.error, null)
                        }, s)
                    }
                }, {
                    key: "translateUserMessage",
                    value: function(t, n, r) {
                        var i = this
                          , s = id.getInstance(this._iid)
                          , a = Y.get(this._iid).UserMessage
                          , o = null
                          , l = eI.parse(arguments, [new eI({
                            type: a,
                            constraint: function(t) {
                                return t.channelUrl === i.url && t.sendingStatus === s.MessageSendingStatus.SUCCEEDED
                            }
                        }), new eI({
                            type: "array",
                            constraint: function(t) {
                                return t.every(function(t) {
                                    return "string" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , u = k(l, 4);
                        return o = u[0],
                        t = u[1],
                        n = u[2],
                        r = u[3],
                        eg(this._iid, function(r) {
                            o ? r(o, null) : x.get(i._iid).container.apiClient.translateUserMessage({
                                channelUrl: i.url,
                                isOpenChannel: i.isOpenChannel(),
                                messageId: t.messageId,
                                translationTargetLanguages: n
                            }, function(t, n) {
                                var i = null;
                                t || (i = new a(n)),
                                r(t, i)
                            })
                        }, r)
                    }
                }, {
                    key: "_parsePendingFileMessage",
                    value: function(t) {
                        var n = t._messageParams.serialize()
                          , r = n.data
                          , i = n.customType
                          , s = n.fileUrl
                          , a = n.thumbnailSizes
                          , o = n.mentionType
                          , l = n.mentionedUserIds
                          , u = n.metaArrays
                          , c = n.parentMessageId
                          , d = n.pushNotificationDeliveryOption
                          , h = t._messageParams;
                        return {
                            file: h.file ? h.file : s,
                            name: t.name,
                            type: t.type,
                            size: t.size,
                            data: r,
                            customType: i,
                            thumbnailSizes: a,
                            metaArrays: u,
                            mentionType: o,
                            mentionedUserIds: l,
                            pushNotificationDeliveryOption: d,
                            rootMessageId: c,
                            parentMessageId: c,
                            appleCriticalAlertOptions: h.appleCriticalAlertOptions,
                            messageParams: t._messageParams,
                            silent: t.silent,
                            error: null,
                            progressHandler: null,
                            callback: null
                        }
                    }
                }, {
                    key: "_parseFileMessageArguments",
                    value: function(t) {
                        var n = Y.get(this._iid)
                          , r = n.BaseMessageParams
                          , i = n.FileMessageParams
                          , s = {
                            reqId: null,
                            error: null,
                            file: null,
                            name: null,
                            type: null,
                            size: null,
                            data: "",
                            customType: "",
                            thumbnailSizes: [],
                            metaArrays: [],
                            mentionType: r.MentionType.USERS,
                            mentionedUserIds: [],
                            pushNotificationDeliveryOption: i.PushNotificationDeliveryOption.DEFAULT,
                            rootMessageId: null,
                            parentMessageId: null,
                            progressHandler: null,
                            silent: !1,
                            appleCriticalAlertOptions: null,
                            isReplyToChannel: !1,
                            messageParams: null,
                            callback: null
                        };
                        if ("function" == typeof t[t.length - 1] && (s.callback = t.pop()),
                        "function" == typeof t[t.length - 1] && (s.progressHandler = t.pop()),
                        t[0]instanceof i)
                            s.reqId = t[0]._reqId,
                            s.file = t[0].file || t[0].fileUrl,
                            s.name = t[0].fileName,
                            s.type = t[0].mimeType,
                            s.size = t[0].fileSize,
                            s.data = t[0].data,
                            s.customType = t[0].customType,
                            s.thumbnailSizes = t[0].thumbnailSizes,
                            s.metaArrays = t[0].metaArrays,
                            s.mentionType = t[0]._mentionType,
                            s.mentionedUserIds = t[0]._mentionedUserIds,
                            s.pushNotificationDeliveryOption = t[0].pushNotificationDeliveryOption ? t[0].pushNotificationDeliveryOption : i.PushNotificationDeliveryOption.DEFAULT,
                            s.rootMessageId = t[0].rootMessageId,
                            s.parentMessageId = t[0].parentMessageId,
                            s.silent = t[0].silent,
                            t[0]._validate() || (s.error = eI.error),
                            s.appleCriticalAlertOptions = t[0].appleCriticalAlertOptions,
                            s.isReplyToChannel = t[0].isReplyToChannel,
                            s.messageParams = t[0];
                        else if (ef.isFile(t[0]) || "string" == typeof t[0]) {
                            switch (s.file = t[0],
                            t.length) {
                            case 1:
                                break;
                            case 2:
                                s.data = t[1];
                                break;
                            case 3:
                                s.data = t[1],
                                s.customType = t[2];
                                break;
                            case 4:
                                s.data = t[1],
                                s.customType = t[2],
                                s.thumbnailSizes = t[3];
                                break;
                            case 5:
                                s.name = t[1],
                                s.type = t[2],
                                s.size = t[3],
                                s.data = t[4];
                                break;
                            case 6:
                                s.name = t[1],
                                s.type = t[2],
                                s.size = t[3],
                                s.data = t[4],
                                s.customType = t[5];
                                break;
                            case 7:
                                s.name = t[1],
                                s.type = t[2],
                                s.size = t[3],
                                s.data = t[4],
                                s.customType = t[5],
                                s.thumbnailSizes = t[6]
                            }
                            var a = k(eI.parse([s.file, s.name, s.type, s.size, s.data, s.customType, s.thumbnailSizes], [new eI({
                                type: ["file", "string"]
                            }), new eI({
                                type: "string",
                                nullable: !0
                            }), new eI({
                                type: "string",
                                nullable: !0
                            }), new eI({
                                type: "number",
                                nullable: !0,
                                constraint: function(t) {
                                    return t >= 0
                                }
                            }), new eI({
                                type: "string",
                                nullable: !0
                            }), new eI({
                                type: "string",
                                nullable: !0
                            }), new eI({
                                type: "array"
                            })]), 8);
                            s.error = a[0],
                            s.file = a[1],
                            s.name = a[2],
                            s.type = a[3],
                            s.size = a[4],
                            s.data = a[5],
                            s.customType = a[6],
                            s.thumbnailSizes = a[7];
                            var o = ef.isFile(s.file);
                            o && (s.name = s.name || s.file.name,
                            s.type = s.type || s.file.type,
                            s.size = s.size || s.file.size),
                            s.messageParams = {
                                mentionType: r.MentionType.USERS,
                                mentionedUserIds: s.mentionedUserIds,
                                cachedMentionedUsers: [],
                                cachedMentionedUserIds: [],
                                metaArrays: s.metaArrays,
                                parentMessageId: s.parentMessageId,
                                pushNotificationDeliveryOption: s.pushNotificationDeliveryOption,
                                appleCriticalAlertOptions: s.appleCriticalAlertOptions,
                                fileName: s.name,
                                mimeType: s.type,
                                fileSize: s.size,
                                data: s.data,
                                customType: s.customType,
                                isUpdate: !1,
                                file: o ? s.file : null,
                                fileUrl: o ? null : s.file,
                                thumbnailSizes: s.thumbnailSizes
                            }
                        } else
                            s.error = eI.error;
                        return ef.isFile(s.file) && (s.name = s.name || s.file.name,
                        s.type = s.type || s.file.type,
                        s.size = s.size || s.file.size),
                        s
                    }
                }, {
                    key: "_createTempFileMessage",
                    value: function(t) {
                        try {
                            var n, r = id.getInstance(this._iid), i = Y.get(this._iid), s = i.Command, a = i.FileMessage, o = v(v({}, t), {}, {
                                messageId: 0,
                                reqId: null !== (n = t.reqId) && void 0 !== n ? n : s.generateRequestId(),
                                user: r.currentUser || {},
                                channel: this,
                                plainUrl: "string" == typeof t.file ? t.file : "",
                                thumbnails: t.thumbnailSizes.map(function(t) {
                                    return {
                                        url: "",
                                        plainUrl: "",
                                        width: t.maxWidth,
                                        height: t.maxHeight,
                                        real_width: 0,
                                        real_height: 0
                                    }
                                }),
                                sendingStatus: r.MessageSendingStatus.PENDING,
                                createdAt: (new Date).getTime()
                            }), l = a.objectify(o);
                            return new a(l)
                        } catch (u) {
                            return null
                        }
                    }
                }, {
                    key: "sendFileMessage",
                    value: function() {
                        var t = this
                          , n = eI.toArray(arguments)
                          , r = this._parseFileMessageArguments(n)
                          , i = Y.get(this._iid).Command
                          , s = null
                          , a = i.generateRequestId();
                        r.error || ((s = this._createTempFileMessage(r)).requestedMentionUserIds = r.mentionedUserIds,
                        a = s.reqId);
                        var o = id.getInstance(this._iid);
                        if (o && o.currentUser || (r.error = new z("Connection should be made first.",z.CONNECTION_REQUIRED)),
                        this.isGroupChannel()) {
                            var l = tl.of(this._iid)
                              , u = eN.of(this._iid);
                            l.upsert([s], e6.UNSENT).then(function() {
                                u.send({
                                    source: ev.LOCAL_MESSAGE_PENDING_CREATED,
                                    payload: {
                                        channel: t,
                                        message: s
                                    }
                                })
                            })
                        }
                        var c = Y.get(this._iid).FileMessageQueue;
                        return c.create(this).addJob(new c.Job({
                            fileInfo: r,
                            pendingMessage: s,
                            requestId: a,
                            error: r.error,
                            response: null
                        })),
                        s
                    }
                }, {
                    key: "sendFileMessages",
                    value: function(t) {
                        var n = this
                          , r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
                          , i = r.progress ? r.progress : function() {}
                          , s = r.sent ? r.sent : function() {}
                          , a = r.complete ? r.complete : function() {}
                        ;
                        if (Array.isArray(t) && t.length > 0 && t.length <= 20) {
                            var o = [];
                            return t.forEach(function(r, l) {
                                o.push(n.sendFileMessage(r, i, function(n, r) {
                                    s(n, r),
                                    l === t.length - 1 && a(null)
                                }))
                            }),
                            o
                        }
                        return a(eI.error),
                        null
                    }
                }, {
                    key: "resendFileMessage",
                    value: function(t, n, r) {
                        var i = this
                          , s = Y.get(this._iid)
                          , a = s.FileMessage
                          , o = s.FileMessageParams
                          , l = null
                          , u = eI.parse(arguments, [new eI({
                            type: a,
                            constraint: function(t) {
                                return 0 === t.messageId && t.isResendable() && t.reqId && t.channelUrl === i.url && Array.isArray(t.thumbnails)
                            }
                        }), new eI({
                            type: "file",
                            optionalIf: function(t) {
                                var n, r, i = !!t[0].plainUrl, s = ef.isFile(null === (n = t[0]) || void 0 === n || null === (r = n.messageParams) || void 0 === r ? void 0 : r.file);
                                return i || s
                            },
                            defaultValue: null
                        }), new eI({
                            type: "callback"
                        })])
                          , c = k(u, 4);
                        return l = c[0],
                        t = c[1],
                        n = c[2],
                        r = c[3],
                        eg(this._iid, function(r) {
                            if (l)
                                l.message += " Please check if the failed message is resend-able with `message.isResendable().`",
                                r(l, null);
                            else {
                                var s, a = new o;
                                a._reqId = t.reqId,
                                t.plainUrl ? a.fileUrl = t.plainUrl : n ? a.file = n : ef.isFile(null === (s = t.messageParams) || void 0 === s ? void 0 : s.file) && (a.file = t.messageParams.file),
                                a.fileName = t.name,
                                a.fileSize = t.size,
                                a.mimeType = t.type,
                                a.data = t.data,
                                a.customType = t.customType,
                                a.mentionType = t.mentionType,
                                a.mentionedUserIds = t.requestedMentionUserIds,
                                a.metaArrays = t.metaArrays,
                                a.thumbnailSizes = t.thumbnails.map(function(t) {
                                    return {
                                        maxWidth: t.width,
                                        maxHeight: t.height
                                    }
                                }),
                                a.appleCriticalAlertOptions = t.appleCriticalAlertOptions,
                                i.sendFileMessage(a, r)
                            }
                        }, r)
                    }
                }, {
                    key: "updateFileMessage",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = Y.get(this._iid)
                          , o = a.Command
                          , l = a.FileMessage
                          , u = a.FileMessageParams
                          , c = arguments
                          , d = null
                          , h = null;
                        if ("number" == typeof t)
                            switch (c.length) {
                            case 3:
                                var f = k(eI.parse(c, [new eI({
                                    type: "number"
                                }), new eI({
                                    type: u
                                }), new eI({
                                    type: "callback"
                                })]), 4);
                                d = f[0],
                                t = f[1],
                                h = f[2],
                                i = f[3],
                                h && (h._isUpdate = !0);
                                break;
                            case 4:
                                h = new u;
                                var p = k(eI.parse(c, [new eI({
                                    type: "number"
                                }), new eI({
                                    type: "string",
                                    nullable: !0
                                }), new eI({
                                    type: "string",
                                    nullable: !0
                                }), new eI({
                                    type: "callback"
                                })]), 5);
                                d = p[0],
                                t = p[1],
                                n = p[2],
                                r = p[3],
                                i = p[4],
                                h.data = n,
                                h.customType = r,
                                h._isUpdate = !0
                            }
                        return eg(this._iid, function(n) {
                            if (!d && h && h._validate()) {
                                var r = o.bUpdateFileMessage(v(v({
                                    channelUrl: s.url,
                                    messageId: t
                                }, h), {}, {
                                    mentionType: h._mentionType,
                                    mentionedUserIds: h._mentionedUserIds
                                }))
                                  , i = id.getInstance(s._iid);
                                i.sendCommand(r, function(t, r) {
                                    if (i.getErrorFirstCallback()) {
                                        var a = [t, r];
                                        r = a[0],
                                        t = a[1]
                                    }
                                    var o = null;
                                    if (!r && (o = new l(v(v({}, t.getJsonElement()), {}, {
                                        messageParams: h
                                    })),
                                    s.isGroupChannel())) {
                                        var u = !1;
                                        s.lastMessage ? (s.lastMessage.createdAt < o.createdAt || s.lastMessage.createdAt === o.createdAt && s.lastMessage.messageId === o.messageId && s.lastMessage.updatedAt < o.updatedAt) && (s.lastMessage = o,
                                        u = !0) : (s.lastMessage = o,
                                        u = !0);
                                        var c = eN.of(s._iid);
                                        !o.silent && u && (Object.keys(i.channelHandlers).forEach(function(t) {
                                            i.channelHandlers[t].onChannelChanged(s)
                                        }),
                                        e9.of(s._iid).upsert([s]).then(function() {
                                            c.send({
                                                source: ev.EVENT_CHANNEL_CHANGED,
                                                payload: {
                                                    channel: s
                                                }
                                            })
                                        }).catch(function(t) {
                                            return ei.error(t)
                                        })),
                                        tl.of(s._iid).upsert([o], e6.SUCCEEDED).then(function() {
                                            c.send({
                                                source: ev.EVENT_MESSAGE_UPDATED,
                                                payload: {
                                                    channel: s,
                                                    message: o
                                                }
                                            })
                                        }).catch(function(t) {
                                            return ei.error(t)
                                        })
                                    }
                                    n(r, o)
                                })
                            } else
                                n(eI.error, null)
                        }, i)
                    }
                }, {
                    key: "cancelUploadingFileMessage",
                    value: function(t, n) {
                        var r = null
                          , i = eI.parse(arguments, [new eI({
                            type: ["number", "string"]
                        }), new eI({
                            type: "callback"
                        })])
                          , s = k(i, 3);
                        r = s[0],
                        t = s[1],
                        n = s[2];
                        var a = x.get(this._iid).container.isErrorFirstInCallback;
                        return r ? (a ? n(r, null) : n(null, r),
                        !1) : Y.get(this._iid).FileMessageQueue.create(this).cancelUploadItemByRequestId(t, function(t, r) {
                            return a ? n(t, r) : n(r, t)
                        })
                    }
                }, {
                    key: "addReaction",
                    value: function(t, n, r) {
                        var i = this
                          , s = id.getInstance(this._iid)
                          , a = Y.get(this._iid).ReactionEvent
                          , o = null
                          , l = eI.parse(arguments, [new eI({
                            type: tp
                        }), new eI({
                            type: "string",
                            constraint: function(t) {
                                return t.length > 0
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , u = k(l, 4);
                        return o = u[0],
                        t = u[1],
                        n = u[2],
                        r = u[3],
                        eg(this._iid, function(r) {
                            o ? r(o, null) : t.sendingStatus === s.MessageSendingStatus.SUCCEEDED ? x.get(i._iid).container.apiClient.addReaction({
                                isGroupChannel: t.isGroupChannel(),
                                channelUrl: t.channelUrl,
                                messageId: t.messageId,
                                key: n
                            }, function(n, i) {
                                var s = null;
                                n || (s = a.createFromJson(v(v({}, i), {}, {
                                    msg_id: t.messageId
                                }))),
                                r(n, s)
                            }) : r(new z("Cannot add reaction to a non-succeeded message.",z.REQUEST_FAILED), null)
                        }, r)
                    }
                }, {
                    key: "deleteReaction",
                    value: function(t, n, r) {
                        var i = this
                          , s = id.getInstance(this._iid)
                          , a = Y.get(this._iid).ReactionEvent
                          , o = null
                          , l = eI.parse(arguments, [new eI({
                            type: tp
                        }), new eI({
                            type: "string",
                            constraint: function(t) {
                                return t.length > 0
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , u = k(l, 4);
                        return o = u[0],
                        t = u[1],
                        n = u[2],
                        r = u[3],
                        eg(this._iid, function(r) {
                            o ? r(o, null) : t.sendingStatus === s.MessageSendingStatus.SUCCEEDED ? x.get(i._iid).container.apiClient.deleteReaction({
                                isGroupChannel: t.isGroupChannel(),
                                channelUrl: t.channelUrl,
                                messageId: t.messageId,
                                key: n
                            }, function(n, i) {
                                var s = null;
                                n || (s = a.createFromJson(v(v({}, i), {}, {
                                    msg_id: t.messageId
                                }))),
                                r(n, s)
                            }) : r(new z("Cannot remove reaction to a non-succeeded message.",z.REQUEST_FAILED), null)
                        }, r)
                    }
                }, {
                    key: "deleteMessage",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "object",
                            constraint: function(t) {
                                return !Array.isArray(t) && null !== t && t.hasOwnProperty("messageId")
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.deleteMessage({
                                channelUrl: r.url,
                                isOpenChannel: r.isOpenChannel(),
                                messageId: t.messageId
                            }, function(i, s) {
                                if (!i && r.isGroupChannel()) {
                                    var a = tl.of(r._iid)
                                      , o = eN.of(r._iid);
                                    a.remove([t.messageId], e6.SUCCEEDED).then(function() {
                                        o.send({
                                            source: ev.EVENT_MESSAGE_DELETED,
                                            payload: {
                                                channel: r,
                                                message: t
                                            }
                                        })
                                    }).catch(function(t) {
                                        return ei.error(t)
                                    })
                                }
                                n(i, null)
                            })
                        }, n)
                    }
                }, {
                    key: "copyUserMessage",
                    value: function(n, r, i) {
                        var s = Y.get(this._iid);
                        s.Command;
                        var a = s.UserMessage
                          , o = s.BaseMessageParams
                          , l = null
                          , u = eI.parse(arguments, [new eI({
                            type: t
                        }), new eI({
                            type: a
                        }), new eI({
                            type: "callback"
                        })])
                          , c = k(u, 4);
                        l = c[0],
                        n = c[1],
                        r = c[2],
                        i = c[3];
                        var d = x.get(this._iid).container.isErrorFirstInCallback;
                        if (l)
                            return d ? i(eI.error, null) : i(null, eI.error),
                            null;
                        if (this.url !== r.channelUrl) {
                            var h = new z("The message does not belong to this channel",z.INVALID_PARAMETER);
                            return d ? i(h, null) : i(null, h),
                            null
                        }
                        var f = Object.keys(r.translations);
                        f.forEach(function(t) {
                            return ""
                        });
                        var p = o.PushNotificationDeliveryOption.DEFAULT;
                        return n._sendUserMessage(v(v({}, r), {}, {
                            reqId: null,
                            pushNotificationDeliveryOption: p,
                            translationTargetLanguages: f,
                            rootMessageId: null,
                            parentMessageId: null,
                            parentMessageText: null,
                            messageParams: r._messageParams,
                            callback: i
                        }))
                    }
                }, {
                    key: "copyFileMessage",
                    value: function(n, r, i) {
                        var s = this
                          , a = Y.get(this._iid)
                          , o = a.Command;
                        a.GroupChannel;
                        var l = a.FileMessage
                          , u = a.BaseMessageParams;
                        a.FileMessageParams;
                        var c = a.User
                          , d = null
                          , h = eI.parse(arguments, [new eI({
                            type: t
                        }), new eI({
                            type: l
                        }), new eI({
                            type: "callback"
                        })])
                          , f = k(h, 4);
                        d = f[0],
                        n = f[1],
                        r = f[2],
                        i = f[3];
                        var p = x.get(this._iid)
                          , g = p.container.isErrorFirstInCallback;
                        if (d)
                            return g ? i(eI.error, null) : i(null, eI.error),
                            null;
                        if (this.url !== r.channelUrl) {
                            var m = new z("The message does not belong to this channel");
                            return g ? i(m, null) : i(null, m),
                            null
                        }
                        var y = id.getInstance(this._iid)
                          , _ = r
                          , v = _.url
                          , E = _.name
                          , b = _.type
                          , C = _.size
                          , S = _.data
                          , A = _.customType
                          , N = _.mentionType
                          , T = _.mentionedUserIds
                          , I = _.mentionedUsers
                          , O = _.metaArrays
                          , w = _.thumbnails
                          , U = _.requireAuth
                          , R = _.messageSurvivalSeconds
                          , M = _.silent
                          , P = _.appleCriticalAlertOptions
                          , L = o.generateRequestId()
                          , D = y.currentUser || {}
                          , F = n.url
                          , H = n.isOpenChannel()
                          , j = I.filter(function(t) {
                            return new c(c.objectify(t))
                        })
                          , G = u.PushNotificationDeliveryOption.DEFAULT
                          , B = l.objectify({
                            messageId: 0,
                            reqId: L,
                            user: D,
                            channel: n,
                            plainUrl: v,
                            name: E,
                            type: b,
                            size: C,
                            data: S,
                            customType: A,
                            mentionType: N,
                            mentionedUserIds: T,
                            mentionedUsers: j,
                            requestedMentionUserIds: T,
                            metaArrays: O,
                            thumbnails: w,
                            requireAuth: U,
                            messageSurvivalSeconds: R,
                            silent: M,
                            createdAt: (new Date).getTime(),
                            appleCriticalAlertOptions: P
                        })
                          , V = new l(B);
                        if (V.requestState = y.MessageRequestState.PENDING,
                        V.sendingStatus = y.MessageSendingStatus.PENDING,
                        !y.currentUser) {
                            var q = new z("Connection should be made first.",z.CONNECTION_REQUIRED)
                              , K = new l(B);
                            return K.requestState = y.MessageRequestState.FAILED,
                            K.sendingStatus = y.MessageSendingStatus.FAILED,
                            K.errorCode = q.code,
                            g ? i(q, K) : i(K, q),
                            V
                        }
                        var W = o.bFile({
                            requestId: L,
                            channelUrl: F,
                            url: v,
                            name: E,
                            type: b,
                            size: C,
                            data: S,
                            customType: A,
                            metaArrays: O,
                            mentionType: N,
                            mentionedUserIds: T,
                            thumbnailSizes: w,
                            requireAuth: U,
                            pushNotificationDeliveryOption: G,
                            silent: M,
                            appleCriticalAlertOptions: P
                        });
                        return y.getConnectionState() === y.ConnectionState.OPEN || y.connecting || y.reconnecting ? y.sendCommand(W, function(t, r) {
                            if (y.getErrorFirstCallback()) {
                                var a = [t, r];
                                r = a[0],
                                t = a[1]
                            }
                            if (r) {
                                if (r.code !== z.INVALID_PARAMETER) {
                                    var o = new l(B);
                                    o.requestState = y.MessageRequestState.FAILED,
                                    o.sendingStatus = y.MessageSendingStatus.FAILED,
                                    r.code !== z.FILE_UPLOAD_CANCEL_FAILED && r.code !== z.REQUEST_CANCELED || (o.sendingStatus = y.MessageSendingStatus.CANCELED),
                                    o.errorCode = r.code,
                                    g ? i(r, o) : i(o, r)
                                } else
                                    g ? i(r, null) : i(null, r)
                            } else {
                                var u = new l(t.getJsonElement())
                                  , c = u._sender;
                                if (D && c && D.userId === c.userId && (D.nickname !== c.nickname && (D.nickname = c.nickname),
                                D.plainProfileUrl !== c.plainProfileUrl && (D.plainProfileUrl = c.plainProfileUrl)),
                                n.isGroupChannel()) {
                                    n.lastMessage = u,
                                    Object.keys(y.channelHandlers).forEach(function(t) {
                                        y.channelHandlers[t].onChannelChanged(n)
                                    });
                                    var d = eN.of(s._iid);
                                    e9.of(s._iid).upsert([n]).then(function() {
                                        d.send({
                                            source: ev.EVENT_CHANNEL_CHANGED,
                                            payload: {
                                                channel: n
                                            }
                                        })
                                    }).catch(function(t) {
                                        return ei.error(t)
                                    }),
                                    tl.of(s._iid).upsert([u]).then(function() {
                                        d.send({
                                            source: ev.EVENT_MESSAGE_SENT,
                                            payload: {
                                                channel: s,
                                                message: u
                                            }
                                        })
                                    }).catch(function(t) {
                                        return ei.error(t)
                                    })
                                }
                                g ? i(null, u) : i(u, null)
                            }
                        }) : p.container.apiClient.sendFileMessage({
                            channelUrl: F,
                            isOpenChannel: H,
                            fileUrl: v,
                            fileName: E,
                            fileType: b,
                            fileSize: C,
                            data: S,
                            customType: A,
                            metaArrays: O,
                            mentionType: N,
                            mentionedUserIds: T,
                            thumbnailSizes: w,
                            requireAuth: U,
                            pushNotificationDeliveryOption: G,
                            appleCriticalAlertOptions: P
                        }, function(t, r) {
                            if (t) {
                                if (t.code !== z.INVALID_PARAMETER) {
                                    var s = new l(commnad.getJsonElement());
                                    s.requestState = y.MessageRequestState.FAILED,
                                    s.sendingStatus = y.MessageSendingStatus.FAILED,
                                    t.code !== z.FILE_UPLOAD_CANCEL_FAILED && t.code !== z.REQUEST_CANCELED || (s.sendingStatus = y.MessageSendingStatus.CANCELED),
                                    s.errorCode = t.code,
                                    g ? i(t, s) : i(s, t)
                                } else
                                    g ? i(t, null) : i(null, t)
                            } else {
                                var a = new l(r)
                                  , o = a._sender;
                                D && o && D.userId === o.userId && (D.nickname !== o.nickname && (D.nickname = o.nickname),
                                D.plainProfileUrl !== o.plainProfileUrl && (D.plainProfileUrl = o.plainProfileUrl)),
                                n.isGroupChannel() && (n.lastMessage = a,
                                Object.keys(y.channelHandlers).forEach(function(t) {
                                    y.channelHandlers[t].onChannelChanged(n)
                                })),
                                g ? i(null, a) : i(a, null)
                            }
                        }),
                        V
                    }
                }, {
                    key: "addOperators",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return Object.keys(t).map(function(n) {
                                    return t[n]
                                }).every(function(t) {
                                    return "string" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.addOperators({
                                channelUrl: r.url,
                                isOpenChannel: r.isOpenChannel(),
                                operatorUserIds: t
                            }, function(t, r) {
                                return n(t, r)
                            })
                        }, n)
                    }
                }, {
                    key: "removeOperators",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return Object.keys(t).map(function(n) {
                                    return t[n]
                                }).every(function(t) {
                                    return "string" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.removeOperators({
                                channelUrl: r.url,
                                isOpenChannel: r.isOpenChannel(),
                                operatorUserIds: t
                            }, function(t, r) {
                                return n(t, r)
                            })
                        }, n)
                    }
                }, {
                    key: "getMetaCounters",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return Object.keys(t).map(function(n) {
                                    return t[n]
                                }).every(function(t) {
                                    return "string" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.getMetaCounters({
                                channelUrl: r.url,
                                isOpenChannel: r.isOpenChannel(),
                                keys: t
                            }, function(t, r) {
                                return n(t, r)
                            })
                        }, n)
                    }
                }, {
                    key: "getAllMetaCounters",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.getMetaCounters({
                                channelUrl: n.url,
                                isOpenChannel: n.isOpenChannel(),
                                keys: []
                            }, function(n, r) {
                                return t(n, r)
                            })
                        }, t)
                    }
                }, {
                    key: "createMetaCounters",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "object",
                            constraint: function(t) {
                                return t && !Array.isArray(t) && Object.keys(t).length > 0 && Object.keys(t).map(function(n) {
                                    return t[n]
                                }).every(function(t) {
                                    return "number" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.createMetaCounters({
                                channelUrl: r.url,
                                isOpenChannel: r.isOpenChannel(),
                                metaCounter: t
                            }, function(t, r) {
                                return n(t, r)
                            })
                        }, n)
                    }
                }, {
                    key: "updateMetaCounters",
                    value: function(t, n, r) {
                        var i = this
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: "object",
                            constraint: function(t) {
                                return t && !Array.isArray(t) && Object.keys(t).length > 0 && Object.keys(t).map(function(n) {
                                    return t[n]
                                }).every(function(t) {
                                    return "number" == typeof t
                                })
                            }
                        }), new eI({
                            type: "boolean",
                            optional: !0,
                            defaultValue: !1
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        return s = o[0],
                        t = o[1],
                        n = o[2],
                        r = o[3],
                        eg(this._iid, function(r) {
                            s ? r(s, null) : x.get(i._iid).container.apiClient.updateMetaCounters({
                                channelUrl: i.url,
                                isOpenChannel: i.isOpenChannel(),
                                metaCounter: t,
                                upsert: n,
                                mode: "set"
                            }, function(t, n) {
                                return r(t, n)
                            })
                        }, r)
                    }
                }, {
                    key: "increaseMetaCounters",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "object",
                            constraint: function(t) {
                                return t && !Array.isArray(t) && Object.keys(t).length > 0 && Object.keys(t).map(function(n) {
                                    return t[n]
                                }).every(function(t) {
                                    return "number" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.updateMetaCounters({
                                channelUrl: r.url,
                                isOpenChannel: r.isOpenChannel(),
                                metaCounter: t,
                                upsert: !1,
                                mode: "increase"
                            }, function(t, r) {
                                return n(t, r)
                            })
                        }, n)
                    }
                }, {
                    key: "decreaseMetaCounters",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "object",
                            constraint: function(t) {
                                return t && !Array.isArray(t) && Object.keys(t).length > 0 && Object.keys(t).map(function(n) {
                                    return t[n]
                                }).every(function(t) {
                                    return "number" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.updateMetaCounters({
                                channelUrl: r.url,
                                isOpenChannel: r.isOpenChannel(),
                                metaCounter: t,
                                upsert: !1,
                                mode: "decrease"
                            }, function(t, r) {
                                var i = null;
                                t || (i = {},
                                Object.keys(r).forEach(function(t) {
                                    i[t] = r[t]
                                })),
                                n(t, i)
                            })
                        }, n)
                    }
                }, {
                    key: "deleteMetaCounter",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.deleteMetaCounter({
                                channelUrl: r.url,
                                isOpenChannel: r.isOpenChannel(),
                                key: t
                            }, function(t, r) {
                                return n(t, r)
                            })
                        }, n)
                    }
                }, {
                    key: "deleteAllMetaCounters",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.deleteAllMetaCounters({
                                channelUrl: n.url,
                                isOpenChannel: n.isOpenChannel()
                            }, function(n, r) {
                                return t(n, r)
                            })
                        }, t)
                    }
                }, {
                    key: "getCachedMetaData",
                    value: function() {
                        var t = tR.get(this)
                          , n = {};
                        return Object.keys(t).forEach(function(r) {
                            var i = t[r];
                            i.isRemoved || (n[r] = i.value)
                        }),
                        n
                    }
                }, {
                    key: "getMetaData",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return Object.keys(t).map(function(n) {
                                    return t[n]
                                }).every(function(t) {
                                    return "string" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.getMetaData({
                                channelUrl: r.url,
                                isOpenChannel: r.isOpenChannel(),
                                keys: t
                            }, function(t, i) {
                                if (i && i.ts) {
                                    var s = i.metadata;
                                    r._addOrUpdateCachedMetaData(s, i.ts),
                                    n(t, s)
                                } else
                                    n(t, i)
                            })
                        }, n)
                    }
                }, {
                    key: "getAllMetaData",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.getMetaData({
                                channelUrl: n.url,
                                isOpenChannel: n.isOpenChannel(),
                                keys: []
                            }, function(r, i) {
                                if (i && i.ts) {
                                    var s = i.metadata;
                                    n._refreshMetaData(s, i.ts),
                                    t(r, s)
                                } else
                                    t(r, i)
                            })
                        }, t)
                    }
                }, {
                    key: "createMetaData",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "object",
                            constraint: function(t) {
                                return t && !Array.isArray(t) && Object.keys(t).length > 0
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.createMetaData({
                                channelUrl: r.url,
                                isOpenChannel: r.isOpenChannel(),
                                metaData: t
                            }, function(t, r) {
                                n(t, r && r.ts ? r.metadata : r)
                            })
                        }, n)
                    }
                }, {
                    key: "updateMetaData",
                    value: function(t, n, r) {
                        var i = this
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: "object",
                            constraint: function(t) {
                                return t && !Array.isArray(t) && Object.keys(t).length > 0
                            }
                        }), new eI({
                            type: "boolean",
                            optional: !0,
                            defaultValue: !1
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        return s = o[0],
                        t = o[1],
                        n = o[2],
                        r = o[3],
                        eg(this._iid, function(r) {
                            s ? r(s, null) : x.get(i._iid).container.apiClient.updateMetaData({
                                channelUrl: i.url,
                                isOpenChannel: i.isOpenChannel(),
                                metaData: t,
                                upsert: n
                            }, function(t, n) {
                                r(t, n && n.ts ? n.metadata : n)
                            })
                        }, r)
                    }
                }, {
                    key: "deleteMetaData",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.deleteMetaData({
                                channelUrl: r.url,
                                isOpenChannel: r.isOpenChannel(),
                                key: t
                            }, function(t, r) {
                                n(t, r && r.ts ? {} : r)
                            })
                        }, n)
                    }
                }, {
                    key: "deleteAllMetaData",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.deleteAllMetaData({
                                channelUrl: n.url,
                                isOpenChannel: n.isOpenChannel()
                            }, function(n, r) {
                                return t(n, r && r.ts ? {} : r)
                            })
                        }, t)
                    }
                }, {
                    key: "_updateMessageMetaArray",
                    value: function(t, n, r, i) {
                        var s = this;
                        return eg(this._iid, function(i) {
                            var a = Y.get(s._iid)
                              , o = a.Command
                              , l = a.UserMessage
                              , u = a.FileMessage
                              , c = a.AdminMessage
                              , d = null;
                            if (n.isUserMessage() ? d = o.bUpdateUserMessage({
                                channelUrl: t,
                                messageId: n.messageId,
                                metaArrayParams: r
                            }) : n.isFileMessage() && (d = o.bUpdateFileMessage({
                                channelUrl: t,
                                messageId: n.messageId,
                                metaArrayParams: r
                            })),
                            d) {
                                var h = id.getInstance(s._iid);
                                h.sendCommand(d, function(t, r) {
                                    if (h.getErrorFirstCallback()) {
                                        var s = [t, r];
                                        r = s[0],
                                        t = s[1]
                                    }
                                    var a = null;
                                    r || (n.isUserMessage() ? a = new l(t.getJsonElement()) : n.isFileMessage() ? a = new u(t.getJsonElement()) : n.isAdminMessage() && (a = new c(t.getJsonElement()))),
                                    i(r, a)
                                })
                            } else
                                i(eI.error, null)
                        }, i)
                    }
                }, {
                    key: "createMessageMetaArrayKeys",
                    value: function(t, n, r) {
                        var i = Y.get(this._iid).MessageMetaArray
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: tp
                        }), new eI({
                            type: "array",
                            constraint: function(t) {
                                return t.every(function(t) {
                                    return "string" == typeof t && "" !== t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        if (s = o[0],
                        t = o[1],
                        n = o[2],
                        r = o[3],
                        s)
                            return eg(this._iid, function(t) {
                                t(s, null)
                            }, r);
                        var l = [];
                        if (Array.isArray(n))
                            for (var u = 0; u < n.length; u++) {
                                var c = n[u];
                                l.push(new i(c,[]))
                            }
                        return this._updateMessageMetaArray(this.url, t, {
                            array: l.map(function(t) {
                                return t.encode()
                            }),
                            mode: "add",
                            upsert: !0
                        }, r)
                    }
                }, {
                    key: "deleteMessageMetaArrayKeys",
                    value: function(t, n, r) {
                        var i = Y.get(this._iid).MessageMetaArray
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: tp
                        }), new eI({
                            type: "array",
                            constraint: function(t) {
                                return t.every(function(t) {
                                    return "string" == typeof t && "" !== t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        if (s = o[0],
                        t = o[1],
                        n = o[2],
                        r = o[3],
                        s)
                            return eg(this._iid, function(t) {
                                t(s, null)
                            }, r);
                        var l = [];
                        if (Array.isArray(n))
                            for (var u = 0; u < n.length; u++) {
                                var c = n[u];
                                l.push(new i(c,[]))
                            }
                        return this._updateMessageMetaArray(this.url, t, {
                            array: l.map(function(t) {
                                return t.encode()
                            }),
                            mode: "remove",
                            upsert: !0
                        }, r)
                    }
                }, {
                    key: "addMessageMetaArrayValues",
                    value: function(t, n, r) {
                        var i = Y.get(this._iid).MessageMetaArray
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: tp
                        }), new eI({
                            type: "object",
                            constraint: function(t) {
                                return t && (Array.isArray(t) && t.length > 0 && t.every(function(t) {
                                    return t instanceof i
                                }) || Object.keys(t).length > 0 && Object.keys(t).every(function(n) {
                                    return Array.isArray(t[n]) && t[n].length > 0 && t[n].every(function(t) {
                                        return "string" == typeof t && t.length > 0
                                    })
                                }))
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        if (s = o[0],
                        t = o[1],
                        n = o[2],
                        r = o[3],
                        s)
                            return eg(this._iid, function(t) {
                                t(s, null)
                            }, r);
                        var l = Array.isArray(n) ? n.map(function(t) {
                            return t.encode()
                        }) : Object.keys(n).map(function(t) {
                            return {
                                key: t,
                                value: n[t]
                            }
                        });
                        return this._updateMessageMetaArray(this.url, t, {
                            array: l,
                            mode: "add",
                            upsert: !0
                        }, r)
                    }
                }, {
                    key: "removeMessageMetaArrayValues",
                    value: function(t, n, r) {
                        var i = Y.get(this._iid).MessageMetaArray
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: tp
                        }), new eI({
                            type: "object",
                            constraint: function(t) {
                                return t && (Array.isArray(t) && t.length > 0 && t.every(function(t) {
                                    return t instanceof i
                                }) || Object.keys(t).length > 0 && Object.keys(t).every(function(n) {
                                    return Array.isArray(t[n]) && t[n].length > 0 && t[n].every(function(t) {
                                        return "string" == typeof t && t.length > 0
                                    })
                                }))
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        if (s = o[0],
                        t = o[1],
                        n = o[2],
                        r = o[3],
                        s)
                            return eg(this._iid, function(t) {
                                t(s, null)
                            }, r);
                        var l = Array.isArray(n) ? n.map(function(t) {
                            return t.encode()
                        }) : Object.keys(n).map(function(t) {
                            return {
                                key: t,
                                value: n[t]
                            }
                        });
                        return this._updateMessageMetaArray(this.url, t, {
                            array: l,
                            mode: "remove",
                            upsert: !0
                        }, r)
                    }
                }, {
                    key: "report",
                    value: function(t, n, r) {
                        var i = this
                          , s = Y.get(this._iid).BaseChannel
                          , a = null
                          , o = eI.parse(arguments, [new eI({
                            type: s.ReportCategory
                        }), new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , l = k(o, 4);
                        return a = l[0],
                        t = l[1],
                        n = l[2],
                        r = l[3],
                        eg(this._iid, function(r) {
                            if (a)
                                r(a, null);
                            else {
                                var s = id.getInstance(i._iid);
                                x.get(i._iid).container.apiClient.report({
                                    channelUrl: i.url,
                                    isOpenChannel: i.isOpenChannel(),
                                    reportCategory: t,
                                    reportingUserId: s.currentUser ? s.currentUser.userId : null,
                                    reportDescription: n
                                }, function(t, n) {
                                    r(t, null)
                                })
                            }
                        }, r)
                    }
                }, {
                    key: "reportUser",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = Y.get(this._iid).BaseChannel
                          , o = null
                          , l = eI.parse(arguments, [new eI({
                            type: tg
                        }), new eI({
                            type: a.ReportCategory
                        }), new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , u = k(l, 5);
                        return o = u[0],
                        t = u[1],
                        n = u[2],
                        r = u[3],
                        i = u[4],
                        eg(this._iid, function(i) {
                            if (o)
                                i(o, null);
                            else {
                                var a = id.getInstance(s._iid);
                                x.get(s._iid).container.apiClient.reportUser({
                                    channelUrl: s.url,
                                    isOpenChannel: s.isOpenChannel(),
                                    reportCategory: n,
                                    offendingUserId: t.userId,
                                    reportingUserId: a.currentUser ? a.currentUser.userId : null,
                                    reportDescription: r
                                }, function(t, n) {
                                    i(t, null)
                                })
                            }
                        }, i)
                    }
                }, {
                    key: "reportMessage",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = Y.get(this._iid).BaseChannel
                          , o = null
                          , l = eI.parse(arguments, [new eI({
                            type: tp
                        }), new eI({
                            type: a.ReportCategory
                        }), new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , u = k(l, 5);
                        return o = u[0],
                        t = u[1],
                        n = u[2],
                        r = u[3],
                        i = u[4],
                        eg(this._iid, function(i) {
                            if (o)
                                i(o, null);
                            else {
                                var a = id.getInstance(s._iid);
                                x.get(s._iid).container.apiClient.reportMessage({
                                    messageId: t.messageId,
                                    channelUrl: s.url,
                                    isOpenChannel: s.isOpenChannel(),
                                    reportCategory: n,
                                    offendingUserId: t.sender.userId,
                                    reportingUserId: a.currentUser ? a.currentUser.userId : null,
                                    reportDescription: r
                                }, function(t, n) {
                                    i(t, null)
                                })
                            }
                        }, i)
                    }
                }], [{
                    key: "CHANNEL_TYPE_OPEN",
                    get: function() {
                        return "open"
                    }
                }, {
                    key: "CHANNEL_TYPE_GROUP",
                    get: function() {
                        return "group"
                    }
                }, {
                    key: "CHANNEL_TYPE_BASE",
                    get: function() {
                        return "base"
                    }
                }, {
                    key: "MessageTypeFilter",
                    get: function() {
                        return {
                            ALL: "",
                            USER: "MESG",
                            FILE: "FILE",
                            ADMIN: "ADMM"
                        }
                    }
                }, {
                    key: "ReportCategory",
                    get: function() {
                        return {
                            SPAM: "spam",
                            HARASSING: "harassing",
                            SUSPICIOUS: "suspicious",
                            INAPPROPRIATE: "inappropriate"
                        }
                    }
                }, {
                    key: "buildMessage",
                    value: function(t, n) {
                        var r = Y.get(this._iid)
                          , i = r.UserMessage
                          , s = r.FileMessage
                          , a = r.AdminMessage;
                        if (t)
                            switch (t.hasOwnProperty("channel_type") || (t.channel_type = n.channelType),
                            t.type) {
                            case "MESG":
                                return new i(t);
                            case "FILE":
                                var o = t.file;
                                return new s(v(v({}, t), {}, {
                                    url: String(o.url),
                                    name: String(o.name),
                                    type: String(o.type),
                                    size: parseInt(o.size),
                                    data: String(o.data)
                                }));
                            case "BRDM":
                            case "ADMM":
                                return new a(t)
                            }
                        return null
                    }
                }]),
                t
            }()
              , tL = function() {
                function t(n) {
                    b(this, t),
                    n && (this.category = n.hasOwnProperty("cat") ? parseInt(n.cat) : 0,
                    this.data = n.hasOwnProperty("data") ? n.data : null,
                    this.channelUrl = n.hasOwnProperty("channel_url") ? String(n.channel_url) : "",
                    this.channelType = n.hasOwnProperty("channel_type") ? String(n.channel_type) : tP.CHANNEL_TYPE_GROUP,
                    this.channel = n.hasOwnProperty("channel") ? n.channel : null)
                }
                return S(t, [{
                    key: "isGroupChannel",
                    value: function() {
                        return this.channelType === tP.CHANNEL_TYPE_GROUP
                    }
                }, {
                    key: "isOpenChannel",
                    value: function() {
                        return this.channelType === tP.CHANNEL_TYPE_OPEN
                    }
                }]),
                t
            }();
            tL.CATEGORY_NONE = 0,
            tL.CATEGORY_CHANNEL_ENTER = 10102,
            tL.CATEGORY_CHANNEL_EXIT = 10103,
            tL.CATEGORY_USER_CHANNEL_MUTE = 10201,
            tL.CATEGORY_USER_CHANNEL_UNMUTE = 10200,
            tL.CATEGORY_USER_CHANNEL_BAN = 10601,
            tL.CATEGORY_USER_CHANNEL_UNBAN = 10600,
            tL.CATEGORY_CHANNEL_FREEZE = 10701,
            tL.CATEGORY_CHANNEL_UNFREEZE = 10700,
            tL.CATEGORY_TYPING_START = 10900,
            tL.CATEGORY_TYPING_END = 10901,
            tL.CATEGORY_CHANNEL_JOIN = 1e4,
            tL.CATEGORY_CHANNEL_LEAVE = 10001,
            tL.CATEGORY_CHANNEL_OPERATOR_UPDATE = 10002,
            tL.CATEGORY_CHANNEL_INVITE = 10020,
            tL.CATEGORY_CHANNEL_DECLINE_INVITE = 10022,
            tL.CATEGORY_CHANNEL_PROP_CHANGED = 11e3,
            tL.CATEGORY_CHANNEL_DELETED = 12e3,
            tL.CATEGORY_CHANNEL_META_DATA_CHANGED = 11100,
            tL.CATEGORY_CHANNEL_META_COUNTERS_CHANGED = 11200,
            tL.CATEGORY_CHANNEL_HIDE = 13e3,
            tL.CATEGORY_CHANNEL_UNHIDE = 13001;
            var tD = S(function t(n) {
                b(this, t),
                n && (this.category = n.hasOwnProperty("cat") ? parseInt(n.cat) : 0)
            });
            tD.CATEGORY_USER_BLOCK = 20001,
            tD.CATEGORY_USER_UNBLOCK = 2e4,
            tD.CATEGORY_FRIEND_DISCOVERED = 20900;
            var tx = function() {
                function t(n) {
                    b(this, t),
                    this.sb = n,
                    this.cls = Y.get(this.sb._iid)
                }
                return S(t, [{
                    key: "onRawCommandReceived",
                    value: function(t) {
                        var n = this
                          , r = this.cls
                          , i = r.Command
                          , s = r.User
                          , a = r.Member
                          , o = r.RestrictedUser
                          , l = r.BaseChannel
                          , u = r.GroupChannel
                          , c = r.OpenChannel
                          , d = r.UserMessage
                          , h = r.FileMessage
                          , f = r.AdminMessage
                          , p = r.BaseMessageParams
                          , g = r.ReactionEvent
                          , m = r.ReadStatus
                          , y = r.ThreadInfoUpdateEvent
                          , _ = r.RestrictionInfo
                          , b = x.get(this.sb._iid)
                          , C = b.container
                          , S = C.pinger
                          , A = C.auth
                          , N = C.subscribedUnreadMessageCount
                          , T = C.sessionManager
                          , I = C.ackStateMap
                          , O = new i(t)
                          , w = O.getJsonElement();
                        if (w.hasOwnProperty("unread_cnt") && "object" === E(w.unread_cnt)) {
                            var k = !1
                              , U = w.unread_cnt.ts;
                            "number" == typeof U && U > N.ts && (N.all !== w.unread_cnt.all && (k = !0),
                            N.all = w.unread_cnt.all >= 0 ? w.unread_cnt.all : 0,
                            w.unread_cnt.custom_types && Object.keys(w.unread_cnt.custom_types).forEach(function(t) {
                                N.custom_types[t] !== w.unread_cnt.custom_types[t] && (k = !0),
                                N.custom_types[t] = w.unread_cnt.custom_types[t]
                            }),
                            k = k && N.ts > 0,
                            N.ts = U),
                            k && Object.keys(this.sb.userEventHandlers).forEach(function(t) {
                                n.sb.userEventHandlers[t].onTotalUnreadMessageCountUpdated(N.all, N.custom_types)
                            })
                        }
                        var R = O.requestId;
                        if (R) {
                            var M = I[R];
                            if (M) {
                                clearTimeout(M.timer);
                                var D = M.handler;
                                I.hasOwnProperty(R) && delete I[R],
                                D && ("EROR" === O.command ? D(new z(w.message,w.code), null) : D(null, O))
                            }
                        } else {
                            S && "LOGI" !== O.command && S.refreshTimer();
                            var F, H = e9.of(this.sb._iid), j = tl.of(this.sb._iid), G = eN.of(this.sb._iid);
                            switch (O.command) {
                            case "LOGI":
                                if (this.sb.loginTimer) {
                                    if (clearTimeout(this.sb.loginTimer),
                                    this.sb.loginTimer = null,
                                    this.sb.onLoginTimerCancel = null,
                                    w.hasOwnProperty("error"))
                                        this.sb.isSessionOpened = !1,
                                        this.sb.loginHandler(new z(w.message,w.code), null);
                                    else {
                                        if (this.sb.isSessionOpened = !0,
                                        w.hasOwnProperty("key") && (A.sessionKey = w.key),
                                        w.hasOwnProperty("ekey") && (A.eKey = w.ekey),
                                        w.hasOwnProperty("user_id") && (this.sb.currentUser = new s(w)),
                                        "number" == typeof w.ping_interval && w.ping_interval > 0 && b.set("pingInterval", 1e3 * w.ping_interval),
                                        "number" == typeof w.pong_timeout && w.pong_timeout > 0 && b.set("pongTimeout", 1e3 * w.pong_timeout),
                                        "number" == typeof w.login_ts) {
                                            var B = 1e3 * w.login_ts;
                                            b.set("connectedAt", B);
                                            var V = b.container
                                              , q = V.firstConnectedAt
                                              , K = V.localCacheEnabled
                                              , W = V.store;
                                            if (!q) {
                                                var Y = B;
                                                if (K) {
                                                    var Q = (F = this.sb.currentUser.userId,
                                                    "sendbird:".concat(F, "@firstConnectedAt"));
                                                    W.get(Q).then(function(t) {
                                                        t && (Y = t.ts)
                                                    }).catch(function(t) {
                                                        n.handleCacheError(t)
                                                    }).finally(function() {
                                                        b.set("firstConnectedAt", Y)
                                                    })
                                                } else
                                                    b.set("firstConnectedAt", Y)
                                            }
                                        }
                                        if (w.hasOwnProperty("reconnect") && "object" === E(w.reconnect)) {
                                            var J = w.reconnect
                                              , Z = b.container.wsAdapter;
                                            J.hasOwnProperty("interval") && "number" == typeof J.interval && (Z.reconnectParams.interval = J.interval),
                                            J.hasOwnProperty("max_interval") && "number" == typeof J.max_interval && (Z.reconnectParams.maxInterval = J.max_interval),
                                            J.hasOwnProperty("mul") && "number" == typeof J.mul && (Z.reconnectParams.multiplier = J.mul),
                                            J.hasOwnProperty("retry_cnt") && "number" == typeof J.retry_cnt && (Z.reconnectParams.retryCount = J.retry_cnt)
                                        }
                                        "number" == typeof w.max_unread_cnt_on_super_group ? b.set("maxUnreadCountOfSuperGroupChannel", w.max_unread_cnt_on_super_group) : b.set("maxUnreadCountOfSuperGroupChannel", L.DEFAULT_MAX_UNREAD_COUNT_OF_SUPER_GROUP_CHANNEL),
                                        w.profile_image_encryption && b.set("profileImageEncryption", !0),
                                        S && S.start(),
                                        w.hasOwnProperty("file_upload_size_limit") && w.hasOwnProperty("premium_feature_list") && w.hasOwnProperty("emoji_hash") && b.set("appInfo", new eP(w)),
                                        w.hasOwnProperty("concurrent_call_limit") && w.hasOwnProperty("back_off_delay") && (b.set("concurrentCallLimit", w.concurrent_call_limit),
                                        b.set("backOffDelay", w.back_off_delay)),
                                        this.sb.loginHandler(null, this.sb.currentUser)
                                    }
                                }
                                break;
                            case "EXPR":
                                var $ = new z("The session would be expired.",w.reason || z.SESSION_KEY_EXPIRED);
                                T.refreshSessionIfExpiredError($).then(function() {}).catch(function() {});
                                break;
                            case "MESG":
                            case "FILE":
                            case "BRDM":
                            case "ADMM":
                                var X = null;
                                if ("MESG" === O.command ? X = new d(w) : "FILE" === O.command ? X = new h(w) : "BRDM" !== O.command && "ADMM" !== O.command || (X = new f(w)),
                                X) {
                                    var ee = this.sb.currentUser ? this.sb.currentUser.userId : null
                                      , et = X.silent
                                      , en = !!w.force_update_last_message
                                      , er = X._sender && X._sender.userId === ee;
                                    if (X.isGroupChannel()) {
                                        var es = u.cachedChannels.hasOwnProperty(X.channelUrl);
                                        u.getChannel(X.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                            if (n.sb.getErrorFirstCallback()) {
                                                var s = [t, r];
                                                r = s[0],
                                                t = s[1]
                                            }
                                            if (!r) {
                                                if (!b.container.appInfo.isSupergroupMackDisabled || !t.isSuper || t.isBroadcast) {
                                                    var a = i.bMessageAck({
                                                        channelUrl: X.channelUrl,
                                                        messageId: X.messageId
                                                    });
                                                    n.sb.sendCommand(a)
                                                }
                                                if (t.isHidden = !1,
                                                t.hiddenState = u.HiddenState.UNHIDDEN,
                                                u.cachedChannels[t.url] = t,
                                                X._sender && t.memberMap.hasOwnProperty(X._sender.userId)) {
                                                    var o = t.memberMap[X._sender.userId];
                                                    o.nickname !== X._sender.nickname && (o.nickname = X._sender.nickname),
                                                    o.plainProfileUrl !== X._sender.plainProfileUrl && (o.plainProfileUrl = X._sender.plainProfileUrl),
                                                    ef.deepEqual(o.metaData, X._sender.metaData) || (o.metaData = X._sender.metaData),
                                                    o.isBlockedByMe !== X._sender.isBlockedByMe && (o.isBlockedByMe = X._sender.isBlockedByMe)
                                                }
                                                var l = n.sb.currentUser;
                                                l && er && (l.nickname !== X._sender.nickname && (l.nickname = X._sender.nickname),
                                                l.plainProfileUrl !== X._sender.plainProfileUrl && (l.plainProfileUrl = X._sender.plainProfileUrl),
                                                ef.deepEqual(l.metaData, X._sender.metaData) || (l.metaData = X._sender.metaData));
                                                var c = !1;
                                                if (X.mentionType === p.MentionType.CHANNEL)
                                                    er || (c = !0);
                                                else if (X.mentionType === p.MentionType.USERS) {
                                                    for (var d = 0; d < X.mentionedUsers.length; d++)
                                                        if (!er && X.mentionedUsers[d].userId === ee) {
                                                            c = !0;
                                                            break
                                                        }
                                                }
                                                et && !er || (t.isEphemeral || es) && ((!t.lastMessage || t.lastMessage.createdAt < X.createdAt) && (t.lastMessage = X),
                                                er || t._setGroupChannelUnreadCount(t.unreadMessageCount + 1, t.unreadMentionCount + (c ? 1 : 0))),
                                                en && (!t.lastMessage || t.lastMessage.createdAt < X.createdAt) && (t.lastMessage = X),
                                                et && !er || (H.upsert([t]).then(function() {
                                                    G.send({
                                                        source: ev.EVENT_CHANNEL_CHANGED,
                                                        payload: {
                                                            channel: t
                                                        }
                                                    })
                                                }).catch(function(t) {
                                                    n.handleCacheError(t)
                                                }),
                                                Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                    n.sb.channelHandlers[r].onChannelChanged(t)
                                                })),
                                                Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                    var i = n.sb.channelHandlers[r];
                                                    i.onMessageReceived(t, X),
                                                    c && i.onMentionReceived(t, X)
                                                }),
                                                j.upsert([X]).then(function() {
                                                    G.send({
                                                        source: ev.EVENT_MESSAGE_RECEIVED,
                                                        payload: {
                                                            channel: t,
                                                            message: X
                                                        }
                                                    })
                                                }).catch(function(t) {
                                                    n.handleCacheError(t)
                                                })
                                            }
                                        })
                                    } else
                                        X.isOpenChannel() && c.getChannel(X.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                            if (n.sb.getErrorFirstCallback()) {
                                                var i = [t, r];
                                                r = i[0],
                                                t = i[1]
                                            }
                                            if (!r) {
                                                var s = !1;
                                                if (X.mentionType === p.MentionType.CHANNEL)
                                                    s = !0;
                                                else if (X.mentionType === p.MentionType.USERS) {
                                                    for (var a = 0; a < X.mentionedUsers.length; a++)
                                                        if (X.mentionedUsers[a].userId === ee) {
                                                            s = !0;
                                                            break
                                                        }
                                                }
                                                Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                    var i = n.sb.channelHandlers[r];
                                                    c.enteredChannels[t.url] && i.onMessageReceived(t, X),
                                                    s && i.onMentionReceived(t, X)
                                                }),
                                                c.enteredChannels[t.url] && G.send({
                                                    source: ev.EVENT_MESSAGE_RECEIVED,
                                                    payload: {
                                                        channel: t,
                                                        message: X
                                                    }
                                                })
                                            }
                                        })
                                }
                                break;
                            case "MEDI":
                            case "FEDI":
                            case "AEDI":
                                var ea = null;
                                if ("MEDI" === O.command ? ea = new d(w) : "FEDI" === O.command ? ea = new h(w) : "AEDI" === O.command && (ea = new f(w)),
                                ea) {
                                    var eo = this.sb.currentUser ? this.sb.currentUser.userId : null
                                      , el = ea.silent
                                      , eu = ea.sender && ea.sender.userId === eo;
                                    if (ea.isGroupChannel()) {
                                        var ec = u.cachedChannels.hasOwnProperty(ea.channelUrl);
                                        u.getChannel(ea.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                            if (n.sb.getErrorFirstCallback()) {
                                                var i = [t, r];
                                                r = i[0],
                                                t = i[1]
                                            }
                                            if (!r) {
                                                var s = t.cachedReadReceiptStatus[eo]
                                                  , a = s && s >= ea.createAt
                                                  , o = n.sb.currentUser;
                                                o && eu && (o.nickname !== ea._sender.nickname && (o.nickname = ea._sender.nickname),
                                                o.plainProfileUrl !== ea._sender.plainProfileUrl && (o.plainProfileUrl = ea._sender.plainProfileUrl),
                                                ef.deepEqual(o.metaData, ea._sender.metaData) || (o.metaData = ea._sender.metaData));
                                                var l = !1
                                                  , u = !1;
                                                if (!eu && !a && w && w.hasOwnProperty("old_values")) {
                                                    var c = w.old_values.mention_type || ea.mentionType
                                                      , d = w.old_values.mentioned_user_ids || ea.mentionedUsers.map(function(t) {
                                                        return t.userId
                                                    });
                                                    if (c === p.MentionType.USERS && ea.mentionType === p.MentionType.USERS) {
                                                        for (var h = !1, f = !1, g = 0; g < d.length; g++)
                                                            if (d[g] === eo) {
                                                                h = !0;
                                                                break
                                                            }
                                                        for (var m = 0; m < ea.mentionedUsers.length; m++)
                                                            if (ea.mentionedUsers[m].userId === eo) {
                                                                f = !0;
                                                                break
                                                            }
                                                        !h && f && (u = !0,
                                                        !el && ec && (t._setGroupChannelUnreadCount(t.unreadMessageCount, t.unreadMentionCount + 1),
                                                        l = !0))
                                                    } else if (c === p.MentionType.USERS && ea.mentionType === p.MentionType.CHANNEL) {
                                                        for (var y = !1, _ = 0; _ < d.length; _++)
                                                            if (d[_] === eo) {
                                                                y = !0;
                                                                break
                                                            }
                                                        y || (u = !0,
                                                        !el && ec && (t._setGroupChannelUnreadCount(t.unreadMessageCount, t.unreadMentionCount + 1),
                                                        l = !0))
                                                    }
                                                }
                                                t.lastMessage ? t.lastMessage.createdAt < ea.createdAt ? (t.lastMessage = ea,
                                                l = !0) : t.lastMessage.createdAt === ea.createdAt && t.lastMessage.messageId === ea.messageId && (ec ? t.lastMessage.updatedAt < ea.updatedAt && (t.lastMessage = ea,
                                                l = !0) : l = !0) : (t.lastMessage = ea,
                                                l = !0),
                                                (!el || eu) && l && (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                    n.sb.channelHandlers[r].onChannelChanged(t)
                                                }),
                                                H.upsert([t]).then(function() {
                                                    G.send({
                                                        source: ev.EVENT_CHANNEL_CHANGED,
                                                        payload: {
                                                            channel: t
                                                        }
                                                    })
                                                }).catch(function(t) {
                                                    n.handleCacheError(t)
                                                })),
                                                Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                    var i = n.sb.channelHandlers[r];
                                                    i.onMessageUpdated(t, ea),
                                                    u && i.onMentionReceived(t, ea)
                                                }),
                                                j.upsert([ea]).then(function() {
                                                    G.send({
                                                        source: ev.EVENT_MESSAGE_UPDATED,
                                                        payload: {
                                                            channel: t,
                                                            message: ea
                                                        }
                                                    })
                                                }).catch(function(t) {
                                                    n.handleCacheError(t)
                                                })
                                            }
                                        })
                                    } else
                                        ea.isOpenChannel() && c.getChannel(ea.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                            if (n.sb.getErrorFirstCallback()) {
                                                var i = [t, r];
                                                r = i[0],
                                                t = i[1]
                                            }
                                            r || (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                n.sb.channelHandlers[r].onMessageUpdated(t, ea)
                                            }),
                                            G.send({
                                                source: ev.EVENT_MESSAGE_UPDATED,
                                                payload: {
                                                    channel: t,
                                                    message: ea
                                                }
                                            }))
                                        })
                                }
                                break;
                            case "DELM":
                                var ed = String(w.channel_type)
                                  , eh = String(w.channel_url)
                                  , ep = parseInt(w.msg_id);
                                switch (ed) {
                                case l.CHANNEL_TYPE_GROUP:
                                    u.getChannel(eh, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r ? ei.debug("Discard command:", "`".concat(O.command, "`")) : (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onMessageDeleted(t, ep)
                                        }),
                                        j.remove(["".concat(ep)]).then(function() {
                                            G.send({
                                                source: ev.EVENT_MESSAGE_DELETED,
                                                payload: {
                                                    channel: t,
                                                    messageId: ep
                                                }
                                            })
                                        }).catch(function(t) {
                                            n.handleCacheError(t)
                                        }))
                                    });
                                    break;
                                case l.CHANNEL_TYPE_OPEN:
                                    c.getChannel(eh, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r ? ei.debug("Discard command:", "`".concat(O.command, "`")) : (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onMessageDeleted(t, ep)
                                        }),
                                        G.send({
                                            source: ev.EVENT_MESSAGE_DELETED,
                                            payload: {
                                                channel: t,
                                                messageId: ep
                                            }
                                        }))
                                    })
                                }
                                break;
                            case "READ":
                                var eg = new m(w)
                                  , em = u.cachedChannels.hasOwnProperty(eg.channelUrl);
                                u.getChannel(eg.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                    if (n.sb.getErrorFirstCallback()) {
                                        var i = [t, r];
                                        r = i[0],
                                        t = i[1]
                                    }
                                    r || (em && t.updateReadReceipt(eg.reader.userId, eg.timestamp),
                                    n.sb.currentUser && (eg.reader.userId === n.sb.currentUser.userId ? em ? (t.unreadMessageCount > 0 || t.unreadMentionCount > 0) && (t._setGroupChannelUnreadCount(0, 0),
                                    Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                        n.sb.channelHandlers[r].onChannelChanged(t)
                                    }),
                                    H.upsert([t]).then(function() {
                                        G.send({
                                            source: ev.EVENT_CHANNEL_CHANGED,
                                            payload: {
                                                channel: t
                                            }
                                        })
                                    }).catch(function(t) {
                                        n.handleCacheError(t)
                                    })) : 0 !== t.unreadMessageCount && 0 !== t.unreadMentionCount || (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                        n.sb.channelHandlers[r].onChannelChanged(t)
                                    }),
                                    H.upsert([t]).then(function() {
                                        G.send({
                                            source: ev.EVENT_CHANNEL_CHANGED,
                                            payload: {
                                                channel: t
                                            }
                                        })
                                    }).catch(function(t) {
                                        n.handleCacheError(t)
                                    })) : Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                        n.sb.channelHandlers[r].onReadReceiptUpdated(t)
                                    }),
                                    G.send({
                                        source: ev.EVENT_READ_RECEIPT_UPDATED,
                                        payload: {
                                            channel: t,
                                            user: eg.reader
                                        }
                                    })))
                                });
                                break;
                            case "MRCT":
                                var ey = String(w.channel_type)
                                  , e_ = String(w.channel_url)
                                  , eE = g.createFromJson(w);
                                switch (ey) {
                                case l.CHANNEL_TYPE_GROUP:
                                    u.getChannel(e_, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r ? ei.debug("Discard command:", "`".concat(O.command, "`")) : (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onReactionUpdated(t, eE)
                                        }),
                                        j.get("".concat(eE.messageId)).then(function(r) {
                                            r && (r.applyReactionEvent(eE),
                                            j.upsert([r]).then(function() {
                                                G.send({
                                                    source: ev.EVENT_REACTION_UPDATED,
                                                    payload: {
                                                        channel: t,
                                                        reactionEvent: eE
                                                    }
                                                })
                                            }).catch(function(t) {
                                                n.handleCacheError(t)
                                            }))
                                        }).catch(function(t) {
                                            n.handleCacheError(t)
                                        }))
                                    });
                                    break;
                                case l.CHANNEL_TYPE_OPEN:
                                    c.getChannel(e_, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r ? ei.debug("Discard command:", "`".concat(O.command, "`")) : (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onReactionUpdated(t, eE)
                                        }),
                                        G.send({
                                            source: ev.EVENT_REACTION_UPDATED,
                                            payload: {
                                                channel: t,
                                                reactionEvent: eE
                                            }
                                        }))
                                    })
                                }
                                break;
                            case "DLVR":
                                var eb = String(w.channel_url)
                                  , eC = w.hasOwnProperty("updated") ? w.updated : null
                                  , eS = u.cachedChannels.hasOwnProperty(eb);
                                u.getChannel(eb, L.INTERNAL_CALL, function(t, r) {
                                    if (n.sb.getErrorFirstCallback()) {
                                        var i = [t, r];
                                        r = i[0],
                                        t = i[1]
                                    }
                                    if (!r) {
                                        var s = !1;
                                        Object.keys(eC).forEach(function(r) {
                                            n.sb.currentUser && r === n.sb.currentUser.userId && (s = !0),
                                            eS && t.updateDeliveryReceipt(r, parseInt(eC[r]))
                                        }),
                                        u.cachedChannels[t.url] = t,
                                        s && 1 === Object.keys(eC).length || (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onDeliveryReceiptUpdated(t)
                                        }),
                                        G.send({
                                            source: ev.EVENT_DELIVERY_RECEIPT_UPDATED,
                                            payload: {
                                                channel: t
                                            }
                                        }))
                                    }
                                });
                                break;
                            case "MTHD":
                                var eA = String(w.channel_url)
                                  , eT = String(w.channel_type)
                                  , eI = y.createFromJson(w);
                                switch (eT) {
                                case l.CHANNEL_TYPE_GROUP:
                                    u.getChannel(eA, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r || (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onThreadInfoUpdated(t, eI)
                                        }),
                                        j.get("".concat(eI.targetMessageId)).then(function(r) {
                                            r && (r.applyThreadInfoUpdateEvent(eI),
                                            j.upsert([r]).then(function() {
                                                G.send({
                                                    source: ev.EVENT_THREAD_INFO_UPDATED,
                                                    payload: {
                                                        channel: t,
                                                        threadInfoUpdateEvent: eI
                                                    }
                                                })
                                            }).catch(function(t) {
                                                n.handleCacheError(t)
                                            }))
                                        }).catch(function(t) {
                                            n.handleCacheError(t)
                                        }))
                                    });
                                    break;
                                case l.CHANNEL_TYPE_OPEN:
                                    c.getChannel(eA, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r || (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onThreadInfoUpdated(t, eI)
                                        }),
                                        G.send({
                                            source: ev.EVENT_THREAD_INFO_UPDATED,
                                            payload: {
                                                channel: t,
                                                threadInfoUpdateEvent: eI
                                            }
                                        }))
                                    })
                                }
                                break;
                            case "MCNT":
                                if (w.hasOwnProperty("group_channels") && Array.isArray(w.group_channels)) {
                                    var eO, ew = [], ek = P(w.group_channels);
                                    try {
                                        for (ek.s(); !(eO = ek.n()).done; ) {
                                            var eU = eO.value;
                                            if (eU) {
                                                var eR = u.cachedChannels[eU.channel_url];
                                                eR && eR.isBroadcast && eR.setLatestMemberCount(eU.member_count, eU.joined_member_count, eU.ts) && ew.push(eR)
                                            }
                                        }
                                    } catch (eM) {
                                        ek.e(eM)
                                    } finally {
                                        ek.f()
                                    }
                                    ew.length > 0 && (Object.keys(this.sb.channelHandlers).forEach(function(t) {
                                        n.sb.channelHandlers[t].onChannelMemberCountChanged(ew)
                                    }),
                                    H.upsert(ew).then(function() {
                                        var t, n = P(ew);
                                        try {
                                            for (n.s(); !(t = n.n()).done; ) {
                                                var r = t.value;
                                                G.send({
                                                    source: ev.EVENT_CHANNEL_CHANGED,
                                                    payload: {
                                                        channel: r
                                                    }
                                                })
                                            }
                                        } catch (i) {
                                            n.e(i)
                                        } finally {
                                            n.f()
                                        }
                                    }).catch(function(t) {
                                        n.handleCacheError(t)
                                    }))
                                }
                                if (w.hasOwnProperty("open_channels") && Array.isArray(w.open_channels)) {
                                    var eL, eD = [], ex = P(w.open_channels);
                                    try {
                                        for (ex.s(); !(eL = ex.n()).done; ) {
                                            var eF = eL.value;
                                            if (eF) {
                                                var eH = c.cachedChannels[eF.channel_url];
                                                eH && eH.setLatestParticipantCount(eF.participant_count, eF.ts) && eD.push(eH)
                                            }
                                        }
                                    } catch (ej) {
                                        ex.e(ej)
                                    } finally {
                                        ex.f()
                                    }
                                    if (eD.length > 0) {
                                        Object.keys(this.sb.channelHandlers).forEach(function(t) {
                                            n.sb.channelHandlers[t].onChannelParticipantCountChanged(eD)
                                        });
                                        var eG, eB = P(eD);
                                        try {
                                            for (eB.s(); !(eG = eB.n()).done; ) {
                                                var eV = eG.value;
                                                G.send({
                                                    source: ev.EVENT_CHANNEL_CHANGED,
                                                    payload: {
                                                        channel: eV
                                                    }
                                                })
                                            }
                                        } catch (eq) {
                                            eB.e(eq)
                                        } finally {
                                            eB.f()
                                        }
                                    }
                                }
                                break;
                            case "SYEV":
                                var ez = new tL(w)
                                  , eK = w.ts;
                                switch (ez.category) {
                                case tL.CATEGORY_CHANNEL_JOIN:
                                case tL.CATEGORY_CHANNEL_LEAVE:
                                    u.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        if (r)
                                            ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category);
                                        else {
                                            var o = ez.data.hasOwnProperty("member_count") ? ez.data.member_count : null
                                              , l = ez.data.hasOwnProperty("joined_member_count") ? ez.data.joined_member_count : null
                                              , c = !1;
                                            if (ez.category === tL.CATEGORY_CHANNEL_JOIN)
                                                (ez.data.hasOwnProperty("users") ? ez.data.users : [ez.data]).forEach(function(r) {
                                                    t.isSuper || t.isBroadcast ? c = t.setLatestMemberCount(o, l, w.ts) : (r.state = a.JOINED,
                                                    t.addMember(new a(r), eK),
                                                    t.updateJoinedMemberCount());
                                                    var i = new s(r);
                                                    n.sb.currentUser && i.userId === n.sb.currentUser.userId && (t.myMemberState = "joined",
                                                    u.cachedChannels[t.url] = t),
                                                    Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                        var s = n.sb.channelHandlers[r];
                                                        s.onUserJoined(t, i),
                                                        t.isBroadcast && c && s.onChannelMemberCountChanged([t])
                                                    }),
                                                    H.upsert([t]).then(function() {
                                                        G.send({
                                                            source: ev.EVENT_USER_JOINED,
                                                            payload: {
                                                                channel: t,
                                                                user: i
                                                            }
                                                        })
                                                    }).catch(function(t) {
                                                        n.handleCacheError(t)
                                                    })
                                                });
                                            else {
                                                var d = new s(ez.data);
                                                (n.sb.currentUser && d.userId === n.sb.currentUser.userId ? (t.isPublic || u.removeCachedChannel(ez.channelUrl),
                                                t.myMemberState = "none",
                                                t.invitedAt = 0,
                                                t.joinedAt = 0,
                                                t._setGroupChannelUnreadCount(0, 0)) : u.cachedChannels[t.url] = t,
                                                t.isSuper || t.isBroadcast) ? c = t.setLatestMemberCount(o, l, w.ts) : (b.container.appInfo.enabledChannelMemberShipHistory ? (t.memberMap[d.userId].state = u.MemberStateFilter.LEFT,
                                                t.memberCount = ez.data.member_count) : t.removeMember(d),
                                                t.updateJoinedMemberCount()),
                                                Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                    var i = n.sb.channelHandlers[r];
                                                    i.onUserLeft(t, d),
                                                    t.isBroadcast && c && i.onChannelMemberCountChanged([t])
                                                }),
                                                H.upsert([t]).then(function() {
                                                    G.send({
                                                        source: ev.EVENT_USER_LEFT,
                                                        payload: {
                                                            channel: t,
                                                            user: d
                                                        }
                                                    })
                                                }).catch(function(t) {
                                                    n.handleCacheError(t)
                                                })
                                            }
                                        }
                                    });
                                    break;
                                case tL.CATEGORY_CHANNEL_OPERATOR_UPDATE:
                                    ez.isGroupChannel() ? u.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        if (r)
                                            ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category);
                                        else {
                                            for (var a = ez.data.operators.map(function(t) {
                                                return new s(t)
                                            }), o = a.map(function(t) {
                                                return t.userId
                                            }), l = 0; l < t.members.length; l++)
                                                t.members[l].role = o.indexOf(t.members[l].userId) >= 0 ? u.Role.OPERATOR : u.Role.NONE;
                                            t.myRole = n.sb.currentUser && o.indexOf(n.sb.currentUser.userId) >= 0 ? u.Role.OPERATOR : u.Role.NONE,
                                            Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                n.sb.channelHandlers[r].onOperatorUpdated(t, a)
                                            }),
                                            H.upsert([t]).then(function() {
                                                G.send({
                                                    source: ev.EVENT_OPERATOR_UPDATED,
                                                    payload: {
                                                        channel: t,
                                                        operators: a
                                                    }
                                                })
                                            }).catch(function(t) {
                                                n.handleCacheError(t)
                                            })
                                        }
                                    }) : ez.isOpenChannel() && c.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r ? ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category) : (t.operators = ez.data.operators.map(function(t) {
                                            return new s(t)
                                        }),
                                        Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onOperatorUpdated(t, t.operators)
                                        }))
                                    });
                                    break;
                                case tL.CATEGORY_CHANNEL_INVITE:
                                    u.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        if (r)
                                            ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category);
                                        else {
                                            var o = null;
                                            ez.data && ez.data.inviter && Object.keys(ez.data.inviter).length > 0 && (o = new s(ez.data.inviter));
                                            for (var l = [], c = 0; c < ez.data.invitees.length; c++) {
                                                var d = new s(ez.data.invitees[c]);
                                                l.push(d),
                                                ez.data.invitees[c].state = a.INVITED;
                                                var h = new a(ez.data.invitees[c]);
                                                if (t.isSuper || t.isBroadcast) {
                                                    var f = ez.data.hasOwnProperty("member_count") ? ez.data.member_count : null
                                                      , p = ez.data.hasOwnProperty("joined_member_count") ? ez.data.joined_member_count : null;
                                                    t.setLatestMemberCount(f, p, w.ts)
                                                } else
                                                    t.addMember(h, eK);
                                                n.sb.currentUser && h.userId === n.sb.currentUser.userId && (t.isHidden = !1,
                                                "joined" !== t.myMemberState && (t.myMemberState = "invited"),
                                                t.invitedAt = w.ts,
                                                u.cachedChannels[t.url] = t)
                                            }
                                            Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                n.sb.channelHandlers[r].onUserReceivedInvitation(t, o, l)
                                            }),
                                            H.upsert([t]).then(function() {
                                                G.send({
                                                    source: ev.EVENT_USER_RECEIVED_INVITATION,
                                                    payload: {
                                                        channel: t,
                                                        inviter: o,
                                                        invitees: l
                                                    }
                                                })
                                            }).catch(function(t) {
                                                n.handleCacheError(t)
                                            })
                                        }
                                    });
                                    break;
                                case tL.CATEGORY_CHANNEL_DECLINE_INVITE:
                                    u.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        if (r)
                                            ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category);
                                        else {
                                            var a = null;
                                            ez.data && ez.data.inviter && Object.keys(ez.data.inviter).length > 0 && (a = new s(ez.data.inviter));
                                            var o = new s(ez.data.invitee);
                                            if (n.sb.currentUser && o.userId === n.sb.currentUser.userId && (t.invitedAt = 0,
                                            t.myMemberState = "none",
                                            t.isPublic || u.removeCachedChannel(ez.channelUrl)),
                                            t.isSuper || t.isBroadcast) {
                                                var l = ez.data.hasOwnProperty("member_count") ? ez.data.member_count : null
                                                  , c = ez.data.hasOwnProperty("joined_member_count") ? ez.data.joined_member_count : null;
                                                t.setLatestMemberCount(l, c, w.ts)
                                            } else
                                                t.removeMember(o);
                                            n.sb.currentUser && o.userId !== n.sb.currentUser.userId && (u.cachedChannels[t.url] = t),
                                            Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                n.sb.channelHandlers[r].onUserDeclinedInvitation(t, a, o)
                                            }),
                                            H.upsert([t]).then(function() {
                                                G.send({
                                                    source: ev.EVENT_USER_DECLINED_INVITATION,
                                                    payload: {
                                                        channel: t,
                                                        inviter: a,
                                                        invitee: o
                                                    }
                                                })
                                            }).catch(function(t) {
                                                n.handleCacheError(t)
                                            })
                                        }
                                    });
                                    break;
                                case tL.CATEGORY_TYPING_START:
                                case tL.CATEGORY_TYPING_END:
                                    u.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        if (r)
                                            ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category);
                                        else {
                                            var a = new s(ez.data);
                                            ez.category === tL.CATEGORY_TYPING_START ? t.updateTypingStatus(a, !0) : t.updateTypingStatus(a, !1),
                                            Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                n.sb.channelHandlers[r].onTypingStatusUpdated(t)
                                            }),
                                            H.upsert([t]).then(function() {
                                                G.send({
                                                    source: ev.EVENT_TYPING_STATUS_UPDATED,
                                                    payload: {
                                                        channel: t
                                                    }
                                                })
                                            }).catch(function(t) {
                                                n.handleCacheError(t)
                                            })
                                        }
                                    });
                                    break;
                                case tL.CATEGORY_CHANNEL_ENTER:
                                case tL.CATEGORY_CHANNEL_EXIT:
                                    c.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        if (r)
                                            ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category);
                                        else {
                                            var a = ez.data.hasOwnProperty("participant_count") ? ez.data.participant_count : null
                                              , o = t.setLatestParticipantCount(a, w.ts)
                                              , l = new s(ez.data);
                                            ez.category === tL.CATEGORY_CHANNEL_ENTER ? (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                var i = n.sb.channelHandlers[r];
                                                i.onUserEntered(t, l),
                                                o && i.onChannelParticipantCountChanged([t])
                                            }),
                                            G.send({
                                                source: ev.EVENT_CHANNEL_ENTER,
                                                payload: {
                                                    channel: t,
                                                    user: l
                                                }
                                            })) : (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                var i = n.sb.channelHandlers[r];
                                                i.onUserExited(t, l),
                                                o && i.onChannelParticipantCountChanged([t])
                                            }),
                                            G.send({
                                                source: ev.EVENT_CHANNEL_EXIT,
                                                payload: {
                                                    channel: t,
                                                    user: l
                                                }
                                            }))
                                        }
                                    });
                                    break;
                                case tL.CATEGORY_USER_CHANNEL_MUTE:
                                case tL.CATEGORY_USER_CHANNEL_UNMUTE:
                                    var eW = ez.category === tL.CATEGORY_USER_CHANNEL_MUTE
                                      , eY = v({}, ez.data);
                                    eW && (eY.restriction_type = o.RestrictionType.MUTED);
                                    var eQ = eW ? new o(eY) : new s(ez.data)
                                      , eJ = eW ? "muted" : "unmuted";
                                    ez.isOpenChannel() ? c.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r ? ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category) : eW ? (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onUserMuted(t, eQ)
                                        }),
                                        G.send({
                                            source: ev.EVENT_USER_MUTED,
                                            payload: {
                                                channel: t,
                                                user: eQ
                                            }
                                        })) : (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onUserUnmuted(t, eQ)
                                        }),
                                        G.send({
                                            source: ev.EVENT_USER_UNMUTED,
                                            payload: {
                                                channel: t,
                                                user: eQ
                                            }
                                        }))
                                    }) : u.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r ? ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category) : (n.sb.currentUser && eQ.userId === n.sb.currentUser.userId && (t.myMutedState = eJ),
                                        Array.isArray(t.members) && t.members.filter(function(t) {
                                            return t && t.userId === eQ.userId
                                        }).forEach(function(t) {
                                            t.isMuted = eW,
                                            t.restrictionInfo = new _(eY)
                                        }),
                                        eW ? (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onUserMuted(t, eQ)
                                        }),
                                        H.upsert([t]).then(function() {
                                            G.send({
                                                source: ev.EVENT_USER_MUTED,
                                                payload: {
                                                    channel: t,
                                                    user: eQ
                                                }
                                            })
                                        }).catch(function(t) {
                                            n.handleCacheError(t)
                                        })) : (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onUserUnmuted(t, eQ)
                                        }),
                                        H.upsert([t]).then(function() {
                                            G.send({
                                                source: ev.EVENT_USER_UNMUTED,
                                                payload: {
                                                    channel: t,
                                                    user: eQ
                                                }
                                            })
                                        }).catch(function(t) {
                                            n.handleCacheError(t)
                                        })))
                                    });
                                    break;
                                case tL.CATEGORY_USER_CHANNEL_BAN:
                                case tL.CATEGORY_USER_CHANNEL_UNBAN:
                                    var eZ = ez.category === tL.CATEGORY_USER_CHANNEL_BAN
                                      , e$ = v({}, ez.data);
                                    eZ && (e$.restriction_type = o.RestrictionType.BANNED);
                                    var eX = eZ ? new o(e$) : new s(ez.data);
                                    ez.isOpenChannel() ? c.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r ? ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category) : eZ ? (n.sb.currentUser && eX.userId === n.sb.currentUser.userId && (delete c.enteredChannels[ez.channelUrl],
                                        n.cls.FileMessageQueue.delete(ez.channelUrl)),
                                        Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onUserBanned(t, eX)
                                        }),
                                        G.send({
                                            source: ev.EVENT_USER_BANNED,
                                            payload: {
                                                channel: t,
                                                user: eX
                                            }
                                        })) : (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onUserUnbanned(t, eX)
                                        }),
                                        G.send({
                                            source: ev.EVENT_USER_UNBANNED,
                                            payload: {
                                                channel: t,
                                                user: eX
                                            }
                                        }))
                                    }) : u.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        if (r)
                                            ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category);
                                        else if (eZ) {
                                            if (n.sb.currentUser && eX.userId === n.sb.currentUser.userId && (t.isPublic || u.removeCachedChannel(ez.channelUrl),
                                            t.myMemberState = "none",
                                            t.invitedAt = 0,
                                            t.joinedAt = 0,
                                            t._setGroupChannelUnreadCount(0, 0)),
                                            t.isSuper || t.isBroadcast) {
                                                var s = ez.data.hasOwnProperty("member_count") ? ez.data.member_count : null
                                                  , a = ez.data.hasOwnProperty("joined_member_count") ? ez.data.joined_member_count : null;
                                                t.setLatestMemberCount(s, a, w.ts)
                                            } else
                                                t.removeMember(eX),
                                                t.updateJoinedMemberCount();
                                            Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                n.sb.channelHandlers[r].onUserBanned(t, eX)
                                            }),
                                            G.send({
                                                source: ev.EVENT_USER_BANNED,
                                                payload: {
                                                    channel: t,
                                                    user: eX
                                                }
                                            })
                                        } else
                                            Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                n.sb.channelHandlers[r].onUserUnbanned(t, eX)
                                            }),
                                            G.send({
                                                source: ev.EVENT_USER_UNBANNED,
                                                payload: {
                                                    channel: t,
                                                    user: eX
                                                }
                                            })
                                    });
                                    break;
                                case tL.CATEGORY_CHANNEL_FREEZE:
                                case tL.CATEGORY_CHANNEL_UNFREEZE:
                                    ez.isOpenChannel() ? c.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r ? ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category) : (t.isFrozen = ez.data.freeze,
                                        c.cachedChannels[t.url] = t,
                                        ez.category === tL.CATEGORY_CHANNEL_FREEZE ? (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onChannelFrozen(t)
                                        }),
                                        G.send({
                                            source: ev.EVENT_CHANNEL_FROZEN,
                                            payload: {
                                                channel: t
                                            }
                                        })) : (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onChannelUnfrozen(t)
                                        }),
                                        G.send({
                                            source: ev.EVENT_CHANNEL_UNFROZEN,
                                            payload: {
                                                channel: t
                                            }
                                        })))
                                    }) : u.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r ? ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category) : (t.isFrozen = ez.data.freeze,
                                        u.cachedChannels[t.url] = t,
                                        ez.category === tL.CATEGORY_CHANNEL_FREEZE ? (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onChannelFrozen(t)
                                        }),
                                        H.upsert([t]).then(function() {
                                            G.send({
                                                source: ev.EVENT_CHANNEL_FROZEN,
                                                payload: {
                                                    channel: t
                                                }
                                            })
                                        }).catch(function(t) {
                                            n.handleCacheError(t)
                                        })) : (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onChannelUnfrozen(t)
                                        }),
                                        H.upsert([t]).then(function() {
                                            G.send({
                                                source: ev.EVENT_CHANNEL_UNFROZEN,
                                                payload: {
                                                    channel: t
                                                }
                                            })
                                        }).catch(function(t) {
                                            n.handleCacheError(t)
                                        })))
                                    });
                                    break;
                                case tL.CATEGORY_CHANNEL_DELETED:
                                    ez.isGroupChannel() ? u.removeCachedChannel(ez.channelUrl) : c.removeCachedChannel(ez.channelUrl);
                                    var e0 = ez.channelUrl
                                      , e1 = ez.isGroupChannel() ? "group" : "open";
                                    Object.keys(this.sb.channelHandlers).forEach(function(t) {
                                        n.sb.channelHandlers[t].onChannelDeleted(e0, e1)
                                    }),
                                    H.remove([e0]).then(function() {
                                        G.send({
                                            source: ev.EVENT_CHANNEL_DELETED,
                                            payload: {
                                                channelUrl: e0,
                                                channelType: e1
                                            }
                                        })
                                    }).catch(function(t) {
                                        n.handleCacheError(t)
                                    });
                                    break;
                                case tL.CATEGORY_CHANNEL_PROP_CHANGED:
                                    ez.isOpenChannel() ? c.getChannelWithoutCache(ez.channelUrl, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r ? ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category) : (Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onChannelChanged(t)
                                        }),
                                        G.send({
                                            source: ev.EVENT_CHANNEL_CHANGED,
                                            payload: {
                                                channel: t
                                            }
                                        }))
                                    }) : u.getChannelWithoutCache(ez.channelUrl, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        if (r)
                                            ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category);
                                        else {
                                            var s = t.unreadMessageCount
                                              , a = t.unreadMentionCount;
                                            t.myCountPreference !== u.CountPreference.ALL && (t.myCountPreference === u.CountPreference.UNREAD_MESSAGE_COUNT_ONLY ? a = 0 : t.myCountPreference === u.CountPreference.UNREAD_MENTION_COUNT_ONLY ? s = 0 : (s = 0,
                                            a = 0)),
                                            t._setGroupChannelUnreadCount(s, a),
                                            Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                                n.sb.channelHandlers[r].onChannelChanged(t)
                                            }),
                                            H.upsert([t]).then(function() {
                                                G.send({
                                                    source: ev.EVENT_CHANNEL_CHANGED,
                                                    payload: {
                                                        channel: t
                                                    }
                                                })
                                            }).catch(function(t) {
                                                n.handleCacheError(t)
                                            })
                                        }
                                    });
                                    break;
                                case tL.CATEGORY_CHANNEL_META_DATA_CHANGED:
                                case tL.CATEGORY_CHANNEL_META_COUNTERS_CHANGED:
                                    var e2 = ez.data.hasOwnProperty("created")
                                      , e3 = ez.data.hasOwnProperty("updated")
                                      , e4 = ez.data.hasOwnProperty("deleted");
                                    (ez.isOpenChannel() ? c.getChannel(ez.channelUrl, L.INTERNAL_CALL) : u.getChannel(ez.channelUrl, L.INTERNAL_CALL)).then(function(t) {
                                        var r = ez.data.created
                                          , i = ez.data.updated
                                          , s = ez.data.deleted;
                                        Object.keys(n.sb.channelHandlers).forEach(function(a) {
                                            var o = n.sb.channelHandlers[a];
                                            if (ez.category === tL.CATEGORY_CHANNEL_META_DATA_CHANGED) {
                                                var l = w.ts;
                                                e2 && t._addOrUpdateCachedMetaData(r, l),
                                                e3 && t._addOrUpdateCachedMetaData(i, l),
                                                e4 && t._markAsDeletedCachedMetaData(s, l),
                                                e2 && o.onMetaDataCreated(t, r),
                                                e3 && o.onMetaDataUpdated(t, i),
                                                e4 && o.onMetaDataDeleted(t, s),
                                                (e2 || e3) && G.send({
                                                    source: ev.EVENT_CHANNEL_METADATA_UPDATED,
                                                    payload: {
                                                        channel: t,
                                                        metaData: v(v({}, r), i)
                                                    }
                                                }),
                                                e4 && G.send({
                                                    source: ev.EVENT_CHANNEL_METADATA_DELETED,
                                                    payload: {
                                                        channel: t,
                                                        metaData: v({}, s)
                                                    }
                                                })
                                            } else
                                                e2 && o.onMetaCountersCreated(t, r),
                                                e3 && o.onMetaCountersUpdated(t, i),
                                                e4 && o.onMetaCountersDeleted(t, s),
                                                (e2 || e3) && G.send({
                                                    source: ev.EVENT_CHANNEL_METACOUNTER_UPDATED,
                                                    payload: {
                                                        channel: t,
                                                        metaData: v(v({}, r), i)
                                                    }
                                                }),
                                                e4 && G.send({
                                                    source: ev.EVENT_CHANNEL_METACOUNTER_DELETED,
                                                    payload: {
                                                        channel: t,
                                                        metaData: v({}, s)
                                                    }
                                                })
                                        })
                                    }).catch(function(t) {
                                        return ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category)
                                    });
                                    break;
                                case tL.CATEGORY_CHANNEL_HIDE:
                                case tL.CATEGORY_CHANNEL_UNHIDE:
                                    u.getChannel(ez.channelUrl, L.INTERNAL_CALL, function(t, r) {
                                        if (n.sb.getErrorFirstCallback()) {
                                            var i = [t, r];
                                            r = i[0],
                                            t = i[1]
                                        }
                                        r ? ei.debug("Discard command:", "`".concat(O.command, "`"), ez.category) : ez.category === tL.CATEGORY_CHANNEL_HIDE ? (t.isHidden = !0,
                                        ez.data && (ez.data.hasOwnProperty("allow_auto_unhide") && (t.hiddenState = ez.data.allow_auto_unhide ? u.HiddenState.HIDDEN_ALLOW_AUTO_UNHIDE : u.HiddenState.HIDDEN_PREVENT_AUTO_UNHIDE),
                                        ez.data.hasOwnProperty("hide_previous_messages") && ez.data.hide_previous_messages && t._setGroupChannelUnreadCount(0, 0)),
                                        w.hasOwnProperty("ts_message_offset") && (t._messageOffsetTimestamp = w.ts_message_offset),
                                        u.cachedChannels[t.url] = t,
                                        Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onChannelHidden(t)
                                        }),
                                        H.upsert([t]).then(function() {
                                            G.send({
                                                source: ev.EVENT_CHANNEL_HIDDEN,
                                                payload: {
                                                    channel: t
                                                }
                                            })
                                        }).catch(function(t) {
                                            n.handleCacheError(t)
                                        })) : (t.isHidden = !1,
                                        t.hiddenState = u.HiddenState.UNHIDDEN,
                                        u.cachedChannels[t.url] = t,
                                        Object.keys(n.sb.channelHandlers).forEach(function(r) {
                                            n.sb.channelHandlers[r].onChannelChanged(t)
                                        }),
                                        H.upsert([t]).then(function() {
                                            G.send({
                                                source: ev.EVENT_CHANNEL_UNHIDDEN,
                                                payload: {
                                                    channel: t
                                                }
                                            })
                                        }).catch(function(t) {
                                            n.handleCacheError(t)
                                        }))
                                    })
                                }
                                break;
                            case "USEV":
                                var e5 = new tL(w);
                                switch (e5.category) {
                                case tD.CATEGORY_USER_BLOCK:
                                case tD.CATEGORY_USER_UNBLOCK:
                                    var e6 = e5.data.blocker.user_id
                                      , e8 = e5.data.blockee.user_id;
                                    Object.keys(u.cachedChannels).forEach(function(t) {
                                        var r = u.cachedChannels[t];
                                        try {
                                            n.sb.currentUser && (n.sb.currentUser.userId === e6 ? r.memberMap[e8].isBlockedByMe = e5.category === tD.CATEGORY_USER_BLOCK : n.sb.currentUser.userId === e8 && (r.memberMap[e6].isBlockingMe = e5.category === tD.CATEGORY_USER_BLOCK))
                                        } catch (i) {}
                                    });
                                    break;
                                case tD.CATEGORY_FRIEND_DISCOVERED:
                                    var e7 = e5.data.friend_discoveries.map(function(t) {
                                        return new s(t)
                                    });
                                    Object.keys(this.sb.userEventHandlers).forEach(function(t) {
                                        n.sb.userEventHandlers[t].onFriendsDiscovered(e7)
                                    })
                                }
                                break;
                            case "LEAV":
                            case "JOIN":
                            case "PONG":
                            case "MTIO":
                            case "TPST":
                            case "TPEN":
                                break;
                            default:
                                ei.debug("Discard command:", "`".concat(O.command, "`"))
                            }
                        }
                    }
                }, {
                    key: "handleCacheError",
                    value: function(t) {
                        ei.error(t)
                    }
                }]),
                t
            }()
              , tF = {}
              , tH = {}
              , tj = function() {
                function t(n) {
                    b(this, t),
                    this.channel = n,
                    this.uploadQueue = [],
                    this.messageQueue = [],
                    this.latestTimestampToSendMessage = 0,
                    Y.get(this._iid).FileMessageQueue.queueMap[n.url] = this
                }
                return S(t, [{
                    key: "_handleMessageQueueUpdated",
                    value: function(t) {
                        var n = this;
                        switch (ei.debug("`fileMessageQueue` message queue updated:", this.messageQueue),
                        t) {
                        case "add":
                            this.uploadQueue.length < 6 && this._moveFirstPendingMessageToUploadQueue();
                            break;
                        case "update":
                        case "remove":
                            if (this.messageQueue.length > 0) {
                                var r = Y.get(this._iid).FileMessageQueue
                                  , i = this.messageQueue[0];
                                if (i) {
                                    if (i.state === r.State.UPLOADED) {
                                        if (i.state = r.State.SENDING,
                                        navigator && "boolean" == typeof navigator.onLine) {
                                            if (navigator.onLine) {
                                                for (0 === this.latestTimestampToSendMessage && (this.latestTimestampToSendMessage = (new Date).getTime() - 200); (new Date).getTime() - this.latestTimestampToSendMessage < 200; )
                                                    ;
                                                this.latestTimestampToSendMessage = (new Date).getTime(),
                                                this._sendUploadedMessage(i, function(t, s) {
                                                    i.state = r.State.SENT,
                                                    i.error = t || null,
                                                    i.response = s || null,
                                                    n._handleMessageQueueUpdated("update")
                                                })
                                            } else
                                                i.state = r.State.SENT,
                                                i.error = new z("Connection is not valid. Please reconnect.",z.WEBSOCKET_CONNECTION_CLOSED),
                                                i.response = null,
                                                this._finalizeMessage()
                                        } else
                                            e3.ready().then(function(t) {
                                                if (t) {
                                                    for (0 === n.latestTimestampToSendMessage && (n.latestTimestampToSendMessage = (new Date).getTime() - 200); (new Date).getTime() - n.latestTimestampToSendMessage < 200; )
                                                        ;
                                                    n.latestTimestampToSendMessage = (new Date).getTime(),
                                                    n._sendUploadedMessage(i, function(t, s) {
                                                        i.state = r.State.SENT,
                                                        i.error = t || null,
                                                        i.response = s || null,
                                                        n._handleMessageQueueUpdated("update")
                                                    })
                                                } else
                                                    i.state = r.State.SENT,
                                                    i.error = new z("Connection is not valid. Please reconnect.",z.WEBSOCKET_CONNECTION_CLOSED),
                                                    i.response = null,
                                                    n._finalizeMessage()
                                            })
                                    } else
                                        i.state === r.State.SENT && this._finalizeMessage()
                                }
                            }
                        }
                    }
                }, {
                    key: "_handleUploadQueueUpdated",
                    value: function(t, n) {
                        var r = this;
                        switch (ei.debug("`fileMessageQueue` upload queue updated:", this.uploadQueue),
                        t) {
                        case "add":
                            var i = Y.get(this._iid).FileMessageQueue;
                            (n.state = i.State.UPLOADING,
                            n.error) ? (this.messageQueue.map(function(t) {
                                return t.requestId
                            }).indexOf(n.requestId) > -1 && (n.state = i.State.SENT,
                            this._handleMessageQueueUpdated("update")),
                            this._finalizeUpload(n.requestId)) : navigator && "boolean" == typeof navigator.onLine ? navigator.onLine ? this._uploadFile(n, function(t) {
                                n.error && n.error.code === z.REQUEST_FAILED && (n.error = new z("Failed to upload a file.",z.NETWORK_ERROR)),
                                n.error && n.state === i.State.SENT || (n.state = i.State.UPLOADED),
                                n.fileInfo = t,
                                r._handleMessageQueueUpdated("update"),
                                r._finalizeUpload(n.requestId)
                            }) : (n.state = i.State.SENT,
                            n.error = new z("Connection is not valid. Please reconnect.",z.WEBSOCKET_CONNECTION_CLOSED),
                            n.response = null,
                            this._handleMessageQueueUpdated("update"),
                            this._finalizeUpload(n.requestId)) : e3.ready().then(function(t) {
                                t ? r._uploadFile(n, function(t) {
                                    n.error && n.error.code === z.REQUEST_FAILED && (n.error = new z("Failed to upload a file.",z.NETWORK_ERROR)),
                                    n.error && n.state === i.State.SENT || (n.state = i.State.UPLOADED),
                                    n.fileInfo = t,
                                    r._handleMessageQueueUpdated("update"),
                                    r._finalizeUpload(n.requestId)
                                }) : (n.state = i.State.SENT,
                                n.error = new z("Connection is not valid. Please reconnect.",z.WEBSOCKET_CONNECTION_CLOSED),
                                n.response = null,
                                r._handleMessageQueueUpdated("update"),
                                r._finalizeUpload(n.requestId))
                            });
                            break;
                        case "update":
                            break;
                        case "remove":
                            this.uploadQueue.length < 6 && this._moveFirstPendingMessageToUploadQueue()
                        }
                    }
                }, {
                    key: "_moveFirstPendingMessageToUploadQueue",
                    value: function() {
                        var t = Y.get(this._iid).FileMessageQueue
                          , n = this.messageQueue.filter(function(n) {
                            return n.state === t.State.PENDING
                        });
                        if (n.length > 0) {
                            var r = n[0];
                            this.uploadQueue.push(r),
                            this._handleUploadQueueUpdated("add", r)
                        }
                    }
                }, {
                    key: "_sendUploadedMessage",
                    value: function(t, n) {
                        var r = Y.get(this._iid)
                          , i = r.Command
                          , s = r.FileMessage
                          , a = t.fileInfo
                          , o = i.bFile(v(v({}, a), {}, {
                            requestId: t.requestId,
                            channelUrl: this.channel.url,
                            url: a.file,
                            metaArrays: a.metaArrays
                        }))
                          , l = id.getInstance(this._iid)
                          , u = x.get(this._iid);
                        l.getConnectionState() === l.ConnectionState.OPEN || !l.currentUser || l.connecting || l.reconnecting ? l.sendCommand(o, function(t, r) {
                            if (l.getErrorFirstCallback()) {
                                var i = [t, r];
                                r = i[0],
                                t = i[1]
                            }
                            if (r) {
                                var u = new s(o.getJsonElement());
                                u.requestedMentionUserIds = a.mentionedUserIds,
                                n(r, u)
                            } else
                                n(null, new s(t.getJsonElement()))
                        }) : u.container.apiClient.sendFileMessage(v(v({
                            reqId: t.requestId,
                            channelUrl: this.channel.url,
                            isOpenChannel: this.channel.isOpenChannel()
                        }, a), {}, {
                            fileUrl: a.file,
                            fileName: a.name,
                            fileSize: a.size,
                            fileType: a.type,
                            metaArrays: a.metaArrays
                        }), function(t, r) {
                            var i = new s(t ? o.getJsonElement() : r);
                            t && (i.requestedMentionUserIds = a.mentionedUserIds),
                            n(t, i)
                        })
                    }
                }, {
                    key: "_uploadFile",
                    value: function(t, n) {
                        var r = t.fileInfo
                          , i = t.pendingMessage;
                        if ("string" != typeof r.file && r.file) {
                            var s = Y.get(this._iid).FileMessageQueue;
                            x.get(this._iid).container.apiClient.uploadFile(v(v({}, r), {}, {
                                fileType: r.type,
                                channelUrl: this.channel.url,
                                reqId: i ? i.reqId : null
                            }), function(i, a) {
                                if (i)
                                    t.state = s.State.SENT,
                                    t.error = i,
                                    t.response = null,
                                    n(r);
                                else {
                                    var o = "object" === E(a) ? a : JSON.parse(a);
                                    r.file = o.url,
                                    r.thumbnailSizes = o.hasOwnProperty("thumbnails") ? o.thumbnails : [],
                                    r.requireAuth = !!o.hasOwnProperty("require_auth") && o.require_auth,
                                    r.size = o.hasOwnProperty("file_size") ? o.file_size : r.size,
                                    n(r)
                                }
                            })
                        } else
                            r.thumbnailSizes = [],
                            r.requireAuth = !1,
                            n(r)
                    }
                }, {
                    key: "_finalizeUpload",
                    value: function(t) {
                        var n = this.uploadQueue.map(function(t) {
                            return t.requestId
                        }).indexOf(t);
                        if (n > -1) {
                            var r = this.uploadQueue.splice(n, 1);
                            r.length > 0 && this._handleUploadQueueUpdated("remove", r[0])
                        }
                    }
                }, {
                    key: "_finalizeMessage",
                    value: function() {
                        var t = this
                          , n = x.get(this._iid)
                          , r = n.container.localCacheEnabled
                          , i = n.container.isErrorFirstInCallback
                          , s = id.getInstance(this._iid)
                          , a = e9.of(this._iid)
                          , o = tl.of(this._iid)
                          , l = eN.of(this._iid)
                          , u = Y.get(this._iid).FileMessageQueue
                          , c = this.messageQueue[0]
                          , d = c.pendingMessage;
                        if (c && c.state === u.State.SENT) {
                            c.state = u.State.DONE;
                            var h = c.response;
                            h && d && (h._isAutoResendRegistered = d._isAutoResendRegistered);
                            var f = c.error
                              , p = f ? new z(f.message,f.code) : null
                              , g = c.fileInfo.callback;
                            if (h && !f) {
                                h.reqId = d.reqId,
                                h.requestState = s.MessageRequestState.SUCCEEDED,
                                h.sendingStatus = s.MessageSendingStatus.SUCCEEDED;
                                var m = s.currentUser;
                                if (m && h._sender && m.userId === h._sender.userId && (m.nickname !== h._sender.nickname && (m.nickname = h._sender.nickname),
                                m.plainProfileUrl !== h._sender.plainProfileUrl && (m.plainProfileUrl = h._sender.plainProfileUrl)),
                                this.channel.isGroupChannel())
                                    return this.channel.lastMessage = h,
                                    Object.keys(s.channelHandlers).forEach(function(n) {
                                        s.channelHandlers[n].onChannelChanged(t.channel)
                                    }),
                                    void a.upsert([this.channel]).then(function() {
                                        l.send({
                                            source: ev.EVENT_CHANNEL_CHANGED,
                                            payload: {
                                                channel: t.channel
                                            }
                                        })
                                    }).then(function() {
                                        return o.removeUnsentMessages({
                                            channelUrl: t.channel.url,
                                            sendingStatus: s.MessageSendingStatus.PENDING,
                                            reqIds: [h.reqId]
                                        })
                                    }).then(function() {
                                        return o.upsert([h], e6.SUCCEEDED)
                                    }).then(function() {
                                        tk._completeCurrentAndProcessNextAutoResend(s, h),
                                        l.send({
                                            source: ev.EVENT_MESSAGE_SENT,
                                            payload: {
                                                channel: t.channel,
                                                message: h
                                            }
                                        })
                                    }).catch(function(t) {
                                        return ei.error(t)
                                    }).finally(function() {
                                        g && (g.isPromisifyCallback || i ? g(null, h) : g(h, null)),
                                        t.messageQueue.shift(),
                                        t._handleMessageQueueUpdated("remove")
                                    })
                            }
                            if (f) {
                                if (h && h._isAutoResendRegistered && ef.isAutoResendableError(f.code))
                                    return this.messageQueue.shift(),
                                    void this._handleMessageQueueUpdated("remove");
                                if (c.pendingMessage && (h = c.pendingMessage._clone()),
                                h && f.code !== z.INVALID_PARAMETER) {
                                    if (h.requestState = s.MessageRequestState.FAILED,
                                    f.code === z.FILE_UPLOAD_CANCEL_FAILED || f.code === z.REQUEST_CANCELED) {
                                        if (h.sendingStatus = s.MessageSendingStatus.CANCELED,
                                        this.channel.isGroupChannel())
                                            return void o.removeUnsentMessages({
                                                channelUrl: this.channel.url,
                                                sendingStatus: s.MessageSendingStatus.PENDING,
                                                reqIds: [h.reqId]
                                            }).then(function() {
                                                l.send({
                                                    source: ev.LOCAL_MESSAGE_CANCELED,
                                                    payload: {
                                                        channel: t.channel,
                                                        message: h
                                                    }
                                                })
                                            }).catch(function(t) {
                                                return ei.error(t)
                                            }).finally(function() {
                                                g && (g.isPromisifyCallback || i ? g(p, h) : g(h, p)),
                                                t.messageQueue.shift(),
                                                t._handleMessageQueueUpdated("remove")
                                            })
                                    } else if (h.sendingStatus = s.MessageSendingStatus.FAILED,
                                    h.errorCode = f.code,
                                    h.requestedMentionUserIds = c.fileInfo.mentionedUserIds,
                                    f.code === z.FILE_SIZE_LIMIT_EXCEEDED && h._messageParams && h._messageParams.file && (h._messageParams.file = null),
                                    this.channel.isGroupChannel())
                                        return void (f.code === z.USER_NOT_MEMBER || f.code === z.CHANNEL_NOT_FOUND ? a.remove([this.channel.url]).then(function() {
                                            return o.removeUnsentMessages({
                                                channelUrl: t.channel.url,
                                                sendingStatus: s.MessageSendingStatus.PENDING,
                                                reqIds: [h.reqId]
                                            })
                                        }).then(function() {
                                            l.send({
                                                source: ev.LOCAL_MESSAGE_FAILED,
                                                payload: {
                                                    channel: t.channel,
                                                    message: h
                                                }
                                            })
                                        }).catch(function(t) {
                                            return ei.error(t)
                                        }).finally(function() {
                                            g && (g.isPromisifyCallback || i ? g(p, h) : g(h, p)),
                                            t.messageQueue.shift(),
                                            t._handleMessageQueueUpdated("remove")
                                        }) : (r && ef.isAutoResendableError(f.code) && (h.sendingStatus = s.MessageSendingStatus.PENDING,
                                        h.errorCode = 0,
                                        h._isAutoResendRegistered = !0),
                                        o.upsert([h], e6.UNSENT).then(function() {
                                            tk._completeCurrentAndProcessNextAutoResend(s, h),
                                            l.send({
                                                source: ev.LOCAL_MESSAGE_FAILED,
                                                payload: {
                                                    channel: t.channel,
                                                    message: h
                                                }
                                            })
                                        }).catch(function(t) {
                                            return ei.error(t)
                                        }).finally(function() {
                                            var n = h._clone();
                                            n.sendingStatus = s.MessageSendingStatus.FAILED,
                                            n.errorCode = f.code,
                                            n._isAutoResendRegistered = !1,
                                            g && (g.isPromisifyCallback || i ? g(p, n) : g(n, p)),
                                            t.messageQueue.shift(),
                                            t._handleMessageQueueUpdated("remove")
                                        })))
                                }
                            }
                            g && (g.isPromisifyCallback || i ? g(p, h) : g(h, p)),
                            this.messageQueue.shift(),
                            this._handleMessageQueueUpdated("remove")
                        }
                    }
                }, {
                    key: "addJob",
                    value: function(t) {
                        this.messageQueue.push(t),
                        this._handleMessageQueueUpdated("add")
                    }
                }, {
                    key: "cancelUploadItemByRequestId",
                    value: function(t, n) {
                        this._finalizeUpload(t);
                        var r = this.messageQueue.map(function(t) {
                            return t.requestId
                        }).indexOf(t);
                        if (r > -1) {
                            var i = Y.get(this._iid).FileMessageQueue
                              , s = this.messageQueue[r];
                            s && (s.state === i.State.UPLOADING || s.state === i.State.PENDING) && (s.state = i.State.SENT,
                            s.response = null,
                            s.error = new z("Uploading has been completed or canceled.",z.FILE_UPLOAD_CANCEL_FAILED),
                            this._handleMessageQueueUpdated("update"));
                            var a = i.uploadRequest[t];
                            if (a)
                                return "function" == typeof a.abort ? a.abort() : "function" == typeof a.cancel && a.cancel("Upload has been canceled."),
                                n(null, !0),
                                !0;
                            n(new z("Uploading has been completed or canceled.",z.FILE_UPLOAD_CANCEL_FAILED), !1)
                        } else
                            n(new z("Uploading has been completed or canceled.",z.FILE_UPLOAD_CANCEL_FAILED), !1);
                        return !1
                    }
                }], [{
                    key: "State",
                    get: function() {
                        return {
                            PENDING: "pending",
                            UPLOADING: "uploading",
                            UPLOADED: "uploaded",
                            SENDING: "sending",
                            SENT: "sent",
                            DONE: "done"
                        }
                    }
                }, {
                    key: "getByChannelUrl",
                    value: function(t) {
                        return Y.get(this._iid).FileMessageQueue.queueMap[t]
                    }
                }, {
                    key: "create",
                    value: function(t) {
                        var n = Y.get(this._iid).FileMessageQueue;
                        return n.queueMap.hasOwnProperty(t.url) || (n.queueMap[t.url] = new n(t)),
                        n.queueMap[t.url]
                    }
                }, {
                    key: "delete",
                    value: function(t) {
                        var n = Y.get(this._iid).FileMessageQueue;
                        n.queueMap.hasOwnProperty(t) && delete n.queueMap[t]
                    }
                }, {
                    key: "clear",
                    value: function() {
                        tH[this._iid] = {}
                    }
                }, {
                    key: "queueMap",
                    get: function() {
                        return tH[this._iid] || (tH[this._iid] = {}),
                        tH[this._iid]
                    }
                }, {
                    key: "uploadRequest",
                    get: function() {
                        return tF[this._iid] || (tF[this._iid] = {}),
                        tF[this._iid]
                    }
                }]),
                t
            }();
            tj.Job = S(function t(n) {
                var r = n.fileInfo
                  , i = n.requestId
                  , s = n.pendingMessage
                  , a = n.state
                  , o = n.error
                  , l = n.response;
                b(this, t),
                this.fileInfo = r,
                this.requestId = i,
                this.pendingMessage = s,
                this.state = a || tj.State.PENDING,
                this.error = void 0 === o ? null : o,
                this.response = void 0 === l ? null : l
            });
            var tG, tB, tV = {}, tq = function() {
                function t(t) {
                    var n = t.dbname
                      , r = t.itemSizeLimit
                      , i = t.cacheLimit
                      , s = t.blockHashBase
                      , a = t.blockHashMultiplier
                      , o = t.blockHashConstant
                      , l = t.transactionApplyDelay
                      , u = t.disableLogger;
                    return tV[n] || (this.itemSizeLimit = void 0 === r ? 1048576 : r,
                    this.cacheLimit = void 0 === i ? 256 : i,
                    this.blockHashBase = void 0 === s ? 2 : s,
                    this.blockHashMultiplier = void 0 === a ? 10 : a,
                    this.blockHashConstant = void 0 === o ? 11 : o,
                    this.transactionApplyDelay = void 0 === l ? 200 : l,
                    this.disableLogger = void 0 !== u && u,
                    tV[n] = this),
                    tV[n]
                }
                return t.get = function(t) {
                    return tV[t]
                }
                ,
                t
            }();
            (tz = tB || (tB = {}))[tz.UNKNOWN_ERROR = 6e7] = "UNKNOWN_ERROR",
            tz[tz.STORE_NOT_DEFINED = 61001e3] = "STORE_NOT_DEFINED",
            tz[tz.STORE_NOT_AVAILABLE = 61001001] = "STORE_NOT_AVAILABLE",
            tz[tz.STORE_NOT_AVAILABLE_IN_PRIVATE_BROWSING = 61001002] = "STORE_NOT_AVAILABLE_IN_PRIVATE_BROWSING",
            tz[tz.STORE_IS_FULL = 61001003] = "STORE_IS_FULL",
            tz[tz.STORE_INVALID_KEY_TYPE = 61002e3] = "STORE_INVALID_KEY_TYPE",
            tz[tz.STORE_BROKEN_INTEGRITY = 61002001] = "STORE_BROKEN_INTEGRITY",
            tz[tz.STORE_BROKEN_BLOB = 61002002] = "STORE_BROKEN_BLOB",
            tz[tz.STORE_ENCRYPTION_INVALID = 61002003] = "STORE_ENCRYPTION_INVALID",
            tz[tz.STORE_ITEM_SIZE_LIMIT_EXCEEDED = 61017e3] = "STORE_ITEM_SIZE_LIMIT_EXCEEDED",
            tz[tz.STORE_READ_FAILED = 61017001] = "STORE_READ_FAILED",
            tz[tz.STORE_WRITE_FAILED = 61017002] = "STORE_WRITE_FAILED",
            tz[tz.DATABASE_SCHEMA_NOT_ON_UPGRADE = 62002e3] = "DATABASE_SCHEMA_NOT_ON_UPGRADE",
            tz[tz.COLLECTION_NOT_READY = 63001e3] = "COLLECTION_NOT_READY",
            tz[tz.COLLECTION_KEY_NOT_MATCH = 63002e3] = "COLLECTION_KEY_NOT_MATCH",
            tz[tz.COLLECTION_QUERY_NOT_VALID = 63002001] = "COLLECTION_QUERY_NOT_VALID",
            tz[tz.COLLECTION_KEY_NOT_FOUND = 63004e3] = "COLLECTION_KEY_NOT_FOUND",
            tz[tz.COLLECTION_KEY_NOT_GIVEN = 63004001] = "COLLECTION_KEY_NOT_GIVEN",
            tz[tz.COLLECTION_INSERT_DUPLICATE = 63009e3] = "COLLECTION_INSERT_DUPLICATE",
            tz[tz.COLLECTION_WRITE_FAILED = 63017e3] = "COLLECTION_WRITE_FAILED",
            tz[tz.COLLECTION_ITEM_SIZE_LIMIT_EXCEEDED = 63017001] = "COLLECTION_ITEM_SIZE_LIMIT_EXCEEDED",
            tz[tz.INDEX_TABLE_IS_REQUIRED = 65001e3] = "INDEX_TABLE_IS_REQUIRED",
            tz[tz.INDEX_TYPE_NOT_MATCH = 65002e3] = "INDEX_TYPE_NOT_MATCH",
            tz[tz.COMPARE_TYPE_NOT_MATCH = 69002001] = "COMPARE_TYPE_NOT_MATCH",
            tz[tz.CIRCULAR_REFERENCE_FOUND = 69002002] = "CIRCULAR_REFERENCE_FOUND";
            var tz, tK, tW = function(t) {
                function n(r) {
                    var i = r.code
                      , s = void 0 === i ? tB.UNKNOWN_ERROR : i
                      , a = r.message
                      , o = t.call(this, void 0 === a ? "Unknown error occurred." : a) || this;
                    return o.code = s,
                    Object.setPrototypeOf(o, n.prototype),
                    o
                }
                return H(n, t),
                Object.defineProperty(n, "storeNotDefined", {
                    get: function() {
                        return new n({
                            code: tB.STORE_NOT_DEFINED,
                            message: "Store is not defined. Specify the store on NestDB()"
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "storeNotAvailable", {
                    get: function() {
                        return new n({
                            code: tB.STORE_NOT_AVAILABLE,
                            message: "Store is not available. Check your environment settings."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "storeNotAvailableInPrivateBrowsing", {
                    get: function() {
                        return new n({
                            code: tB.STORE_NOT_AVAILABLE_IN_PRIVATE_BROWSING,
                            message: "Store is not available because it is in private browsing."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "storeIsFull", {
                    get: function() {
                        return new n({
                            code: tB.STORE_IS_FULL,
                            message: "Store is full."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "storeKeyTypeIsInvalid", {
                    get: function() {
                        return new n({
                            code: tB.STORE_INVALID_KEY_TYPE,
                            message: "Store key should be string type."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "storeBrokenIntegrity", {
                    get: function() {
                        return new n({
                            code: tB.STORE_BROKEN_INTEGRITY,
                            message: "Data should be in a store but it does not. Integrity is broken."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "storeBrokenBlob", {
                    get: function() {
                        return new n({
                            code: tB.STORE_BROKEN_BLOB,
                            message: "Data should be in a store but it does not. Blob data is broken."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "storeEncryptionInvalid", {
                    get: function() {
                        return new n({
                            code: tB.STORE_ENCRYPTION_INVALID,
                            message: "Encryption algorithm has changed. All the store should reset."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "storeItemSizeExceeded", {
                    get: function() {
                        return new n({
                            code: tB.STORE_ITEM_SIZE_LIMIT_EXCEEDED,
                            message: "The size of the item exceeds the limit that the store allows."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "storeReadFailed", {
                    get: function() {
                        return new n({
                            code: tB.STORE_READ_FAILED,
                            message: "Failed to read from store."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "storeWriteFailed", {
                    get: function() {
                        return new n({
                            code: tB.STORE_WRITE_FAILED,
                            message: "Failed to write to store."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "databaseSchemaNotOnUpgrade", {
                    get: function() {
                        return new n({
                            code: tB.DATABASE_SCHEMA_NOT_ON_UPGRADE,
                            message: "Committing schema is not allowed when upgrade is not running."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "collectionNotReady", {
                    get: function() {
                        return new n({
                            code: tB.COLLECTION_NOT_READY,
                            message: "Collection is not ready due to an error during initialization."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "collectionKeyNotMatch", {
                    get: function() {
                        return new n({
                            code: tB.COLLECTION_KEY_NOT_MATCH,
                            message: "keyName of collection could not change."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "collectionQueryNotValid", {
                    get: function() {
                        return new n({
                            code: tB.COLLECTION_QUERY_NOT_VALID,
                            message: "Query parameter is not a valid format."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "collectionInsertDuplicate", {
                    get: function() {
                        return new n({
                            code: tB.COLLECTION_INSERT_DUPLICATE,
                            message: "The key already exists."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "collectionKeyNotFound", {
                    get: function() {
                        return new n({
                            code: tB.COLLECTION_KEY_NOT_FOUND,
                            message: "The key is not found."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "collectionKeyNotGiven", {
                    get: function() {
                        return new n({
                            code: tB.COLLECTION_KEY_NOT_GIVEN,
                            message: "The item should contain [keyName] property."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "collectionWriteFailed", {
                    get: function() {
                        return new n({
                            code: tB.COLLECTION_WRITE_FAILED,
                            message: "Failed to write an item."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "collectionItemSizeExceeded", {
                    get: function() {
                        return new n({
                            code: tB.COLLECTION_ITEM_SIZE_LIMIT_EXCEEDED,
                            message: "The size of the item exceeds the limit that a collection allows."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "indexTableIsRequired", {
                    get: function() {
                        return new n({
                            code: tB.INDEX_TABLE_IS_REQUIRED,
                            message: "Index table is required."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "indexTypesNotMatch", {
                    get: function() {
                        return new n({
                            code: tB.INDEX_TYPE_NOT_MATCH,
                            message: "Indexed column should have primitive type."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "compareTypesNotMatch", {
                    get: function() {
                        return new n({
                            code: tB.COMPARE_TYPE_NOT_MATCH,
                            message: "Values to compare have different types."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "circularReferenceFound", {
                    get: function() {
                        return new n({
                            code: tB.CIRCULAR_REFERENCE_FOUND,
                            message: "Cannot handle circular referenced object."
                        })
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                n
            }(Error);
            (tY = tK || (tK = {})).INIT = "init",
            tY.READY = "ready",
            tY.CLOSED = "closed";
            var tY, tQ, tJ = function(t, n) {
                if (void 0 === n && (n = new WeakMap),
                "object" == typeof t && null !== t) {
                    if (n.has(t))
                        throw tW.circularReferenceFound;
                    n.set(t, !0);
                    var r = null;
                    if (Array.isArray(t))
                        r = t.map(function(t) {
                            return tJ(t, n)
                        });
                    else if (t instanceof RegExp)
                        r = t;
                    else if (t instanceof Date)
                        r = t;
                    else
                        for (var i in r = {},
                        t)
                            r[i] = tJ(t[i], n);
                    return n.delete(t),
                    r
                }
                return t
            }, tZ = function(t, n) {
                if (null == n)
                    return 1;
                if (null == t)
                    return -1;
                if (typeof t != typeof n)
                    throw tW.compareTypesNotMatch;
                var r = 0;
                switch (typeof t) {
                case "boolean":
                case "number":
                    r = t - n;
                    break;
                case "string":
                    r = t.localeCompare(n)
                }
                return r
            }, t$ = function(t, n) {
                for (var r = 0, i = 0; i < t.length; i++)
                    r = t.charCodeAt(i) + (r << 6) + (r << 16) - r;
                return (r >>> 0) % n
            }, tX = function(t) {
                return new Promise(function(n) {
                    setTimeout(function() {
                        return n()
                    }, t)
                }
                )
            }, t0 = function(t, n) {
                if (!n)
                    return !1;
                if ("function" != typeof t) {
                    for (var r in t)
                        if (["/and", "&&"].includes(r)) {
                            if (t[r].some(function(t) {
                                return !t0(t, n)
                            }))
                                return !1
                        } else if (["/or", "||"].includes(r)) {
                            if (t[r].every(function(t) {
                                return !t0(t, n)
                            }))
                                return !1
                        } else if ("/where" === r) {
                            if (!(0,
                            t[r])(n))
                                return !1
                        } else {
                            var i = r;
                            if ("object" == typeof t[i]) {
                                var s = t[i];
                                for (var a in s)
                                    switch (a) {
                                    case "/eq":
                                    case "=":
                                        if ((o = n[i]) !== (l = s[a]))
                                            return !1;
                                        break;
                                    case "/neq":
                                    case "!=":
                                        if ((o = n[i]) === (l = s[a]))
                                            return !1;
                                        break;
                                    case "/gt":
                                    case ">":
                                        var o = n[i]
                                          , l = s[a];
                                        if (!(tZ(o, l) > 0))
                                            return !1;
                                        break;
                                    case "/gte":
                                    case ">=":
                                        if (!(tZ(o = n[i], l = s[a]) >= 0))
                                            return !1;
                                        break;
                                    case "/lt":
                                    case "<":
                                        if (!(0 > tZ(o = n[i], l = s[a])))
                                            return !1;
                                        break;
                                    case "/lte":
                                    case "<=":
                                        if (!(0 >= tZ(o = n[i], l = s[a])))
                                            return !1;
                                        break;
                                    case "/in":
                                        if (o = n[i],
                                        !(l = s[a]).includes(o))
                                            return !1;
                                        break;
                                    case "/nin":
                                        if (o = n[i],
                                        (l = s[a]).includes(o))
                                            return !1;
                                        break;
                                    case "/contain":
                                        if (o = n[i],
                                        l = s[a],
                                        !o.includes(l))
                                            return !1;
                                        break;
                                    case "/regex":
                                        if (o = n[i],
                                        !(l = s[a]).test(o))
                                            return !1;
                                        break;
                                    case "/where":
                                        if (o = n[i],
                                        !(0,
                                        s[a])(o))
                                            return !1
                                    }
                            } else if ("function" == typeof t[i]) {
                                if (!t[i](n[i]))
                                    return !1
                            } else if (t[i] !== n[i])
                                return !1
                        }
                    return !0
                }
                return t(n)
            }, t1 = function() {}, t2 = function() {
                return Promise.resolve()
            }, t3 = function(t) {
                return t
            }, t4 = function(t, n) {
                n(null)
            };
            (t5 = tQ || (tQ = {}))[t5.FORWARD = 0] = "FORWARD",
            t5[t5.BACKWARD = 1] = "BACKWARD";
            var t5, t6, t8, t7, t9 = function() {
                function t(t) {
                    var n = t.initialPrevValue
                      , r = t.initialNextValue
                      , i = t.iterator
                      , s = t.map
                      , a = t.backward
                      , o = t.forward
                      , l = t.complete;
                    this._prevValue = void 0 === n ? null : n,
                    this._nextValue = void 0 === r ? null : r,
                    this._error = null,
                    this._map = void 0 === s ? t3 : s,
                    this._backward = void 0 === a ? t2 : a,
                    this._forward = void 0 === o ? t2 : o,
                    this._iterator = i,
                    this._complete = void 0 === l ? t1 : l
                }
                return Object.defineProperty(t.prototype, "prevValue", {
                    get: function() {
                        return this._map(this._prevValue)
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "nextValue", {
                    get: function() {
                        return this._map(this._nextValue)
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "error", {
                    get: function() {
                        return this._error
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "hasPrevious", {
                    get: function() {
                        return !!this._prevValue
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "hasNext", {
                    get: function() {
                        return !!this._nextValue
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.prev = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n, r;
                        return B(this, function(i) {
                            switch (i.label) {
                            case 0:
                                if (!this.hasPrevious)
                                    return [3, 6];
                                i.label = 1;
                            case 1:
                                return i.trys.push([1, 3, , 4]),
                                t = this._prevValue,
                                n = this,
                                [4, this._backward()];
                            case 2:
                                return n._prevValue = i.sent() || null,
                                this._nextValue = t,
                                [3, 4];
                            case 3:
                                return r = i.sent(),
                                this._error = r,
                                [3, 4];
                            case 4:
                                return [4, this._iterator(this)];
                            case 5:
                                return [2, i.sent()];
                            case 6:
                                this._complete(),
                                i.label = 7;
                            case 7:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.next = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n, r;
                        return B(this, function(i) {
                            switch (i.label) {
                            case 0:
                                if (!this.hasNext)
                                    return [3, 6];
                                i.label = 1;
                            case 1:
                                return i.trys.push([1, 3, , 4]),
                                t = this._nextValue,
                                n = this,
                                [4, this._forward()];
                            case 2:
                                return n._nextValue = i.sent() || null,
                                this._prevValue = t,
                                [3, 4];
                            case 3:
                                return r = i.sent(),
                                this._error = r,
                                [3, 4];
                            case 4:
                                return [4, this._iterator(this)];
                            case 5:
                                return [2, i.sent()];
                            case 6:
                                this._complete(),
                                i.label = 7;
                            case 7:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.stop = function() {
                    this._prevValue = null,
                    this._nextValue = null,
                    this._complete()
                }
                ,
                t
            }(), ne = function() {
                function t(t) {
                    var n = t.condition
                      , r = t.backward
                      , i = t.blockManager
                      , s = t.indexer;
                    this.condition = void 0 === n ? {} : n,
                    this.backward = void 0 !== r && r,
                    this._blockManager = i,
                    this._indexer = s
                }
                return t.prototype.findOptimizedStartPosition = function() {
                    var t = this
                      , n = ["=", "/eq", ">", ">=", "/gt", "/gte"]
                      , r = ["=", "/eq", "<", "<=", "/lt", "/lte"];
                    if (this.backward) {
                        var i = this._indexer.origin.length - 1;
                        if ("function" != typeof this.condition)
                            for (var s in this._indexer.fields) {
                                var a = this._indexer.fields[s]
                                  , o = 1;
                                if ("-" === a[0] && (a = a.slice(1),
                                o = -1),
                                this.condition[a]) {
                                    if ("object" == typeof this.condition[a]) {
                                        var l = o > 0 ? r : n;
                                        for (var u in this.condition[a])
                                            if (l.includes(u)) {
                                                for (var c = i; c >= 0; c--)
                                                    if (o * tZ(this._indexer.origin[c].columnValues[s], this.condition[a][u]) <= 0) {
                                                        i = c;
                                                        break
                                                    }
                                            }
                                    } else
                                        for (c = i; c >= 0; c--)
                                            if (o * tZ(this._indexer.origin[c].columnValues[s], this.condition[a]) <= 0) {
                                                i = c;
                                                break
                                            }
                                }
                            }
                        return Math.min(i + 1, this._indexer.origin.length - 1)
                    }
                    var d = 0;
                    if ("function" != typeof this.condition)
                        for (var h = function(i) {
                            var s = f._indexer.fields[i]
                              , a = 1;
                            if ("-" === s[0] && (s = s.slice(1),
                            a = -1),
                            f.condition[s]) {
                                if ("object" == typeof f.condition[s])
                                    Object.keys(f.condition[s]).forEach(function(o) {
                                        if ((a > 0 ? n : r).includes(o)) {
                                            for (var l = d; l < t._indexer.origin.length; l++)
                                                if (a * tZ(t._indexer.origin[l].columnValues[i], t.condition[s][o]) >= 0) {
                                                    d = l;
                                                    break
                                                }
                                        }
                                    });
                                else
                                    for (var o = d; o < f._indexer.origin.length; o++)
                                        if (a * tZ(f._indexer.origin[o].columnValues[i], f.condition[s]) >= 0) {
                                            d = o;
                                            break
                                        }
                            }
                        }, f = this, s = 0; s < this._indexer.fields.length; s++)
                            h(s);
                    return Math.max(d - 1, 0)
                }
                ,
                t.prototype.each = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a, o, l, u = this;
                        return B(this, function(c) {
                            switch (c.label) {
                            case 0:
                                if (n = this.findOptimizedStartPosition(),
                                r = 0,
                                this.backward && this._indexer.origin[n] && (r = this._indexer.origin[n].keys.length - 1),
                                i = function() {
                                    if (u._indexer.origin[n]) {
                                        if (!u._indexer.origin[n].keys[++r]) {
                                            if (!u._indexer.origin[++n])
                                                return !1;
                                            r = 0
                                        }
                                        return !0
                                    }
                                    return !1
                                }
                                ,
                                s = function() {
                                    if (u._indexer.origin[n]) {
                                        if (!u._indexer.origin[n].keys[--r]) {
                                            if (!u._indexer.origin[--n])
                                                return !1;
                                            r = u._indexer.origin[n].keys.length - 1
                                        }
                                        return !0
                                    }
                                    return !1
                                }
                                ,
                                a = null,
                                !this._indexer.origin[n])
                                    return [3, 4];
                                o = this.backward ? s : i,
                                c.label = 1;
                            case 1:
                                return [4, this._blockManager.getFromBlock(this._indexer.origin[n].keys[r])];
                            case 2:
                                if (l = c.sent(),
                                t0(this.condition, l))
                                    return a = l,
                                    [3, 4];
                                c.label = 3;
                            case 3:
                                if (o())
                                    return [3, 1];
                                c.label = 4;
                            case 4:
                                return [4, new Promise(function(o) {
                                    var l = new t9({
                                        initialNextValue: tJ(a),
                                        iterator: t,
                                        forward: function() {
                                            return G(u, void 0, void 0, function() {
                                                var t, a;
                                                return B(this, function(o) {
                                                    switch (o.label) {
                                                    case 0:
                                                        t = this.backward ? s : i,
                                                        o.label = 1;
                                                    case 1:
                                                        return t() ? [4, this._blockManager.getFromBlock(this._indexer.origin[n].keys[r])] : [3, 3];
                                                    case 2:
                                                        return a = o.sent(),
                                                        t0(this.condition, a) ? [2, tJ(a)] : [3, 1];
                                                    case 3:
                                                        return [2, null]
                                                    }
                                                })
                                            })
                                        },
                                        backward: function() {
                                            return G(u, void 0, void 0, function() {
                                                var t, a;
                                                return B(this, function(o) {
                                                    switch (o.label) {
                                                    case 0:
                                                        t = this.backward ? i : s,
                                                        o.label = 1;
                                                    case 1:
                                                        return t() ? [4, this._blockManager.getFromBlock(this._indexer.origin[n].keys[r])] : [3, 3];
                                                    case 2:
                                                        return a = o.sent(),
                                                        t0(this.condition, a) ? [2, tJ(a)] : [3, 1];
                                                    case 3:
                                                        return [2, null]
                                                    }
                                                })
                                            })
                                        },
                                        complete: o
                                    });
                                    t(l)
                                }
                                )];
                            case 5:
                                return [2, c.sent()]
                            }
                        })
                    })
                }
                ,
                t
            }(), nt = function() {
                function t(t) {
                    var n = t.condition
                      , r = t.backward
                      , i = t.mutex
                      , s = t.blockManager
                      , a = t.indexer;
                    this._mutex = i,
                    this._iterator = new ne({
                        condition: void 0 === n ? {} : n,
                        backward: void 0 !== r && r,
                        blockManager: s,
                        indexer: a
                    })
                }
                return t.prototype.fetch = function(t) {
                    return void 0 === t && (t = {}),
                    G(this, void 0, void 0, function() {
                        var n, r, i, s, a = this;
                        return B(this, function(o) {
                            switch (o.label) {
                            case 0:
                                if (n = Math.max(t.offset || 0, 0),
                                0 === (r = "number" == typeof t.limit ? t.limit : Number.MAX_SAFE_INTEGER))
                                    return [2, []];
                                if (r < 0)
                                    throw tW.collectionQueryNotValid;
                                o.label = 1;
                            case 1:
                                return o.trys.push([1, 4, , 5]),
                                i = [],
                                [4, this._mutex.lock()];
                            case 2:
                                return o.sent(),
                                [4, this._iterator.each(function(t) {
                                    return G(a, void 0, void 0, function() {
                                        return B(this, function(s) {
                                            return t.error ? t.stop() : t.hasNext ? 0 === n ? (i.push(t.nextValue),
                                            0 < r && r <= i.length ? t.stop() : t.next()) : (n--,
                                            t.next()) : t.stop(),
                                            [2]
                                        })
                                    })
                                })];
                            case 3:
                                return o.sent(),
                                this._mutex.unlock(),
                                [2, i];
                            case 4:
                                throw s = o.sent(),
                                this._mutex.unlock(),
                                s;
                            case 5:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.count = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n, r = this;
                        return B(this, function(i) {
                            switch (i.label) {
                            case 0:
                                return i.trys.push([0, 3, , 4]),
                                t = 0,
                                [4, this._mutex.lock()];
                            case 1:
                                return i.sent(),
                                [4, this._iterator.each(function(n) {
                                    return G(r, void 0, void 0, function() {
                                        return B(this, function(r) {
                                            return n.error ? n.stop() : n.hasNext ? (t++,
                                            n.next()) : n.stop(),
                                            [2]
                                        })
                                    })
                                })];
                            case 2:
                                return i.sent(),
                                this._mutex.unlock(),
                                [2, t];
                            case 3:
                                throw n = i.sent(),
                                this._mutex.unlock(),
                                n;
                            case 4:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t
            }(), nn = function(t) {
                return "".concat("nest", "@").concat(t)
            }, nr = function(t, n) {
                return "".concat(nn(t), "/").concat(n)
            }, ni = function(t, n) {
                return "".concat(nr(t, n), ".metadata")
            }, ns = function(t, n) {
                return "".concat(nr(t, n), "/block.")
            }, na = function(t, n) {
                return "".concat(nr(t, n), "/blob.")
            }, no = function(t, n, r, i) {
                return void 0 === i && (i = 0),
                "".concat(na(t, n)).concat(r, ".").concat(i)
            }, nl = function() {
                function t(t) {
                    var n = t.dbname
                      , r = t.collectionName
                      , i = t.store;
                    this.dbname = n,
                    this.collectionName = r,
                    this._store = i
                }
                return t.prototype._makeShards = function(t, n) {
                    var r = Math.max(this._store.itemSizeLimit - 1024, 0);
                    if (r > 0) {
                        for (var i = Math.ceil(t.data.length / r), s = "".concat(i, ".").concat(t.type, ".").concat(n), a = [], o = 0; o < t.data.length; o += r) {
                            var l = t.data.slice(o, o + r);
                            a.push(l)
                        }
                        return {
                            blobId: s,
                            shards: a
                        }
                    }
                    return {
                        blobId: null,
                        shards: null
                    }
                }
                ,
                t.prototype._encode = function(t) {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return [4, new Promise(function(n) {
                                    var r = new FileReader;
                                    r.onload = function() {
                                        n({
                                            data: r.result,
                                            type: t.type
                                        })
                                    }
                                    ,
                                    r.readAsDataURL(t)
                                }
                                )];
                            case 1:
                                return [2, n.sent()]
                            }
                        })
                    })
                }
                ,
                t.prototype._decode = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a, o;
                        return B(this, function(l) {
                            switch (l.label) {
                            case 0:
                                return "undefined" == typeof fetch ? [3, 3] : [4, fetch(t.data)];
                            case 1:
                                return [4, l.sent().blob()];
                            case 2:
                                return [2, l.sent()];
                            case 3:
                                for (n = [],
                                r = atob(t.data.split(",")[1]),
                                i = 0; i < r.length; i += 512) {
                                    for (a = Array((s = r.slice(i, i + 512)).length),
                                    o = 0; o < s.length; o++)
                                        a[o] = s.charCodeAt(o);
                                    n.push(new Uint8Array(a))
                                }
                                return [2, new Blob(n,{
                                    type: t.type
                                })]
                            }
                        })
                    })
                }
                ,
                t.prototype.get = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a, o, l, u;
                        return B(this, function(c) {
                            switch (c.label) {
                            case 0:
                                if (n = [],
                                i = (r = t.split("."))[0],
                                s = r[1],
                                !((a = parseInt(i)) > 0))
                                    return [3, 6];
                                o = 0,
                                c.label = 1;
                            case 1:
                                return o < a ? (l = no(this.dbname, this.collectionName, t, o),
                                [4, this._store.get(l)]) : [3, 4];
                            case 2:
                                if (!(u = c.sent()) || !u.d)
                                    throw tW.storeBrokenBlob;
                                n.push(u.d),
                                c.label = 3;
                            case 3:
                                return o++,
                                [3, 1];
                            case 4:
                                return [4, this._decode({
                                    data: n.join(""),
                                    type: s
                                })];
                            case 5:
                                return [2, c.sent()];
                            case 6:
                                return [2, null]
                            }
                        })
                    })
                }
                ,
                t.prototype.save = function(t, n) {
                    return void 0 === n && (n = "".concat(Date.now())),
                    G(this, void 0, void 0, function() {
                        var r, i, s, a, o, l, u;
                        return B(this, function(c) {
                            switch (c.label) {
                            case 0:
                                return r = [],
                                [4, this._encode(t)];
                            case 1:
                                if (i = c.sent(),
                                a = (s = this._makeShards(i, n)).blobId,
                                o = s.shards,
                                !a)
                                    return [3, 3];
                                for (l = 0; l < o.length; l++)
                                    u = no(this.dbname, this.collectionName, a, l),
                                    r.push({
                                        key: u,
                                        value: {
                                            d: o[l]
                                        },
                                        generation: 1
                                    });
                                return [4, this._store.setMany(r)];
                            case 2:
                                if (c.sent().some(function(t) {
                                    return t instanceof Error
                                }))
                                    throw tW.storeWriteFailed;
                                return [2, a];
                            case 3:
                                return [2, null]
                            }
                        })
                    })
                }
                ,
                t.prototype.remove = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                if (n = [],
                                !((r = parseInt(t.split(".")[0])) > 0))
                                    return [3, 2];
                                for (i = 0; i < r; i++)
                                    n.push(no(this.dbname, this.collectionName, t, i));
                                return [4, this._store.removeMany(n)];
                            case 1:
                                s.sent(),
                                s.label = 2;
                            case 2:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.clear = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n, r, i, s;
                        return B(this, function(a) {
                            switch (a.label) {
                            case 0:
                                return t = na(this.dbname, this.collectionName),
                                n = [],
                                [4, this._store.getAllKeys()];
                            case 1:
                                for (r = a.sent(),
                                i = 0; i < r.length; i++)
                                    (s = r[i]).startsWith(t) && n.push(s);
                                return [4, this._store.removeMany(r)];
                            case 2:
                                return a.sent(),
                                [2]
                            }
                        })
                    })
                }
                ,
                t
            }();
            (n_ = t6 || (t6 = {}))[n_.COMMIT = 0] = "COMMIT",
            n_[n_.WRITE = 1] = "WRITE",
            n_[n_.ERROR = 2] = "ERROR",
            (nv = t8 || (t8 = {})).PENDING = "pending",
            nv.PERSISTENT = "persistent",
            nv.VOLATILE = "volatile",
            (nE = t7 || (t7 = {}))[nE.NO_CACHE = 0] = "NO_CACHE",
            nE[nE.DEFAULT = 1] = "DEFAULT",
            nE[nE.PERSISTENT = 2] = "PERSISTENT";
            var nu = [t8.PENDING, t8.VOLATILE]
              , nc = {}
              , nd = function() {
                function t(t) {
                    var n = t.dbname
                      , r = t.limit;
                    return nc[n] || (this.dbname = n,
                    this._items = [],
                    this._limit = void 0 === r ? 256 : r,
                    nc[n] = this),
                    nc[n]
                }
                return t.get = function(t) {
                    return nc[t]
                }
                ,
                Object.defineProperty(t.prototype, "items", {
                    get: function() {
                        return this._items
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.find = function(t, n, r) {
                    return void 0 === r && (r = t7.DEFAULT),
                    G(this, void 0, void 0, function() {
                        var i, s;
                        return B(this, function(a) {
                            switch (a.label) {
                            case 0:
                                return (i = this.get(n)) ? [3, 2] : [4, t.get(n)];
                            case 1:
                                return (s = a.sent()) && (i = {
                                    key: n,
                                    value: s,
                                    generation: 1,
                                    state: r === t7.PERSISTENT ? t8.PERSISTENT : t8.VOLATILE
                                },
                                this.put(i)),
                                [3, 3];
                            case 2:
                                r === t7.PERSISTENT && (i.state = t8.PERSISTENT),
                                a.label = 3;
                            case 3:
                                return [2, i]
                            }
                        })
                    })
                }
                ,
                t.prototype.get = function(t, n) {
                    void 0 === n && (n = t7.DEFAULT);
                    var r = this._items.map(function(t) {
                        return t.key
                    }).indexOf(t);
                    if (r > -1) {
                        var i = this._items[r];
                        return n === t7.PERSISTENT && (i.state = t8.PERSISTENT),
                        n !== t7.NO_CACHE && this.put(i),
                        i
                    }
                    return null
                }
                ,
                t.prototype.put = function(t) {
                    if (this._limit > 0) {
                        var n = this._items.map(function(t) {
                            return t.key
                        }).indexOf(t.key);
                        if (n > -1)
                            nu.includes(this._items[n].state) && nu.includes(t.state) ? (this._items.splice(n, 1),
                            this._items.push(t)) : (this._items[n].state = t.state,
                            this._items[n].generation = t.generation,
                            this._items[n].value = t.value);
                        else {
                            this._items.push(t);
                            var r = this._items.filter(function(t) {
                                return t.state === t8.VOLATILE
                            }).length - this._limit;
                            if (r > 0) {
                                for (var i = [], s = 0, a = this._items; s < a.length; s++) {
                                    var o = a[s];
                                    o.state === t8.VOLATILE && r > 0 ? r-- : i.push(o)
                                }
                                this._items = i
                            }
                        }
                    }
                }
                ,
                t.prototype.remove = function(t) {
                    var n = this._items.map(function(t) {
                        return t.key
                    }).indexOf(t);
                    n > -1 && this._items.splice(n, 1)
                }
                ,
                t.prototype.clearByCondition = function(t) {
                    this._items = this._items.filter(function(n) {
                        return !t(n)
                    })
                }
                ,
                t.prototype.clear = function(t) {
                    void 0 === t && (t = !1),
                    this._items = t ? [] : this._items.filter(function(t) {
                        return t.state !== t8.VOLATILE
                    })
                }
                ,
                t
            }()
              , nh = function() {
                function t(t) {
                    var n = t.dbname
                      , r = t.collectionName
                      , i = t.store;
                    this._metadata = null,
                    this._requests = [],
                    this._onCommit = new Map,
                    this._onWrite = new Map,
                    this._onError = new Map,
                    this.dbname = n,
                    this.collectionName = r,
                    this.metadataKey = "".concat(nr(n, r), "/trans.metadata"),
                    this.recordsetKey = "".concat(nr(n, r), "/trans.recordset"),
                    this._store = i
                }
                return Object.defineProperty(t.prototype, "generation", {
                    get: function() {
                        return this._metadata ? this._metadata.generation : 0
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "requestCount", {
                    get: function() {
                        return this._requests.length
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype._getReducedRecordset = function(t) {
                    return void 0 === t && (t = []),
                    G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return [4, this._store.get(this.recordsetKey)];
                            case 1:
                                return (n = r.sent() || []).push.apply(n, t),
                                [2, this._reduceRecordSet(n)]
                            }
                        })
                    })
                }
                ,
                t.prototype._reduceRecordSet = function(t) {
                    for (var n = [], r = {}, i = t.length - 1; i >= 0; i--) {
                        for (var s = t[i], a = [], o = s.requests.length - 1; o >= 0; o--) {
                            var l = s.requests[o]
                              , u = l.data;
                            r[u.key] || (a.unshift(l),
                            r[u.key] = !0)
                        }
                        a.length > 0 && (s.requests = a,
                        n.unshift(s))
                    }
                    return n
                }
                ,
                t.prototype._applyRecord = function(t, n) {
                    return G(this, void 0, void 0, function() {
                        var r, i, s, a, o, l, u, c;
                        return B(this, function(d) {
                            switch (d.label) {
                            case 0:
                                r = nd.get(this.dbname),
                                i = n.generation,
                                s = n.requests,
                                a = null,
                                d.label = 1;
                            case 1:
                                return d.trys.push([1, 3, , 4]),
                                [4, this._store.setMany(s.map(function(t) {
                                    return j(j({}, t.data), {
                                        generation: i
                                    })
                                }))];
                            case 2:
                                for (o = d.sent(),
                                l = 0; l < s.length; l++)
                                    o[l]instanceof Error && (a || (a = o[l]),
                                    u = s[l].data,
                                    r.put(j(j({}, u), {
                                        generation: i,
                                        state: t8.PERSISTENT
                                    })));
                                return [3, 4];
                            case 3:
                                return a = d.sent(),
                                [3, 4];
                            case 4:
                                return a ? [3, 6] : (c = t.filter(function(t) {
                                    return t.generation !== i
                                }),
                                [4, this._store.set({
                                    key: this.recordsetKey,
                                    value: c,
                                    generation: i
                                })]);
                            case 5:
                                return d.sent(),
                                this._onWrite.forEach(function(t) {
                                    t(s.map(function(t) {
                                        return t.data
                                    }))
                                }),
                                [3, 7];
                            case 6:
                                this._onError.forEach(function(t) {
                                    return t(a)
                                }),
                                d.label = 7;
                            case 7:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.init = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n, r, i, s;
                        return B(this, function(a) {
                            switch (a.label) {
                            case 0:
                                return t = this,
                                [4, this._store.get(this.metadataKey)];
                            case 1:
                                return t._metadata = a.sent() || {
                                    generation: 1
                                },
                                [4, this._getReducedRecordset()];
                            case 2:
                                n = a.sent(),
                                r = 0,
                                i = n,
                                a.label = 3;
                            case 3:
                                return r < i.length ? (s = i[r],
                                [4, this._applyRecord(n, s)]) : [3, 6];
                            case 4:
                                a.sent(),
                                a.label = 5;
                            case 5:
                                return r++,
                                [3, 3];
                            case 6:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.on = function(t, n, r) {
                    switch (t) {
                    case t6.COMMIT:
                        this._onCommit.set(n, r);
                        break;
                    case t6.WRITE:
                        this._onWrite.set(n, r);
                        break;
                    case t6.ERROR:
                        this._onError.set(n, r)
                    }
                }
                ,
                t.prototype.requestWrite = function(t, n) {
                    void 0 === n && (n = null),
                    this._requests.push({
                        data: t,
                        options: n
                    }),
                    nd.get(this.dbname).put(j({
                        state: t8.PENDING,
                        generation: this.generation
                    }, t))
                }
                ,
                t.prototype.requestMultipleWrite = function(t, n) {
                    void 0 === n && (n = null);
                    for (var r = nd.get(this.dbname), i = 0; i < t.length; i++) {
                        var s = t[i];
                        this._requests.push({
                            data: s,
                            options: n
                        }),
                        r.put(j({
                            state: t8.PENDING,
                            generation: this.generation
                        }, s))
                    }
                }
                ,
                t.prototype.clear = function() {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(t) {
                            return nd.get(this.dbname).clearByCondition(function(t) {
                                return t.state === t8.PENDING
                            }),
                            this._requests = [],
                            [2]
                        })
                    })
                }
                ,
                t.prototype.commit = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n, r, i, s, a, o, l, u, c, d, h = this;
                        return B(this, function(f) {
                            switch (f.label) {
                            case 0:
                                if (!((t = this._requests).length > 0))
                                    return [3, 4];
                                for (n = [],
                                r = {},
                                l = t.length - 1; l >= 0; l--)
                                    r[(c = (i = t[l]).data).key] || (r[c.key] = !0,
                                    n.unshift(i));
                                return s = {
                                    generation: this.generation,
                                    requests: n
                                },
                                [4, this._getReducedRecordset([s])];
                            case 1:
                                return a = f.sent(),
                                [4, this._store.set({
                                    key: this.recordsetKey,
                                    value: a,
                                    generation: this.generation
                                })];
                            case 2:
                                return f.sent(),
                                this._metadata.generation++,
                                [4, this._store.set({
                                    key: this.metadataKey,
                                    value: this._metadata,
                                    generation: 1
                                })];
                            case 3:
                                for (f.sent(),
                                o = nd.get(this.dbname),
                                l = 0; l < n.length; l++)
                                    c = (u = n[l]).data,
                                    d = u.options,
                                    o.put(j(j({}, c), {
                                        generation: s.generation,
                                        state: d && d.persistent ? t8.PERSISTENT : t8.VOLATILE
                                    }));
                                this._requests = [],
                                this._onCommit.forEach(function(n) {
                                    n(t.map(function(t) {
                                        return t.data
                                    }))
                                }),
                                setTimeout(function() {
                                    try {
                                        h._applyRecord(a, s)
                                    } catch (t) {
                                        h._onError.forEach(function(n) {
                                            return n(t)
                                        })
                                    }
                                }, tq.get(this.dbname).transactionApplyDelay),
                                f.label = 4;
                            case 4:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t
            }()
              , nf = function() {
                function t(t) {
                    var n = t.blockId
                      , r = t.keyName
                      , i = t.items
                      , s = t.limit;
                    this.blockId = n,
                    this.keyName = r,
                    this.limit = s,
                    this._items = V([], void 0 === i ? [] : i, !0)
                }
                return t.createFromCacheItem = function(n) {
                    return n ? new t(n.value) : null
                }
                ,
                Object.defineProperty(t.prototype, "isEmpty", {
                    get: function() {
                        return 0 === this._items.length
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "items", {
                    get: function() {
                        return this._items
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.serialize = function() {
                    return {
                        blockId: this.blockId,
                        keyName: this.keyName,
                        limit: this.limit,
                        items: this._items
                    }
                }
                ,
                t.prototype.getItemByKey = function(t) {
                    var n = this;
                    return this._items.find(function(r) {
                        return t === r[n.keyName]
                    })
                }
                ,
                t.prototype.has = function(t) {
                    var n = this;
                    return this._items.map(function(t) {
                        return t[n.keyName]
                    }).includes(t)
                }
                ,
                t.prototype.add = function(t) {
                    var n = this
                      , r = this._items.map(function(t) {
                        return t[n.keyName]
                    }).indexOf(t[this.keyName]);
                    return r < 0 ? this._items.length < this.limit && (this._items.push(t),
                    !0) : (this._items[r] = t,
                    !0)
                }
                ,
                t.prototype.remove = function(t) {
                    for (var n in this._items)
                        if (this._items[n][this.keyName] === t)
                            return this._items.splice(parseInt(n), 1),
                            !0;
                    return !1
                }
                ,
                t.prototype.clear = function() {
                    this._items = []
                }
                ,
                t
            }()
              , np = function() {
                function t(t) {
                    var n = t.dbname
                      , r = t.collectionName
                      , i = t.metadata
                      , s = t.hashFunction
                      , a = t.transaction
                      , o = t.store;
                    this.dbname = n,
                    this.collectionName = r,
                    this.hashFunction = void 0 === s ? t$ : s,
                    this.metadata = i,
                    this._transaction = a,
                    this._store = o
                }
                return Object.defineProperty(t.prototype, "keyName", {
                    get: function() {
                        return this.metadata.keyName
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.createBlockId = function(t, n) {
                    var r, i, s, a, o, l, u;
                    return void 0 === n && (n = this.metadata.blockLevel),
                    r = this.dbname,
                    i = this.collectionName,
                    s = n,
                    a = "".concat((o = n,
                    u = (l = {
                        hashFunction: this.hashFunction,
                        base: this.metadata.blockHashBase,
                        multiplier: this.metadata.blockHashMultiplier,
                        constant: this.metadata.blockHashConstant
                    }).base * Math.pow(l.multiplier, o) + l.constant,
                    (l.hashFunction || t$)(t, u))),
                    "".concat(ns(r, i)).concat(s, ".").concat(a)
                }
                ,
                t.prototype._findBlock = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a;
                        return B(this, function(o) {
                            switch (o.label) {
                            case 0:
                                n = nd.get(this.dbname),
                                r = this.metadata.blockLevel,
                                o.label = 1;
                            case 1:
                                return r > 0 ? (i = this.createBlockId(t, r),
                                [4, n.find(this._store, i)]) : [3, 4];
                            case 2:
                                if ((s = o.sent()) && (a = nf.createFromCacheItem(s)).getItemByKey(t))
                                    return [2, a];
                                o.label = 3;
                            case 3:
                                return r--,
                                [3, 1];
                            case 4:
                                return [2, null]
                            }
                        })
                    })
                }
                ,
                t.prototype.getFromBlock = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return [4, this._findBlock(t)];
                            case 1:
                                return [2, (n = r.sent()) ? n.getItemByKey(t) : null]
                            }
                        })
                    })
                }
                ,
                t.prototype.putToBlock = function(t, n) {
                    return G(this, void 0, void 0, function() {
                        var r, i, s, a, o;
                        return B(this, function(l) {
                            switch (l.label) {
                            case 0:
                                return r = tq.get(this.dbname),
                                i = this.createBlockId(t),
                                s = Math.floor(this._store.itemSizeLimit / r.itemSizeLimit),
                                [4, nd.get(this.dbname).find(this._store, i)];
                            case 1:
                                return (o = (a = l.sent()) ? nf.createFromCacheItem(a) : new nf({
                                    blockId: i,
                                    keyName: this.keyName,
                                    items: [],
                                    limit: s
                                })).add(n) ? (this._transaction.requestWrite({
                                    key: o.blockId,
                                    value: o.serialize()
                                }),
                                [2, !0]) : [2, !1]
                            }
                        })
                    })
                }
                ,
                t.prototype.removeFromBlock = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return [4, this._findBlock(t)];
                            case 1:
                                return (n = r.sent()) && n.remove(t) ? (this._transaction.requestWrite({
                                    key: n.blockId,
                                    value: n.serialize()
                                }),
                                [2, !0]) : [2, !1]
                            }
                        })
                    })
                }
                ,
                t.prototype.clearAllBlocks = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n, r, i, s, a;
                        return B(this, function(o) {
                            switch (o.label) {
                            case 0:
                                return t = ns(this.dbname, this.collectionName),
                                [4, this._store.getAllKeys()];
                            case 1:
                                return n = o.sent().filter(function(n) {
                                    return n.startsWith(t)
                                }),
                                [4, this._store.removeMany(n)];
                            case 2:
                                for (o.sent(),
                                r = nd.get(this.dbname),
                                i = 0,
                                s = n; i < s.length; i++)
                                    a = s[i],
                                    r.remove(a);
                                return [2]
                            }
                        })
                    })
                }
                ,
                t
            }()
              , ng = function() {
                function t(t) {
                    var n, r, i, s = t.dbname, a = t.collectionName, o = t.keyName, l = t.fields, u = t.transaction, c = t.store, d = this;
                    this._origin = [],
                    this._table = [],
                    this.dbname = s,
                    this.collectionName = a,
                    this.keyName = o,
                    this.fields = l,
                    this.indexerKey = (n = this.dbname,
                    r = this.collectionName,
                    i = this.fields.join(">"),
                    "".concat(nr(n, r), "/index.").concat(i)),
                    this._transaction = u,
                    this._store = c,
                    this._transaction.on(t6.COMMIT, this.indexerKey, function() {
                        return d.commit()
                    }),
                    this._transaction.on(t6.ERROR, this.indexerKey, function() {
                        return d.abort()
                    })
                }
                return t.createKey = function(t) {
                    return t.join(">")
                }
                ,
                t.parseKey = function(t) {
                    return t.split(">")
                }
                ,
                t.prototype._addItem = function(t) {
                    var n = t[this.keyName]
                      , r = this.getColumnValues(t)
                      , i = this.indexOf(r)
                      , s = i[0];
                    return i[1] ? !this._table[s].keys.includes(n) && (this._table[s].keys.push(n),
                    !0) : (this._table.splice(s, 0, {
                        columnValues: r,
                        keys: [n]
                    }),
                    !0)
                }
                ,
                t.prototype._removeItem = function(t) {
                    var n = t[this.keyName]
                      , r = this.getColumnValues(t)
                      , i = this.indexOf(r)
                      , s = i[0];
                    if (i[1]) {
                        var a = this._table[s].keys.indexOf(n);
                        if (a > -1)
                            return this._table[s].keys.splice(a, 1),
                            0 === this._table[s].keys.length && this._table.splice(s, 1),
                            !0
                    }
                    return !1
                }
                ,
                Object.defineProperty(t.prototype, "origin", {
                    get: function() {
                        return this._origin
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "table", {
                    get: function() {
                        return this._table
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.getColumnValues = function(t) {
                    for (var n, r, i = [], s = 0, a = this.fields; s < a.length; s++) {
                        var o = a[s];
                        if ("-" === o[0] && (o = o.slice(1)),
                        n = t[o],
                        r = void 0,
                        r = typeof n,
                        null !== n && "undefined" !== r && "boolean" !== r && "number" !== r && "string" !== r)
                            throw tW.indexTypesNotMatch;
                        i.push(t[o])
                    }
                    return i
                }
                ,
                t.prototype.diff = function(t, n) {
                    for (var r in this.fields) {
                        var i = "-" === this.fields[r][0] ? -1 : 1
                          , s = tZ(t[r], n[r]);
                        if (0 !== s)
                            return i * s
                    }
                    return 0
                }
                ,
                t.prototype.indexOf = function(t) {
                    if (this._table.length > 0) {
                        for (var n = 0, r = this._table.length - 1; n <= r; ) {
                            var i = Math.floor((n + r) / 2)
                              , s = this.diff(t, this._table[i].columnValues);
                            if (s > 0)
                                n = i + 1;
                            else {
                                if (!(s < 0))
                                    return [i, !0];
                                r = i - 1
                            }
                        }
                        return [n, !1]
                    }
                    return [0, !1]
                }
                ,
                t.prototype.ensure = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n, r, i, s, a, o, l, u, c, d, h;
                        return B(this, function(f) {
                            switch (f.label) {
                            case 0:
                                return [4, (t = nd.get(this.dbname)).find(this._store, this.indexerKey, t7.PERSISTENT)];
                            case 1:
                                return (n = f.sent()) ? [3, 7] : (r = ns(this.dbname, this.collectionName),
                                [4, this._store.getAllKeys()]);
                            case 2:
                                i = f.sent(),
                                s = 0,
                                a = i,
                                f.label = 3;
                            case 3:
                                return s < a.length ? (o = a[s]).startsWith(r) ? [4, t.find(this._store, o, t7.NO_CACHE)] : [3, 5] : [3, 6];
                            case 4:
                                for (l = f.sent(),
                                u = nf.createFromCacheItem(l),
                                c = 0,
                                d = u.items; c < d.length; c++)
                                    h = d[c],
                                    this._addItem(h);
                                f.label = 5;
                            case 5:
                                return s++,
                                [3, 3];
                            case 6:
                                return this._transaction.requestWrite({
                                    key: this.indexerKey,
                                    value: this._table
                                }, {
                                    persistent: !0
                                }),
                                [3, 8];
                            case 7:
                                this._origin = n.value,
                                this._table = tJ(this._origin),
                                f.label = 8;
                            case 8:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.drop = function() {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(t) {
                            switch (t.label) {
                            case 0:
                                return nd.get(this.dbname).remove(this.indexerKey),
                                [4, this._store.remove(this.indexerKey)];
                            case 1:
                                return t.sent(),
                                [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.addItem = function(t) {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(n) {
                            return this._addItem(t) && this._transaction.requestWrite({
                                key: this.indexerKey,
                                value: this._table
                            }, {
                                persistent: !0
                            }),
                            [2]
                        })
                    })
                }
                ,
                t.prototype.removeItem = function(t) {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(n) {
                            return this._removeItem(t) && this._transaction.requestWrite({
                                key: this.indexerKey,
                                value: this._table
                            }, {
                                persistent: !0
                            }),
                            [2]
                        })
                    })
                }
                ,
                t.prototype.clear = function() {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(t) {
                            return this._table = [],
                            this._transaction.requestWrite({
                                key: this.indexerKey,
                                value: this._table
                            }, {
                                persistent: !0
                            }),
                            [2]
                        })
                    })
                }
                ,
                t.prototype.commit = function() {
                    this._origin = this._table,
                    this._table = tJ(this._origin)
                }
                ,
                t.prototype.abort = function() {
                    this._table = tJ(this._origin)
                }
                ,
                t
            }()
              , nm = "undefined" != typeof document && "undefined" != typeof navigator;
            nm && navigator.userAgent && navigator.userAgent.includes("Chrome/") && navigator.userAgent.includes("Chromium/");
            var ny = nm && navigator.userAgent && navigator.userAgent.includes("Firefox/") && !navigator.userAgent.includes("Seamonkey/");
            nm && navigator.userAgent && navigator.userAgent.includes("Safari/") && !navigator.userAgent.includes("Chrome/") && navigator.userAgent.includes("Chromium/"),
            nm && navigator.userAgent && (navigator.userAgent.includes("OPR/") || navigator.userAgent.includes("Opera/")),
            nm && navigator.userAgent && navigator.userAgent.includes("Trident/7.0");
            var n_, nv, nE, nb, nC, nS = nm && navigator.userAgent && navigator.userAgent.includes("Edge/"), nA = function() {
                var t = (new Date).getTime();
                return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(n) {
                    var r = (t + 16 * Math.random()) % 16 | 0;
                    return t = Math.floor(t / 16),
                    ("x" === n ? r : 3 & r | 8).toString(16)
                })
            };
            (nN = nb || (nb = {}))[nN.PROCESSING = 0] = "PROCESSING",
            nN[nN.DONE = 1] = "DONE",
            (nT = nC || (nC = {})).NEWNODE = "newnode",
            nT.REMOVENODE = "removenode",
            nT.CLAIM_HOST = "claimhost",
            nT.SYNC_HOST = "synchost",
            nT.REQUEST_LOCK = "requestlock",
            nT.ACQUIRE_LOCK = "acquirelock",
            nT.RELEASE_LOCK = "releaselock";
            var nN, nT, nI, nO = {}, nw = function() {
                function t(t, n) {
                    void 0 === n && (n = {});
                    var r = this;
                    return this._state = nb.PROCESSING,
                    this._hostId = null,
                    this._queue = [],
                    this._currentItem = null,
                    this._activationTimeout = null,
                    this._activationQueue = [],
                    nO[t] && !n.forceCreate || (this.nodeId = nA(),
                    this.key = t,
                    nm && (n.startAsInvisible ? this.registerNode() : "visible" === document.visibilityState ? this.claimHost() : this.registerNode(),
                    document.addEventListener("visibilitychange", function() {
                        "visible" === document.visibilityState && r.claimHost()
                    }),
                    window.addEventListener("message", function(t) {
                        var n = t.data
                          , i = n.nodeId
                          , s = n.requestId
                          , a = n.key
                          , o = n.op
                          , l = n.data;
                        if (i !== r.nodeId && a === r.key)
                            switch (o) {
                            case nC.NEWNODE:
                                r._sendSync();
                                break;
                            case nC.CLAIM_HOST:
                                r._sendSync(),
                                r._hostId = i;
                                break;
                            case nC.SYNC_HOST:
                                if (!r.isInSync) {
                                    r._activationTimeout && clearTimeout(r._activationTimeout);
                                    for (var u = l.currentItemRequestId, c = function(t) {
                                        0 > r._queue.findIndex(function(n) {
                                            return n.requestId === t.requestId
                                        }) && r._requestLock({
                                            nodeId: t.nodeId,
                                            requestId: t.requestId,
                                            key: r.key,
                                            op: nC.REQUEST_LOCK,
                                            ts: t.ts
                                        })
                                    }, d = 0, h = l.queue; d < h.length; d++)
                                        c(h[d]);
                                    r._currentItem = r._queue.find(function(t) {
                                        return t.requestId === u
                                    }),
                                    r._completeSync()
                                }
                                break;
                            case nC.REMOVENODE:
                                r._queue = r._queue.filter(function(t) {
                                    return t.nodeId !== n.nodeId
                                }),
                                r._currentItem && r._currentItem.nodeId === n.nodeId && (r._currentItem = null,
                                r._acquire(r._queue[0]));
                                break;
                            case nC.REQUEST_LOCK:
                                r._requestLock(n);
                                break;
                            case nC.ACQUIRE_LOCK:
                                var f = r._queue.find(function(t) {
                                    return t.requestId === s
                                });
                                r._acquire(f);
                                break;
                            case nC.RELEASE_LOCK:
                                r._release(s)
                            }
                    }),
                    window.addEventListener("beforeunload", function() {
                        r._send(nC.REMOVENODE)
                    })),
                    nO[t] = this),
                    nO[t]
                }
                return Object.defineProperty(t.prototype, "locked", {
                    get: function() {
                        return !!this._currentItem
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "isHost", {
                    get: function() {
                        return this._hostId === this.nodeId
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "isInSync", {
                    get: function() {
                        return this._state == nb.DONE
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype._send = function(t, n) {
                    void 0 === n && (n = {});
                    var r, i, s = {
                        nodeId: this.nodeId,
                        requestId: null !== (r = null == n ? void 0 : n.requestId) && void 0 !== r ? r : nA(),
                        key: this.key,
                        op: t,
                        data: null !== (i = n.data) && void 0 !== i ? i : null,
                        ts: Date.now()
                    };
                    return nm && window.postMessage(s, "*"),
                    s
                }
                ,
                t.prototype._acquire = function(t) {
                    void 0 === t && (t = null),
                    t ? (this._currentItem = t,
                    this._currentItem.onAcquired(t.requestId)) : this._currentItem = null
                }
                ,
                t.prototype._release = function(t) {
                    if (this._currentItem && this._currentItem.requestId === t) {
                        var n = this._currentItem;
                        this._currentItem = null,
                        n.nodeId === this.nodeId && this._send(nC.RELEASE_LOCK, {
                            requestId: n.requestId
                        });
                        var r = this._queue.findIndex(function(n) {
                            return n.requestId === t
                        });
                        r > -1 && this._queue.splice(r, 1),
                        n.onReleased(t)
                    }
                }
                ,
                t.prototype._requestLock = function(t) {
                    var n = this;
                    return new Promise(function(r) {
                        var i = {
                            nodeId: t.nodeId,
                            requestId: t.requestId,
                            ts: t.ts,
                            onAcquired: function(t) {
                                n.isHost && n._send(nC.ACQUIRE_LOCK, {
                                    requestId: t
                                }),
                                r()
                            },
                            onReleased: function() {
                                n._acquire(n._queue[0])
                            }
                        }
                          , s = !1;
                        for (var a in n._queue)
                            if (n._queue[a].ts > i.ts) {
                                n._queue.splice(parseInt(a), 0, i),
                                s = !0;
                                break
                            }
                        s || n._queue.push(i),
                        n._currentItem || n._acquire(n._queue[0])
                    }
                    )
                }
                ,
                t.prototype._sendSync = function() {
                    var t;
                    this.isHost && this._send(nC.SYNC_HOST, {
                        data: {
                            currentItemRequestId: null === (t = this._currentItem) || void 0 === t ? void 0 : t.requestId,
                            queue: this._queue.map(function(t) {
                                return {
                                    nodeId: t.nodeId,
                                    requestId: t.requestId,
                                    ts: t.ts
                                }
                            })
                        }
                    })
                }
                ,
                t.prototype._waitUntilSyncCompleted = function() {
                    return G(this, void 0, void 0, function() {
                        var t = this;
                        return B(this, function(n) {
                            return this.isHost && !this.isInSync ? [2, new Promise(function(n) {
                                t._activationQueue.push(n)
                            }
                            )] : [2]
                        })
                    })
                }
                ,
                t.prototype._waitSync = function() {
                    var t = this;
                    this.isInSync || (this._activationTimeout = setTimeout(function() {
                        t._completeSync()
                    }, 8))
                }
                ,
                t.prototype._completeSync = function() {
                    this.isInSync || (this._state = nb.DONE,
                    this._activationQueue.forEach(function(t) {
                        return t()
                    }),
                    this._activationQueue = [])
                }
                ,
                t.prototype.registerNode = function() {
                    this._send(nC.NEWNODE),
                    this._waitSync()
                }
                ,
                t.prototype.claimHost = function() {
                    this._hostId = this.nodeId,
                    this._send(nC.CLAIM_HOST),
                    this._waitSync()
                }
                ,
                t.prototype.lock = function() {
                    return G(this, void 0, void 0, function() {
                        var t;
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return [4, this._waitUntilSyncCompleted()];
                            case 1:
                                return n.sent(),
                                t = this._send(nC.REQUEST_LOCK),
                                [4, this._requestLock(t)];
                            case 2:
                                return n.sent(),
                                [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.unlock = function() {
                    var t;
                    this._release(null === (t = this._currentItem) || void 0 === t ? void 0 : t.requestId)
                }
                ,
                t
            }(), nk = function() {
                function t(t) {
                    var n = t.dbname
                      , r = t.collectionName
                      , i = t.keyName
                      , s = t.keyHash
                      , a = t.indexes
                      , o = t.store
                      , l = this;
                    this._state = tK.INIT,
                    this._metadata = null,
                    this._indexers = [],
                    this.dbname = n,
                    this.name = r,
                    this.keyName = i,
                    this.indexes = V([[i]], a.filter(function(t) {
                        return ng.createKey(t) !== l.keyName
                    }), !0),
                    this._keyHash = s,
                    this._store = o,
                    this._mutex = new nw("".concat(nr(n, r), ".lock")),
                    this._blobContainer = new nl({
                        dbname: n,
                        collectionName: r,
                        store: o
                    }),
                    this._transaction = new nh({
                        dbname: n,
                        collectionName: r,
                        store: o
                    })
                }
                return t.metadataOf = function(t, n, r) {
                    return G(this, void 0, void 0, function() {
                        var i;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                return i = ni(t, n),
                                [4, r.get(i)];
                            case 1:
                                return [2, s.sent()]
                            }
                        })
                    })
                }
                ,
                Object.defineProperty(t.prototype, "state", {
                    get: function() {
                        return this._state
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.init = function() {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a, o, l, u, c, d, h, f, p = this;
                        return B(this, function(g) {
                            switch (g.label) {
                            case 0:
                                return [4, this._mutex.lock()];
                            case 1:
                                g.sent(),
                                g.label = 2;
                            case 2:
                                return g.trys.push([2, 9, , 10]),
                                n = tq.get(this.dbname),
                                [4, t.metadataOf(this.dbname, this.name, this._store)];
                            case 3:
                                return r = g.sent(),
                                this._metadata = r || {
                                    keyName: this.keyName,
                                    blockLevel: 1,
                                    blockHashBase: n.blockHashBase,
                                    blockHashMultiplier: n.blockHashMultiplier,
                                    blockHashConstant: n.blockHashConstant,
                                    indexes: this.indexes
                                },
                                [4, this._transaction.init()];
                            case 4:
                                for (g.sent(),
                                this._blockManager = new np({
                                    dbname: this.dbname,
                                    collectionName: this.name,
                                    hashFunction: this._keyHash,
                                    metadata: this._metadata,
                                    transaction: this._transaction,
                                    store: this._store
                                }),
                                i = V([], this.indexes, !0),
                                s = [],
                                a = i.map(function(t) {
                                    return ng.createKey(t)
                                }),
                                o = r ? r.indexes.map(function(t) {
                                    return ng.createKey(t)
                                }) : [],
                                l = 0,
                                u = o; l < u.length; l++)
                                    c = u[l],
                                    a.includes(c) || s.push(ng.parseKey(c));
                                return (d = []).push.apply(d, i.map(function(t) {
                                    var n = new ng({
                                        dbname: p.dbname,
                                        collectionName: p.name,
                                        keyName: p.keyName,
                                        fields: t,
                                        transaction: p._transaction,
                                        store: p._store
                                    });
                                    return p._indexers.push(n),
                                    n.ensure()
                                })),
                                d.push.apply(d, s.map(function(t) {
                                    return new ng({
                                        dbname: p.dbname,
                                        collectionName: p.name,
                                        keyName: p.keyName,
                                        fields: t,
                                        transaction: p._transaction,
                                        store: p._store
                                    }).drop()
                                })),
                                [4, Promise.all(d)];
                            case 5:
                                return g.sent(),
                                [4, this._transaction.commit()];
                            case 6:
                                return g.sent(),
                                a.sort().join(",") === o.sort().join(",") ? [3, 8] : (h = ni(this.dbname, this.name),
                                this._metadata.indexes = i,
                                [4, this._store.set({
                                    key: h,
                                    value: this._metadata,
                                    generation: 1
                                })]);
                            case 7:
                                g.sent(),
                                g.label = 8;
                            case 8:
                                return this._state = tK.READY,
                                this._mutex.unlock(),
                                [3, 10];
                            case 9:
                                throw f = g.sent(),
                                this._mutex.unlock(),
                                f;
                            case 10:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.close = function() {
                    this._state = tK.CLOSED
                }
                ,
                t.prototype._hasPropertyOfKeyName = function(t) {
                    var n = t[this.keyName];
                    return "string" == typeof n && !!n
                }
                ,
                t.prototype._getIndexerBy = function(t) {
                    void 0 === t && (t = null),
                    t || (t = [this.keyName]);
                    for (var n = ng.createKey(t), r = 0, i = this._indexers; r < i.length; r++) {
                        var s = i[r];
                        if (n === ng.createKey(s.fields))
                            return s
                    }
                    return null
                }
                ,
                t.prototype._upgradeBlockLevel = function() {
                    return G(this, void 0, void 0, function() {
                        var t;
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return t = ni(this.dbname, this.name),
                                this._metadata.blockLevel++,
                                [4, this._store.set({
                                    key: t,
                                    value: this._metadata,
                                    generation: 1
                                })];
                            case 1:
                                return n.sent(),
                                [2]
                            }
                        })
                    })
                }
                ,
                t.prototype._requestInsert = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                return n = t[this.keyName],
                                [4, this._blockManager.getFromBlock(n)];
                            case 1:
                                return s.sent() ? [3, 10] : [4, this._blockManager.putToBlock(n, t)];
                            case 2:
                                return s.sent() ? [3, 5] : [4, this._upgradeBlockLevel()];
                            case 3:
                                return s.sent(),
                                [4, this._blockManager.putToBlock(n, t)];
                            case 4:
                                s.sent(),
                                s.label = 5;
                            case 5:
                                r = 0,
                                i = this._indexers,
                                s.label = 6;
                            case 6:
                                return r < i.length ? [4, i[r].addItem(t)] : [3, 9];
                            case 7:
                                s.sent(),
                                s.label = 8;
                            case 8:
                                return r++,
                                [3, 6];
                            case 9:
                                return [3, 11];
                            case 10:
                                throw tW.collectionInsertDuplicate;
                            case 11:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype._requestUpsert = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a, o, l;
                        return B(this, function(u) {
                            switch (u.label) {
                            case 0:
                                return n = t[this.keyName],
                                [4, this._blockManager.getFromBlock(n)];
                            case 1:
                                return (r = u.sent()) ? [3, 10] : [4, this._blockManager.putToBlock(n, t)];
                            case 2:
                                return u.sent() ? [3, 5] : [4, this._upgradeBlockLevel()];
                            case 3:
                                return u.sent(),
                                [4, this._blockManager.putToBlock(n, t)];
                            case 4:
                                u.sent(),
                                u.label = 5;
                            case 5:
                                i = 0,
                                s = this._indexers,
                                u.label = 6;
                            case 6:
                                return i < s.length ? [4, (l = s[i]).addItem(t)] : [3, 9];
                            case 7:
                                u.sent(),
                                u.label = 8;
                            case 8:
                                return i++,
                                [3, 6];
                            case 9:
                                return [3, 16];
                            case 10:
                                return [4, this._blockManager.putToBlock(n, t)];
                            case 11:
                                u.sent(),
                                a = 0,
                                o = this._indexers,
                                u.label = 12;
                            case 12:
                                return a < o.length ? 0 === (l = o[a]).diff(l.getColumnValues(r), l.getColumnValues(t)) ? [3, 15] : [4, l.removeItem(r)] : [3, 16];
                            case 13:
                                return u.sent(),
                                [4, l.addItem(t)];
                            case 14:
                                u.sent(),
                                u.label = 15;
                            case 15:
                                return a++,
                                [3, 12];
                            case 16:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype._requestUpdate = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a;
                        return B(this, function(o) {
                            switch (o.label) {
                            case 0:
                                return n = t[this.keyName],
                                [4, this._blockManager.getFromBlock(n)];
                            case 1:
                                return (r = o.sent()) ? [4, this._blockManager.putToBlock(n, t)] : [3, 7];
                            case 2:
                                o.sent(),
                                i = 0,
                                s = this._indexers,
                                o.label = 3;
                            case 3:
                                return i < s.length ? 0 === (a = s[i]).diff(a.getColumnValues(r), a.getColumnValues(t)) ? [3, 6] : [4, a.removeItem(r)] : [3, 7];
                            case 4:
                                return o.sent(),
                                [4, a.addItem(t)];
                            case 5:
                                o.sent(),
                                o.label = 6;
                            case 6:
                                return i++,
                                [3, 3];
                            case 7:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype._requestRemove = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                return [4, this._blockManager.getFromBlock(t)];
                            case 1:
                                return (n = s.sent()) ? [4, this._blockManager.removeFromBlock(t)] : [3, 6];
                            case 2:
                                s.sent(),
                                r = 0,
                                i = this._indexers,
                                s.label = 3;
                            case 3:
                                return r < i.length ? [4, i[r].removeItem(n)] : [3, 6];
                            case 4:
                                s.sent(),
                                s.label = 5;
                            case 5:
                                return r++,
                                [3, 3];
                            case 6:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype._requestClear = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return [4, this._blockManager.clearAllBlocks()];
                            case 1:
                                r.sent(),
                                t = 0,
                                n = this._indexers,
                                r.label = 2;
                            case 2:
                                return t < n.length ? [4, n[t].clear()] : [3, 5];
                            case 3:
                                r.sent(),
                                r.label = 4;
                            case 4:
                                return t++,
                                [3, 2];
                            case 5:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.getByKey = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r;
                        return B(this, function(i) {
                            switch (i.label) {
                            case 0:
                                return this._state !== tK.READY ? [3, 6] : [4, this._mutex.lock()];
                            case 1:
                                i.sent(),
                                i.label = 2;
                            case 2:
                                return i.trys.push([2, 4, , 5]),
                                [4, this._blockManager.getFromBlock(t)];
                            case 3:
                                return n = i.sent(),
                                this._mutex.unlock(),
                                [2, tJ(n)];
                            case 4:
                                throw r = i.sent(),
                                this._mutex.unlock(),
                                r;
                            case 5:
                                return [3, 7];
                            case 6:
                                throw tW.collectionNotReady;
                            case 7:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.query = function(t) {
                    return void 0 === t && (t = {}),
                    this._state === tK.READY ? new nt({
                        condition: t.where,
                        mutex: this._mutex,
                        blockManager: this._blockManager,
                        indexer: this._getIndexerBy(t.index),
                        backward: !!t.backward
                    }) : null
                }
                ,
                t.prototype.insertOne = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return this._state !== tK.READY ? [3, 8] : [4, this._mutex.lock()];
                            case 1:
                                r.sent(),
                                r.label = 2;
                            case 2:
                                if (r.trys.push([2, 5, , 7]),
                                !this._hasPropertyOfKeyName(t))
                                    throw tW.collectionKeyNotGiven;
                                return [4, this._requestInsert(tJ(t))];
                            case 3:
                                return r.sent(),
                                [4, this._transaction.commit()];
                            case 4:
                                return r.sent(),
                                this._mutex.unlock(),
                                [2, t];
                            case 5:
                                return n = r.sent(),
                                [4, this._transaction.clear()];
                            case 6:
                                throw r.sent(),
                                this._mutex.unlock(),
                                n;
                            case 7:
                                return [3, 9];
                            case 8:
                                throw tW.collectionNotReady;
                            case 9:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.insertMany = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a = this;
                        return B(this, function(o) {
                            switch (o.label) {
                            case 0:
                                return this._state !== tK.READY ? [3, 11] : [4, this._mutex.lock()];
                            case 1:
                                o.sent(),
                                o.label = 2;
                            case 2:
                                if (o.trys.push([2, 8, , 10]),
                                t.some(function(t) {
                                    return !a._hasPropertyOfKeyName(t)
                                }))
                                    throw tW.collectionKeyNotGiven;
                                n = 0,
                                r = t,
                                o.label = 3;
                            case 3:
                                return n < r.length ? (i = r[n],
                                [4, this._requestInsert(tJ(i))]) : [3, 6];
                            case 4:
                                o.sent(),
                                o.label = 5;
                            case 5:
                                return n++,
                                [3, 3];
                            case 6:
                                return [4, this._transaction.commit()];
                            case 7:
                                return o.sent(),
                                this._mutex.unlock(),
                                [2, t];
                            case 8:
                                return s = o.sent(),
                                [4, this._transaction.clear()];
                            case 9:
                                throw o.sent(),
                                this._mutex.unlock(),
                                s;
                            case 10:
                                return [3, 12];
                            case 11:
                                throw tW.collectionNotReady;
                            case 12:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.upsertOne = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return this._state !== tK.READY ? [3, 8] : [4, this._mutex.lock()];
                            case 1:
                                r.sent(),
                                r.label = 2;
                            case 2:
                                if (r.trys.push([2, 5, , 7]),
                                !this._hasPropertyOfKeyName(t))
                                    throw tW.collectionKeyNotGiven;
                                return [4, this._requestUpsert(tJ(t))];
                            case 3:
                                return r.sent(),
                                [4, this._transaction.commit()];
                            case 4:
                                return r.sent(),
                                this._mutex.unlock(),
                                [2, t];
                            case 5:
                                return n = r.sent(),
                                [4, this._transaction.clear()];
                            case 6:
                                throw r.sent(),
                                this._mutex.unlock(),
                                n;
                            case 7:
                                return [3, 9];
                            case 8:
                                throw tW.collectionNotReady;
                            case 9:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.upsertMany = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a = this;
                        return B(this, function(o) {
                            switch (o.label) {
                            case 0:
                                return this._state !== tK.READY ? [3, 11] : [4, this._mutex.lock()];
                            case 1:
                                o.sent(),
                                o.label = 2;
                            case 2:
                                if (o.trys.push([2, 8, , 10]),
                                t.some(function(t) {
                                    return !a._hasPropertyOfKeyName(t)
                                }))
                                    throw tW.collectionKeyNotGiven;
                                n = 0,
                                r = t,
                                o.label = 3;
                            case 3:
                                return n < r.length ? (i = r[n],
                                [4, this._requestUpsert(tJ(i))]) : [3, 6];
                            case 4:
                                o.sent(),
                                o.label = 5;
                            case 5:
                                return n++,
                                [3, 3];
                            case 6:
                                return [4, this._transaction.commit()];
                            case 7:
                                return o.sent(),
                                this._mutex.unlock(),
                                [2, t];
                            case 8:
                                return s = o.sent(),
                                [4, this._transaction.clear()];
                            case 9:
                                throw o.sent(),
                                this._mutex.unlock(),
                                s;
                            case 10:
                                return [3, 12];
                            case 11:
                                throw tW.collectionNotReady;
                            case 12:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.update = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return this._state !== tK.READY ? [3, 8] : [4, this._mutex.lock()];
                            case 1:
                                r.sent(),
                                r.label = 2;
                            case 2:
                                if (r.trys.push([2, 5, , 7]),
                                !this._hasPropertyOfKeyName(t))
                                    throw tW.collectionKeyNotGiven;
                                return [4, this._requestUpdate(tJ(t))];
                            case 3:
                                return r.sent(),
                                [4, this._transaction.commit()];
                            case 4:
                                return r.sent(),
                                this._mutex.unlock(),
                                [2, t];
                            case 5:
                                return n = r.sent(),
                                [4, this._transaction.clear()];
                            case 6:
                                throw r.sent(),
                                this._mutex.unlock(),
                                n;
                            case 7:
                                return [3, 9];
                            case 8:
                                throw tW.collectionNotReady;
                            case 9:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.updateIf = function(t, n) {
                    return G(this, void 0, void 0, function() {
                        var r, i, s, a, o, l, u, c, d, h, f, p = this;
                        return B(this, function(g) {
                            switch (g.label) {
                            case 0:
                                return this._state !== tK.READY ? [3, 12] : [4, this._mutex.lock()];
                            case 1:
                                g.sent(),
                                g.label = 2;
                            case 2:
                                return g.trys.push([2, 9, , 11]),
                                i = void 0 === (r = t.where) ? {} : r,
                                a = void 0 === (s = t.index) ? null : s,
                                l = void 0 !== (o = t.backward) && o,
                                u = [],
                                [4, new ne({
                                    condition: i,
                                    blockManager: this._blockManager,
                                    backward: l,
                                    indexer: this._getIndexerBy(a)
                                }).each(function(t) {
                                    return G(p, void 0, void 0, function() {
                                        var r, s;
                                        return B(this, function(a) {
                                            if (t.error)
                                                throw t.stop(),
                                                t.error;
                                            if (t.hasNext) {
                                                if (t0(i, r = t.nextValue) && n.set) {
                                                    if ("function" != typeof n.set)
                                                        for (s in n.set)
                                                            r[s] = n.set[s];
                                                    else
                                                        n.set(r);
                                                    u.push(r)
                                                }
                                                t.next()
                                            } else
                                                t.stop();
                                            return [2]
                                        })
                                    })
                                })];
                            case 3:
                                g.sent(),
                                c = 0,
                                d = u,
                                g.label = 4;
                            case 4:
                                return c < d.length ? (h = d[c],
                                [4, this._requestUpdate(tJ(h))]) : [3, 7];
                            case 5:
                                g.sent(),
                                g.label = 6;
                            case 6:
                                return c++,
                                [3, 4];
                            case 7:
                                return [4, this._transaction.commit()];
                            case 8:
                                return g.sent(),
                                this._mutex.unlock(),
                                [2, u];
                            case 9:
                                return f = g.sent(),
                                [4, this._transaction.clear()];
                            case 10:
                                throw g.sent(),
                                this._mutex.unlock(),
                                f;
                            case 11:
                                return [3, 13];
                            case 12:
                                throw this._transaction.clear(),
                                tW.collectionNotReady;
                            case 13:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.remove = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return this._state !== tK.READY ? [3, 8] : [4, this._mutex.lock()];
                            case 1:
                                r.sent(),
                                r.label = 2;
                            case 2:
                                return r.trys.push([2, 5, , 7]),
                                [4, this._requestRemove(t)];
                            case 3:
                                return r.sent(),
                                [4, this._transaction.commit()];
                            case 4:
                                return r.sent(),
                                this._mutex.unlock(),
                                [3, 7];
                            case 5:
                                return n = r.sent(),
                                [4, this._transaction.clear()];
                            case 6:
                                throw r.sent(),
                                this._mutex.unlock(),
                                n;
                            case 7:
                                return [3, 9];
                            case 8:
                                throw tW.collectionNotReady;
                            case 9:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.removeIf = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a, o, l, u, c, d, h, f = this;
                        return B(this, function(p) {
                            switch (p.label) {
                            case 0:
                                return this._state !== tK.READY ? [3, 11] : [4, this._mutex.lock()];
                            case 1:
                                p.sent(),
                                p.label = 2;
                            case 2:
                                return p.trys.push([2, 9, , 10]),
                                r = void 0 === (n = t.where) ? {} : n,
                                s = void 0 === (i = t.index) ? null : i,
                                o = void 0 !== (a = t.backward) && a,
                                l = [],
                                [4, new ne({
                                    condition: r,
                                    blockManager: this._blockManager,
                                    backward: o,
                                    indexer: this._getIndexerBy(s)
                                }).each(function(t) {
                                    return G(f, void 0, void 0, function() {
                                        var n, i;
                                        return B(this, function(s) {
                                            if (t.error)
                                                throw t.stop(),
                                                t.error;
                                            return t.hasNext ? (t0(r, n = t.nextValue) && (i = n[this.keyName],
                                            l.push(i)),
                                            t.next()) : t.stop(),
                                            [2]
                                        })
                                    })
                                })];
                            case 3:
                                p.sent(),
                                u = 0,
                                c = l,
                                p.label = 4;
                            case 4:
                                return u < c.length ? (d = c[u],
                                [4, this._requestRemove(d)]) : [3, 7];
                            case 5:
                                p.sent(),
                                p.label = 6;
                            case 6:
                                return u++,
                                [3, 4];
                            case 7:
                                return [4, this._transaction.commit()];
                            case 8:
                                return p.sent(),
                                this._mutex.unlock(),
                                [2, l];
                            case 9:
                                throw h = p.sent(),
                                this._mutex.unlock(),
                                h;
                            case 10:
                                return [3, 12];
                            case 11:
                                throw this._transaction.clear(),
                                tW.collectionNotReady;
                            case 12:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.clear = function() {
                    return G(this, void 0, void 0, function() {
                        var t;
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return this._state !== tK.READY ? [3, 8] : [4, this._mutex.lock()];
                            case 1:
                                n.sent(),
                                n.label = 2;
                            case 2:
                                return n.trys.push([2, 5, , 7]),
                                [4, this._requestClear()];
                            case 3:
                                return n.sent(),
                                [4, this._transaction.commit()];
                            case 4:
                                return n.sent(),
                                this._mutex.unlock(),
                                [3, 7];
                            case 5:
                                return t = n.sent(),
                                [4, this._transaction.clear()];
                            case 6:
                                throw n.sent(),
                                this._mutex.unlock(),
                                t;
                            case 7:
                                return [3, 9];
                            case 8:
                                throw tW.collectionNotReady;
                            case 9:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.getBlob = function(t) {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return [4, this._blobContainer.get(t)];
                            case 1:
                                return [2, n.sent()]
                            }
                        })
                    })
                }
                ,
                t.prototype.saveBlob = function(t, n) {
                    return void 0 === n && (n = null),
                    G(this, void 0, void 0, function() {
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return [4, this._blobContainer.save(t, n)];
                            case 1:
                                return [2, r.sent()]
                            }
                        })
                    })
                }
                ,
                t.prototype.removeBlob = function(t) {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return [4, this._blobContainer.remove(t)];
                            case 1:
                                return n.sent(),
                                [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.removeAllBlobs = function() {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(t) {
                            switch (t.label) {
                            case 0:
                                return [4, this._blobContainer.clear()];
                            case 1:
                                return t.sent(),
                                [2]
                            }
                        })
                    })
                }
                ,
                t
            }(), nU = {
                key: "__ev",
                value: {
                    k: "__ev",
                    v: "scs"
                },
                generation: 1
            }, nR = {
                encrypt: function(t) {
                    return t
                },
                decrypt: function(t) {
                    return t
                }
            }, nM = {}, nP = function() {
                function t(t) {
                    void 0 === t && (t = {});
                    var n = t.itemSizeLimit
                      , r = t.delay
                      , i = t.encryption;
                    this._encryption = void 0 === i ? nR : i,
                    this.itemSizeLimit = void 0 === n ? 4194304 : n,
                    this.delay = void 0 === r ? 1 : r,
                    this.observer = {}
                }
                return Object.defineProperty(t.prototype, "rawData", {
                    get: function() {
                        return nM[this.dbname]
                    },
                    set: function(t) {
                        nM[this.dbname] = t
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.observe = function(t, n, r) {
                    var i = this;
                    this.observer[t] = {},
                    n.forEach(function(n) {
                        return i.observer[t][n] = r
                    })
                }
                ,
                t.prototype.init = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                this.dbname = t,
                                nM[this.dbname] = {},
                                r.label = 1;
                            case 1:
                                return r.trys.push([1, , 3, 5]),
                                [4, this.get(nU.key)];
                            case 2:
                                if ((n = r.sent()) && JSON.stringify(n) !== JSON.stringify(nU.value))
                                    throw tW.storeEncryptionInvalid;
                                return [3, 5];
                            case 3:
                                return [4, this.set(nU)];
                            case 4:
                                return r.sent(),
                                [7];
                            case 5:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.getAllKeys = function() {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(t) {
                            return [2, Object.keys(nM[this.dbname]).filter(function(t) {
                                return t !== nU.key
                            })]
                        })
                    })
                }
                ,
                t.prototype.get = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r;
                        return B(this, function(i) {
                            switch (i.label) {
                            case 0:
                                return [4, tX(this.delay)];
                            case 1:
                                if (i.sent(),
                                r = (n = this.observer[t]) && n.get ? n.get(t) : null)
                                    throw r;
                                return [2, nM[this.dbname][t] ? this._encryption.decrypt(nM[this.dbname][t]) : null]
                            }
                        })
                    })
                }
                ,
                t.prototype.set = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a, o;
                        return B(this, function(l) {
                            switch (l.label) {
                            case 0:
                                return [4, tX(this.delay)];
                            case 1:
                                if (l.sent(),
                                n = t.key,
                                r = t.value,
                                s = (i = this.observer[n]) && i.set ? i.set(n) : null)
                                    throw s;
                                if (o = JSON.stringify(a = this._encryption.encrypt(r)),
                                n === nU.key || o.length < this.itemSizeLimit)
                                    return nM[this.dbname][n] = a,
                                    [2, nM[this.dbname][n]];
                                throw tW.storeItemSizeExceeded
                            }
                        })
                    })
                }
                ,
                t.prototype.setMany = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r = this;
                        return B(this, function(i) {
                            switch (i.label) {
                            case 0:
                                return [4, tX(this.delay)];
                            case 1:
                                return i.sent(),
                                n = [],
                                t.forEach(function(t) {
                                    var i = t.key
                                      , s = t.value
                                      , a = r.observer[i];
                                    if (a && a.set ? a.set(i) : null)
                                        n.push(tW.collectionWriteFailed);
                                    else {
                                        var o = r._encryption.encrypt(s)
                                          , l = JSON.stringify(o);
                                        i === nU.key || l.length < r.itemSizeLimit ? (nM[r.dbname][i] = o,
                                        n.push(s)) : n.push(tW.storeItemSizeExceeded)
                                    }
                                }),
                                [2, n]
                            }
                        })
                    })
                }
                ,
                t.prototype.remove = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r;
                        return B(this, function(i) {
                            switch (i.label) {
                            case 0:
                                return [4, tX(this.delay)];
                            case 1:
                                if (i.sent(),
                                r = (n = this.observer[t]) && n.remove ? n.remove(t) : null)
                                    throw r;
                                return nM[this.dbname][t] && delete nM[this.dbname][t],
                                [2, t]
                            }
                        })
                    })
                }
                ,
                t.prototype.removeMany = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s;
                        return B(this, function(a) {
                            switch (a.label) {
                            case 0:
                                return [4, tX(this.delay)];
                            case 1:
                                for (a.sent(),
                                n = 0; n < t.length; n++) {
                                    if (r = t[n],
                                    s = (i = this.observer[r]) && i.remove ? i.remove(r) : null)
                                        throw s;
                                    nM[this.dbname][r] && delete nM[this.dbname][r]
                                }
                                return [2, t]
                            }
                        })
                    })
                }
                ,
                t.prototype.clear = function() {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(t) {
                            switch (t.label) {
                            case 0:
                                return [4, tX(this.delay)];
                            case 1:
                                return t.sent(),
                                nM[this.dbname] = {},
                                [2]
                            }
                        })
                    })
                }
                ,
                t
            }(), nL = "NestDBStore", nD = function() {
                function t(t) {
                    void 0 === t && (t = {}),
                    this.itemSizeLimit = 104857600;
                    var n = t.encryption;
                    this._window = "undefined" != typeof window ? window : null,
                    this._indexedDB = this._window ? this._window.indexedDB || this._window.mozIndexedDB || this._window.webkitIndexedDB || this._window.msIndexedDB : null,
                    this._encryption = void 0 === n ? nR : n
                }
                return t.prototype.init = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i = this;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                return this.dbname = t,
                                [4, new Promise(function(t, n) {
                                    if (i._window && nm) {
                                        if (ny) {
                                            var r = i._indexedDB.open("_testMozilla");
                                            r.onerror = function() {
                                                return n(tW.storeNotAvailableInPrivateBrowsing)
                                            }
                                            ,
                                            r.onsuccess = function() {
                                                return t()
                                            }
                                        } else
                                            nS ? !i._window.indexedDB && (i._window.PointerEvent || i._window.MSPointerEvent) && n(tW.storeNotAvailableInPrivateBrowsing) : t()
                                    } else
                                        n(tW.storeNotAvailable)
                                }
                                )];
                            case 1:
                                return s.sent(),
                                n = this,
                                [4, new Promise(function(n, r) {
                                    var s = i._indexedDB.open(t);
                                    s.addEventListener("upgradeneeded", function(t) {
                                        t.target.result.createObjectStore(nL, {
                                            keyPath: "key"
                                        })
                                    }),
                                    s.addEventListener("success", function(t) {
                                        return n(t.target.result)
                                    }),
                                    s.addEventListener("error", function(t) {
                                        return r(t.target.error)
                                    })
                                }
                                )];
                            case 2:
                                n._database = s.sent(),
                                s.label = 3;
                            case 3:
                                return s.trys.push([3, , 5, 7]),
                                [4, this.get(nU.key)];
                            case 4:
                                if ((r = s.sent()) && JSON.stringify(r) !== JSON.stringify(nU.value))
                                    throw tW.storeEncryptionInvalid;
                                return [3, 7];
                            case 5:
                                return [4, this.set(nU)];
                            case 6:
                                return s.sent(),
                                [7];
                            case 7:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.getAllKeys = function() {
                    return G(this, void 0, void 0, function() {
                        var t = this;
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return [4, new Promise(function(n, r) {
                                    var i = t._database.transaction(nL, "readonly").objectStore(nL).getAllKeys();
                                    i.addEventListener("success", function(t) {
                                        n(t.target.result.filter(function(t) {
                                            return t !== nU.key
                                        }))
                                    }),
                                    i.addEventListener("error", function(t) {
                                        return r(t.target.error)
                                    })
                                }
                                )];
                            case 1:
                                return [2, n.sent()]
                            }
                        })
                    })
                }
                ,
                t.prototype.get = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n = this;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return [4, new Promise(function(r, i) {
                                    var s = n._database.transaction(nL, "readonly").objectStore(nL).get(t);
                                    s.addEventListener("success", function(t) {
                                        return r(t.target.result ? n._encryption.decrypt(t.target.result.value) : null)
                                    }),
                                    s.addEventListener("error", function(t) {
                                        return i(t.target.error)
                                    })
                                }
                                )];
                            case 1:
                                return [2, r.sent()]
                            }
                        })
                    })
                }
                ,
                t.prototype.set = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i = this;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                return n = t.key,
                                r = t.value,
                                [4, new Promise(function(t, s) {
                                    var a = i._database.transaction(nL, "readwrite").objectStore(nL).put({
                                        key: n,
                                        value: i._encryption.encrypt(r)
                                    });
                                    a.addEventListener("success", function(n) {
                                        t(n.target.result)
                                    }),
                                    a.addEventListener("error", function(t) {
                                        return s(t.target.error)
                                    })
                                }
                                )];
                            case 1:
                                return s.sent(),
                                [2, r]
                            }
                        })
                    })
                }
                ,
                t.prototype.setMany = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i = this;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                return n = [],
                                r = this._database.transaction(nL, "readwrite").objectStore(nL),
                                t.forEach(function(t) {
                                    var s = t.key
                                      , a = t.value;
                                    n.push(new Promise(function(t) {
                                        var n = r.put({
                                            key: s,
                                            value: i._encryption.encrypt(a)
                                        });
                                        n.addEventListener("success", function(n) {
                                            t(n.target.result)
                                        }),
                                        n.addEventListener("error", function() {
                                            t(tW.collectionWriteFailed)
                                        })
                                    }
                                    ))
                                }),
                                [4, Promise.all(n)];
                            case 1:
                                return s.sent(),
                                [2, t.map(function(t) {
                                    return t.value
                                })]
                            }
                        })
                    })
                }
                ,
                t.prototype.remove = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n = this;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return [4, new Promise(function(r, i) {
                                    var s = n._database.transaction(nL, "readwrite").objectStore(nL).delete(t);
                                    s.addEventListener("success", function() {
                                        return r(t)
                                    }),
                                    s.addEventListener("error", function(t) {
                                        return i(t.target.error)
                                    })
                                }
                                )];
                            case 1:
                                return [2, r.sent()]
                            }
                        })
                    })
                }
                ,
                t.prototype.removeMany = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return n = this._database.transaction(nL, "readwrite").objectStore(nL),
                                [4, Promise.all(t.map(function(t) {
                                    return new Promise(function(r, i) {
                                        var s = n.delete(t);
                                        s.addEventListener("success", function() {
                                            return r(t)
                                        }),
                                        s.addEventListener("error", function(t) {
                                            return i(t.target.error)
                                        })
                                    }
                                    )
                                }))];
                            case 1:
                                return [2, r.sent()]
                            }
                        })
                    })
                }
                ,
                t.prototype.clear = function() {
                    return G(this, void 0, void 0, function() {
                        var t = this;
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return [4, new Promise(function(n, r) {
                                    var i = t._database.transaction(nL, "readwrite").objectStore(nL).clear();
                                    i.addEventListener("success", function() {
                                        return n()
                                    }),
                                    i.addEventListener("error", function(t) {
                                        return r(t.target.error)
                                    })
                                }
                                )];
                            case 1:
                                return [2, n.sent()]
                            }
                        })
                    })
                }
                ,
                t
            }(), nx = function() {
                function t(t) {
                    var n = t.AsyncStorage
                      , r = t.encryption;
                    this.itemSizeLimit = 6291456,
                    this._asyncStorage = n,
                    this._encryption = void 0 === r ? nR : r
                }
                return t.prototype._isBelonging = function(t) {
                    return t.startsWith("".concat(this.dbname, "/"))
                }
                ,
                t.prototype._getActualKey = function(t) {
                    return "".concat(this.dbname, "/").concat(t)
                }
                ,
                t.prototype.init = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                this.dbname = t,
                                r.label = 1;
                            case 1:
                                return r.trys.push([1, , 3, 5]),
                                [4, this.get(nU.key)];
                            case 2:
                                if ((n = r.sent()) && JSON.stringify(n) !== JSON.stringify(nU.value))
                                    throw tW.storeEncryptionInvalid;
                                return [3, 5];
                            case 3:
                                return [4, this.set(nU)];
                            case 4:
                                return r.sent(),
                                [7];
                            case 5:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.getAllKeys = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n = this;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return t = this._getActualKey(nU.key),
                                [4, this._asyncStorage.getAllKeys()];
                            case 1:
                                return [2, r.sent().filter(function(r) {
                                    return n._isBelonging(r) && r !== t
                                }).map(function(t) {
                                    return t.substring("".concat(n.dbname, "/").length)
                                })]
                            }
                        })
                    })
                }
                ,
                t.prototype.get = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return [4, this._asyncStorage.getItem(this._getActualKey(t))];
                            case 1:
                                return [2, (n = r.sent()) ? this._encryption.decrypt(JSON.parse(n)) : null]
                            }
                        })
                    })
                }
                ,
                t.prototype.set = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                return n = t.key,
                                r = t.value,
                                i = JSON.stringify(this._encryption.encrypt(r)),
                                n === nU.key || i.length < this.itemSizeLimit ? [4, this._asyncStorage.setItem(this._getActualKey(n), i)] : [3, 2];
                            case 1:
                                return s.sent(),
                                [2, JSON.parse(i)];
                            case 2:
                                throw tW.storeItemSizeExceeded
                            }
                        })
                    })
                }
                ,
                t.prototype.setMany = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a, o, l;
                        return B(this, function(u) {
                            switch (u.label) {
                            case 0:
                                n = [],
                                r = 0,
                                i = t,
                                u.label = 1;
                            case 1:
                                if (!(r < i.length))
                                    return [3, 8];
                                s = i[r],
                                u.label = 2;
                            case 2:
                                return u.trys.push([2, 6, , 7]),
                                a = s.key,
                                o = s.value,
                                l = JSON.stringify(this._encryption.encrypt(o)),
                                a === nU.key || l.length < this.itemSizeLimit ? [4, this._asyncStorage.setItem(this._getActualKey(a), l)] : [3, 4];
                            case 3:
                                return u.sent(),
                                n.push(o),
                                [3, 5];
                            case 4:
                                n.push(tW.storeItemSizeExceeded),
                                u.label = 5;
                            case 5:
                                return [3, 7];
                            case 6:
                                return u.sent(),
                                n.push(tW.collectionWriteFailed),
                                [3, 7];
                            case 7:
                                return r++,
                                [3, 1];
                            case 8:
                                return [2, n]
                            }
                        })
                    })
                }
                ,
                t.prototype.remove = function(t) {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return [4, this._asyncStorage.removeItem(this._getActualKey(t))];
                            case 1:
                                return n.sent(),
                                [2, t]
                            }
                        })
                    })
                }
                ,
                t.prototype.removeMany = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i;
                        return B(this, function(s) {
                            switch (s.label) {
                            case 0:
                                n = 0,
                                r = t,
                                s.label = 1;
                            case 1:
                                return n < r.length ? (i = r[n],
                                [4, this._asyncStorage.removeItem(this._getActualKey(i))]) : [3, 4];
                            case 2:
                                s.sent(),
                                s.label = 3;
                            case 3:
                                return n++,
                                [3, 1];
                            case 4:
                                return [2, t]
                            }
                        })
                    })
                }
                ,
                t.prototype.clear = function() {
                    return G(this, void 0, void 0, function() {
                        var t;
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return [4, this.getAllKeys()];
                            case 1:
                                return t = n.sent(),
                                [4, this.removeMany(t)];
                            case 2:
                                return n.sent(),
                                [4, this.remove(nU.key)];
                            case 3:
                                return n.sent(),
                                [2]
                            }
                        })
                    })
                }
                ,
                t
            }(), nF = function() {
                function t(t) {
                    var n = t.MMKV
                      , r = t.encryption;
                    this.itemSizeLimit = 6291456,
                    this._mmkv = n,
                    this._encryption = void 0 === r ? nR : r
                }
                return t.prototype._isBelonging = function(t) {
                    return t.startsWith("".concat(this.dbname, "/"))
                }
                ,
                t.prototype._getActualKey = function(t) {
                    return "".concat(this.dbname, "/").concat(t)
                }
                ,
                t.prototype.init = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                this.dbname = t,
                                r.label = 1;
                            case 1:
                                return r.trys.push([1, , 3, 5]),
                                [4, this.get(nU.key)];
                            case 2:
                                if ((n = r.sent()) && JSON.stringify(n) !== JSON.stringify(nU.value))
                                    throw tW.storeEncryptionInvalid;
                                return [3, 5];
                            case 3:
                                return [4, this.set(nU)];
                            case 4:
                                return r.sent(),
                                [7];
                            case 5:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.getAllKeys = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n = this;
                        return B(this, function(r) {
                            return t = this._getActualKey(nU.key),
                            [2, this._mmkv.getAllKeys().filter(function(r) {
                                return n._isBelonging(r) && r !== t
                            }).map(function(t) {
                                return t.substr("".concat(n.dbname, "/").length)
                            })]
                        })
                    })
                }
                ,
                t.prototype.get = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return [4, this._mmkv.getString(this._getActualKey(t))];
                            case 1:
                                return [2, (n = r.sent()) ? this._encryption.decrypt(JSON.parse(n)) : null]
                            }
                        })
                    })
                }
                ,
                t.prototype.set = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i;
                        return B(this, function(s) {
                            if (n = t.key,
                            r = t.value,
                            i = JSON.stringify(this._encryption.encrypt(r)),
                            n === nU.key || i.length < this.itemSizeLimit)
                                return this._mmkv.set(this._getActualKey(n), i),
                                [2, JSON.parse(i)];
                            throw tW.storeItemSizeExceeded
                        })
                    })
                }
                ,
                t.prototype.setMany = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a, o;
                        return B(this, function(l) {
                            for (n = [],
                            r = 0; r < t.length; r++) {
                                i = t[r];
                                try {
                                    s = i.key,
                                    a = i.value,
                                    o = JSON.stringify(this._encryption.encrypt(a)),
                                    s === nU.key || o.length < this.itemSizeLimit ? (this._mmkv.set(this._getActualKey(s), o),
                                    n.push(a)) : n.push(tW.storeItemSizeExceeded)
                                } catch (u) {
                                    n.push(tW.collectionWriteFailed)
                                }
                            }
                            return [2, n]
                        })
                    })
                }
                ,
                t.prototype.remove = function(t) {
                    return G(this, void 0, void 0, function() {
                        return B(this, function(n) {
                            return this._mmkv.delete(this._getActualKey(t)),
                            [2, t]
                        })
                    })
                }
                ,
                t.prototype.removeMany = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n, r;
                        return B(this, function(i) {
                            for (n = 0; n < t.length; n++)
                                r = t[n],
                                this._mmkv.delete(this._getActualKey(r));
                            return [2, t]
                        })
                    })
                }
                ,
                t.prototype.clear = function() {
                    return G(this, void 0, void 0, function() {
                        var t;
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return [4, this.getAllKeys()];
                            case 1:
                                return t = n.sent(),
                                [4, this.removeMany(t)];
                            case 2:
                                return n.sent(),
                                [4, this.remove(nU.key)];
                            case 3:
                                return n.sent(),
                                [2]
                            }
                        })
                    })
                }
                ,
                t
            }(), nH = "[NESTDB]", nj = !0, nG = function() {
                function t() {}
                return t.off = function() {
                    nj = !1
                }
                ,
                t.log = function() {
                    for (var t = [], n = 0; n < arguments.length; n++)
                        t[n] = arguments[n];
                    nj && console.log.apply(console, V(["".concat(nH, "[LOG]")], t, !1))
                }
                ,
                t.warning = function() {
                    for (var t = [], n = 0; n < arguments.length; n++)
                        t[n] = arguments[n];
                    nj && console.warn.apply(console, V(["".concat(nH, "[WARNING]")], t, !1))
                }
                ,
                t.error = function() {
                    for (var t = [], n = 0; n < arguments.length; n++)
                        t[n] = arguments[n];
                    nj && console.error.apply(console, V(["".concat(nH, "[ERROR]")], t, !1))
                }
                ,
                t
            }();
            (nB = nI || (nI = {})).INIT = "INIT",
            nB.OPENING = "OPENING",
            nB.OPENED = "OPENED",
            nB.CLOSED = "CLOSED";
            var nB, nV, nq, nz, nK, nW, nY, nQ, nJ = function() {
                function t(t) {
                    var n = t.name
                      , r = t.version
                      , i = t.store
                      , s = t.config;
                    this.name = n,
                    this._version = r,
                    this._state = nI.INIT,
                    this._config = s || new tq({
                        dbname: n
                    }),
                    this._store = i,
                    this._event = {
                        success: t1,
                        error: t1,
                        upgrade: t4
                    },
                    this._collections = new Map,
                    this._globalMutex = new nw("".concat(this.name, ".lock")),
                    this._config.disableLogger && nG.off(),
                    new nd({
                        dbname: n,
                        limit: this._config.cacheLimit
                    })
                }
                return Object.defineProperty(t.prototype, "version", {
                    get: function() {
                        return this._version
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "state", {
                    get: function() {
                        return this._state
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.commitSchema = function(t) {
                    return G(this, void 0, void 0, function() {
                        var n = this;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return this._state !== nI.OPENING ? [3, 2] : [4, Promise.all(t.map(function(t) {
                                    return G(n, void 0, void 0, function() {
                                        var n, r, i, s;
                                        return B(this, function(a) {
                                            switch (a.label) {
                                            case 0:
                                                return n = t.collectionName,
                                                r = t.keyName,
                                                s = void 0 === (i = t.index) ? [] : i,
                                                this._collections.has(n) || this._collections.set(n, new nk({
                                                    dbname: this.name,
                                                    collectionName: n,
                                                    keyName: r,
                                                    keyHash: t.keyHash || null,
                                                    indexes: s,
                                                    store: this._store
                                                })),
                                                [4, this._collections.get(n).init()];
                                            case 1:
                                                return a.sent(),
                                                [2]
                                            }
                                        })
                                    })
                                }))];
                            case 1:
                                return r.sent(),
                                [3, 3];
                            case 2:
                                throw tW.databaseSchemaNotOnUpgrade;
                            case 3:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.open = function() {
                    var t;
                    return G(this, void 0, void 0, function() {
                        var n, r, i, s, a = this;
                        return B(this, function(o) {
                            var l;
                            switch (o.label) {
                            case 0:
                                return [4, this._globalMutex.lock()];
                            case 1:
                                if (o.sent(),
                                this._state === nI.OPENED)
                                    return [3, 15];
                                this._state = nI.OPENING,
                                o.label = 2;
                            case 2:
                                return o.trys.push([2, 5, , 15]),
                                [4, this._store.init(this.name)];
                            case 3:
                                return o.sent(),
                                l = this.name,
                                n = "".concat(nn(l), ".metadata"),
                                r = {
                                    version: 0,
                                    collectionNames: []
                                },
                                [4, this._store.get(n)];
                            case 4:
                                return i = null !== (t = o.sent()) && void 0 !== t ? t : r,
                                [2, new Promise(function(t, r) {
                                    var s = function(t) {
                                        i.version < a._version ? a._event.upgrade(i.version, function(r) {
                                            return G(a, void 0, void 0, function() {
                                                return B(this, function(s) {
                                                    switch (s.label) {
                                                    case 0:
                                                        if (r)
                                                            return [3, 5];
                                                        i.version++,
                                                        i.collectionNames = Array.from(this._collections.keys()),
                                                        s.label = 1;
                                                    case 1:
                                                        return s.trys.push([1, 3, , 4]),
                                                        [4, this._store.set({
                                                            key: n,
                                                            value: i,
                                                            generation: this._version
                                                        })];
                                                    case 2:
                                                        return s.sent(),
                                                        t({
                                                            continued: !0
                                                        }),
                                                        [3, 4];
                                                    case 3:
                                                        return t({
                                                            continued: !1,
                                                            err: s.sent()
                                                        }),
                                                        [3, 4];
                                                    case 4:
                                                        return [3, 6];
                                                    case 5:
                                                        t({
                                                            continued: !1,
                                                            err: r
                                                        }),
                                                        s.label = 6;
                                                    case 6:
                                                        return [2]
                                                    }
                                                })
                                            })
                                        }) : t({
                                            continued: !1
                                        })
                                    }
                                      , o = function(n) {
                                        var l = n.continued
                                          , u = n.err
                                          , c = void 0 === u ? null : u;
                                        if (void 0 !== l && l)
                                            setTimeout(function() {
                                                return s(o)
                                            }, 10);
                                        else if (c)
                                            nG.error(c.message),
                                            a._globalMutex.unlock(),
                                            a._event.error(c),
                                            r(c);
                                        else {
                                            var d = [];
                                            i.collectionNames.forEach(function(t) {
                                                a._collections.has(t) || d.push(G(a, void 0, void 0, function() {
                                                    var n, r;
                                                    return B(this, function(i) {
                                                        switch (i.label) {
                                                        case 0:
                                                            return [4, nk.metadataOf(this.name, t, this._store)];
                                                        case 1:
                                                            return (n = i.sent()) ? (r = new nk({
                                                                dbname: this.name,
                                                                collectionName: t,
                                                                keyName: n.keyName,
                                                                indexes: n.indexes,
                                                                store: this._store
                                                            }),
                                                            this._collections.set(t, r),
                                                            [4, r.init()]) : [3, 3];
                                                        case 2:
                                                            i.sent(),
                                                            i.label = 3;
                                                        case 3:
                                                            return [2]
                                                        }
                                                    })
                                                }))
                                            }),
                                            Promise.all(d).then(function() {
                                                a._state = nI.OPENED,
                                                a._globalMutex.unlock(),
                                                a._event.success(),
                                                t()
                                            }).catch(function(t) {
                                                nG.error(t.message),
                                                a._globalMutex.unlock(),
                                                a._event.error(t),
                                                r(t)
                                            })
                                        }
                                    };
                                    s(o)
                                }
                                )];
                            case 5:
                                switch ((s = o.sent()).code) {
                                case tB.STORE_NOT_AVAILABLE_IN_PRIVATE_BROWSING:
                                    return [3, 6];
                                case tB.STORE_NOT_AVAILABLE:
                                    return [3, 8];
                                case tB.STORE_ENCRYPTION_INVALID:
                                    return [3, 10]
                                }
                                return [3, 13];
                            case 6:
                                return nG.warning("Access to the local storage is not allowed in private browsing. Switched to MemoryStore automatically."),
                                this._store = new nP({}),
                                this._globalMutex.unlock(),
                                this._event.error(s),
                                [4, this.open()];
                            case 7:
                            case 9:
                            case 12:
                                return o.sent(),
                                [3, 14];
                            case 8:
                                return nG.warning("IndexedDB is not available in this environment. Switched to MemoryStore automatically. Consider using other store to save data persistently (e.g. AsyncStorage)."),
                                this._store = new nP({}),
                                this._globalMutex.unlock(),
                                this._event.error(s),
                                [4, this.open()];
                            case 10:
                                return nG.warning("Encryption algorithm has changed. Stored data would be cleared."),
                                [4, this._store.clear()];
                            case 11:
                                return o.sent(),
                                this._globalMutex.unlock(),
                                this._event.error(s),
                                [4, this.open()];
                            case 13:
                                throw nG.error(s.message),
                                this._globalMutex.unlock(),
                                this._event.error(s),
                                s;
                            case 14:
                                return [3, 15];
                            case 15:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.close = function() {
                    this._state = nI.CLOSED,
                    this._collections.forEach(function(t) {
                        return t.close()
                    })
                }
                ,
                t.prototype.reset = function() {
                    return G(this, void 0, void 0, function() {
                        var t, n = this;
                        return B(this, function(r) {
                            switch (r.label) {
                            case 0:
                                return (t = nd.get(this.name)) && t.clearByCondition(function(t) {
                                    return t.key.startsWith(nn(n.name))
                                }),
                                [4, this._store.clear()];
                            case 1:
                                return r.sent(),
                                [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.on = function(t, n) {
                    this._event[t] = n
                }
                ,
                t.prototype.off = function(t) {
                    "function" == typeof this._event[t] && ("upgrade" === t ? this._event[t] = t4 : this._event[t] = t1)
                }
                ,
                t.prototype.collection = function(t) {
                    return this._collections.get(t) || null
                }
                ,
                t
            }(), nZ = function() {
                function t() {}
                return t.create = function() {
                    return "".concat(Math.floor(1e5 * Math.random()), "-").concat((new Date).getTime())
                }
                ,
                t
            }();
            (l = nV || (nV = {})).AND = "AND",
            l.OR = "OR",
            (u = nq || (nq = {})).MEMBER_NICKNAME = "member_nickname",
            u.CHANNEL_NAME = "channel_name",
            (c = nz || (nz = {})).ALL = "all",
            c.JOINED = "joined_only",
            c.INVITED = "invited_only",
            c.INVITED_BY_FRIEND = "invited_by_friend",
            c.INVITED_BY_NON_FRIEND = "invited_by_non_friend",
            (d = nK || (nK = {})).ALL = "all",
            d.SUPER = "super",
            d.NON_SUPER = "nonsuper",
            (h = nW || (nW = {})).ALL = "all",
            h.PUBLIC = "public",
            h.PRIVATE = "private",
            (f = nY || (nY = {})).ALL = "all",
            f.UNREAD_MESSAGE = "unread_message",
            (p = nQ || (nQ = {})).ALL = "all",
            p.UNHIDDEN = "unhidden_only",
            p.HIDDEN = "hidden_only",
            p.HIDDEN_ALLOW_AUTO_UNHIDE = "hidden_allow_auto_unhide",
            p.HIDDEN_PREVENT_AUTO_UNHIDE = "hidden_prevent_auto_unhide";
            var n$ = function() {
                function t() {
                    this._iid = null,
                    this._searchFilter = {},
                    this._userIdsFilter = {
                        userIds: [],
                        includeMode: !0,
                        queryType: nV.AND
                    },
                    this.includeEmpty = !1,
                    this.nicknameContainsFilter = "",
                    this.nicknameStartsWithFilter = "",
                    this.nicknameExactMatchFilter = "",
                    this.channelNameContainsFilter = "",
                    this.memberStateFilter = nz.ALL,
                    this.customTypesFilter = [],
                    this.channelUrlsFilter = [],
                    this.superChannelFilter = nK.ALL,
                    this.publicChannelFilter = nW.ALL,
                    this.customTypeStartsWithFilter = null,
                    this.unreadChannelFilter = nY.ALL,
                    this.hiddenChannelFilter = nQ.UNHIDDEN,
                    this.includeFrozen = !0
                }
                return Object.defineProperty(t.prototype, "searchFilter", {
                    get: function() {
                        return this._searchFilter
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype._isFriend = function(t) {
                    return !!t.friendDiscoveryKey || !!t.friendName
                }
                ,
                Object.defineProperty(t.prototype, "iid", {
                    set: function(t) {
                        this._iid = t
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.setSearchFilter = function(t, n) {
                    Array.isArray(t) && 0 !== t.length && "string" == typeof n && n && (this._searchFilter = {
                        searchQuery: n,
                        searchFields: t
                    })
                }
                ,
                Object.defineProperty(t.prototype, "userIdsFilter", {
                    get: function() {
                        return this._userIdsFilter
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype.setUserIdsFilter = function(t, n, r) {
                    void 0 === r && (r = nV.AND),
                    this._userIdsFilter = {
                        userIds: t,
                        includeMode: n,
                        queryType: r
                    }
                }
                ,
                t.prototype.clone = function() {
                    var n = new t;
                    n.setSearchFilter(this.searchFilter.searchFields, this.searchFilter.searchQuery),
                    n.setUserIdsFilter(this.userIdsFilter.userIds, this.userIdsFilter.includeMode, this.userIdsFilter.queryType);
                    var r = JSON.parse(JSON.stringify(this));
                    return Object.keys(r).forEach(function(t) {
                        n[t] = r[t]
                    }),
                    n
                }
                ,
                t.prototype.match = function(t) {
                    var n = this._searchFilter
                      , r = n.searchQuery
                      , i = n.searchFields;
                    if (r && i && i.length > 0 && !i.some(function(n) {
                        switch (n) {
                        case nq.CHANNEL_NAME:
                            return t.name.toLowerCase().includes(r.toLowerCase());
                        case nq.MEMBER_NICKNAME:
                            return t.members.some(function(t) {
                                return t.nickname.toLowerCase().includes(r.toLowerCase())
                            });
                        default:
                            return !0
                        }
                    }))
                        return !1;
                    var s = this._userIdsFilter
                      , a = s.includeMode
                      , o = s.queryType
                      , l = s.userIds
                      , u = x.get(this._iid).get("currentUserId")
                      , c = t.members.map(function(t) {
                        return t.userId
                    });
                    if (a) {
                        if (l.length > 0)
                            switch (o) {
                            case nV.AND:
                                if (l.some(function(t) {
                                    return !c.includes(t)
                                }))
                                    return !1;
                                break;
                            case nV.OR:
                                if (l.every(function(t) {
                                    return !c.includes(t)
                                }))
                                    return !1
                            }
                    } else if (l.includes(u) || l.push(u),
                    t.members.length > l.length || !function(t, n) {
                        if (t === n)
                            return !0;
                        if (null == t || null == n || t.length !== n.length)
                            return !1;
                        for (var r = V([], t, !0).sort(), i = V([], n, !0).sort(), s = 0; s < r.length; ++s)
                            if (r[s] !== i[s])
                                return !1;
                        return !0
                    }(l, c))
                        return !1;
                    if (!this.includeEmpty && !t.lastMessage || !this.includeFrozen && t.isFrozen || this.customTypesFilter.length > 0 && !this.customTypesFilter.includes(t.customType) || this.customTypeStartsWithFilter && !RegExp("^".concat(this.customTypeStartsWithFilter)).test(t.customType) || this.channelNameContainsFilter && !t.name.toLowerCase().includes(this.channelNameContainsFilter.toLowerCase()))
                        return !1;
                    if (this.nicknameContainsFilter) {
                        var d = this.nicknameContainsFilter.toLowerCase();
                        if (!t.members.some(function(t) {
                            return t.userId !== u && t.nickname.toLowerCase().includes(d)
                        }))
                            return !1
                    }
                    if (this.nicknameStartsWithFilter) {
                        var h = this.nicknameStartsWithFilter.toLowerCase();
                        if (!t.members.some(function(t) {
                            return t.userId !== u && t.nickname.toLowerCase().startsWith(h)
                        }))
                            return !1
                    }
                    if (this.nicknameExactMatchFilter) {
                        var f = this.nicknameExactMatchFilter.toLowerCase();
                        if (!t.members.some(function(t) {
                            return t.userId !== u && t.nickname.toLowerCase() !== f
                        }))
                            return !1
                    }
                    if (this.channelUrlsFilter.length > 0 && !this.channelUrlsFilter.includes(t.url))
                        return !1;
                    if (this.memberStateFilter)
                        switch (this.memberStateFilter) {
                        case nz.JOINED:
                            if ("joined" !== t.myMemberState)
                                return !1;
                            break;
                        case nz.INVITED:
                            if ("invited" !== t.myMemberState)
                                return !1;
                            break;
                        case nz.INVITED_BY_FRIEND:
                            if ("invited" !== t.myMemberState || !this._isFriend(t.inviter))
                                return !1;
                            break;
                        case nz.INVITED_BY_NON_FRIEND:
                            if ("invited" !== t.myMemberState || this._isFriend(t.inviter))
                                return !1
                        }
                    if (this.hiddenChannelFilter)
                        switch (this.hiddenChannelFilter) {
                        case nQ.UNHIDDEN:
                            if (t.isHidden || "unhidden" !== t.hiddenState)
                                return !1;
                            break;
                        case nQ.HIDDEN:
                            if (!t.isHidden)
                                return !1;
                            break;
                        case nQ.HIDDEN_ALLOW_AUTO_UNHIDE:
                            if (!t.isHidden || "hidden_allow_auto_unhide" !== t.hiddenState)
                                return !1;
                            break;
                        case nQ.HIDDEN_PREVENT_AUTO_UNHIDE:
                            if (!t.isHidden || "hidden_prevent_auto_unhide" !== t.hiddenState)
                                return !1
                        }
                    if (this.unreadChannelFilter && this.unreadChannelFilter === nY.UNREAD_MESSAGE && 0 === t.unreadMessageCount)
                        return !1;
                    if (this.publicChannelFilter)
                        switch (this.publicChannelFilter) {
                        case nW.PUBLIC:
                            if (!t.isPublic || "none" === t.myMemberState)
                                return !1;
                            break;
                        case nW.PRIVATE:
                            if (t.isPublic)
                                return !1
                        }
                    if (this.superChannelFilter)
                        switch (this.superChannelFilter) {
                        case nK.SUPER:
                            if (!t.isSuper)
                                return !1;
                            break;
                        case nK.NON_SUPER:
                            if (t.isSuper)
                                return !1
                        }
                    return !0
                }
                ,
                t.QueryType = nV,
                t.SearchField = nq,
                t.MemberStateFilter = nz,
                t.SuperChannelFilter = nK,
                t.PublicChannelFilter = nW,
                t.UnreadChannelFilter = nY,
                t.HiddenChannelFilter = nQ,
                t
            }()
              , nX = function() {
                function t(t) {
                    var n = t.iid;
                    this._iid = n,
                    this._filter = new n$,
                    this._filter.iid = this._iid,
                    this._order = eB.LATEST_LAST_MESSAGE,
                    this._limit = 20
                }
                return t.prototype.setFilter = function(t) {
                    return this._filter = t.clone(),
                    this._filter.iid = this._iid,
                    this
                }
                ,
                t.prototype.setOrder = function(t) {
                    return this._order = t,
                    this
                }
                ,
                t.prototype.setLimit = function(t) {
                    return this._limit = t,
                    this
                }
                ,
                t.prototype.build = function() {
                    return new e8({
                        iid: this._iid,
                        filter: this._filter,
                        order: this._order,
                        limit: this._limit
                    })
                }
                ,
                t
            }()
              , n0 = function() {
                function t(t) {
                    var n = t.iid
                      , r = t.channel;
                    this._iid = n,
                    this._channel = r,
                    this._startingPoint = Date.now(),
                    this._filter = new te,
                    this._limit = 100
                }
                return t.prototype.setFilter = function(t) {
                    return this._filter = t.clone(),
                    this
                }
                ,
                t.prototype.setStartingPoint = function(t) {
                    return this._startingPoint = t,
                    this
                }
                ,
                t.prototype.setLimit = function(t) {
                    return this._limit = t,
                    this
                }
                ,
                t.prototype.build = function() {
                    return new tk({
                        iid: this._iid,
                        channel: this._channel,
                        startingPoint: this._startingPoint,
                        filter: this._filter,
                        limit: this._limit
                    })
                }
                ,
                t
            }()
              , n1 = {}
              , n2 = {}
              , n3 = new WeakMap
              , n4 = new WeakMap
              , n5 = new WeakMap
              , n6 = function(t) {
                A(r, t);
                var n = O(r);
                function r(t) {
                    var i;
                    return b(this, r),
                    (i = n.call(this, t)).channelType = tP.CHANNEL_TYPE_GROUP,
                    i.isDistinct = !1,
                    i.isSuper = !1,
                    i.isBroadcast = !1,
                    i.isPublic = !1,
                    i.unreadMessageCount = 0,
                    i.inviter = null,
                    i.members = [],
                    i.memberMap = {},
                    i.lastMessage = null,
                    i.memberCount = 0,
                    i.joinedMemberCount = 0,
                    i.cachedReadReceiptStatus = {},
                    i.cachedDeliveryReceiptStatus = null,
                    i.myPushTriggerOption = r.PushTriggerOption.DEFAULT,
                    i.isPushEnabled,
                    i.isHidden = !1,
                    i.hiddenState = r.HiddenState.UNHIDDEN,
                    i.isDiscoverable = !0,
                    i.myLastRead = 0,
                    i.messageSurvivalSeconds = -1,
                    i.invitedAt = 0,
                    i.joinedAt = 0,
                    i._messageOffsetTimestamp = 0,
                    i._cachedLastDeliveredReceipt = {
                        sentAt: 0,
                        timeout: null
                    },
                    n3.set(I(i), {}),
                    n4.set(I(i), {
                        start: 0,
                        end: 0
                    }),
                    n5.set(I(i), 0),
                    t && i._update(t),
                    i
                }
                return S(r, [{
                    key: "messageOffsetTimestamp",
                    get: function() {
                        return this._messageOffsetTimestamp
                    }
                }, {
                    key: "createMessageCollection",
                    value: function() {
                        return new n0({
                            iid: this._iid,
                            channel: this
                        })
                    }
                }, {
                    key: "_setGroupChannelUnreadCount",
                    value: function(t, n) {
                        try {
                            if ("number" == typeof t && t >= 0) {
                                if ("all" === this.myCountPreference || "unread_message_count_only" === this.myCountPreference) {
                                    if (this.isSuper || this.isBroadcast) {
                                        var r = x.get(this._iid).container.maxUnreadCountOfSuperGroupChannel;
                                        this.unreadMessageCount = t >= r ? r : t
                                    } else
                                        this.unreadMessageCount = t
                                } else
                                    this.unreadMessageCount = 0
                            }
                            "number" == typeof n && n >= 0 && ("all" === this.myCountPreference || "unread_mention_count_only" === this.myCountPreference ? this.unreadMentionCount = n : this.unreadMentionCount = 0)
                        } catch (i) {}
                    }
                }, {
                    key: "_update",
                    value: function(t) {
                        var n = this
                          , r = Y.get(this._iid)
                          , i = r.BaseChannel
                          , s = r.GroupChannel
                          , a = r.User
                          , o = r.Member;
                        if (this.isAccessCodeRequired = !!t.is_access_code_required && t.is_access_code_required,
                        this.isDistinct = !!t.is_distinct && t.is_distinct,
                        this.isPushEnabled = !!t.is_push_enabled && t.is_push_enabled,
                        this.isHidden = !!t.hasOwnProperty("is_hidden") && t.is_hidden,
                        this.myPushTriggerOption = t.push_trigger_option ? t.push_trigger_option : s.PushTriggerOption.DEFAULT,
                        this.myCountPreference = t.hasOwnProperty("count_preference") ? t.count_preference : s.CountPreference.ALL,
                        this.unreadMessageCount = 0,
                        this.unreadMentionCount = 0,
                        this._setGroupChannelUnreadCount(parseInt(t.unread_message_count), parseInt(t.unread_mention_count)),
                        t.hasOwnProperty("read_receipt") && (this.cachedReadReceiptStatus = {},
                        Object.keys(t.read_receipt).forEach(function(r) {
                            var i = t.read_receipt[r];
                            n.updateReadReceipt(r, parseInt(i))
                        })),
                        t.hasOwnProperty("delivery_receipt") && "object" === E(t.delivery_receipt) && null !== t.delivery_receipt && (this.cachedDeliveryReceiptStatus || (this.cachedDeliveryReceiptStatus = {}),
                        Object.keys(t.delivery_receipt).forEach(function(r) {
                            var i = t.delivery_receipt[r];
                            n.updateDeliveryReceipt(r, parseInt(i))
                        })),
                        t.hasOwnProperty("user_last_read") && "number" == typeof t.user_last_read ? this.myLastRead = t.user_last_read : this.myLastRead = 0,
                        t.hasOwnProperty("members")) {
                            this.members = [],
                            this.memberMap = {};
                            for (var l = 0; l < t.members.length; l++) {
                                var u = new o(t.members[l]);
                                this.members.push(u),
                                this.memberMap[u.userId] = u
                            }
                        }
                        this.myMemberState = t.member_state || "none",
                        this.myRole = t.my_role || s.Role.NONE,
                        t.hasOwnProperty("is_muted") ? "string" == typeof t.is_muted ? this.myMutedState = t.is_muted : "boolean" == typeof t.is_muted ? this.myMutedState = t.is_muted ? "muted" : "unmuted" : this.myMutedState = "unmuted" : this.myMutedState = "unmuted",
                        t.hasOwnProperty("member_count") && (this.memberCount = parseInt(t.member_count)),
                        t.hasOwnProperty("joined_member_count") && (this.joinedMemberCount = parseInt(t.joined_member_count)),
                        t.hasOwnProperty("last_message") && "object" === E(t.last_message) && t.last_message ? t.last_message instanceof tp ? this.lastMessage = t.last_message : this.lastMessage = i.buildMessage(t.last_message, this) : this.lastMessage = null,
                        t.hasOwnProperty("inviter") && null !== t.inviter && "object" === E(t.inviter) && Object.keys(t.inviter).length > 0 ? this.inviter = new a(t.inviter) : this.inviter = null,
                        this.invitedAt = t.invited_at || 0,
                        this.joinedAt = t.joined_ts || 0,
                        t.hasOwnProperty("is_super") && "boolean" == typeof t.is_super ? this.isSuper = t.is_super : this.isSuper = !1,
                        t.hasOwnProperty("is_broadcast") && "boolean" == typeof t.is_broadcast ? this.isBroadcast = t.is_broadcast : this.isBroadcast = !1,
                        t.hasOwnProperty("is_public") && "boolean" == typeof t.is_public ? this.isPublic = t.is_public : this.isPublic = !1,
                        t.hasOwnProperty("hidden_state") ? this.hiddenState = t.hidden_state : this.hiddenState = s.HiddenState.UNHIDDEN,
                        t.hasOwnProperty("is_discoverable") && "boolean" == typeof t.is_discoverable ? this.isDiscoverable = t.is_discoverable : this.isDiscoverable = this.isPublic,
                        t.hasOwnProperty("ts_message_offset") && (this._messageOffsetTimestamp = t.ts_message_offset),
                        t.hasOwnProperty("message_survival_seconds") && "number" == typeof t.message_survival_seconds && (this.messageSurvivalSeconds = t.message_survival_seconds)
                    }
                }, {
                    key: "addMember",
                    value: function(t) {
                        var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                        if (!this.isSuper && !this.isBroadcast) {
                            var r = Y.get(this._iid).Member
                              , i = this.removeMember(t);
                            i && i.state === r.JOINED && (t.state = r.JOINED),
                            this.memberMap[t.userId] = t,
                            this.members.push(t),
                            this.memberCount++,
                            this.updateReadReceipt(t.userId, n),
                            this.updateDeliveryReceipt(t.userId, n)
                        }
                    }
                }, {
                    key: "removeMember",
                    value: function(t) {
                        var n = null;
                        if (!this.isSuper && !this.isBroadcast && this.memberMap.hasOwnProperty(t.userId)) {
                            delete this.memberMap[t.userId];
                            for (var r = 0; r < this.members.length; r++) {
                                var i = this.members[r];
                                if (i.userId === t.userId) {
                                    n = i,
                                    this.members.splice(r, 1);
                                    break
                                }
                            }
                            this.memberCount--
                        }
                        return n
                    }
                }, {
                    key: "parse",
                    value: function(t) {
                        this._update(t)
                    }
                }, {
                    key: "update",
                    value: function(t) {
                        this.__update(t),
                        this._update(t)
                    }
                }, {
                    key: "isIdentical",
                    value: function(t) {
                        return t && this.url === t.url
                    }
                }, {
                    key: "isEqual",
                    value: function(t) {
                        return ef.deepEqual(this, t)
                    }
                }, {
                    key: "createMemberListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).MemberListQuery(this.url)
                    }
                }, {
                    key: "createBannedUserListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).BannedUserListQuery({
                            channelUrl: this.url,
                            isOpenChannel: this.isOpenChannel()
                        })
                    }
                }, {
                    key: "refresh",
                    value: function(t) {
                        return Y.get(this._iid).GroupChannel.getChannelWithoutCache(this.url, t)
                    }
                }, {
                    key: "updateChannel",
                    value: function() {
                        var t = this
                          , n = eI.toArray(arguments)
                          , r = void 0;
                        "function" == typeof n[n.length - 1] && (r = n.pop());
                        var i = Y.get(this._iid)
                          , s = i.GroupChannel
                          , a = i.GroupChannelParams;
                        if (n[0]instanceof a && 1 === n.length)
                            return eg(this._iid, function(r) {
                                var i = n[0];
                                (i.channelUrl = t.url,
                                i._validate()) ? x.get(t._iid).container.apiClient.updateGroupChannel(v(v({}, i), {}, {
                                    operatorUserIds: i.operatorUserIds
                                }), function(t, n) {
                                    var i = null;
                                    t || (i = s.upsert(n)),
                                    r(t, i)
                                }) : r(eI.error, null)
                            }, r);
                        if (3 === n.length) {
                            var o = new a;
                            return o.channelUrl = this.url,
                            o.name = n[0],
                            "string" == typeof n[1] ? o.coverUrl = n[1] : o.coverImage = n[1],
                            o.data = n[2],
                            r ? this.updateChannel(o, r) : this.updateChannel(o)
                        }
                        if (4 === n.length) {
                            var l = new a;
                            return l.channelUrl = this.url,
                            l.isDistinct = n[0],
                            l.name = n[1],
                            "string" == typeof n[1] ? l.coverUrl = n[2] : l.coverImage = n[2],
                            l.data = n[3],
                            r ? this.updateChannel(l, r) : this.updateChannel(l)
                        }
                        if (5 === n.length) {
                            var u = new a;
                            return u.channelUrl = this.url,
                            u.isDistinct = n[0],
                            u.name = n[1],
                            "string" == typeof n[2] ? u.coverUrl = n[2] : u.coverImage = n[2],
                            u.data = n[3],
                            u.customType = n[4],
                            r ? this.updateChannel(u, r) : this.updateChannel(u)
                        }
                        return eg(this._iid, function(t) {
                            return t(eI.error, null)
                        }, r)
                    }
                }, {
                    key: "invite",
                    value: function(t, n) {
                        var r = null
                          , i = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return t.length > 0 && t.every(function(t) {
                                    return !!t.userId && "string" == typeof t.userId
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , s = k(i, 3);
                        return r = s[0],
                        t = s[1],
                        n = s[2],
                        r ? eg(this._iid, function(t) {
                            return t(eI.error, null)
                        }, n) : this.inviteWithUserIds(t.map(function(t) {
                            return t.userId
                        }), n)
                    }
                }, {
                    key: "inviteWithUserIds",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return t.every(function(t) {
                                    return "string" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.inviteToGroupChannel({
                                channelUrl: r.url,
                                userIds: t
                            }, function(t, i) {
                                var s = null;
                                t || (s = Y.get(r._iid).GroupChannel.upsert(i)),
                                n(t, s)
                            })
                        }, n)
                    }
                }, {
                    key: "acceptInvitation",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string",
                            optional: !0,
                            defaultValue: null
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.acceptInvitation({
                                channelUrl: r.url,
                                accessCode: t
                            }, function(t, i) {
                                var s = null;
                                t || ((s = Y.get(r._iid).GroupChannel.upsert(i)).myMemberState = "joined"),
                                n(t, s)
                            })
                        }, n)
                    }
                }, {
                    key: "declineInvitation",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.declineInvitation({
                                channelUrl: n.url
                            }, function(r, i) {
                                var s = null;
                                if (!r) {
                                    var a = Y.get(n._iid).GroupChannel;
                                    (s = a.upsert(i)).myMemberState = "none",
                                    n.isPublic || a.removeCachedChannel(n.url)
                                }
                                t(r, s)
                            })
                        }, t)
                    }
                }, {
                    key: "join",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string",
                            optional: !0,
                            defaultValue: null
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.joinGroupChannel({
                                channelUrl: r.url,
                                accessCode: t
                            }, function(t, i) {
                                var s = null;
                                t || ((s = Y.get(r._iid).GroupChannel.upsert(i)).myMemberState = "joined"),
                                n(t, s)
                            })
                        }, n)
                    }
                }, {
                    key: "leave",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.leaveGroupChannel({
                                channelUrl: n.url
                            }, function(n, r) {
                                return t(n, null)
                            })
                        }, t)
                    }
                }, {
                    key: "muteUser",
                    value: function(t, n, r, i) {
                        return this.muteUserWithUserId(t ? t.userId : null, n, r, i)
                    }
                }, {
                    key: "muteUserWithUserId",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = null
                          , o = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "number",
                            optional: !0,
                            defaultValue: -1,
                            constraint: function(t) {
                                return t >= -1
                            }
                        }), new eI({
                            type: "string",
                            optional: !0,
                            defaultValue: ""
                        }), new eI({
                            type: "callback"
                        })])
                          , l = k(o, 5);
                        return a = l[0],
                        t = l[1],
                        n = l[2],
                        r = l[3],
                        i = l[4],
                        eg(this._iid, function(i) {
                            a ? i(a, null) : x.get(s._iid).container.apiClient.muteUser({
                                channelUrl: s.url,
                                userId: t,
                                description: r,
                                seconds: n,
                                isGroupChannel: !0
                            }, function(t, n) {
                                i(t, null)
                            })
                        }, i)
                    }
                }, {
                    key: "unmuteUser",
                    value: function(t, n) {
                        return this.unmuteUserWithUserId(t ? t.userId : null, n)
                    }
                }, {
                    key: "unmuteUserWithUserId",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.unmuteUser({
                                channelUrl: r.url,
                                userId: t,
                                isGroupChannel: !0
                            }, function(t, r) {
                                n(t, null)
                            })
                        }, n)
                    }
                }, {
                    key: "banUser",
                    value: function(t, n, r, i) {
                        return this.banUserWithUserId(t ? t.userId : null, n, r, i)
                    }
                }, {
                    key: "banUserWithUserId",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = null
                          , o = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "number",
                            optional: !0,
                            defaultValue: -1,
                            constraint: function(t) {
                                return t >= -1
                            }
                        }), new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , l = k(o, 5);
                        return a = l[0],
                        t = l[1],
                        n = l[2],
                        r = l[3],
                        i = l[4],
                        eg(this._iid, function(i) {
                            a ? i(a, null) : x.get(s._iid).container.apiClient.banUser({
                                channelUrl: s.url,
                                userId: t,
                                description: r,
                                seconds: n,
                                isGroupChannel: !0
                            }, function(t, n) {
                                i(t, null)
                            })
                        }, i)
                    }
                }, {
                    key: "unbanUser",
                    value: function(t, n) {
                        return this.unbanUserWithUserId(t ? t.userId : null, n)
                    }
                }, {
                    key: "unbanUserWithUserId",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.unbanUser({
                                channelUrl: r.url,
                                userId: t,
                                isGroupChannel: !0
                            }, function(t, r) {
                                n(t, null)
                            })
                        }, n)
                    }
                }, {
                    key: "updateJoinedMemberCount",
                    value: function() {
                        if (!this.isSuper && !this.isBroadcast) {
                            var t = Y.get(this._iid).Member;
                            this.joinedMemberCount = this.members.filter(function(n) {
                                return n.state === t.JOINED
                            }).length
                        }
                    }
                }, {
                    key: "setLatestMemberCount",
                    value: function(t, n, r) {
                        var i = !1;
                        return "number" == typeof t && "number" == typeof n && "number" == typeof r && r >= n5.get(this) && (n5.set(this, r),
                        i = n !== this.joinedMemberCount || t !== this.memberCount,
                        this.memberCount = t,
                        this.joinedMemberCount = n),
                        i
                    }
                }, {
                    key: "hide",
                    value: function(t, n, r) {
                        var i = this
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: "boolean",
                            optional: !0,
                            defaultValue: !1
                        }), new eI({
                            type: "boolean",
                            optional: !0,
                            defaultValue: !0
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        return s = o[0],
                        t = o[1],
                        n = o[2],
                        r = o[3],
                        eg(this._iid, function(r) {
                            s ? r(s, null) : x.get(i._iid).container.apiClient.hideGroupChannel({
                                channelUrl: i.url,
                                hidePreviousMessages: t,
                                allowAutoUnhide: n
                            }, function(s, a) {
                                if (!s) {
                                    var o = Y.get(i._iid).GroupChannel;
                                    i.isHidden = !0,
                                    i.hiddenState = n ? o.HiddenState.HIDDEN_ALLOW_AUTO_UNHIDE : o.HiddenState.HIDDEN_PREVENT_AUTO_UNHIDE,
                                    t && i._setGroupChannelUnreadCount(0, 0),
                                    a.hasOwnProperty("ts_message_offset") && (i._messageOffsetTimestamp = a.ts_message_offset),
                                    o.cachedChannels[i.url] = i
                                }
                                r(s, a)
                            })
                        }, r)
                    }
                }, {
                    key: "unhide",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.unhideGroupChannel({
                                channelUrl: n.url
                            }, function(r, i) {
                                if (!r) {
                                    var s = Y.get(n._iid).GroupChannel;
                                    n.isHidden = !1,
                                    n.hiddenState = s.HiddenState.UNHIDDEN,
                                    s.cachedChannels[n.url] = n
                                }
                                t(r, i)
                            })
                        }, t)
                    }
                }, {
                    key: "freeze",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.freeze({
                                channelUrl: n.url,
                                isGroupChannel: !0,
                                freezing: !0
                            }, function(r, i) {
                                if (!r) {
                                    var s = Y.get(n._iid).GroupChannel;
                                    n.isFrozen = !0,
                                    s.cachedChannels[n.url] = n
                                }
                                t(r, null)
                            })
                        }, t)
                    }
                }, {
                    key: "unfreeze",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.freeze({
                                channelUrl: n.url,
                                isGroupChannel: !0,
                                freezing: !1
                            }, function(r, i) {
                                if (!r) {
                                    var s = Y.get(n._iid).GroupChannel;
                                    n.isFrozen = !1,
                                    s.cachedChannels[n.url] = n
                                }
                                t(r, null)
                            })
                        }, t)
                    }
                }, {
                    key: "delete",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.deleteGroupChannel({
                                channelUrl: n.url
                            }, function(r, i) {
                                r || Y.get(n._iid).GroupChannel.removeCachedChannel(n.url),
                                t(r, i)
                            })
                        }, t)
                    }
                }, {
                    key: "markAsRead",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            var r = Y.get(n._iid).Command
                              , i = id.getInstance(n._iid)
                              , s = r.bRead({
                                channelUrl: n.url
                            });
                            i.sendCommand(s, function(r, s) {
                                if (i.getErrorFirstCallback()) {
                                    var a = [r, s];
                                    s = a[0],
                                    r = a[1]
                                }
                                if (s)
                                    t(s, null);
                                else if (i.currentUser) {
                                    var o = e9.of(n._iid)
                                      , l = eN.of(n._iid);
                                    n.updateReadReceipt(i.currentUser.userId, r.getJsonElement().ts);
                                    var u = !1;
                                    (n.unreadMessageCount > 0 || n.unreadMentionCount > 0) && (n._setGroupChannelUnreadCount(0, 0),
                                    Object.keys(i.channelHandlers).forEach(function(t) {
                                        i.channelHandlers[t].onChannelChanged(n)
                                    }),
                                    u = !0),
                                    t(null, null),
                                    o.upsert([n]).then(function() {
                                        u && l.send({
                                            source: ev.EVENT_CHANNEL_CHANGED,
                                            payload: {
                                                channel: n
                                            }
                                        }),
                                        l.send({
                                            source: ev.EVENT_READ_RECEIPT_UPDATED,
                                            payload: {
                                                channel: n
                                            }
                                        })
                                    }).catch(function(t) {
                                        return ei.error(t)
                                    })
                                } else
                                    t(new SendBirdException("Connection should be made first.",SendBirdException.CONNECTION_REQUIRED), null)
                            })
                        }, t)
                    }
                }, {
                    key: "getUnreadMemberCount",
                    value: function(t) {
                        var n = x.get(this._iid)
                          , r = Y.get(this._iid).Member
                          , i = n.container.currentUserId;
                        if (t instanceof tp && !t.isAdminMessage() && i && !this.isSuper && !this.isBroadcast) {
                            for (var s = 0, a = t.createdAt, o = this.members, l = 0; l < o.length; l++) {
                                var u = o[l];
                                i !== u.userId && u.state === r.JOINED && (!t.sender || t.sender.userId !== u.userId) && (this.cachedReadReceiptStatus[u.userId] || 0) < a && s++
                            }
                            return s
                        }
                        return 0
                    }
                }, {
                    key: "getReadReceipt",
                    value: function(t) {
                        return this.getUnreadMemberCount(t)
                    }
                }, {
                    key: "markAsDelivered",
                    value: function() {
                        var t = this
                          , n = id.getInstance(this._iid)
                          , r = n.currentUser ? n.currentUser.userId : null;
                        x.get(this._iid).container.apiClient.markAsDelivered({
                            channelUrl: this.url,
                            userId: r
                        }, function(n, i) {
                            if (n)
                                ei.debug(n);
                            else {
                                var s = i.hasOwnProperty("ts") ? i.ts : 0;
                                t.updateDeliveryReceipt(r, s)
                            }
                        })
                    }
                }, {
                    key: "getUndeliveredMemberCount",
                    value: function(t) {
                        var n = x.get(this._iid)
                          , r = Y.get(this._iid).Member
                          , i = n.container.currentUserId;
                        if (this.cachedDeliveryReceiptStatus && t instanceof tp && !t.isAdminMessage() && i && !this.isSuper && !this.isBroadcast) {
                            var s, a = t.createdAt, o = 0, l = P(this.members);
                            try {
                                for (l.s(); !(s = l.n()).done; ) {
                                    var u = s.value;
                                    i === u.userId || u.state !== r.JOINED || t.sender && t.sender.userId === u.userId || this.cachedDeliveryReceiptStatus[u.userId] < a && o++
                                }
                            } catch (c) {
                                l.e(c)
                            } finally {
                                l.f()
                            }
                            return o
                        }
                        return 0
                    }
                }, {
                    key: "getDeliveryReceipt",
                    value: function(t) {
                        return this.getUndeliveredMemberCount(t)
                    }
                }, {
                    key: "getReadMembers",
                    value: function(t) {
                        var n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
                          , r = id.getInstance(this._iid);
                        if (r.currentUser && !this.isSuper && !this.isBroadcast && t instanceof tp && !t.isAdminMessage()) {
                            for (var i = [], s = 0; s < this.members.length; s++) {
                                var a = this.members[s];
                                (n || a.userId !== r.currentUser.userId && a.userId !== t.sender.userId) && (this.cachedReadReceiptStatus[a.userId] || 0) >= t.createdAt && i.push(a)
                            }
                            return i
                        }
                        return []
                    }
                }, {
                    key: "getUnreadMembers",
                    value: function(t) {
                        var n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]
                          , r = id.getInstance(this._iid);
                        if (r.currentUser && !this.isSuper && !this.isBroadcast && t instanceof tp && !t.isAdminMessage()) {
                            for (var i = [], s = 0; s < this.members.length; s++) {
                                var a = this.members[s];
                                (n || a.userId !== r.currentUser.userId && a.userId !== t.sender.userId) && (this.cachedReadReceiptStatus[a.userId] || 0) < t.createdAt && i.push(a)
                            }
                            return i
                        }
                        return []
                    }
                }, {
                    key: "getReadStatus",
                    value: function() {
                        var t = this
                          , n = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]
                          , r = id.getInstance(this._iid);
                        if (r.currentUser && !this.isSuper && !this.isBroadcast) {
                            for (var i = {}, s = Object.keys(this.cachedReadReceiptStatus), a = 0; a < s.length; a++)
                                (function(a) {
                                    var o = s[a];
                                    if (n || o !== r.currentUser.userId) {
                                        var l = t.cachedReadReceiptStatus[o]
                                          , u = t.members.filter(function(t) {
                                            return t.userId === o
                                        });
                                        i[o] = {
                                            user: u.length > 0 ? u[0] : null,
                                            last_seen_at: parseInt(l)
                                        }
                                    }
                                }
                                )(a);
                            return i
                        }
                        return {}
                    }
                }, {
                    key: "updateReadReceipt",
                    value: function(t, n) {
                        var r = this.cachedReadReceiptStatus[t];
                        if (!r || r < n) {
                            this.cachedReadReceiptStatus[t] = n;
                            var i = id.getInstance(this._iid);
                            i.currentUser && t === i.currentUser.userId && (this.myLastRead = n)
                        }
                    }
                }, {
                    key: "updateDeliveryReceipt",
                    value: function(t, n) {
                        if (this.cachedDeliveryReceiptStatus) {
                            if (this.cachedDeliveryReceiptStatus.hasOwnProperty(t)) {
                                var r = this.cachedDeliveryReceiptStatus[t];
                                (!r || r < n) && (this.cachedDeliveryReceiptStatus[t] = n)
                            } else
                                this.cachedDeliveryReceiptStatus[t] = n
                        }
                    }
                }, {
                    key: "startTyping",
                    value: function() {
                        var t = id.getInstance(this._iid)
                          , n = (new Date).getTime()
                          , r = t.Options.typingIndicatorThrottle;
                        ("number" != typeof r || r < 1e3 || r > 9e3) && (r = 1e3);
                        var i = n4.get(this);
                        if (n - i.start >= r) {
                            i.end = 0,
                            i.start = n;
                            var s = Y.get(this._iid).Command.bTypeStart({
                                channelUrl: this.url,
                                time: i.start
                            });
                            t.sendCommand(s, null)
                        }
                    }
                }, {
                    key: "endTyping",
                    value: function() {
                        var t = id.getInstance(this._iid)
                          , n = (new Date).getTime()
                          , r = t.Options.typingIndicatorThrottle;
                        ("number" != typeof r || r < 1e3 || r > 9e3) && (r = 1e3);
                        var i = n4.get(this);
                        if (n - i.end >= r) {
                            i.start = 0,
                            i.end = n;
                            var s = Y.get(this._iid).Command.bTypeEnd({
                                channelUrl: this.url,
                                time: i.end
                            });
                            t.sendCommand(s, null)
                        }
                    }
                }, {
                    key: "invalidateTypingStatus",
                    value: function() {
                        var t = n3.get(this)
                          , n = (new Date).getTime()
                          , r = !1;
                        return Object.keys(t).forEach(function(i) {
                            n - t[i].ts >= 1e4 && (delete t[i],
                            r = !0)
                        }),
                        r
                    }
                }, {
                    key: "getTypingMembers",
                    value: function() {
                        var t = this
                          , n = n3.get(this)
                          , r = [];
                        return Object.keys(n).forEach(function(n) {
                            var i = t.memberMap[n];
                            i && r.push(i)
                        }),
                        r
                    }
                }, {
                    key: "getTypingUsers",
                    value: function() {
                        var t = n3.get(this)
                          , n = [];
                        return Object.keys(t).forEach(function(r) {
                            var i = t[r].user;
                            n.push(i)
                        }),
                        n
                    }
                }, {
                    key: "updateTypingStatus",
                    value: function(t, n) {
                        var r = n3.get(this);
                        n ? r[t.userId] = {
                            user: t,
                            ts: (new Date).getTime()
                        } : delete r[t.userId]
                    }
                }, {
                    key: "isTyping",
                    value: function() {
                        return 0 !== Object.keys(n3.get(this)).length
                    }
                }, {
                    key: "registerScheduledUserMessage",
                    value: function(t, n) {
                        var r = this
                          , i = Y.get(this._iid)
                          , s = i.ScheduledUserMessage
                          , a = i.ScheduledUserMessageParams
                          , o = null
                          , l = eI.parse(arguments, [new eI({
                            type: a,
                            constraint: function(t) {
                                return "string" == typeof t.message && "string" == typeof t._getScheduleString()
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , u = k(l, 3);
                        return o = u[0],
                        t = u[1],
                        n = u[2],
                        eg(this._iid, function(n) {
                            o ? n(o, null) : x.get(r._iid).container.apiClient.registerScheduledUserMessage({
                                groupChannelParams: t,
                                channelUrl: r.url,
                                isOpenChannel: !1
                            }, function(t, i) {
                                var a = null;
                                if (!t) {
                                    a = new s(i);
                                    var o = id.getInstance(r._iid).currentUser;
                                    o && a._sender && o.userId === a._sender.userId && (o.nickname = a._sender.nickname,
                                    o.plainProfileUrl = a._sender.plainProfileUrl,
                                    o.metaData = a._sender.metaData)
                                }
                                n(t, a)
                            })
                        }, n)
                    }
                }, {
                    key: "getPushPreference",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.getMyPushTriggerOption({
                                channelUrl: n.url
                            }, function(r, i) {
                                var s = null;
                                if (!r) {
                                    try {
                                        s = i.enable
                                    } catch (a) {
                                        s = !1
                                    }
                                    n.isPushEnabled = s
                                }
                                t && t(r, s)
                            })
                        }, t)
                    }
                }, {
                    key: "setPushPreference",
                    value: function(t, n) {
                        var r = this;
                        return eg(this._iid, function(n) {
                            var i = Y.get(r._iid).GroupChannel;
                            x.get(r._iid).container.apiClient.setMyPushTriggerOption({
                                channelUrl: r.url,
                                enable: t
                            }, function(t, s) {
                                t || (r.isPushEnabled = s.enable,
                                r.isPushEnabled || (r.myPushTriggerOption = i.PushTriggerOption.OFF)),
                                n(t, s)
                            })
                        }, n)
                    }
                }, {
                    key: "getMyPushTriggerOption",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.getMyPushTriggerOption({
                                channelUrl: n.url
                            }, function(i, s) {
                                var a = null;
                                if (!i) {
                                    try {
                                        a = s.push_trigger_option || r.PushTriggerOption.DEFAULT
                                    } catch (o) {
                                        ei.debug(o)
                                    }
                                    n.myPushTriggerOption = a
                                }
                                t(i, a)
                            })
                        }, t)
                    }
                }, {
                    key: "setMyPushTriggerOption",
                    value: function(t, n) {
                        var r = this
                          , i = Y.get(this._iid).GroupChannel
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: i.PushTriggerOption
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 3);
                        return s = o[0],
                        t = o[1],
                        n = o[2],
                        eg(this._iid, function(n) {
                            s ? n(s, null) : x.get(r._iid).container.apiClient.setMyPushTriggerOption({
                                channelUrl: r.url,
                                pushTriggerOption: t
                            }, function(t, i) {
                                var s = null;
                                if (!t) {
                                    try {
                                        s = i.push_trigger_option
                                    } catch (a) {
                                        ei.debug(a)
                                    }
                                    r.myPushTriggerOption = s
                                }
                                n(t, s)
                            })
                        }, n)
                    }
                }, {
                    key: "setMyCountPreference",
                    value: function(t, n) {
                        var r = this
                          , i = Y.get(this._iid).GroupChannel
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: i.CountPreference
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 3);
                        return s = o[0],
                        t = o[1],
                        n = o[2],
                        eg(this._iid, function(n) {
                            s ? n(s, null) : x.get(r._iid).container.apiClient.setMyCountPreference({
                                channelUrl: r.url,
                                countPreference: t
                            }, function(t, s) {
                                var a = null;
                                t || (a = r.myCountPreference = s.count_preference,
                                r._setGroupChannelUnreadCount(r.unreadMessageCount, r.unreadMentionCount),
                                i.cachedChannels[r.url] = r),
                                n(t, a)
                            })
                        }, n)
                    }
                }, {
                    key: "resetMyHistory",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.resetMyHistory({
                                channelUrl: n.url
                            }, function(r, i) {
                                if (!r && i.hasOwnProperty("ts_message_offset")) {
                                    var s = Y.get(n._iid).GroupChannel;
                                    n._messageOffsetTimestamp = i.ts_message_offset,
                                    s.cachedChannels[n.url] = n
                                }
                                t(r, i)
                            })
                        }, t)
                    }
                }], [{
                    key: "MemberStateFilter",
                    get: function() {
                        return {
                            ALL: "all",
                            JOINED: "joined_only",
                            INVITED: "invited_only",
                            INVITED_BY_FRIEND: "invited_by_friend",
                            INVITED_BY_NON_FRIEND: "invited_by_non_friend",
                            LEFT: "left"
                        }
                    }
                }, {
                    key: "PushTriggerOption",
                    get: function() {
                        return {
                            DEFAULT: "default",
                            ALL: "all",
                            MENTION_ONLY: "mention_only",
                            OFF: "off"
                        }
                    }
                }, {
                    key: "CountPreference",
                    get: function() {
                        return {
                            ALL: "all",
                            UNREAD_MESSAGE_COUNT_ONLY: "unread_message_count_only",
                            UNREAD_MENTION_COUNT_ONLY: "unread_mention_count_only",
                            OFF: "off"
                        }
                    }
                }, {
                    key: "HiddenState",
                    get: function() {
                        return {
                            UNHIDDEN: "unhidden",
                            HIDDEN_ALLOW_AUTO_UNHIDE: "hidden_allow_auto_unhide",
                            HIDDEN_PREVENT_AUTO_UNHIDE: "hidden_prevent_auto_unhide"
                        }
                    }
                }, {
                    key: "PublicChannelFilter",
                    get: function() {
                        return {
                            ALL: "all",
                            PUBLIC: "public",
                            PRIVATE: "private"
                        }
                    }
                }, {
                    key: "SuperChannelFilter",
                    get: function() {
                        return {
                            ALL: "all",
                            SUPER: "super",
                            NON_SUPER: "nonsuper",
                            BROADCAST_ONLY: "broadcast_only"
                        }
                    }
                }, {
                    key: "UnreadChannelFilter",
                    get: function() {
                        return {
                            ALL: "all",
                            UNREAD_MESSAGE: "unread_message"
                        }
                    }
                }, {
                    key: "HiddenChannelFilter",
                    get: function() {
                        return {
                            ALL: "all",
                            UNHIDDEN: "unhidden_only",
                            HIDDEN: "hidden_only",
                            HIDDEN_ALLOW_AUTO_UNHIDE: "hidden_allow_auto_unhide",
                            HIDDEN_PREVENT_AUTO_UNHIDE: "hidden_prevent_auto_unhide"
                        }
                    }
                }, {
                    key: "Role",
                    get: function() {
                        return {
                            OPERATOR: "operator",
                            NONE: "none"
                        }
                    }
                }, {
                    key: "UnreadItemKey",
                    get: function() {
                        return {
                            GROUP_CHANNEL_UNREAD_MENTION_COUNT: "group_channel_unread_mention_count",
                            NONSUPER_UNREAD_MENTION_COUNT: "non_super_group_channel_unread_mention_count",
                            SUPER_UNREAD_MENTION_COUNT: "super_group_channel_unread_mention_count",
                            GROUP_CHANNEL_UNREAD_MESSAGE_COUNT: "group_channel_unread_message_count",
                            NONSUPER_UNREAD_MESSAGE_COUNT: "non_super_group_channel_unread_message_count",
                            SUPER_UNREAD_MESSAGE_COUNT: "super_group_channel_unread_message_count",
                            GROUP_CHANNEL_INVITATION_COUNT: "group_channel_invitation_count",
                            NONSUPER_INVITATION_COUNT: "non_super_group_channel_invitation_count",
                            SUPER_INVITATION_COUNT: "super_group_channel_invitation_count"
                        }
                    }
                }, {
                    key: "cachedChannels",
                    get: function() {
                        return n1[this._iid] || (n1[this._iid] = {}),
                        n1[this._iid]
                    }
                }, {
                    key: "createGroupChannelCollection",
                    value: function() {
                        return new nX({
                            iid: this._iid
                        })
                    }
                }, {
                    key: "buildFromSerializedData",
                    value: function(t) {
                        var n, r = Y.get(this._iid), i = r.User, s = r.Member, a = r.GroupChannel, o = r.BaseMessage, l = r.UserMessage, u = r.FileMessage, c = r.AdminMessage, d = td.deserialize(t), h = null != (n = d.lastMessage) && "object" === E(n) ? n.messageType === o.MESSAGE_TYPE_USER ? new l(l.objectify(v(v({}, n), {}, {
                            channel: {
                                url: n.channelUrl,
                                channelType: n.channelType
                            },
                            user: n.sender,
                            mentionedUsers: n.mentionedUsers
                        }))) : n.messageType === o.MESSAGE_TYPE_FILE ? new u(u.objectify(v(v({}, n), {}, {
                            channel: {
                                url: n.channelUrl,
                                channelType: n.channelType
                            },
                            user: n.sender,
                            mentionedUsers: n.mentionedUsers
                        }))) : new c(c.objectify(v(v({}, n), {}, {
                            channel: {
                                url: n.channelUrl,
                                channelType: n.channelType
                            },
                            mentionedUsers: n.mentionedUsers
                        }))) : null;
                        return new a({
                            channel_url: d.url,
                            name: d.name,
                            cover_url: d.coverUrl,
                            data: d.data,
                            custom_type: d.customType,
                            invited_at: d.invitedAt,
                            created_at: d.createdAt / 1e3,
                            joined_ts: d.joinedAt,
                            is_access_code_required: d.isAccessCodeRequired,
                            is_distinct: d.isDistinct,
                            is_super: d.isSuper,
                            is_broadcast: d.isBroadcast,
                            is_public: d.isPublic,
                            is_discoverable: d.isDiscoverable,
                            is_hidden: d.isHidden,
                            is_ephemeral: d.isEphemeral,
                            is_muted: d.myMutedState,
                            is_push_enabled: d.isPushEnabled,
                            freeze: d.isFrozen,
                            unread_message_count: d.unreadMessageCount,
                            unread_mention_count: d.unreadMentionCount,
                            push_trigger_option: d.myPushTriggerOption,
                            count_preference: d.myCountPreference,
                            hidden_state: d.hiddenState,
                            member_count: d.memberCount,
                            joined_member_count: d.joinedMemberCount,
                            member_state: d.myMemberState,
                            my_role: d.myRole,
                            user_last_read: d.myLastRead,
                            ts_message_offset: d.messageOffsetTimestamp,
                            message_survival_seconds: d.messageSurvivalSeconds,
                            read_receipt: d.cachedReadReceiptStatus,
                            delivery_receipt: d.cachedDeliveryReceiptStatus,
                            members: d.members.map(function(t) {
                                return s.objectify(v({}, t))
                            }),
                            last_message: h,
                            created_by: null !== d.creator && void 0 !== d.creator && "object" === E(d.creator) ? i.objectify(d.creator) : null,
                            inviter: null !== d.inviter && void 0 !== d.inviter && "object" === E(d.inviter) ? i.objectify(d.inviter) : null,
                            metadata: d.metadata,
                            cached_primary_key: d.cachedPrimaryKey
                        })
                    }
                }, {
                    key: "upsert",
                    value: function(t) {
                        var n = Y.get(this._iid).GroupChannel
                          , r = new n(t);
                        if (n.cachedChannels.hasOwnProperty(r.url)) {
                            if (r.isEphemeral) {
                                var i = n.cachedChannels[r.url];
                                t.last_message = i.lastMessage,
                                t.unread_message_count = i.unreadMessageCount
                            }
                            n.cachedChannels[r.url].update(t)
                        } else
                            n.cachedChannels[r.url] = r;
                        return n.cachedChannels[r.url]
                    }
                }, {
                    key: "removeCachedChannel",
                    value: function(t) {
                        var n = Y.get(this._iid)
                          , r = n.GroupChannel
                          , i = n.FileMessageQueue;
                        r.cachedChannels[t] && delete r.cachedChannels[t],
                        i.delete(t)
                    }
                }, {
                    key: "clearCache",
                    value: function() {
                        n1[this._iid] = {},
                        Y.get(this._iid).FileMessageQueue.clear()
                    }
                }, {
                    key: "getChannel",
                    value: function(t, n) {
                        var r = null
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string",
                            constraint: function(t) {
                                return t.length > 0
                            }
                        }), new eI({
                            type: "string",
                            optional: !0,
                            nullable: !0,
                            defaultValue: null
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 4);
                        if (r = a[0],
                        t = a[1],
                        i = a[2],
                        n = a[3],
                        r)
                            return eg(this._iid, function(t) {
                                t(r, null)
                            }, n);
                        var o = Y.get(this._iid).GroupChannel;
                        return o.cachedChannels[t] ? eg(this._iid, function(n) {
                            n(null, o.cachedChannels[t])
                        }, n) : o.getChannelWithoutCache(t, i, n)
                    }
                }, {
                    key: "getChannelWithoutCache",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: "string",
                            constraint: function(t) {
                                return t.length > 0
                            }
                        }), new eI({
                            type: "string",
                            optional: !0,
                            nullable: !0,
                            defaultValue: null
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        return i = o[0],
                        t = o[1],
                        s = o[2],
                        n = o[3],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.getGroupChannel({
                                channelUrl: t,
                                internalCall: s,
                                showMember: !0
                            }, function(t, i) {
                                var s = null;
                                t || (s = r.upsert(i)),
                                n(t, s)
                            })
                        }, n)
                    }
                }, {
                    key: "createDistinctChannelIfNotExist",
                    value: function(t, n) {
                        var r = this
                          , i = Y.get(this._iid).GroupChannelParams
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: i,
                            constraint: function(t) {
                                return t._validate()
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 3);
                        return s = o[0],
                        t = o[1],
                        n = o[2],
                        eg(this._iid, function(n) {
                            s ? n(s, null) : (t.isPublic || (t.accessCode = null),
                            x.get(r._iid).container.apiClient.createGroupChannel(v(v({}, t), {}, {
                                isDistinct: !0
                            }), function(t, i) {
                                var s = null;
                                if (!t) {
                                    var a = Y.get(r._iid).GroupChannel;
                                    s = {
                                        channel: new a(i),
                                        isCreated: i.is_created
                                    },
                                    a.cachedChannels[s.channel.url] = s.channel
                                }
                                n(t, s)
                            }))
                        }, n)
                    }
                }, {
                    key: "createChannel",
                    value: function() {
                        var t = this
                          , n = eI.toArray(arguments)
                          , r = void 0;
                        "function" == typeof n[n.length - 1] && (r = n.pop());
                        var i = Y.get(this._iid)
                          , s = i.GroupChannel
                          , a = i.GroupChannelParams;
                        if (n[0]instanceof a && 1 === n.length)
                            return eg(this._iid, function(r) {
                                var i = n[0];
                                (i.isPublic || (i.accessCode = null),
                                i._validate()) ? x.get(t._iid).container.apiClient.createGroupChannel(i, function(t, n) {
                                    var i = null;
                                    t || (i = new s(n),
                                    s.cachedChannels[i.url] = i),
                                    r(t, i)
                                }) : r(eI.error, null)
                            }, r);
                        if (Array.isArray(n[0])) {
                            var o = new a;
                            switch (n.length) {
                            case 1:
                                o.addUsers(n[0]);
                                break;
                            case 2:
                                o.addUsers(n[0]),
                                o.isDistinct = n[1];
                                break;
                            case 3:
                                o.addUsers(n[0]),
                                o.isDistinct = n[1],
                                o.customType = n[2];
                                break;
                            case 5:
                                o.addUsers(n[0]),
                                o.isDistinct = n[1],
                                o.name = n[2],
                                "string" == typeof n[3] ? o.coverUrl = n[3] : o.coverImage = n[3],
                                o.data = n[4];
                                break;
                            case 6:
                                o.addUsers(n[0]),
                                o.isDistinct = n[1],
                                o.name = n[2],
                                "string" == typeof n[3] ? o.coverUrl = n[3] : o.coverImage = n[3],
                                o.data = n[4],
                                o.customType = n[5];
                                break;
                            default:
                                return eg(this._iid, function(t) {
                                    return t(eI.error, null)
                                }, r)
                            }
                            return r ? s.createChannel(o, r) : s.createChannel(o)
                        }
                        return eg(this._iid, function(t) {
                            return t(eI.error, null)
                        }, r)
                    }
                }, {
                    key: "createChannelWithUserIds",
                    value: function() {
                        var t = eI.toArray(arguments)
                          , n = void 0;
                        "function" == typeof t[t.length - 1] && (n = t.pop());
                        var r = Y.get(this._iid)
                          , i = r.GroupChannel
                          , s = new r.GroupChannelParams;
                        switch (t.length) {
                        case 1:
                            s.addUserIds(t[0]);
                            break;
                        case 2:
                            s.addUserIds(t[0]),
                            s.isDistinct = t[1];
                            break;
                        case 3:
                            s.addUserIds(t[0]),
                            s.isDistinct = t[1],
                            s.customType = t[2];
                            break;
                        case 5:
                            s.addUserIds(t[0]),
                            s.isDistinct = t[1],
                            s.name = t[2],
                            "string" == typeof t[3] ? s.coverUrl = t[3] : s.coverImage = t[3],
                            s.data = t[4];
                            break;
                        case 6:
                            s.addUserIds(t[0]),
                            s.isDistinct = t[1],
                            s.name = t[2],
                            "string" == typeof t[3] ? s.coverUrl = t[3] : s.coverImage = t[3],
                            s.data = t[4],
                            s.customType = t[5];
                            break;
                        default:
                            return eg(this._iid, function(t) {
                                return t(eI.error, null)
                            }, n)
                        }
                        return n ? i.createChannel(s, n) : i.createChannel(s)
                    }
                }, {
                    key: "createMyGroupChannelListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).GroupChannelListQuery
                    }
                }, {
                    key: "createPublicGroupChannelListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).PublicGroupChannelListQuery
                    }
                }, {
                    key: "markAsReadAllLastSentAt",
                    get: function() {
                        return n2[this._iid] || 0
                    },
                    set: function(t) {
                        n2[this._iid] = t
                    }
                }, {
                    key: "getChannelCount",
                    value: function(t, n) {
                        return id.getInstance(this._iid).getGroupChannelCount(t, n)
                    }
                }, {
                    key: "getUnreadItemCount",
                    value: function(t, n) {
                        return id.getInstance(this._iid).getUnreadItemCount(t, n)
                    }
                }, {
                    key: "getTotalUnreadMessageCount",
                    value: function() {
                        var t = eI.toArray(arguments)
                          , n = "function" == typeof t[t.length - 1] ? t.pop() : null
                          , r = id.getInstance(this._iid);
                        return r.getTotalUnreadMessageCount.apply(r, U(t).concat([n]))
                    }
                }, {
                    key: "getTotalUnreadChannelCount",
                    value: function(t) {
                        return id.getInstance(this._iid).getTotalUnreadChannelCount(t)
                    }
                }]),
                r
            }(tP)
              , n8 = function(t) {
                function n(n) {
                    var r = t.call(this, n) || this;
                    return r.state = "",
                    r.role = "",
                    r.isMuted = !1,
                    r.isBlockedByMe = !1,
                    r.isBlockingMe = !1,
                    r.restrictionInfo = null,
                    n && r._update(n),
                    r
                }
                return H(n, t),
                n.objectify = function(t) {
                    var n = Y.get(this._iid)
                      , r = n.User
                      , i = n.RestrictedUser
                      , s = n.RestrictionInfo
                      , a = t.state
                      , o = t.role
                      , l = t.isMuted
                      , u = void 0 !== l && l
                      , c = t.isBlockedByMe
                      , d = t.isBlockingMe
                      , h = t.restrictionInfo
                      , f = void 0 === h ? null : h
                      , p = u ? i.objectify(t) : r.objectify(t);
                    if (p.state = a,
                    p.role = void 0 === o ? "" : o,
                    p.is_muted = u,
                    p.is_blocked_by_me = void 0 !== c && c,
                    p.is_blocking_me = void 0 !== d && d,
                    f) {
                        var g = s.objectify(f);
                        p.restriction_type = g.restriction_type,
                        p.muted_description = g.description,
                        p.muted_end_at = g.end_at
                    }
                    return p
                }
                ,
                n.buildFromSerializedData = function(t) {
                    var n = Y.get(this._iid).Member
                      , r = td.deserialize(t);
                    return new n(n.objectify(j({}, r)))
                }
                ,
                n.prototype._update = function(t) {
                    var n = Y.get(this._iid)
                      , r = n.RestrictedUser
                      , i = n.RestrictionInfo;
                    this.state = t.state,
                    this.role = t.role || n6.Role.NONE,
                    t.hasOwnProperty("is_muted") && (this.isMuted = t.is_muted),
                    t.hasOwnProperty("is_blocked_by_me") && (this.isBlockedByMe = t.is_blocked_by_me),
                    t.hasOwnProperty("is_blocking_me") && (this.isBlockingMe = t.is_blocking_me),
                    this.isMuted && (this.restrictionInfo = new i(t),
                    this.restrictionInfo.restrictionType = r.RestrictionType.MUTED)
                }
                ,
                n.prototype.parse = function(t) {
                    this._update(t)
                }
                ,
                Object.defineProperty(n, "JOINED", {
                    get: function() {
                        return "joined"
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "INVITED", {
                    get: function() {
                        return "invited"
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(n, "LEFT", {
                    get: function() {
                        return "left"
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                n
            }(tg)
              , n7 = function(t) {
                function n(n) {
                    var r = t.call(this, n) || this;
                    return r.role = "",
                    r.isBlockedByMe = !1,
                    n && r._update(n),
                    r
                }
                return H(n, t),
                n.objectify = function(t) {
                    var n = Y.get(this._iid).User
                      , r = t.role
                      , i = t.isBlockedByMe
                      , s = n.objectify(t);
                    return s.role = void 0 === r ? "" : r,
                    s.is_blocked_by_me = void 0 !== i && i,
                    s
                }
                ,
                n.buildFromSerializedData = function(t) {
                    var n = Y.get(this._iid).Sender
                      , r = td.deserialize(t);
                    return new n(n.objectify(j({}, r)))
                }
                ,
                n.prototype.parse = function(t) {
                    this._update(t)
                }
                ,
                n.prototype._update = function(t) {
                    this.role = t.role || n6.Role.NONE,
                    t.hasOwnProperty("is_blocked_by_me") && (this.isBlockedByMe = t.is_blocked_by_me)
                }
                ,
                n
            }(tg)
              , n9 = function(t) {
                A(r, t);
                var n = O(r);
                function r(t) {
                    var i;
                    return b(this, r),
                    (i = n.call(this, t)).restrictionInfo = null,
                    t && i._update(t),
                    i
                }
                return S(r, [{
                    key: "_update",
                    value: function(t) {
                        var n = Y.get(this._iid).RestrictionInfo;
                        this.restrictionInfo = new n(t)
                    }
                }], [{
                    key: "RestrictionType",
                    get: function() {
                        return {
                            MUTED: "muted",
                            BANNED: "banned"
                        }
                    }
                }, {
                    key: "objectify",
                    value: function(t) {
                        var n = Y.get(this._iid)
                          , r = n.User
                          , i = n.RestrictionInfo
                          , s = t.restrictionInfo;
                        return v(v({}, r.objectify(t)), i.objectify(void 0 === s ? {} : s))
                    }
                }]),
                r
            }(tg)
              , re = function() {
                function t(t) {
                    this.emojiHash = null,
                    this.emojiCategories = null,
                    t && this._update(t)
                }
                return t.prototype._update = function(t) {
                    var n = Y.get(this._iid).EmojiCategory;
                    this.emojiHash = t.emoji_hash || "",
                    this.emojiCategories = t.emoji_categories ? t.emoji_categories.map(function(t) {
                        return new n(t)
                    }) : []
                }
                ,
                t
            }()
              , rt = function() {
                function t(t) {
                    this.id = null,
                    this.name = null,
                    this.url = null,
                    this.emojis = null,
                    t && this._update(t)
                }
                return t.prototype._update = function(t) {
                    var n = Y.get(this._iid).Emoji;
                    this.id = t.id || 0,
                    this.name = t.name || "",
                    this.url = t.url || "",
                    this.emojis = t.emojis ? t.emojis.map(function(t) {
                        return new n(t)
                    }) : []
                }
                ,
                t
            }()
              , rn = function() {
                function t(t) {
                    this.key = null,
                    this.url = null,
                    t && this._update(t)
                }
                return t.prototype._update = function(t) {
                    this.key = t.key,
                    this.url = t.url
                }
                ,
                t
            }()
              , rr = {}
              , ri = {}
              , rs = new WeakMap
              , ra = function(t) {
                A(r, t);
                var n = O(r);
                function r(t) {
                    var i;
                    return b(this, r),
                    (i = n.call(this, t)).channelType = tP.CHANNEL_TYPE_OPEN,
                    i.participantCount = 0,
                    rs.set(I(i), 0),
                    i.operators = [],
                    t && i._update(t),
                    i
                }
                return S(r, [{
                    key: "_update",
                    value: function(t) {
                        var n = Y.get(this._iid).User;
                        t.hasOwnProperty("participant_count") && (this.participantCount = parseInt(t.participant_count)),
                        t.hasOwnProperty("operators") && Array.isArray(t.operators) && (this.operators = t.operators.map(function(t) {
                            return new n(t)
                        }))
                    }
                }, {
                    key: "parse",
                    value: function(t) {
                        this._update(t)
                    }
                }, {
                    key: "update",
                    value: function(t) {
                        this.__update(t),
                        this._update(t)
                    }
                }, {
                    key: "createParticipantListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).ParticipantListQuery({
                            channelUrl: this.url
                        })
                    }
                }, {
                    key: "createMutedUserListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).MutedUserListQuery({
                            channelUrl: this.url,
                            isOpenChannel: !0
                        })
                    }
                }, {
                    key: "createBannedUserListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).BannedUserListQuery({
                            channelUrl: this.url,
                            isOpenChannel: !0
                        })
                    }
                }, {
                    key: "isOperator",
                    value: function(t) {
                        return !!t && this.isOperatorWithUserId(t.userId)
                    }
                }, {
                    key: "isOperatorWithUserId",
                    value: function(t) {
                        return this.operators.map(function(t) {
                            return t.userId
                        }).indexOf(t) > -1
                    }
                }, {
                    key: "refresh",
                    value: function(t) {
                        return Y.get(this._iid).OpenChannel.getChannelWithoutCache(this.url, t)
                    }
                }, {
                    key: "enter",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            var r = Y.get(n._iid).Command.bEnter({
                                channelUrl: n.url
                            })
                              , i = id.getInstance(n._iid);
                            i.sendCommand(r, function(r, s) {
                                if (i.getErrorFirstCallback()) {
                                    var a = [r, s];
                                    s = a[0],
                                    r = a[1]
                                }
                                s ? t(s = s ? new z(s.message,s.code) : null, null) : (Y.get(n._iid).OpenChannel.enteredChannels[n.url] = n,
                                eN.of(n._iid).send({
                                    source: ev.EVENT_CHANNEL_ENTER,
                                    payload: {
                                        channel: n
                                    }
                                }),
                                n.refresh(function() {
                                    return t(null, null)
                                }))
                            })
                        }, t)
                    }
                }, {
                    key: "exit",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            var r = Y.get(n._iid)
                              , i = r.Command
                              , s = r.FileMessageQueue
                              , a = i.bExit({
                                channelUrl: n.url
                            })
                              , o = id.getInstance(n._iid);
                            o.sendCommand(a, function(r, i) {
                                if (o.getErrorFirstCallback()) {
                                    var a = [r, i];
                                    i = a[0],
                                    r = a[1]
                                }
                                i ? t(i = i ? new z(i.message,i.code) : null, null) : (delete Y.get(n._iid).OpenChannel.enteredChannels[n.url],
                                s.delete(n.url),
                                eN.of(n._iid).send({
                                    source: ev.EVENT_CHANNEL_EXIT,
                                    payload: {
                                        channel: n
                                    }
                                }),
                                t(null, null))
                            })
                        }, t)
                    }
                }, {
                    key: "updateChannel",
                    value: function() {
                        var t = this
                          , n = eI.toArray(arguments)
                          , r = null;
                        "function" == typeof n[n.length - 1] && (r = n.pop());
                        var i = Y.get(this._iid)
                          , s = i.OpenChannel
                          , a = i.OpenChannelParams;
                        if (n[0]instanceof a && 1 === n.length)
                            return eg(this._iid, function(r) {
                                var i = n[0];
                                (i.channelUrl = t.url,
                                i._validate()) ? x.get(t._iid).container.apiClient.updateOpenChannel(i, function(t, n) {
                                    var i = null;
                                    t || (i = s.upsert(n)),
                                    r(t, i)
                                }) : r(eI.error, null)
                            }, r);
                        if (3 === n.length) {
                            var o = new a;
                            return o.channelUrl = this.url,
                            o.name = n[0],
                            o.coverUrlOrImage = n[1],
                            o.data = n[2],
                            o.operatorUserIds = this.operators.map(function(t) {
                                return t.userId
                            }),
                            r ? this.updateChannel(o, r) : this.updateChannel(o)
                        }
                        if (4 === n.length) {
                            var l = new a;
                            return l.channelUrl = this.url,
                            l.name = n[0],
                            l.coverUrlOrImage = n[1],
                            l.data = n[2],
                            Array.isArray(n[3]) && (l.operatorUserIds = n[3]),
                            r ? this.updateChannel(l, r) : this.updateChannel(l)
                        }
                        if (5 === n.length) {
                            var u = new a;
                            return u.channelUrl = this.url,
                            u.name = n[0],
                            u.coverUrlOrImage = n[1],
                            u.data = n[2],
                            Array.isArray(n[3]) && (u.operatorUserIds = n[3]),
                            u.customType = n[4],
                            r ? this.updateChannel(u, r) : this.updateChannel(u)
                        }
                        return eg(this._iid, function(t) {
                            return t(eI.error, null)
                        }, r)
                    }
                }, {
                    key: "updateChannelWithOperatorUserIds",
                    value: function() {
                        var t = eI.toArray(arguments)
                          , n = void 0;
                        switch ("function" == typeof t[t.length - 1] && (n = t.pop()),
                        t.length) {
                        case 4:
                        case 5:
                            return n ? this.updateChannel(params, n) : this.updateChannel(params);
                        default:
                            return eg(this._iid, function(t) {
                                return t(eI.error, null)
                            }, n)
                        }
                    }
                }, {
                    key: "muteUser",
                    value: function(t, n, r, i) {
                        return this.muteUserWithUserId(t ? t.userId : null, n, r, i)
                    }
                }, {
                    key: "muteUserWithUserId",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = null
                          , o = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "number",
                            optional: !0,
                            defaultValue: -1,
                            constraint: function(t) {
                                return t >= -1
                            }
                        }), new eI({
                            type: "string",
                            optional: !0,
                            defaultValue: ""
                        }), new eI({
                            type: "callback"
                        })])
                          , l = k(o, 5);
                        return a = l[0],
                        t = l[1],
                        n = l[2],
                        r = l[3],
                        i = l[4],
                        eg(this._iid, function(i) {
                            a ? i(a, null) : x.get(s._iid).container.apiClient.muteUser({
                                channelUrl: s.url,
                                userId: t,
                                description: r,
                                seconds: n,
                                isGroupChannel: !1
                            }, function(t, n) {
                                i(t, null)
                            })
                        }, i)
                    }
                }, {
                    key: "unmuteUser",
                    value: function(t, n) {
                        return this.unmuteUserWithUserId(t ? t.userId : null, n)
                    }
                }, {
                    key: "unmuteUserWithUserId",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.unmuteUser({
                                channelUrl: r.url,
                                userId: t,
                                isGroupChannel: !1
                            }, function(t, r) {
                                n(t, null)
                            })
                        }, n)
                    }
                }, {
                    key: "banUser",
                    value: function(t, n, r) {
                        return this.banUserWithUserId(t ? t.userId : null, n, r)
                    }
                }, {
                    key: "banUserWithUserId",
                    value: function(t, n, r) {
                        var i = this
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "number",
                            optional: !0,
                            defaultValue: -1,
                            constraint: function(t) {
                                return t >= -1
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        return s = o[0],
                        t = o[1],
                        n = o[2],
                        r = o[3],
                        eg(this._iid, function(r) {
                            s ? r(s, null) : x.get(i._iid).container.apiClient.banUser({
                                channelUrl: i.url,
                                userId: t,
                                description: null,
                                seconds: n,
                                isGroupChannel: !1
                            }, function(t, n) {
                                r(t, null)
                            })
                        }, r)
                    }
                }, {
                    key: "unbanUser",
                    value: function(t, n) {
                        return this.unbanUserWithUserId(t ? t.userId : null, n)
                    }
                }, {
                    key: "unbanUserWithUserId",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.unbanUser({
                                channelUrl: r.url,
                                userId: t,
                                isGroupChannel: !1
                            }, function(t, r) {
                                n(t, null)
                            })
                        }, n)
                    }
                }, {
                    key: "setLatestParticipantCount",
                    value: function(t, n) {
                        var r = !1;
                        return "number" == typeof t && "number" == typeof n && n >= rs.get(this) && (rs.set(this, n),
                        r = t !== this.participantCount,
                        this.participantCount = t),
                        r
                    }
                }, {
                    key: "delete",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.deleteOpenChannel({
                                channelUrl: n.url
                            }, function(r, i) {
                                r || (delete Y.get(n._iid).OpenChannel.cachedChannels[n.url],
                                Y.get(n._iid).FileMessageQueue.delete(n.url)),
                                t(r, i)
                            })
                        }, t)
                    }
                }], [{
                    key: "cachedChannels",
                    get: function() {
                        return rr[this._iid] || (rr[this._iid] = {}),
                        rr[this._iid]
                    }
                }, {
                    key: "enteredChannels",
                    get: function() {
                        return ri[this._iid] || (ri[this._iid] = {}),
                        ri[this._iid]
                    }
                }, {
                    key: "buildFromSerializedData",
                    value: function(t) {
                        var n = Y.get(this._iid)
                          , r = n.User
                          , i = n.OpenChannel
                          , s = td.deserialize(t);
                        return new i({
                            channel_url: s.url,
                            name: s.name,
                            cover_url: s.coverUrl,
                            data: s.data,
                            custom_type: s.customType,
                            created_at: s.createdAt / 1e3,
                            freeze: s.isFrozen,
                            is_ephemeral: s.isEphemeral,
                            participant_count: s.participantCount,
                            operators: s.operators.map(function(t) {
                                return r.objectify(t)
                            })
                        })
                    }
                }, {
                    key: "getChannel",
                    value: function(t, n) {
                        var r = null
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string",
                            constraint: function(t) {
                                return t.length > 0
                            }
                        }), new eI({
                            type: "string",
                            optional: !0,
                            nullable: !0,
                            defaultValue: null
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 4);
                        if (r = a[0],
                        t = a[1],
                        i = a[2],
                        n = a[3],
                        r)
                            return eg(this._iid, function(t) {
                                t(r, null)
                            }, n);
                        var o = Y.get(this._iid).OpenChannel;
                        return o.cachedChannels[t] ? eg(this._iid, function(n) {
                            n(null, o.cachedChannels[t])
                        }, n) : o.getChannelWithoutCache(t, i, n)
                    }
                }, {
                    key: "getChannelWithoutCache",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: "string",
                            constraint: function(t) {
                                return t.length > 0
                            }
                        }), new eI({
                            type: "string",
                            optional: !0,
                            nullable: !0,
                            defaultValue: null
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        return i = o[0],
                        t = o[1],
                        s = o[2],
                        n = o[3],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.getOpenChannel({
                                channelUrl: t,
                                internalCall: s
                            }, function(t, i) {
                                var s = null;
                                t || (s = Y.get(r._iid).OpenChannel.upsert(i)),
                                n(t, s)
                            })
                        }, n)
                    }
                }, {
                    key: "createChannel",
                    value: function() {
                        var t = this
                          , n = eI.toArray(arguments)
                          , r = null;
                        "function" == typeof n[n.length - 1] && (r = n.pop());
                        var i = Y.get(this._iid)
                          , s = i.OpenChannel
                          , a = i.OpenChannelParams;
                        if (n[0]instanceof a && 1 === n.length)
                            return eg(this._iid, function(r) {
                                var i = n[0];
                                i._validate() ? x.get(t._iid).container.apiClient.createOpenChannel(i, function(n, i) {
                                    var s = null;
                                    n || (s = Y.get(t._iid).OpenChannel.upsert(i)),
                                    r(n, s)
                                }) : r(eI.error, null)
                            }, r);
                        var o = new a;
                        switch (n.length) {
                        case 0:
                            break;
                        case 1:
                            o.name = n[0];
                            break;
                        case 2:
                            o.name = n[0],
                            o.coverUrlOrImage = n[1];
                            break;
                        case 3:
                            o.name = n[0],
                            o.coverUrlOrImage = n[1],
                            o.data = n[2];
                            break;
                        case 4:
                            o.name = n[0],
                            o.coverUrlOrImage = n[1],
                            o.data = n[2],
                            o.operatorUserIds = n[3];
                            break;
                        case 5:
                            o.name = n[0],
                            o.coverUrlOrImage = n[1],
                            o.data = n[2],
                            o.operatorUserIds = n[3],
                            o.customType = n[4];
                            break;
                        default:
                            return eg(this._iid, function(t) {
                                return t(eI.error, null)
                            }, r)
                        }
                        return r ? s.createChannel(o, r) : s.createChannel(o)
                    }
                }, {
                    key: "createChannelWithOperatorUserIds",
                    value: function() {
                        var t = eI.toArray(arguments)
                          , n = void 0;
                        switch ("function" == typeof t[t.length - 1] && (n = t.pop()),
                        t.length) {
                        case 4:
                        case 5:
                            return n ? this.createChannel.apply(this, U(t).concat([n])) : this.createChannel.apply(this, U(t));
                        default:
                            return eg(this._iid, function(t) {
                                return t(eI.error, null)
                            }, n)
                        }
                    }
                }, {
                    key: "upsert",
                    value: function(t) {
                        var n = new (Y.get(this._iid)).OpenChannel(t);
                        return this.cachedChannels.hasOwnProperty(n.url) ? this.cachedChannels[n.url].update(t) : this.cachedChannels[n.url] = n,
                        this.cachedChannels[n.url]
                    }
                }, {
                    key: "removeCachedChannel",
                    value: function(t) {
                        this.cachedChannels[t] && delete this.cachedChannels[t],
                        Y.get(this._iid).FileMessageQueue.delete(t)
                    }
                }, {
                    key: "clearCache",
                    value: function() {
                        rr[this._iid] = {},
                        Y.get(this._iid).FileMessageQueue.clear()
                    }
                }, {
                    key: "clearEnteredChannels",
                    value: function() {
                        ri[this._iid] = {}
                    }
                }, {
                    key: "createOpenChannelListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).OpenChannelListQuery
                    }
                }]),
                r
            }(tP)
              , ro = "default"
              , rl = function() {
                function t(t) {
                    this.name = ro,
                    this.volume = 1,
                    t && this._update(t)
                }
                return t.prototype._update = function(t) {
                    t.hasOwnProperty("name") && (this.name = t.name),
                    t.hasOwnProperty("volume") && (this.volume = t.volume)
                }
                ,
                t.objectify = function(t) {
                    var n = t.name
                      , r = t.volume;
                    return {
                        name: void 0 === n ? ro : n,
                        volume: void 0 === r ? 1 : r
                    }
                }
                ,
                t.prototype.serialize = function() {
                    return td.serialize(this)
                }
                ,
                t
            }()
              , ru = function() {
                function t(t, n) {
                    void 0 === n && (n = []),
                    this.key = t,
                    this.value = Array.isArray(n) && n.every(function(t) {
                        return "string" == typeof t
                    }) ? n : []
                }
                return t.prototype.encode = function() {
                    return {
                        key: this.key,
                        value: this.value || []
                    }
                }
                ,
                t
            }()
              , rc = new WeakMap
              , rd = function() {
                function t(n) {
                    b(this, t),
                    this._mentionType = t.MentionType.USERS,
                    this._mentionedUserIds = [],
                    this._cachedMentionedUsers = [],
                    this._cachedMentionedUserIds = [],
                    this._metaArrays = [],
                    rc.set(this, null),
                    this._parentMessageId = null,
                    this._reqId = null,
                    this.data = null,
                    this.customType = null,
                    this.pushNotificationDeliveryOption = null,
                    this.appleCriticalAlertOptions = null,
                    this.isReplyToChannel = !1,
                    this.mentionedMessageTemplate = null,
                    n && this._update(n)
                }
                return S(t, [{
                    key: "mentionType",
                    get: function() {
                        return this._mentionType
                    },
                    set: function(t) {
                        var n = Y.get(this._iid).BaseMessageParams;
                        Object.keys(n.MentionType).map(function(t) {
                            return n.MentionType[t]
                        }).indexOf(t) > -1 && (this._mentionType = t)
                    }
                }, {
                    key: "mentionedUserIds",
                    get: function() {
                        return this._cachedMentionedUserIds
                    },
                    set: function(t) {
                        if (Array.isArray(t)) {
                            if (0 === t.length)
                                return this._cachedMentionedUserIds = [],
                                void (this._mentionedUserIds = []);
                            for (var n = id.getInstance(this._iid), r = 0; r < t.length; r++) {
                                var i = t[r];
                                if ("string" != typeof i) {
                                    this._cachedMentionedUserIds = [],
                                    this._mentionedUserIds = [];
                                    break
                                }
                                0 > this._mentionedUserIds.indexOf(i) && n.currentUser && n.currentUser.userId !== i && (this._cachedMentionedUserIds.push(i),
                                this._mentionedUserIds.push(i))
                            }
                        }
                    }
                }, {
                    key: "mentionedUsers",
                    get: function() {
                        return this._cachedMentionedUsers
                    },
                    set: function(t) {
                        if (Array.isArray(t)) {
                            if (0 === t.length)
                                return this._cachedMentionedUserIds = [],
                                void (this._mentionedUserIds = []);
                            for (var n = id.getInstance(this._iid), r = 0; r < t.length; r++) {
                                var i = t[r];
                                if (!i.hasOwnProperty("userId")) {
                                    this._cachedMentionedUsers = [],
                                    this._mentionedUserIds = [];
                                    break
                                }
                                0 > this._mentionedUserIds.indexOf(i.userId) && n.currentUser && n.currentUser.userId !== i.userId && (this._cachedMentionedUsers.push(i),
                                this._mentionedUserIds.push(i.userId))
                            }
                        }
                    }
                }, {
                    key: "metaArrayKeys",
                    get: function() {
                        return this._metaArrays.map(function(t) {
                            return t.key
                        })
                    },
                    set: function(t) {
                        var n = Y.get(this._iid).MessageMetaArray
                          , r = {};
                        if (Array.isArray(t)) {
                            this._metaArrays = [];
                            for (var i = 0; i < t.length; i++)
                                "string" != typeof t[i] || r[t[i]] || (r[t[i]] = !0,
                                this._metaArrays.push(new n(t[i])))
                        }
                    }
                }, {
                    key: "metaArrays",
                    get: function() {
                        return this._metaArrays
                    },
                    set: function(t) {
                        var n = Y.get(this._iid).MessageMetaArray;
                        if (Array.isArray(t)) {
                            this._metaArrays = [];
                            for (var r = 0; r < t.length; r++) {
                                var i = t[r];
                                if (i instanceof n) {
                                    var s, a = this._metaArrays.map(function(t) {
                                        return t.key
                                    }).indexOf(i.key);
                                    a < 0 ? this._metaArrays.push(i) : (s = this._metaArrays[a].value).push.apply(s, U(i.value))
                                }
                            }
                        }
                    }
                }, {
                    key: "rootMessageId",
                    get: function() {
                        return rc.get(this)
                    }
                }, {
                    key: "parentMessageId",
                    get: function() {
                        return this._parentMessageId
                    },
                    set: function(t) {
                        rc.set(this, t),
                        this._parentMessageId = t
                    }
                }, {
                    key: "_serialize",
                    value: function(t) {
                        return td.serialize(this, function(n) {
                            n.hasOwnProperty("_mentionType") && (n.mentionType = n._mentionType,
                            delete n._mentionType),
                            n.hasOwnProperty("_mentionedUserIds") && (n.mentionedUserIds = n._mentionedUserIds,
                            delete n._mentionedUserIds),
                            n.hasOwnProperty("_cachedMentionedUsers") && (n.cachedMentionedUsers = n._cachedMentionedUsers,
                            delete n._cachedMentionedUsers),
                            n.hasOwnProperty("_cachedMentionedUserIds") && (n.cachedMentionedUserIds = n._cachedMentionedUserIds,
                            delete n._cachedMentionedUserIds),
                            n.hasOwnProperty("_metaArrays") && (n.metaArrays = n._metaArrays,
                            delete n._metaArrays),
                            n.hasOwnProperty("_parentMessageId") && (n.parentMessageId = n._parentMessageId,
                            delete n._parentMessageId),
                            t && t(n)
                        })
                    }
                }, {
                    key: "_update",
                    value: function(t) {
                        t.hasOwnProperty("mention_type") && (this._mentionType = t.mention_type),
                        t.hasOwnProperty("mentioned_user_ids") && (this._mentionedUserIds = t.mentioned_user_ids),
                        t.hasOwnProperty("mentioned_message_template") && (this.mentionedMessageTemplate = t.mentioned_message_template),
                        t.hasOwnProperty("cached_mentioned_users") && (this._cachedMentionedUsers = t.cached_mentioned_users),
                        t.hasOwnProperty("cached_mentioned_user_ids") && (this._cachedMentionedUserIds = t.cached_mentioned_user_ids),
                        t.hasOwnProperty("meta_arrays") && (this._metaArrays = t.meta_arrays.map(function(t) {
                            return new ru(t.key,t.value)
                        })),
                        t.hasOwnProperty("parent_message_id") && (this.parentMessageId = t.parent_message_id),
                        t.hasOwnProperty("data") && (this.data = t.data),
                        t.hasOwnProperty("custom_type") && (this.customType = t.custom_type),
                        t.hasOwnProperty("push_notification_delivery_option") && (this.pushNotificationDeliveryOption = t.push_notification_delivery_option),
                        t.hasOwnProperty("apple_critical_alert_options") && (this.appleCriticalAlertOptions = new rl(t.apple_critical_alert_options)),
                        t.hasOwnProperty("is_reply_to_channel") && (this.isReplyToChannel = t.is_reply_to_channel)
                    }
                }, {
                    key: "_validate",
                    value: function() {
                        var t = Y.get(this._iid)
                          , n = t.BaseMessageParams
                          , r = t.MessageMetaArray
                          , i = rc.get(this);
                        return Object.keys(n.MentionType).map(function(t) {
                            return n.MentionType[t]
                        }).indexOf(this.mentionType) > -1 && this._mentionedUserIds.every(function(t) {
                            return "string" == typeof t
                        }) && ("string" == typeof this.mentionedMessageTemplate || null === this.mentionedMessageTemplate) && Array.isArray(this._metaArrays) && this._metaArrays.every(function(t) {
                            return t instanceof r
                        }) && ("number" == typeof i || null === i) && ("number" == typeof this._parentMessageId || null === this._parentMessageId) && ("string" == typeof this.data || null === this.data) && ("string" == typeof this.customType || null === this.customType) && (null === this.pushNotificationDeliveryOption || Object.keys(n.PushNotificationDeliveryOption).map(function(t) {
                            return n.PushNotificationDeliveryOption[t]
                        }).indexOf(this.pushNotificationDeliveryOption) > -1) && (null === this.appleCriticalAlertOptions || this.appleCriticalAlertOptions instanceof rl) && "boolean" == typeof this.isReplyToChannel
                    }
                }], [{
                    key: "_objectify",
                    value: function(n) {
                        var r = n.mentionType
                          , i = void 0 === r ? t.MentionType.USERS : r
                          , s = n.mentionedUserIds
                          , a = n.mentionedMessageTemplate
                          , o = n.cachedMentionedUsers
                          , l = n.cachedMentionedUserIds
                          , u = n.metaArrays
                          , c = n.parentMessageId
                          , d = n.pushNotificationDeliveryOption
                          , h = n.appleCriticalAlertOptions
                          , f = n.isReplyToChannel;
                        return {
                            mention_type: i,
                            mentioned_user_ids: void 0 === s ? [] : s,
                            mentioned_message_template: void 0 === a ? null : a,
                            cached_mentioned_users: void 0 === o ? [] : o,
                            cached_mentioned_user_ids: void 0 === l ? [] : l,
                            meta_arrays: void 0 === u ? [] : u,
                            parent_message_id: void 0 === c ? null : c,
                            push_notification_delivery_option: void 0 === d ? null : d,
                            apple_critical_alert_options: void 0 === h ? null : h,
                            is_reply_to_channel: void 0 !== f && f
                        }
                    }
                }, {
                    key: "MentionType",
                    get: function() {
                        return {
                            USERS: "users",
                            CHANNEL: "channel"
                        }
                    }
                }, {
                    key: "PushNotificationDeliveryOption",
                    get: function() {
                        return {
                            DEFAULT: "default",
                            SUPPRESS: "suppress"
                        }
                    }
                }]),
                t
            }()
              , rh = function(t) {
                A(r, t);
                var n = O(r);
                function r(t) {
                    var i;
                    return b(this, r),
                    (i = n.call(this, t)).message = null,
                    i._translationTargetLanguages = [],
                    t && i._update(t),
                    i
                }
                return S(r, [{
                    key: "serialize",
                    value: function() {
                        return w(N(r.prototype), "_serialize", this).call(this, function(t) {
                            t.hasOwnProperty("_translationTargetLanguages") && (t.translationTargetLanguages = t._translationTargetLanguages,
                            delete t._translationTargetLanguages)
                        })
                    }
                }, {
                    key: "targetLanguages",
                    get: function() {
                        return this.translationTargetLanguages
                    },
                    set: function(t) {
                        this.translationTargetLanguages = t
                    }
                }, {
                    key: "translationTargetLanguages",
                    get: function() {
                        return this._translationTargetLanguages
                    },
                    set: function(t) {
                        if (Array.isArray(t)) {
                            for (var n = 0; n < t.length; n++)
                                if ("string" != typeof t[n])
                                    return void (this._translationTargetLanguages = []);
                            this._translationTargetLanguages = t
                        }
                    }
                }, {
                    key: "_update",
                    value: function(t) {
                        w(N(r.prototype), "_update", this).call(this, t),
                        t.hasOwnProperty("message") && (this.message = t.message),
                        t.hasOwnProperty("translation_target_languages") && (this._translationTargetLanguages = t.translation_target_languages)
                    }
                }, {
                    key: "_validate",
                    value: function() {
                        return w(N(r.prototype), "_validate", this).call(this) && ("string" == typeof this.message || null === this.message) && Array.isArray(this.translationTargetLanguages) && this.translationTargetLanguages.every(function(t) {
                            return "string" == typeof t
                        })
                    }
                }], [{
                    key: "objectify",
                    value: function(t) {
                        var n = t.message
                          , r = t.data
                          , i = t.customType
                          , s = t.translationTargetLanguages;
                        return v(v({}, rd._objectify(t)), {}, {
                            message: void 0 === n ? null : n,
                            data: void 0 === r ? null : r,
                            custom_type: void 0 === i ? null : i,
                            translation_target_languages: void 0 === s ? [] : s
                        })
                    }
                }]),
                r
            }(rd)
              , rf = function() {
                function t(t, n, r) {
                    void 0 === n && (n = []),
                    void 0 === r && (r = 0),
                    this.key = t,
                    this.userIds = n,
                    this.updatedAt = r;
                    for (var i = {}, s = 0, a = this.userIds; s < a.length; s++)
                        i[a[s]] = this.updatedAt;
                    this._version = i
                }
                return Object.defineProperty(t.prototype, "isEmpty", {
                    get: function() {
                        return 0 === this.userIds.length
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.createFromJson = function(t) {
                    var n = t.key
                      , r = t.user_ids
                      , i = t.updated_at;
                    return "string" == typeof n && n && Array.isArray(r) && r.length > 0 && "number" == typeof i ? new this(n,r,i) : null
                }
                ,
                t.objectify = function(t) {
                    return {
                        key: t.key,
                        user_ids: t.userIds,
                        updated_at: t.updatedAt
                    }
                }
                ,
                t.prototype._applyEvent = function(t) {
                    if (t.key === this.key && (!this._version[t.userId] || this._version[t.userId] < t.updatedAt)) {
                        var n = this.userIds.indexOf(t.userId);
                        switch (t.operation) {
                        case "add":
                            n < 0 && this.userIds.push(t.userId);
                            break;
                        case "delete":
                            n >= 0 && this.userIds.splice(n, 1)
                        }
                        this._version[t.userId] = t.updatedAt
                    }
                }
                ,
                t
            }()
              , rp = function(t) {
                A(r, t);
                var n = O(r);
                function r(t) {
                    var i;
                    return b(this, r),
                    (i = n.call(this, t)).messageType = tp.MESSAGE_TYPE_USER,
                    i.message = null,
                    i._sender = null,
                    i.translations = {},
                    i.requestState = null,
                    i.requestedMentionUserIds = [],
                    i.errorCode = 0,
                    i.messageSurvivalSeconds = -1,
                    i.plugins = [],
                    i._messageParams = null,
                    t && i._update(t),
                    i
                }
                return S(r, [{
                    key: "_update",
                    value: function(t) {
                        var n = id.getInstance(this._iid)
                          , r = Y.get(this._iid)
                          , i = r.Sender
                          , s = r.Plugin;
                        this.message = String(t.message),
                        this._sender = new i(t.user),
                        this.reqId = t.hasOwnProperty("req_id") ? String(t.req_id) : "",
                        this.translations = t.hasOwnProperty("translations") ? t.translations : {},
                        this.requestState = this.messageId > 0 ? n.MessageRequestState.SUCCEEDED : n.MessageRequestState.FAILED,
                        t.hasOwnProperty("sending_status") && (this.requestState = t.sending_status,
                        this.requestState === n.MessageSendingStatus.CANCELED && (this.requestState = n.MessageRequestState.FAILED)),
                        this.requestedMentionUserIds = [],
                        t.hasOwnProperty("requested_mention_user_ids") && (this.requestedMentionUserIds = t.requested_mention_user_ids),
                        this.errorCode = 0,
                        t.hasOwnProperty("error_code") && (this.errorCode = t.error_code),
                        this.messageSurvivalSeconds = -1,
                        t.hasOwnProperty("message_survival_seconds") && (this.messageSurvivalSeconds = t.message_survival_seconds),
                        this.plugins = [],
                        t.hasOwnProperty("plugins") && Array.isArray(t.plugins) && (this.plugins = t.plugins.map(function(t) {
                            return new s(t)
                        })),
                        t.hasOwnProperty("message_params") && (this._messageParams = new rh(t.message_params))
                    }
                }, {
                    key: "sender",
                    get: function() {
                        var t = id.getInstance(this._iid)
                          , n = Y.get(this._iid).GroupChannel;
                        if (this._sender && t.Options.useMemberAsMessageSender && this.isGroupChannel()) {
                            var r = n.cachedChannels[this.channelUrl];
                            if (r) {
                                var i = r.memberMap[this._sender.userId];
                                i && (this._sender.nickname !== i.nickname && (this._sender.nickname = i.nickname),
                                this._sender.plainProfileUrl !== i.plainProfileUrl && (this._sender.plainProfileUrl = i.plainProfileUrl),
                                ef.deepEqual(this._sender.metaData, i.metaData) || (this._sender.metaData = i.metaData))
                            }
                        }
                        return this._sender
                    },
                    set: function(t) {
                        this._sender = t
                    }
                }, {
                    key: "isResendable",
                    value: function() {
                        var t = id.getInstance(this._iid);
                        return this.sendingStatus === t.MessageSendingStatus.FAILED && ef.isResendableError(this.errorCode)
                    }
                }, {
                    key: "serialize",
                    value: function() {
                        var t = this;
                        return w(N(r.prototype), "serialize", this).call(this, function(n) {
                            t._messageParams && (n.messageParams = t._messageParams.serialize())
                        })
                    }
                }, {
                    key: "messageParams",
                    get: function() {
                        return this._messageParams
                    }
                }, {
                    key: "_clone",
                    value: function() {
                        return Y.get(this._iid).UserMessage.buildFromSerializedData(this.serialize())
                    }
                }, {
                    key: "_isSentByMe",
                    value: function() {
                        var t = id.getInstance(this._iid);
                        return this.sendingStatus === t.MessageSendingStatus.SUCCEEDED && 0 === this.updatedAt && this._sender && this._sender.userId === t.currentUser.userId
                    }
                }], [{
                    key: "objectify",
                    value: function(t) {
                        var n = id.getInstance(this._iid)
                          , r = Y.get(this._iid)
                          , i = r.BaseChannel
                          , s = r.BaseMessageParams
                          , a = r.Sender
                          , o = r.User
                          , l = r.UserMessage
                          , u = r.FileMessage
                          , c = r.AdminMessage
                          , d = r.ThreadInfo
                          , h = r.OGMetaData
                          , f = r.Plugin
                          , p = r.Reaction
                          , g = r.AppleCriticalAlertOptions
                          , m = r.UserMessageParams
                          , y = t.messageId
                          , _ = t.messageType
                          , E = void 0 === _ ? tp.MESSAGE_TYPE_BASE : _
                          , b = t.reqId
                          , C = t.user
                          , S = t.channel
                          , A = void 0 === S ? null : S
                          , N = t.channelUrl
                          , T = t.channelType
                          , I = void 0 === T ? i.CHANNEL_TYPE_OPEN : T
                          , O = t.message
                          , w = t.data
                          , k = t.customType
                          , U = t.mentionType
                          , R = void 0 === U ? s.MentionType.USERS : U
                          , M = t.mentionedUsers
                          , P = t.mentionedUserIds
                          , L = t.mentionedMessageTemplate
                          , D = t.requestedMentionUserIds
                          , x = t.reactions
                          , F = t.metaArrays
                          , H = void 0 === F ? [] : F
                          , j = t.rootMessageId
                          , G = t.parentMessageId
                          , B = t.parentMessageText
                          , V = t.threadInfo
                          , q = void 0 === V ? null : V
                          , z = t.isReplyToChannel
                          , K = t.parentMessage
                          , W = void 0 === K ? null : K
                          , Q = t.translations
                          , J = t.sendingStatus
                          , Z = t.errorCode
                          , $ = t.silent
                          , X = t.isGlobalBlocked
                          , ee = t.messageSurvivalSeconds
                          , et = t.ogMetaData
                          , en = void 0 === et ? null : et
                          , er = t.isOperatorMessage
                          , ei = t.plugins
                          , es = t.appleCriticalAlertOptions
                          , ea = t.createdAt
                          , eo = t.updatedAt
                          , el = t.messageParams
                          , eu = void 0 === el ? null : el
                          , ec = t.isAutoResendRegistered
                          , ed = {};
                        switch (ed.req_id = void 0 === b ? "" : b,
                        ed.msg_id = y,
                        E) {
                        case tp.MESSAGE_TYPE_USER:
                            ed.type = "MESG";
                            break;
                        case tp.MESSAGE_TYPE_FILE:
                            ed.type = "FILE";
                            break;
                        case tp.MESSAGE_TYPE_ADMIN:
                            ed.type = "ADMM"
                        }
                        if (ed.user = a.objectify(v({}, C)),
                        ed.channel_url = A ? A.url : void 0 === N ? "" : N,
                        ed.channel_type = A ? A.channelType : I,
                        ed.message = O,
                        ed.data = void 0 === w ? "" : w,
                        ed.custom_type = void 0 === k ? "" : k,
                        ed.translations = void 0 === Q ? {} : Q,
                        ed.is_global_block = !!(void 0 !== X && X),
                        ed.ts = ea,
                        ed.updated_at = void 0 === eo ? 0 : eo,
                        ed.mention_type = R,
                        ed.mentioned_users = (void 0 === M ? [] : M).map(function(t) {
                            return o.objectify(t)
                        }),
                        ed.mentioned_user_ids = void 0 === P ? [] : P,
                        ed.mentioned_message_template = void 0 === L ? null : L,
                        ed.requested_mention_user_ids = void 0 === D ? [] : D,
                        ed.reactions = (void 0 === x ? [] : x).map(function(t) {
                            return p.objectify(t)
                        }),
                        ed.metaarray = {},
                        H.forEach(function(t) {
                            var n = t.key;
                            ed.metaarray[n] = t.value
                        }),
                        ed.metaarray_key_order = H.map(function(t) {
                            return t.key
                        }),
                        ed.root_message_id = void 0 === j ? 0 : j,
                        ed.parent_message_id = void 0 === G ? 0 : G,
                        ed.parent_message_text = void 0 === B ? "" : B,
                        q && (ed.thread_info = d.objectify(q)),
                        ed.is_reply_to_channel = void 0 !== z && z,
                        W)
                            switch (W.messageType) {
                            case tp.MESSAGE_TYPE_USER:
                                ed.parent_message_info = l._objectifySerializedData(W);
                                break;
                            case tp.MESSAGE_TYPE_FILE:
                                ed.parent_message_info = u._objectifySerializedData(W);
                                break;
                            case tp.MESSAGE_TYPE_ADMIN:
                                ed.parent_message_info = c._objectifySerializedData(W)
                            }
                        return ed.sending_status = y > 0 ? n.MessageSendingStatus.SUCCEEDED : n.MessageSendingStatus.FAILED,
                        J && (ed.sending_status = J),
                        ed.silent = !!(void 0 !== $ && $),
                        ed.error_code = void 0 === Z ? 0 : Z,
                        ed.message_survival_seconds = void 0 === ee ? -1 : ee,
                        en && (ed.og_tag = h.objectify(en)),
                        ed.is_op_msg = !!(void 0 !== er && er),
                        ed.plugins = (void 0 === ei ? [] : ei).map(function(t) {
                            return f.objectify(t)
                        }),
                        es && (ed.apple_critical_alert_options = g.objectify(es)),
                        eu && (ed.message_params = m.objectify(eu)),
                        ed.is_auto_resend_registered = void 0 !== ec && ec,
                        ed
                    }
                }, {
                    key: "build",
                    value: function(t, n, r, i, s, a, o, l, u, c, d, h, f, p, g, m, y, _, v, E, b, C, S, A, N, T, I, O, w, k) {
                        return this.objectify({
                            messageId: n,
                            reqId: t,
                            user: r,
                            channel: i,
                            message: s,
                            data: a,
                            customType: o,
                            mentionType: p,
                            mentionedUsers: g,
                            mentionedUserIds: E,
                            mentionedMessageTemplate: b,
                            requestedMentionUserIds: S,
                            reactions: f,
                            metaArrays: h,
                            rootMessageId: m,
                            parentMessageId: y,
                            parentMessageText: _,
                            threadInfo: v,
                            translations: l,
                            sendingStatus: C,
                            errorCode: A,
                            isGlobalBlocked: u,
                            messageSurvivalSeconds: N,
                            ogMetaData: T,
                            isOperatorMessage: I,
                            plugins: O,
                            appleCriticalAlertOptions: w,
                            createdAt: c,
                            updatedAt: d,
                            messageParams: k
                        })
                    }
                }, {
                    key: "buildFromSerializedData",
                    value: function(t) {
                        var n = Y.get(this._iid).UserMessage
                          , r = td.deserialize(t);
                        return new n(this._objectifySerializedData(r))
                    }
                }, {
                    key: "_objectifySerializedData",
                    value: function(t) {
                        return Y.get(this._iid).UserMessage.objectify(v(v({}, t), {}, {
                            channel: {
                                url: t.channelUrl,
                                channelType: t.channelType
                            },
                            user: t.sender,
                            messageParams: t.messageParams ? new rh(rh.objectify(t.messageParams)) : null
                        }))
                    }
                }]),
                r
            }(tp)
              , rg = function(t) {
                A(r, t);
                var n = O(r);
                function r(t) {
                    var i;
                    return b(this, r),
                    (i = n.call(this, t)).fileName = null,
                    i.mimeType = null,
                    i.fileSize = null,
                    i._isUpdate = !1,
                    i._file = null,
                    i._fileType = null,
                    i._fileUrl = null,
                    i._thumbnailSizes = [],
                    t && i._update(t),
                    i
                }
                return S(r, [{
                    key: "serialize",
                    value: function() {
                        return w(N(r.prototype), "_serialize", this).call(this, function(t) {
                            t.hasOwnProperty("_isUpdate") && (t.isUpdate = t._isUpdate,
                            delete t._isUpdate),
                            t.hasOwnProperty("_file") && (t.file = t._file,
                            delete t._file),
                            t.hasOwnProperty("_fileType") && (t.fileType = t._fileType,
                            delete t._fileType),
                            t.hasOwnProperty("_fileUrl") && (t.fileUrl = t._fileUrl,
                            delete t._fileUrl),
                            t.hasOwnProperty("_thumbnailSizes") && (t.thumbnailSizes = t._thumbnailSizes,
                            delete t._thumbnailSizes)
                        })
                    }
                }, {
                    key: "file",
                    get: function() {
                        return this._file
                    },
                    set: function(t) {
                        ef.isFile(t) && (this._fileUrl = null,
                        this._file = t,
                        eu.isFile(t) ? this._fileType = q.FILE : eu.isBlob(t) ? this._fileType = q.BLOB : eu.isFileLikeObject(t) ? this._fileType = q.BLOB_LIKE_OBJECT : "string" == typeof t && (this._fileType = q.URL))
                    }
                }, {
                    key: "fileType",
                    get: function() {
                        return this._fileType
                    }
                }, {
                    key: "fileUrl",
                    get: function() {
                        return this._fileUrl
                    },
                    set: function(t) {
                        "string" == typeof t && (this._fileUrl = t,
                        this._file = null)
                    }
                }, {
                    key: "thumbnailSizes",
                    get: function() {
                        return this._thumbnailSizes
                    },
                    set: function(t) {
                        if (Array.isArray(t)) {
                            for (var n = 0; n < t.length; n++)
                                if ("object" !== E(t[n]) || "number" != typeof t[n].maxWidth || "number" != typeof t[n].maxHeight)
                                    return void (this._thumbnailSizes = []);
                            this._thumbnailSizes = t
                        }
                    }
                }, {
                    key: "_update",
                    value: function(t) {
                        w(N(r.prototype), "_update", this).call(this, t),
                        t.hasOwnProperty("file_name") && (this.fileName = t.file_name),
                        t.hasOwnProperty("mime_type") && (this.mimeType = t.mime_type),
                        t.hasOwnProperty("file_size") && (this.fileSize = t.file_size),
                        t.hasOwnProperty("is_update") && (this._isUpdate = t.is_update),
                        t.hasOwnProperty("file") && (this._file = t.file),
                        t.hasOwnProperty("file_type") && (this._fileType = t.file_type),
                        t.hasOwnProperty("file_url") && (this._fileUrl = t.file_url),
                        t.hasOwnProperty("thumbnail_sizes") && (this._thumbnailSizes = t.thumbnail_sizes)
                    }
                }, {
                    key: "_validate",
                    value: function() {
                        return w(N(r.prototype), "_validate", this).call(this) && (this._isUpdate || ef.isFile(this.file) || "string" == typeof this.fileUrl) && ("string" == typeof this.fileName || null === this.fileName) && ("string" == typeof this.mimeType || null === this.mimeType) && ("number" == typeof this.fileSize || null === this.fileSize) && (null === this._thumbnailSizes || this._thumbnailSizes.every(function(t) {
                            return "object" === E(t) && t.maxWidth > 0 && t.maxHeight > 0
                        }))
                    }
                }], [{
                    key: "objectify",
                    value: function(t) {
                        var n = t.fileName
                          , r = t.mimeType
                          , i = t.fileSize
                          , s = t.data
                          , a = t.customType
                          , o = t.isUpdate
                          , l = t.file
                          , u = t.fileType
                          , c = t.fileUrl
                          , d = t.thumbnailSizes;
                        return v(v({}, rd._objectify(t)), {}, {
                            file_name: void 0 === n ? null : n,
                            mime_type: void 0 === r ? null : r,
                            file_size: void 0 === i ? null : i,
                            data: void 0 === s ? null : s,
                            custom_type: void 0 === a ? null : a,
                            is_update: void 0 !== o && o,
                            file: void 0 === l ? null : l,
                            file_type: void 0 === u ? null : u,
                            file_url: void 0 === c ? null : c,
                            thumbnail_sizes: void 0 === d ? [] : d
                        })
                    }
                }]),
                r
            }(rd)
              , rm = function(t) {
                A(r, t);
                var n = O(r);
                function r(t) {
                    var i;
                    return b(this, r),
                    (i = n.call(this, t)).messageType = tp.MESSAGE_TYPE_FILE,
                    i.plainUrl = null,
                    i.name = "File",
                    i.size = 0,
                    i.type = null,
                    i.thumbnails = [],
                    i._sender = null,
                    i.requireAuth = null,
                    i.requestState = null,
                    i.requestedMentionUserIds = [],
                    i.errorCode = 0,
                    i.messageSurvivalSeconds = -1,
                    i._messageParams = null,
                    t && i._update(t),
                    i
                }
                return S(r, [{
                    key: "_update",
                    value: function(t) {
                        var n = id.getInstance(this._iid)
                          , r = x.get(this._iid).container.auth
                          , i = Y.get(this._iid).Sender;
                        if (this._sender = new i(t.user),
                        this.requireAuth = !!t.hasOwnProperty("require_auth") && t.require_auth,
                        t.hasOwnProperty("url") && (this.plainUrl = t.url.split("?auth=")[0]),
                        this.name = t.hasOwnProperty("name") ? t.name : "File",
                        this.size = parseInt(t.size) || 0,
                        this.type = t.type,
                        t.hasOwnProperty("custom") && (this.data = t.custom),
                        t.hasOwnProperty("file")) {
                            var s = t.file;
                            s.hasOwnProperty("url") && (this.plainUrl = s.url),
                            s.hasOwnProperty("name") && (this.name = s.name),
                            s.hasOwnProperty("size") && (this.size = s.size),
                            s.hasOwnProperty("type") && (this.type = s.type),
                            s.hasOwnProperty("custom") && (this.data = s.custom)
                        }
                        if (Object.defineProperty(this, "url", {
                            value: this.requireAuth ? "".concat(this.plainUrl, "?auth=").concat(r.eKey) : this.plainUrl,
                            configurable: !0,
                            writable: !1
                        }),
                        this.reqId = t.hasOwnProperty("req_id") ? String(t.req_id) : "",
                        this.thumbnails = t.hasOwnProperty("thumbnails") ? t.thumbnails : [],
                        this.requireAuth)
                            for (var a = 0; a < this.thumbnails.length; a++)
                                this.thumbnails[a].plainUrl = String(this.thumbnails[a].url).split("?auth=")[0],
                                this.thumbnails[a].url = this.requireAuth ? "".concat(this.thumbnails[a].plainUrl, "?auth=").concat(r.eKey) : this.thumbnails[a].plainUrl;
                        this.requestState = this.messageId > 0 ? n.MessageRequestState.SUCCEEDED : n.MessageRequestState.FAILED,
                        t.hasOwnProperty("sending_status") && (this.requestState = t.sending_status,
                        this.requestState === n.MessageSendingStatus.CANCELED && (this.requestState = n.MessageRequestState.FAILED)),
                        this.requestedMentionUserIds = [],
                        t.hasOwnProperty("requested_mention_user_ids") && (this.requestedMentionUserIds = t.requested_mention_user_ids),
                        this.errorCode = 0,
                        t.hasOwnProperty("error_code") && (this.errorCode = t.error_code),
                        this.messageSurvivalSeconds = -1,
                        t.hasOwnProperty("message_survival_seconds") && (this.messageSurvivalSeconds = t.message_survival_seconds),
                        t.hasOwnProperty("message_params") && (this._messageParams = new rg(t.message_params))
                    }
                }, {
                    key: "sender",
                    get: function() {
                        var t = id.getInstance(this._iid)
                          , n = Y.get(this._iid).GroupChannel;
                        if (this._sender && t.Options.useMemberAsMessageSender && this.isGroupChannel()) {
                            var r = n.cachedChannels[this.channelUrl];
                            if (r) {
                                var i = r.memberMap[this._sender.userId];
                                i && (this._sender.nickname !== i.nickname && (this._sender.nickname = i.nickname),
                                this._sender.plainProfileUrl !== i.plainProfileUrl && (this._sender.plainProfileUrl = i.plainProfileUrl),
                                ef.deepEqual(this._sender.metaData, i.metaData) || (this._sender.metaData = i.metaData))
                            }
                        }
                        return this._sender
                    },
                    set: function(t) {
                        this._sender = t
                    }
                }, {
                    key: "isResendable",
                    value: function() {
                        var t = id.getInstance(this._iid);
                        return this.sendingStatus === t.MessageSendingStatus.FAILED && ef.isResendableError(this.errorCode)
                    }
                }, {
                    key: "serialize",
                    value: function() {
                        var t = this;
                        return w(N(r.prototype), "serialize", this).call(this, function(n) {
                            t._messageParams && (n.messageParams = t._messageParams.serialize())
                        })
                    }
                }, {
                    key: "messageParams",
                    get: function() {
                        return this._messageParams
                    }
                }, {
                    key: "_clone",
                    value: function() {
                        var t = Y.get(this._iid).FileMessage.buildFromSerializedData(this.serialize());
                        if (this._messageParams && t._messageParams) {
                            var n = this._messageParams.file;
                            n && eu.isBlob(n) && (t._messageParams.file = n.slice())
                        }
                        return t
                    }
                }, {
                    key: "_isSentByMe",
                    value: function() {
                        var t = id.getInstance(this._iid);
                        return this.sendingStatus === t.MessageSendingStatus.SUCCEEDED && 0 === this.updatedAt && this._sender && this._sender.userId === t.currentUser.userId
                    }
                }], [{
                    key: "objectify",
                    value: function(t) {
                        var n = id.getInstance(this._iid)
                          , r = Y.get(this._iid)
                          , i = r.BaseChannel
                          , s = r.BaseMessageParams
                          , a = r.Sender
                          , o = r.User
                          , l = r.UserMessage
                          , u = r.FileMessage
                          , c = r.AdminMessage
                          , d = r.ThreadInfo
                          , h = r.OGMetaData
                          , f = r.Reaction
                          , p = r.FileMessageParams
                          , g = r.AppleCriticalAlertOptions
                          , m = t.messageId
                          , y = t.messageType
                          , _ = void 0 === y ? tp.MESSAGE_TYPE_BASE : y
                          , E = t.reqId
                          , b = t.user
                          , C = t.channel
                          , S = t.plainUrl
                          , A = t.name
                          , N = t.type
                          , T = t.size
                          , I = t.data
                          , O = t.customType
                          , w = t.mentionType
                          , k = void 0 === w ? s.MentionType.USERS : w
                          , U = t.mentionedUsers
                          , R = t.mentionedUserIds
                          , M = t.requestedMentionUserIds
                          , P = t.reactions
                          , L = t.metaArrays
                          , D = void 0 === L ? [] : L
                          , x = t.rootMessageId
                          , F = t.parentMessageId
                          , H = t.parentMessageText
                          , j = t.threadInfo
                          , G = void 0 === j ? null : j
                          , B = t.isReplyToChannel
                          , V = t.parentMessage
                          , q = void 0 === V ? null : V
                          , z = t.thumbnails
                          , K = t.requireAuth
                          , W = t.sendingStatus
                          , Q = t.errorCode
                          , J = t.silent
                          , Z = t.isGlobalBlocked
                          , $ = t.messageSurvivalSeconds
                          , X = t.ogMetaData
                          , ee = void 0 === X ? null : X
                          , et = t.isOperatorMessage
                          , en = t.appleCriticalAlertOptions
                          , er = t.createdAt
                          , ei = t.updatedAt
                          , es = t.messageParams
                          , ea = void 0 === es ? null : es
                          , eo = t.isAutoResendRegistered
                          , el = {};
                        switch (el.req_id = void 0 === E ? "" : E,
                        el.msg_id = m,
                        _) {
                        case tp.MESSAGE_TYPE_USER:
                            el.type = "MESG";
                            break;
                        case tp.MESSAGE_TYPE_FILE:
                            el.type = "FILE";
                            break;
                        case tp.MESSAGE_TYPE_ADMIN:
                            el.type = "ADMM"
                        }
                        el.user = a.objectify(v({}, void 0 === b ? {} : b)),
                        el.channel_url = C.url,
                        el.channel_type = C.channelType === i.CHANNEL_TYPE_OPEN ? i.CHANNEL_TYPE_OPEN : i.CHANNEL_TYPE_GROUP,
                        el.url = S,
                        el.name = void 0 === A ? null : A,
                        el.type = N,
                        el.size = void 0 === T ? 0 : T,
                        el.custom = void 0 === I ? "" : I,
                        el.custom_type = void 0 === O ? "" : O,
                        el.thumbnails = void 0 === z ? [] : z,
                        el.require_auth = void 0 !== K && K,
                        el.is_global_block = !!(void 0 !== Z && Z),
                        el.ts = er,
                        el.updated_at = void 0 === ei ? 0 : ei,
                        el.mention_type = k,
                        el.mentioned_users = (void 0 === U ? [] : U).map(function(t) {
                            return o.objectify(t)
                        }),
                        el.mentioned_user_ids = void 0 === R ? [] : R,
                        el.requested_mention_user_ids = void 0 === M ? [] : M,
                        el.reactions = (void 0 === P ? [] : P).map(function(t) {
                            return f.objectify(t)
                        }),
                        el.metaarray = {};
                        for (var eu = 0; eu < D.length; eu++) {
                            var ec = D[eu].key;
                            el.metaarray[ec] = D[eu].value
                        }
                        if (el.metaarray_key_order = D.map(function(t) {
                            return t.key
                        }),
                        el.root_message_id = void 0 === x ? 0 : x,
                        el.parent_message_id = void 0 === F ? 0 : F,
                        el.parent_message_text = void 0 === H ? "" : H,
                        G && (el.thread_info = d.objectify(G)),
                        el.is_reply_to_channel = void 0 !== B && B,
                        q)
                            switch (q.messageType) {
                            case i.MESSAGE_TYPE_USER:
                                el.parent_message_info = l._objectifySerializedData(q);
                                break;
                            case i.MESSAGE_TYPE_FILE:
                                el.parent_message_info = u._objectifySerializedData(q);
                                break;
                            case i.MESSAGE_TYPE_ADMIN:
                                el.parent_message_info = c._objectifySerializedData(q)
                            }
                        return el.sending_status = m > 0 ? n.MessageSendingStatus.SUCCEEDED : n.MessageSendingStatus.FAILED,
                        W && (el.sending_status = W),
                        el.silent = !!(void 0 !== J && J),
                        el.error_code = void 0 === Q ? 0 : Q,
                        el.message_survival_seconds = void 0 === $ ? -1 : $,
                        ee && (el.og_tag = h.objectify(ee)),
                        el.is_op_msg = !!(void 0 !== et && et),
                        en && (el.apple_critical_alert_options = g.objectify(en)),
                        ea && (el.message_params = p.objectify(ea)),
                        el.is_auto_resend_registered = void 0 !== eo && eo,
                        el
                    }
                }, {
                    key: "build",
                    value: function(t, n, r, i, s, a, o, l, u, c, d, h, f, p, g, m, y, _, v, E, b, C, S, A, N, T, I, O, w, k, U, R) {
                        return this.objectify({
                            messageId: n,
                            reqId: t,
                            user: r,
                            channel: i,
                            plainUrl: s,
                            name: a,
                            type: o,
                            size: l,
                            data: u,
                            customType: c,
                            mentionType: _,
                            mentionedUsers: v,
                            mentionedUserIds: A,
                            requestedMentionUserIds: T,
                            reactions: y,
                            metaArrays: m,
                            rootMessageId: E,
                            parentMessageId: b,
                            parentMessageText: C,
                            threadInfo: S,
                            thumbnails: f,
                            requireAuth: p,
                            sendingStatus: N,
                            errorCode: I,
                            isGlobalBlocked: d,
                            messageSurvivalSeconds: O,
                            ogMetaData: w,
                            isOperatorMessage: k,
                            appleCriticalAlertOptions: U,
                            createdAt: h,
                            updatedAt: g,
                            messageParams: R
                        })
                    }
                }, {
                    key: "buildFromSerializedData",
                    value: function(t) {
                        var n = Y.get(this._iid).FileMessage
                          , r = td.deserialize(t);
                        return new n(this._objectifySerializedData(r))
                    }
                }, {
                    key: "_objectifySerializedData",
                    value: function(t) {
                        return Y.get(this._iid).FileMessage.objectify(v(v({}, t), {}, {
                            channel: {
                                url: t.channelUrl,
                                channelType: t.channelType
                            },
                            user: t.sender,
                            messageParams: t.messageParams ? new rg(rg.objectify(t.messageParams)) : null
                        }))
                    }
                }]),
                r
            }(tp)
              , ry = function(t) {
                A(r, t);
                var n = O(r);
                function r(t) {
                    var i;
                    return b(this, r),
                    (i = n.call(this, t)).messageType = tp.MESSAGE_TYPE_ADMIN,
                    i.message = "",
                    i.translations = {},
                    t && i._update(t),
                    i
                }
                return S(r, [{
                    key: "_update",
                    value: function(t) {
                        this.message = String(t.message),
                        this.translations = t.hasOwnProperty("translations") ? t.translations : {}
                    }
                }], [{
                    key: "objectify",
                    value: function(t) {
                        var n = Y.get(this._iid)
                          , r = n.BaseChannel
                          , i = n.BaseMessageParams
                          , s = n.UserMessage
                          , a = n.FileMessage
                          , o = n.AdminMessage
                          , l = n.User
                          , u = n.ThreadInfo
                          , c = n.OGMetaData
                          , d = n.Reaction
                          , h = t.messageId
                          , f = t.messageType
                          , p = void 0 === f ? tp.MESSAGE_TYPE_BASE : f
                          , g = t.channel
                          , m = t.message
                          , y = t.data
                          , _ = t.customType
                          , v = t.mentionType
                          , E = void 0 === v ? i.MentionType.USERS : v
                          , b = t.mentionedUsers
                          , C = t.mentionedMessageTemplate
                          , S = t.reactions
                          , A = t.metaArrays
                          , N = void 0 === A ? [] : A
                          , T = t.rootMessageId
                          , I = t.parentMessageId
                          , O = t.parentMessageText
                          , w = t.threadInfo
                          , k = void 0 === w ? null : w
                          , U = t.isReplyToChannel
                          , R = t.parentMessage
                          , M = void 0 === R ? null : R
                          , P = t.translations
                          , L = t.silent
                          , D = t.ogMetaData
                          , x = void 0 === D ? null : D
                          , F = t.createdAt
                          , H = t.updatedAt
                          , j = {
                            msg_id: h,
                            channel_url: g.url,
                            channel_type: g.channelType === r.CHANNEL_TYPE_OPEN ? r.CHANNEL_TYPE_OPEN : r.CHANNEL_TYPE_GROUP,
                            message: m,
                            data: void 0 === y ? "" : y,
                            custom_type: void 0 === _ ? "" : _,
                            silent: void 0 !== L && L,
                            ts: F,
                            updated_at: void 0 === H ? 0 : H
                        };
                        switch (p) {
                        case tp.MESSAGE_TYPE_USER:
                            j.type = "MESG";
                            break;
                        case tp.MESSAGE_TYPE_FILE:
                            j.type = "FILE";
                            break;
                        case tp.MESSAGE_TYPE_ADMIN:
                            j.type = "ADMM"
                        }
                        j.translations = void 0 === P ? {} : P,
                        j.mention_type = E,
                        j.mentioned_users = (void 0 === b ? [] : b).map(function(t) {
                            return l.objectify(t)
                        }),
                        j.mentioned_message_template = void 0 === C ? null : C,
                        j.reactions = (void 0 === S ? [] : S).map(function(t) {
                            return d.objectify(t)
                        }),
                        j.metaarray = {};
                        for (var G = 0; G < N.length; G++) {
                            var B = N[G].key;
                            j.metaarray[B] = N[G].value
                        }
                        if (j.metaarray_key_order = N.map(function(t) {
                            return t.key
                        }),
                        j.root_message_id = void 0 === T ? 0 : T,
                        j.parent_message_id = void 0 === I ? 0 : I,
                        j.parent_message_text = void 0 === O ? "" : O,
                        k && (j.thread_info = u.objectify(k)),
                        j.is_reply_to_channel = void 0 !== U && U,
                        M)
                            switch (M.messageType) {
                            case r.MESSAGE_TYPE_USER:
                                j.parent_message_info = s._objectifySerializedData(M);
                                break;
                            case r.MESSAGE_TYPE_FILE:
                                j.parent_message_info = a._objectifySerializedData(M);
                                break;
                            case r.MESSAGE_TYPE_ADMIN:
                                j.parent_message_info = o._objectifySerializedData(M)
                            }
                        return x && (j.og_tag = c.objectify(x)),
                        j
                    }
                }, {
                    key: "build",
                    value: function(t, n, r, i, s, a, o, l, u, c, d, h, f, p, g, m, y, _) {
                        return this.objectify({
                            messageId: t,
                            channel: n,
                            message: r,
                            data: i,
                            customType: s,
                            mentionType: d,
                            mentionedUsers: h,
                            mentionedMessageTemplate: f,
                            reactions: c,
                            metaArrays: u,
                            rootMessageId: p,
                            parentMessageId: g,
                            parentMessageText: m,
                            threadInfo: y,
                            translations: a,
                            ogMetaData: _,
                            createdAt: o,
                            updatedAt: l
                        })
                    }
                }, {
                    key: "buildFromSerializedData",
                    value: function(t) {
                        var n = Y.get(this._iid).AdminMessage
                          , r = td.deserialize(t);
                        return new n(this._objectifySerializedData(r))
                    }
                }, {
                    key: "_objectifySerializedData",
                    value: function(t) {
                        return Y.get(this._iid).AdminMessage.objectify(v(v({}, t), {}, {
                            channel: {
                                url: t.channelUrl,
                                channelType: t.channelType
                            }
                        }))
                    }
                }]),
                r
            }(tp)
              , r_ = function() {
                function t(n) {
                    b(this, t);
                    var r = Y.get(this._iid)
                      , i = r.BaseMessage
                      , s = r.BaseMessageParams;
                    this.scheduledId = 0,
                    this.scheduledDateTimeString = "",
                    this.scheduledTimezone = "",
                    this.status = t.Status.SCHEDULED,
                    this.createdAt = 0,
                    this.updatedAt = 0,
                    this._messageType = i.MESSAGE_TYPE_BASE,
                    this._sender = null,
                    this._channelType = "",
                    this.channelUrl = "",
                    this.message = "",
                    this.customType = "",
                    this.data = "",
                    this.metaArrays = [],
                    this.mentionType = s.MentionType.USERS,
                    this.mentionedUsers = [],
                    this.pushNotificationDeliveryOption = s.PushNotificationDeliveryOption.DEFAULT,
                    this.translationTargetLanguages = [],
                    this.errorMessage = "",
                    this.errorCode = 0,
                    this.appleCriticalAlertOptions = null,
                    n && this._update(n)
                }
                return S(t, [{
                    key: "sender",
                    get: function() {
                        var t = id.getInstance(this._iid)
                          , n = Y.get(this._iid).GroupChannel;
                        if (t.Options.useMemberAsMessageSender && this.isGroupChannel()) {
                            var r = n.cachedChannels[this.channelUrl];
                            if (r) {
                                var i = r.memberMap[this._sender.userId];
                                i && (this._sender.nickname !== i.nickname && (this._sender.nickname = i.nickname),
                                this._sender.plainProfileUrl !== i.plainProfileUrl && (this._sender.plainProfileUrl = i.plainProfileUrl),
                                ef.deepEqual(this._sender.metaData, i.metaData) || (this._sender.metaData = i.metaData))
                            }
                        }
                        return this._sender
                    },
                    set: function(t) {
                        this._sender = t
                    }
                }, {
                    key: "_update",
                    value: function(n) {
                        var r = this
                          , i = Y.get(this._iid)
                          , s = i.User
                          , a = i.Sender
                          , o = i.BaseMessageParams
                          , l = i.MessageMetaArray
                          , u = i.AppleCriticalAlertOptions;
                        this.scheduledId = n.hasOwnProperty("scheduled_id") ? parseInt(n.scheduled_id) : 0,
                        this.scheduledDateTimeString = n.hasOwnProperty("scheduled_dt") ? String(n.scheduled_dt) : "",
                        this.scheduledTimezone = n.hasOwnProperty("scheduled_timezone") ? String(n.scheduled_timezone) : "",
                        this.status = n.hasOwnProperty("status") ? String(n.status) : "",
                        this.createdAt = n.hasOwnProperty("created_at") ? parseInt(n.created_at) : 0,
                        this.updatedAt = n.hasOwnProperty("updated_at") ? parseInt(n.updated_at) : 0,
                        this.channelUrl = n.hasOwnProperty("channel_url") ? String(n.channel_url) : "",
                        this._channelType = n.hasOwnProperty("channel_type") ? String(n.channel_type) : "",
                        this._messageType = n.hasOwnProperty("type") ? String(n.type) : "",
                        this._sender = n.hasOwnProperty("user") ? new a(n.user) : null,
                        this.message = n.hasOwnProperty("message") ? String(n.message) : "",
                        this.customType = n.hasOwnProperty("custom_type") ? String(n.custom_type) : "",
                        this.data = n.hasOwnProperty("data") ? String(n.data) : "";
                        var c = n.hasOwnProperty("metaarray") ? n.metaarray : {}
                          , d = n.hasOwnProperty("metaarray_key_order") ? n.metaarray_key_order : Object.keys(c).sort(function(t, n) {
                            return t.localeCompare(n)
                        });
                        this.metaArrays = [];
                        for (var h = 0; h < d.length; h++) {
                            var f = d[h];
                            this.metaArrays.push(new l(f,c[f] || []))
                        }
                        this.mentionType = n.hasOwnProperty("mention_type") ? n.mention_type : o.MentionType.USERS,
                        this.mentionedUsers = [],
                        n.hasOwnProperty("mentioned_users") && n.mentioned_users.forEach(function(t) {
                            var n = new s(t);
                            r.mentionedUsers.push(n)
                        }),
                        this.pushNotificationDeliveryOption = n.hasOwnProperty("push_option") ? n.push_option : o.PushNotificationDeliveryOption.DEFAULT,
                        this.translationTargetLanguages = n.hasOwnProperty("translation_target_langs") ? n.translation_target_langs : [],
                        this.status === t.Status.FAILED && (n.hasOwnProperty("error") && n.error.hasOwnProperty("message") && (this.errorMessage = String(n.error.message)),
                        n.hasOwnProperty("error") && n.error.hasOwnProperty("code") && (this.errorCode = parseInt(n.error.code))),
                        n.hasOwnProperty("apple_critical_alert_options") && (this.appleCriticalAlertOptions = new u(n.apple_critical_alert_options))
                    }
                }, {
                    key: "isOpenChannel",
                    value: function() {
                        var t = Y.get(this._iid).BaseChannel;
                        return this._channelType === t.CHANNEL_TYPE_OPEN
                    }
                }, {
                    key: "isGroupChannel",
                    value: function() {
                        var t = Y.get(this._iid).BaseChannel;
                        return this._channelType === t.CHANNEL_TYPE_GROUP
                    }
                }, {
                    key: "metaArray",
                    get: function() {
                        var t = {};
                        return this.metaArrays.forEach(function(n) {
                            t[n.key] = n.value
                        }),
                        t
                    },
                    set: function(t) {
                        if ("object" === E(t) && t) {
                            var n = Y.get(this._iid).MessageMetaArray
                              , r = [];
                            Object.keys(t).forEach(function(i) {
                                r.push(new n(i,t[i]))
                            }),
                            this.metaArrays = r
                        }
                    }
                }], [{
                    key: "Status",
                    get: function() {
                        return {
                            SCHEDULED: "scheduled",
                            SENT: "sent",
                            CANCELED: "canceled",
                            FAILED: "failed"
                        }
                    }
                }]),
                t
            }()
              , rv = function() {
                function t() {
                    this.threadInfo = null,
                    this.targetMessageId = 0,
                    this.channelUrl = null,
                    this.channelType = null
                }
                return t.createFromJson = function(t) {
                    var n = Y.get(this._iid)
                      , r = n.BaseChannel
                      , i = n.ThreadInfo
                      , s = t.thread_info
                      , a = t.root_message_id
                      , o = t.channel_url
                      , l = t.channel_type;
                    if (s && "object" == typeof s && ("string" == typeof a || "number" == typeof a) && "string" == typeof o && "string" == typeof l && [r.CHANNEL_TYPE_GROUP, r.CHANNEL_TYPE_OPEN].includes(l)) {
                        var u = new this;
                        return u.threadInfo = new i(s),
                        u.targetMessageId = parseInt(a + ""),
                        u.channelUrl = o,
                        u.channelType = l,
                        u
                    }
                    return null
                }
                ,
                t
            }()
              , rE = function() {
                function t() {
                    b(this, t),
                    this.isLoading = !1,
                    this.hasNext = !0,
                    this.limit = 20,
                    this.userIdsFilter = [],
                    this.metaDataKeyFilter = "",
                    this.metaDataValuesFilter = [],
                    this.nicknameStartsWithFilter = null,
                    this._token = ""
                }
                return S(t, [{
                    key: "next",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            "number" == typeof n.limit && n.limit > 0 && Array.isArray(n.userIdsFilter) && "string" == typeof n.metaDataKeyFilter && Array.isArray(n.metaDataValuesFilter) && !!n.metaDataKeyFilter == n.metaDataValuesFilter.length > 0 && ("string" == typeof n.nicknameStartsWithFilter || null === n.nicknameStartsWithFilter) ? n.isLoading ? t(new z("Query in progress.",z.QUERY_IN_PROGRESS), null) : n.hasNext ? (n.isLoading = !0,
                            x.get(n._iid).container.apiClient.loadUserList(v(v({}, n), {}, {
                                token: n._token
                            }), function(r, i) {
                                var s = null;
                                if (!r) {
                                    var a = Y.get(n._iid).User
                                      , o = String(i.next);
                                    n._token = o,
                                    n.hasNext = !!o,
                                    s = i.users.map(function(t) {
                                        return new a(t)
                                    })
                                }
                                n.isLoading = !1,
                                t(r, s)
                            })) : t(null, []) : t(eI.error, null)
                        }, t)
                    }
                }]),
                t
            }()
              , rb = function() {
                function t(n) {
                    b(this, t),
                    this.isLoading = !1,
                    this.hasNext = !0,
                    this.limit = 20,
                    this._isOpenChannel = !1,
                    this._channelUrl = null,
                    this._token = "",
                    n.channelUrl && (this._channelUrl = n.channelUrl),
                    n.isOpenChannel && (this._isOpenChannel = n.isOpenChannel)
                }
                return S(t, [{
                    key: "next",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            "number" == typeof n.limit && n.limit > 0 ? n.isLoading ? t(new z("Query in progress.",z.QUERY_IN_PROGRESS), null) : n.hasNext ? (n.isLoading = !0,
                            x.get(n._iid).container.apiClient.loadBannedUserList(v(v({}, n), {}, {
                                channelUrl: n._channelUrl,
                                isOpenChannel: n._isOpenChannel,
                                token: n._token
                            }), function(r, i) {
                                var s = null;
                                if (!r) {
                                    var a = Y.get(n._iid).RestrictedUser
                                      , o = String(i.next);
                                    n._token = o,
                                    n.hasNext = !!o,
                                    s = i.banned_list.map(function(t) {
                                        var n = new a(t);
                                        return n.restrictionInfo.restrictionType = a.RestrictionType.BANNED,
                                        n
                                    })
                                }
                                n.isLoading = !1,
                                t(r, s)
                            })) : t(null, []) : t(eI.error, null)
                        }, t)
                    }
                }]),
                t
            }()
              , rC = function() {
                function t() {
                    b(this, t),
                    this.isLoading = !1,
                    this.hasNext = !0,
                    this.limit = 20,
                    this.userIdsFilter = [],
                    this._token = ""
                }
                return S(t, [{
                    key: "next",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            "number" == typeof n.limit && n.limit > 0 && Array.isArray(n.userIdsFilter) ? n.isLoading ? t(new z("Query in progress.",z.QUERY_IN_PROGRESS), null) : n.hasNext ? (n.isLoading = !0,
                            x.get(n._iid).container.apiClient.loadBlockedUserList(v(v({}, n), {}, {
                                token: n._token
                            }), function(r, i) {
                                var s = null;
                                if (!r) {
                                    var a = Y.get(n._iid).User
                                      , o = String(i.next);
                                    n._token = o,
                                    n.hasNext = !!o,
                                    s = i.users.map(function(t) {
                                        return new a(t)
                                    })
                                }
                                n.isLoading = !1,
                                t(r, s)
                            })) : t(null, []) : t(eI.error, null)
                        }, t)
                    }
                }]),
                t
            }()
              , rS = function() {
                function t() {
                    b(this, t),
                    this.isLoading = !1,
                    this.hasMore = !0,
                    this.limit = 20,
                    this._token = ""
                }
                return S(t, [{
                    key: "next",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            "number" == typeof n.limit && n.limit > 0 ? n.isLoading ? t(new z("Query in progress.",z.QUERY_IN_PROGRESS), null) : n.hasMore ? (n.isLoading = !0,
                            x.get(n._iid).container.apiClient.loadFriendList(v(v({}, n), {}, {
                                token: n._token
                            }), function(r, i) {
                                var s = null;
                                if (!r) {
                                    var a = Y.get(n._iid).User
                                      , o = String(i.next);
                                    n._token = o,
                                    n.hasMore = !!o,
                                    s = i.users.map(function(t) {
                                        return new a(t)
                                    })
                                }
                                n.isLoading = !1,
                                t(r, s)
                            })) : t(null, []) : t(eI.error, null)
                        }, t)
                    }
                }]),
                t
            }()
              , rA = function() {
                function t() {
                    b(this, t),
                    this.isLoading = !1,
                    this.hasNext = !0,
                    this.limit = 20,
                    this.includeEmpty = !1,
                    this.order = t.ORDER_LATEST_LAST_MESSAGE,
                    this._token = "",
                    this._searchFilter = {},
                    this._userIdsFilter = {
                        userIds: [],
                        includeMode: !0,
                        queryType: t.QueryType.AND
                    },
                    this._userIdsExactFilter = [],
                    this._userIdsIncludeFilter = [],
                    this._userIdsIncludeFilterQueryType = t.QueryType.AND,
                    this.nicknameContainsFilter = "",
                    this.nicknameStartsWithFilter = "",
                    this.nicknameExactMatchFilter = "",
                    this.channelNameContainsFilter = "",
                    this.memberStateFilter = n6.MemberStateFilter.ALL,
                    this.customTypesFilter = [],
                    this.channelUrlsFilter = [],
                    this.superChannelFilter = n6.SuperChannelFilter.ALL,
                    this.publicChannelFilter = n6.PublicChannelFilter.ALL,
                    this.customTypeStartsWithFilter = null,
                    this.unreadChannelFilter = n6.UnreadChannelFilter.ALL,
                    this.metadataOrderKeyFilter = null,
                    this.metadataKey = null,
                    this.metadataValues = [],
                    this.metadataValueStartsWith = null,
                    this.hiddenChannelFilter = n6.HiddenChannelFilter.UNHIDDEN,
                    this.includeFrozen = !0,
                    this.includeMetaData = !0
                }
                return S(t, [{
                    key: "userIdsExactFilter",
                    get: function() {
                        return this._userIdsExactFilter
                    },
                    set: function(t) {
                        Array.isArray(t) && (this._userIdsExactFilter = t,
                        this._userIdsIncludeFilter = [],
                        this._userIdsFilter.userIds = this._userIdsExactFilter,
                        this._userIdsFilter.includeMode = !1)
                    }
                }, {
                    key: "userIdsIncludeFilter",
                    get: function() {
                        return this._userIdsIncludeFilter
                    },
                    set: function(t) {
                        Array.isArray(t) && (this._userIdsIncludeFilter = t,
                        this._userIdsExactFilter = [],
                        this._userIdsFilter.userIds = this._userIdsIncludeFilter,
                        this._userIdsFilter.includeMode = !0)
                    }
                }, {
                    key: "userIdsIncludeFilterQueryType",
                    get: function() {
                        return this._userIdsIncludeFilterQueryType
                    },
                    set: function(n) {
                        Object.keys(t.QueryType).map(function(n) {
                            return t.QueryType[n]
                        }).indexOf(n) > -1 && (this._userIdsIncludeFilterQueryType = n.toUpperCase(),
                        this._userIdsFilter.queryType = this._userIdsIncludeFilterQueryType)
                    }
                }, {
                    key: "setSearchFilter",
                    value: function(t, n) {
                        Array.isArray(t) && 0 !== t.length && "string" == typeof n && n && (this._searchFilter = {
                            search_query: n,
                            search_fields: t.join(",").toLocaleLowerCase()
                        })
                    }
                }, {
                    key: "serialize",
                    value: function() {
                        return td.serialize(this, function(t) {
                            t.isLoading = !1
                        })
                    }
                }, {
                    key: "next",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            var r = Y.get(n._iid)
                              , i = r.GroupChannel
                              , s = r.GroupChannelListQuery;
                            "number" == typeof n.limit && n.limit > 0 && "boolean" == typeof n.includeEmpty && "string" == typeof n.order && [s.ORDER_CHRONOLOGICAL, s.ORDER_LATEST_LAST_MESSAGE, s.CHANNEL_NAME_ALPHABETICAL, s.METADATA_VALUE_ALPHABETICAL].indexOf(n.order.toLowerCase()) > -1 && Array.isArray(n._userIdsExactFilter) && Array.isArray(n._userIdsIncludeFilter) && Array.isArray(n.customTypesFilter) && Array.isArray(n.channelUrlsFilter) && Object.keys(s.QueryType).map(function(t) {
                                return s.QueryType[t]
                            }).indexOf(n._userIdsIncludeFilterQueryType.toUpperCase()) > -1 && Object.keys(i.MemberStateFilter).map(function(t) {
                                return i.MemberStateFilter[t]
                            }).indexOf(n.memberStateFilter) > -1 && Object.keys(i.SuperChannelFilter).map(function(t) {
                                return i.SuperChannelFilter[t]
                            }).indexOf(n.superChannelFilter) > -1 && Object.keys(i.PublicChannelFilter).map(function(t) {
                                return i.PublicChannelFilter[t]
                            }).indexOf(n.publicChannelFilter) > -1 && Object.keys(i.UnreadChannelFilter).map(function(t) {
                                return i.UnreadChannelFilter[t]
                            }).indexOf(n.unreadChannelFilter) > -1 && Object.keys(i.HiddenChannelFilter).map(function(t) {
                                return i.HiddenChannelFilter[t]
                            }).indexOf(n.hiddenChannelFilter) > -1 && ("string" == typeof n.customTypeStartsWithFilter || null === n.customTypeStartsWithFilter) && "string" == typeof n.nicknameContainsFilter && "string" == typeof n.nicknameStartsWithFilter && "string" == typeof n.nicknameExactMatchFilter && "string" == typeof n.channelNameContainsFilter && ("string" == typeof n.metadataOrderKeyFilter || null === n.metadataOrderKeyFilter) && ("string" == typeof n.metadataKey || null === n.metadataKey) && Array.isArray(n.metadataValues) && n.metadataValues.every(function(t) {
                                return "string" == typeof t
                            }) && ("string" == typeof n.metadataValueStartsWith || null === n.metadataValueStartsWith) && "boolean" == typeof n.includeFrozen && "boolean" == typeof n.includeMetaData ? n.isLoading ? t(new z("Query in progress.",z.QUERY_IN_PROGRESS), null) : n.hasNext ? (n.isLoading = !0,
                            x.get(n._iid).container.apiClient.loadGroupChannelList(v(v({}, n), {}, {
                                token: n._token,
                                userIdsFilter: n._userIdsFilter,
                                searchFilter: n._searchFilter
                            })).then(function(r) {
                                var i = Y.get(n._iid).GroupChannel
                                  , s = String(r.next);
                                n._token = s,
                                n.hasNext = !!s;
                                var a = r.channels;
                                if (!a || !Array.isArray(a))
                                    throw new z("Failed at loading group channels.",z.MALFORMED_DATA);
                                var o = a.map(function(t) {
                                    return "number" == typeof r.ts && (t.ts = r.ts),
                                    i.upsert(t)
                                });
                                n.isLoading = !1,
                                t(null, o)
                            }).catch(function(r) {
                                n.isLoading = !1,
                                t(r, null)
                            })) : t(null, []) : t(eI.error, null)
                        }, t)
                    }
                }], [{
                    key: "ORDER_LATEST_LAST_MESSAGE",
                    get: function() {
                        return "latest_last_message"
                    }
                }, {
                    key: "ORDER_CHRONOLOGICAL",
                    get: function() {
                        return "chronological"
                    }
                }, {
                    key: "CHANNEL_NAME_ALPHABETICAL",
                    get: function() {
                        return "channel_name_alphabetical"
                    }
                }, {
                    key: "METADATA_VALUE_ALPHABETICAL",
                    get: function() {
                        return "metadata_value_alphabetical"
                    }
                }, {
                    key: "QueryType",
                    get: function() {
                        return {
                            AND: "AND",
                            OR: "OR"
                        }
                    }
                }, {
                    key: "SearchField",
                    get: function() {
                        return {
                            MEMBER_NICKNAME: "member_nickname",
                            CHANNEL_NAME: "channel_name"
                        }
                    }
                }, {
                    key: "buildFromSerializedData",
                    value: function(t) {
                        var n = Y.get(this._iid).GroupChannel
                          , r = td.deserialize(t)
                          , i = n.createMyGroupChannelListQuery();
                        return Object.keys(r).forEach(function(t) {
                            i.hasOwnProperty(t) && (i[t] = r[t])
                        }),
                        i
                    }
                }]),
                t
            }()
              , rN = function() {
                function t(n) {
                    b(this, t),
                    this.isLoading = !1,
                    this.hasNext = !0,
                    this.limit = 20,
                    this.mutedMemberFilter = t.MutedMemberFilter.ALL,
                    this.memberStateFilter = n6.MemberStateFilter.ALL,
                    this.nicknameStartsWithFilter = null,
                    this.order = t.Order.MEMBER_NICKNAME_ALPHABETICAL,
                    this._token = "",
                    this._channelUrl = n
                }
                return S(t, [{
                    key: "next",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            var r = Y.get(n._iid)
                              , i = r.GroupChannel
                              , s = r.Member
                              , a = r.MemberListQuery;
                            if ("number" == typeof n.limit && n.limit > 0 && Object.keys(a.MutedMemberFilter).map(function(t) {
                                return a.MutedMemberFilter[t]
                            }).indexOf(n.mutedMemberFilter) > -1 && Object.keys(i.MemberStateFilter).map(function(t) {
                                return i.MemberStateFilter[t]
                            }).indexOf(n.memberStateFilter) > -1 && Object.keys(a.Order).map(function(t) {
                                return a.Order[t]
                            }).indexOf(n.order) > -1 && ("string" == typeof n.nicknameStartsWithFilter || null === n.nicknameStartsWithFilter)) {
                                if (n.isLoading)
                                    t(new z("Query in progress.",z.QUERY_IN_PROGRESS), null);
                                else if (n.hasNext) {
                                    n.isLoading = !0;
                                    var o = x.get(n._iid);
                                    n.memberStateFilter === i.MemberStateFilter.LEFT && (n.memberStateFilter = i.MemberStateFilter.ALL),
                                    o.container.apiClient.loadMemberList(v(v({}, n), {}, {
                                        channelUrl: n._channelUrl,
                                        token: n._token
                                    }), function(r, i) {
                                        var a = null;
                                        if (!r) {
                                            var o = String(i.next);
                                            n._token = o,
                                            n.hasNext = !!o,
                                            a = i.members.map(function(t) {
                                                return new s(t)
                                            })
                                        }
                                        n.isLoading = !1,
                                        t(r, a)
                                    })
                                } else
                                    t(null, [])
                            } else
                                t(eI.error, null)
                        }, t)
                    }
                }], [{
                    key: "MutedMemberFilter",
                    get: function() {
                        return {
                            ALL: "all",
                            MUTED: "muted",
                            UNMUTED: "unmuted"
                        }
                    }
                }, {
                    key: "Order",
                    get: function() {
                        return {
                            MEMBER_NICKNAME_ALPHABETICAL: "member_nickname_alphabetical",
                            OPERATOR_THEN_MEMBER_ALPHABETICAL: "operator_then_member_alphabetical"
                        }
                    }
                }]),
                t
            }()
              , rT = function() {
                function t(n) {
                    b(this, t),
                    this.isLoading = !1,
                    this.hasNext = !0,
                    this.limit = 20,
                    this._token = "",
                    n.channelUrl && (this._channelUrl = n.channelUrl),
                    n.isOpenChannel && (this._isOpenChannel = n.isOpenChannel)
                }
                return S(t, [{
                    key: "next",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            "number" == typeof n.limit && n.limit > 0 ? n.isLoading ? t(new z("Query in progress.",z.QUERY_IN_PROGRESS), null) : n.hasNext ? (n.isLoading = !0,
                            x.get(n._iid).container.apiClient.loadMutedUserList(v(v({}, n), {}, {
                                channelUrl: n._channelUrl,
                                isOpenChannel: n._isOpenChannel,
                                token: n._token
                            }), function(r, i) {
                                var s = null;
                                if (!r) {
                                    var a = Y.get(n._iid).RestrictedUser
                                      , o = String(i.next);
                                    n._token = o,
                                    n.hasNext = !!o,
                                    s = i.muted_list.map(function(t) {
                                        var n = new a(t);
                                        return n.restrictionInfo.restrictionType = a.RestrictionType.MUTED,
                                        n
                                    })
                                }
                                n.isLoading = !1,
                                t(r, s)
                            })) : t(null, []) : t(eI.error, null)
                        }, t)
                    }
                }]),
                t
            }()
              , rI = function() {
                function t() {
                    b(this, t),
                    this.limit = 20,
                    this.isLoading = !1,
                    this.hasNext = !0,
                    this.nameKeyword = null,
                    this.urlKeyword = null,
                    this.customTypes = [],
                    this.includeFrozen = !0,
                    this.includeMetaData = !0
                }
                return S(t, [{
                    key: "next",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            "number" == typeof n.limit && n.limit > 0 && Array.isArray(n.customTypes) && ("string" == typeof n.nameKeyword || null === n.nameKeyword) && ("string" == typeof n.urlKeyword || null === n.urlKeyword) && "boolean" == typeof n.includeFrozen && "boolean" == typeof n.includeMetaData ? n.isLoading ? t(new z("Query in progress.",z.QUERY_IN_PROGRESS), null) : n.hasNext ? (n.isLoading = !0,
                            x.get(n._iid).container.apiClient.loadOpenChannelList(v(v({}, n), {}, {
                                token: n._token
                            }), function(r, i) {
                                var s = null;
                                if (!r) {
                                    var a = Y.get(n._iid).OpenChannel
                                      , o = String(i.next);
                                    n._token = o,
                                    n.hasNext = !!o;
                                    var l = i.channels;
                                    l && Array.isArray(l) ? s = l.map(function(t) {
                                        return "number" == typeof i.ts && (t.ts = i.ts),
                                        a.upsert(t)
                                    }) : r = new z("Failed at loading open channels.",z.MALFORMED_DATA)
                                }
                                n.isLoading = !1,
                                t(r, s)
                            })) : t(null, []) : t(eI.error, null)
                        }, t)
                    }
                }]),
                t
            }()
              , rO = new WeakMap
              , rw = function() {
                function t(n) {
                    b(this, t),
                    this.isLoading = !1,
                    this.hasNext = !0,
                    this.limit = 20,
                    this._token = "",
                    rO.set(this, n)
                }
                return S(t, [{
                    key: "next",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            if ("number" == typeof n.limit && n.limit > 0) {
                                if (n.isLoading)
                                    t(new z("Query in progress.",z.QUERY_IN_PROGRESS), null);
                                else if (n.hasNext) {
                                    n.isLoading = !0;
                                    var r = rO.get(n);
                                    x.get(n._iid).container.apiClient.loadOperatorList(v(v({}, n), {}, {
                                        token: n._token,
                                        channelUrl: r.url,
                                        isOpenChannel: r.isOpenChannel()
                                    }), function(r, i) {
                                        var s = null;
                                        if (!r) {
                                            var a = Y.get(n._iid).User
                                              , o = String(i.next);
                                            n._token = o,
                                            n.hasNext = !!o,
                                            s = i.operators.map(function(t) {
                                                return new a(t)
                                            })
                                        }
                                        n.isLoading = !1,
                                        t(r, s)
                                    })
                                } else
                                    t(null, [])
                            } else
                                t(eI.error, null)
                        }, t)
                    }
                }]),
                t
            }()
              , rk = new WeakMap
              , rU = function() {
                function t(n) {
                    b(this, t),
                    this.isLoading = !1,
                    this.hasNext = !0,
                    this.limit = 20,
                    this._token = "",
                    n && rk.set(this, n.channelUrl)
                }
                return S(t, [{
                    key: "next",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            "number" == typeof n.limit && n.limit > 0 ? n.isLoading ? t(new z("Query in progress.",z.QUERY_IN_PROGRESS), null) : n.hasNext ? (n.isLoading = !0,
                            x.get(n._iid).container.apiClient.loadParticipantList(v(v({}, n), {}, {
                                channelUrl: rk.get(n),
                                token: n._token
                            }), function(r, i) {
                                var s = null;
                                if (!r) {
                                    var a = Y.get(n._iid).User
                                      , o = String(i.next);
                                    n._token = o,
                                    n.hasNext = !!o,
                                    s = i.participants.map(function(t) {
                                        return new a(t)
                                    })
                                }
                                n.isLoading = !1,
                                t(r, s)
                            })) : t(null, []) : t(eI.error, null)
                        }, t)
                    }
                }]),
                t
            }()
              , rR = new WeakMap
              , rM = function() {
                function t(n) {
                    var r = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
                      , i = r.limit
                      , s = r.reverse
                      , a = r.exactMatch
                      , o = r.channelUrl
                      , l = r.channelCustomType
                      , u = r.messageTimestampFrom
                      , c = r.messageTimestampTo
                      , d = r.order
                      , h = r.advancedQuery
                      , f = r.targetFields;
                    b(this, t),
                    this.isLoading = !1,
                    this.hasNext = !0,
                    rR.set(this, {
                        keyword: n,
                        limit: void 0 === i ? 20 : i,
                        reverse: void 0 !== s && s,
                        exactMatch: void 0 !== a && a,
                        channelUrl: void 0 === o ? "" : o,
                        channelCustomType: void 0 === l ? "" : l,
                        messageTimestampFrom: void 0 === u ? null : u,
                        messageTimestampTo: void 0 === c ? null : c,
                        order: void 0 === d ? "score" : d,
                        advancedQuery: void 0 !== h && h,
                        targetFields: void 0 === f ? null : f,
                        previousToken: "",
                        nextToken: ""
                    })
                }
                return S(t, [{
                    key: "key",
                    get: function() {
                        return rR.get(this).keyword
                    }
                }, {
                    key: "limit",
                    get: function() {
                        return rR.get(this).limit
                    }
                }, {
                    key: "reverse",
                    get: function() {
                        return rR.get(this).reverse
                    }
                }, {
                    key: "exactMatch",
                    get: function() {
                        return rR.get(this).exactMatch
                    }
                }, {
                    key: "channelUrl",
                    get: function() {
                        return rR.get(this).channelUrl
                    }
                }, {
                    key: "channelCustomType",
                    get: function() {
                        return rR.get(this).channelCustomType
                    }
                }, {
                    key: "messageTimestampFrom",
                    get: function() {
                        return rR.get(this).messageTimestampFrom
                    }
                }, {
                    key: "messageTimestampTo",
                    get: function() {
                        return rR.get(this).messageTimestampTo
                    }
                }, {
                    key: "order",
                    get: function() {
                        return rR.get(this).order
                    }
                }, {
                    key: "next",
                    value: function(t) {
                        var n = this
                          , r = Y.get(this._iid)
                          , i = r.BaseChannel
                          , s = r.GroupChannel
                          , a = r.OpenChannel;
                        return eg(this._iid, function(t) {
                            var r = rR.get(n)
                              , o = r.keyword
                              , l = r.limit
                              , u = r.reverse
                              , c = r.exactMatch
                              , d = r.channelUrl
                              , h = r.channelCustomType
                              , f = r.messageTimestampFrom
                              , p = r.messageTimestampTo
                              , g = r.order
                              , m = r.advancedQuery
                              , y = r.targetFields
                              , _ = r.nextToken;
                            "number" == typeof l && l > 0 && l <= 1e3 && "boolean" == typeof u && "boolean" == typeof c && ("string" == typeof d || null === d) && ("string" == typeof h || null === h) && ("number" == typeof f || null === f) && ("number" == typeof p || null === p) && ["score", "ts"].indexOf(g) >= 0 && ("boolean" == typeof m || null === m) && (Array.isArray(y) || null === y) ? n.isLoading ? t(new z("Query in progress.",z.QUERY_IN_PROGRESS), null) : n.hasNext ? (n.isLoading = !0,
                            x.get(n._iid).container.apiClient.searchMessages({
                                keyword: o,
                                limit: l,
                                reverse: u,
                                exactMatch: c,
                                channelUrl: d,
                                channelCustomType: h,
                                messageTimestampFrom: f,
                                messageTimestampTo: p,
                                order: g,
                                advancedQuery: m,
                                targetFields: y,
                                nextToken: _
                            }, function(r, o) {
                                var l = null;
                                r || (l = [],
                                o.results.forEach(function(t) {
                                    if (t.channel.hasOwnProperty("members")) {
                                        var n = new s(t.channel);
                                        s.cachedChannels[n.url] = n,
                                        l.push(i.buildMessage(t, n))
                                    } else {
                                        var r = new a(t.channel);
                                        a.cachedChannels[r.url] = r,
                                        l.push(i.buildMessage(t, r))
                                    }
                                }),
                                n.hasNext = o.has_next,
                                rR.get(n).nextToken = o.end_cursor),
                                n.isLoading = !1,
                                t(r, l)
                            })) : t(null, []) : t(eI.error, null)
                        }, t)
                    }
                }]),
                t
            }()
              , rP = new WeakMap
              , rL = new WeakMap
              , rD = function() {
                function t(n) {
                    b(this, t),
                    this.isLoading = !1,
                    this.hasMore = !0,
                    this.limit = 20,
                    rL.set(this, Number.MAX_SAFE_INTEGER),
                    rP.set(this, n),
                    this.reverse = !1,
                    this.messageTypeFilter = null,
                    this.customTypeFilter = null,
                    this.customTypesFilter = [],
                    this.senderUserIdsFilter = [],
                    this.includeMetaArray = !1,
                    this.includeReaction = null,
                    this.includeReactions = null,
                    this.includeReplies = null,
                    this.includeParentMessageText = null,
                    this.includeThreadInfo = !1,
                    this.replyType = null,
                    this.includeParentMessageInfo = null,
                    this.showSubchannelMessagesOnly = !1
                }
                return S(t, [{
                    key: "load",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = Y.get(this._iid)
                          , o = a.BaseChannel
                          , l = a.BaseMessage
                          , u = null
                          , c = eI.parse(arguments, [new eI({
                            type: "number",
                            optional: !0,
                            defaultValue: this.limit
                        }), new eI({
                            type: "boolean",
                            optional: !0,
                            defaultValue: this.reverse
                        }), new eI({
                            type: ["string", "number"],
                            optional: !0,
                            defaultValue: this.messageTypeFilter,
                            constraint: function(t) {
                                return Object.keys(o.MessageTypeFilter).map(function(t) {
                                    return o.MessageTypeFilter[t]
                                }).indexOf(t) > -1 || [0, 1, 2, 3].indexOf(t) > -1
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , d = k(c, 5);
                        return u = d[0],
                        t = d[1],
                        n = d[2],
                        r = d[3],
                        i = d[4],
                        eg(this._iid, function(i) {
                            if (("string" == typeof s.customTypeFilter || null === s.customTypeFilter) && Array.isArray(s.customTypesFilter) && s.customTypesFilter.every(function(t) {
                                return "string" == typeof t || null === t
                            }) && Array.isArray(s.senderUserIdsFilter) && s.senderUserIdsFilter.every(function(t) {
                                return "string" == typeof t
                            }) && "boolean" == typeof s.includeMetaArray && (null === s.includeReaction || "boolean" == typeof s.includeReaction) && (null === s.includeReactions || "boolean" == typeof s.includeReactions) && "boolean" == typeof s.includeThreadInfo && (null === s.includeReplies || "boolean" == typeof s.includeReplies) && (null === s.replyType || "string" == typeof s.replyType && Object.values(l.ReplyType).includes(s.replyType)) && (null === s.includeParentMessageText || "boolean" == typeof s.includeParentMessageText) && (null === s.includeParentMessageInfo || "boolean" == typeof s.includeParentMessageInfo) && "boolean" == typeof s.showSubchannelMessagesOnly || (u = eI.error),
                            u)
                                i(u, null);
                            else {
                                if (s.limit = t,
                                s.reverse = n,
                                s.messageTypeFilter = r,
                                "number" == typeof s.messageTypeFilter)
                                    switch (s.messageTypeFilter) {
                                    case 0:
                                        s.messageTypeFilter = o.MessageTypeFilter.ALL;
                                        break;
                                    case 1:
                                        s.messageTypeFilter = o.MessageTypeFilter.USER;
                                        break;
                                    case 2:
                                        s.messageTypeFilter = o.MessageTypeFilter.FILE;
                                        break;
                                    case 3:
                                        s.messageTypeFilter = o.MessageTypeFilter.ADMIN
                                    }
                                if (s.isLoading)
                                    i(new z("Query in progress.",z.QUERY_IN_PROGRESS), null);
                                else if (s.hasMore) {
                                    s.isLoading = !0;
                                    var a = rP.get(s);
                                    x.get(s._iid).container.apiClient.getMessageList({
                                        channel: a,
                                        token: rL.get(s) || (new Date).getTime() + 1e4,
                                        tokenType: "timestamp",
                                        isInclusive: !1,
                                        prevResultSize: t,
                                        nextResultSize: 0,
                                        shouldReverse: n,
                                        messageType: s.messageTypeFilter,
                                        customType: s.customTypeFilter,
                                        customTypes: s.customTypesFilter,
                                        senderUserIds: s.senderUserIdsFilter,
                                        includeMetaArray: s.includeMetaArray,
                                        includeReaction: s.includeReaction,
                                        includeReactions: s.includeReactions,
                                        includeReplies: s.includeReplies,
                                        includeParentMessageText: s.includeParentMessageText,
                                        includeThreadInfo: s.includeThreadInfo,
                                        replyType: s.replyType,
                                        includeParentMessageInfo: s.includeParentMessageInfo,
                                        showSubchannelMessagesOnly: s.showSubchannelMessagesOnly
                                    }).then(function(n) {
                                        var r = n.messages.map(function(t) {
                                            return o.buildMessage(t, a)
                                        });
                                        (0 === r.length || r.length < t) && (s.hasMore = !1);
                                        var l = rL.get(s);
                                        rL.set(s, Math.min.apply(Math, U(r.map(function(t) {
                                            return t.createdAt
                                        })).concat([l]))),
                                        s.isLoading = !1,
                                        i(null, r)
                                    }).catch(function(t) {
                                        s.isLoading = !1,
                                        i(t, null)
                                    })
                                } else
                                    i(null, [])
                            }
                        }, i)
                    }
                }]),
                t
            }()
              , rx = function() {
                function t() {
                    b(this, t),
                    this.isLoading = !1,
                    this.hasNext = !0,
                    this.limit = 20,
                    this.includeEmpty = !1,
                    this.order = rA.ORDER_LATEST_LAST_MESSAGE,
                    this._token = "",
                    this.channelNameContainsFilter = "",
                    this.channelUrlsFilter = [],
                    this.customTypesFilter = [],
                    this.customTypeStartsWithFilter = null,
                    this.superChannelFilter = n6.SuperChannelFilter.ALL,
                    this.membershipFilter = t.MembershipType.JOINED,
                    this.metadataOrderKeyFilter = null,
                    this.metadataKey = null,
                    this.metadataValues = [],
                    this.metadataValueStartsWith = null,
                    this.includeFrozen = !0,
                    this.includeMetaData = !0
                }
                return S(t, [{
                    key: "next",
                    value: function(n) {
                        var r = this;
                        return eg(this._iid, function(n) {
                            var i = Y.get(r._iid).GroupChannel;
                            "number" == typeof r.limit && r.limit > 0 && "boolean" == typeof r.includeEmpty && "string" == typeof r.order && [t.ORDER_CHRONOLOGICAL, t.CHANNEL_NAME_ALPHABETICAL, t.METADATA_VALUE_ALPHABETICAL, t.ORDER_LATEST_LAST_MESSAGE].indexOf(r.order.toLowerCase()) > -1 && Array.isArray(r.customTypesFilter) && Array.isArray(r.channelUrlsFilter) && Object.keys(t.MembershipType).map(function(n) {
                                return t.MembershipType[n]
                            }).indexOf(r.membershipFilter) > -1 && Object.keys(i.SuperChannelFilter).map(function(t) {
                                return i.SuperChannelFilter[t]
                            }).indexOf(r.superChannelFilter) > -1 && ("string" == typeof r.customTypeStartsWithFilter || null === r.customTypeStartsWithFilter) && "string" == typeof r.channelNameContainsFilter && ("string" == typeof r.metadataOrderKeyFilter || null === r.metadataOrderKeyFilter) && ("string" == typeof r.metadataKey || null === r.metadataKey) && Array.isArray(r.metadataValues) && r.metadataValues.every(function(t) {
                                return "string" == typeof t
                            }) && ("string" == typeof r.metadataValueStartsWith || null === r.metadataValueStartsWith) && "boolean" == typeof r.includeFrozen && "boolean" == typeof r.includeMetaData ? r.isLoading ? n(new z("Query in progress.",z.QUERY_IN_PROGRESS), null) : r.hasNext ? (r.isLoading = !0,
                            x.get(r._iid).container.apiClient.loadPublicGroupChannelList(v(v({}, r), {}, {
                                token: r._token
                            }), function(t, s) {
                                var a = null;
                                if (!t) {
                                    var o = String(s.next);
                                    r._token = o,
                                    r.hasNext = !!o;
                                    var l = s.channels;
                                    l && Array.isArray(l) ? a = l.map(function(t) {
                                        return "number" == typeof s.ts && (t.ts = s.ts),
                                        i.upsert(t)
                                    }) : t = new z("Failed at loading group channels.",z.MALFORMED_DATA)
                                }
                                r.isLoading = !1,
                                n(t, a)
                            })) : n(null, []) : n(eI.error, null)
                        }, n)
                    }
                }], [{
                    key: "MembershipType",
                    get: function() {
                        return {
                            ALL: "all",
                            JOINED: "joined"
                        }
                    }
                }, {
                    key: "ORDER_LATEST_LAST_MESSAGE",
                    get: function() {
                        return "latest_last_message"
                    }
                }, {
                    key: "ORDER_CHRONOLOGICAL",
                    get: function() {
                        return "chronological"
                    }
                }, {
                    key: "CHANNEL_NAME_ALPHABETICAL",
                    get: function() {
                        return "channel_name_alphabetical"
                    }
                }, {
                    key: "METADATA_VALUE_ALPHABETICAL",
                    get: function() {
                        return "metadata_value_alphabetical"
                    }
                }]),
                t
            }()
              , rF = function() {
                function t() {
                    b(this, t),
                    this.isDistinct = null,
                    this.isSuper = null,
                    this.isBroadcast = null,
                    this.isPublic = null,
                    this.channelUrl = null,
                    this.isEphemeral = null,
                    this.isDiscoverable = null,
                    this.isStrict = null,
                    this.name = null,
                    this.data = null,
                    this.customType = null,
                    this.channelCover = null,
                    this.coverUrl = null,
                    this.coverImage = null,
                    this.accessCode = null,
                    this.messageSurvivalSeconds = null,
                    this._invitedUserIds = [];
                    var n = null;
                    Object.defineProperty(this, "operators", {
                        set: function(t) {
                            Array.isArray(t) && t.filter(function(t) {
                                return t.hasOwnProperty("userId")
                            }).length === t.length && (n = t.map(function(t) {
                                return t.userId
                            }))
                        }
                    }),
                    Object.defineProperty(this, "operatorUserIds", {
                        get: function() {
                            return n
                        },
                        set: function(t) {
                            Array.isArray(t) && t.filter(function(t) {
                                return "string" == typeof t
                            }).length === t.length && (n = t)
                        }
                    })
                }
                return S(t, [{
                    key: "_validate",
                    value: function() {
                        return Array.isArray(this._invitedUserIds) && this._invitedUserIds.every(function(t) {
                            return "string" == typeof t
                        }) && ("string" == typeof this.channelUrl || null === this.channelUrl) && ("string" == typeof this.coverUrl || null === this.coverUrl) && (ef.isFile(this.coverImage) || null === this.coverImage) && ("string" == typeof this.name || null === this.name) && ("string" == typeof this.data || null === this.data) && ("string" == typeof this.customType || null === this.customType) && ("boolean" == typeof this.isDistinct || null === this.isDistinct) && ("boolean" == typeof this.isSuper || null === this.isSuper) && ("boolean" == typeof this.isBroadcast || null === this.isBroadcast) && ("boolean" == typeof this.isPublic || null === this.isPublic) && ("boolean" == typeof this.isEphemeral || null === this.isEphemeral) && ("boolean" == typeof this.isDiscoverable || null === this.isDiscoverable) && ("boolean" == typeof this.isStrict || null === this.isStrict) && (Array.isArray(this.operatorUserIds) && this.operatorUserIds.every(function(t) {
                            return "string" == typeof t
                        }) || null === this.operatorUserIds) && ("string" == typeof this.accessCode || null === this.accessCode) && ("number" == typeof this.messageSurvivalSeconds || null === this.messageSurvivalSeconds)
                    }
                }, {
                    key: "addUsers",
                    value: function(t) {
                        if (Array.isArray(t)) {
                            var n, r = t.filter(function(t) {
                                return t.hasOwnProperty("userId") && "string" == typeof t.userId
                            }).map(function(t) {
                                return t.userId
                            });
                            (n = this._invitedUserIds).push.apply(n, U(r))
                        }
                    }
                }, {
                    key: "addUser",
                    value: function(t) {
                        t.hasOwnProperty("userId") && "string" == typeof t.userId && this._invitedUserIds.push(t.userId)
                    }
                }, {
                    key: "addUserIds",
                    value: function(t) {
                        if (Array.isArray(t)) {
                            var n, r = t.filter(function(t) {
                                return "string" == typeof t
                            });
                            (n = this._invitedUserIds).push.apply(n, U(r))
                        }
                    }
                }, {
                    key: "addUserId",
                    value: function(t) {
                        "string" == typeof t && this._invitedUserIds.push(t)
                    }
                }]),
                t
            }()
              , rH = function() {
                function t() {
                    b(this, t),
                    this.channelUrl = null,
                    this.name = null,
                    this.coverUrlOrImage = null,
                    this.data = null,
                    this.customType = null,
                    this._operatorUserIds = []
                }
                return S(t, [{
                    key: "operatorUserIds",
                    get: function() {
                        return this._operatorUserIds
                    },
                    set: function(t) {
                        Array.isArray(t) && t.every(function(t) {
                            return "string" == typeof t
                        }) && (this._operatorUserIds = t)
                    }
                }, {
                    key: "operators",
                    set: function(t) {
                        Array.isArray(t) && t.every(function(t) {
                            return t.hasOwnProperty("userId")
                        }) && (this._operatorUserIds = t.map(function(t) {
                            return t.userId
                        }))
                    }
                }, {
                    key: "_validate",
                    value: function() {
                        return (Array.isArray(this.operatorUserIds) && this.operatorUserIds.every(function(t) {
                            return "string" == typeof t
                        }) || null === this.operatorUserIds) && ("string" == typeof this.coverUrlOrImage || ef.isFile(this.coverUrlOrImage) || null === this.coverUrlOrImage) && ("string" == typeof this.name || null === this.name) && ("string" == typeof this.data || null === this.data) && ("string" == typeof this.customType || null === this.customType) && ("string" == typeof this.channelUrl && /^\w+$/.test(this.channelUrl) || null === this.channelUrl)
                    }
                }]),
                t
            }()
              , rj = function(t) {
                A(r, t);
                var n = O(r);
                function r(t) {
                    var i;
                    return b(this, r),
                    (i = n.call(this)).year = null,
                    i.month = null,
                    i.day = null,
                    i.hour = null,
                    i.min = null,
                    i.timezone = null,
                    i._scheduledDateTimeString = null,
                    t && i._update(t),
                    i
                }
                return S(r, [{
                    key: "scheduledDateTimeString",
                    get: function() {
                        return this._scheduledDateTimeString ? this._scheduledDateTimeString : "number" == typeof this.year && 4 === this.year.toString().length && "number" == typeof this.month && this.month >= 1 && this.month <= 12 && "number" == typeof this.day && this.day >= 1 && this.day <= 31 && "number" == typeof this.hour && this.hour >= 0 && this.hour <= 24 && "number" == typeof this.min && this.min >= 0 && this.min <= 60 && "string" == typeof this.timezone && this.timezone.length > 0 ? this.year.toString() + "-" + ("0" + this.month.toString()).substr(-2) + "-" + ("0" + this.day.toString()).substr(-2) + " " + ("0" + this.hour.toString()).substr(-2) + ":" + ("0" + this.min.toString()).substr(-2) : null
                    },
                    set: function(t) {
                        t && "string" == typeof t && (this._scheduledDateTimeString = t)
                    }
                }, {
                    key: "_update",
                    value: function(t) {
                        t.hasOwnProperty("message") && (this.message = t.message),
                        t.hasOwnProperty("year") && (this.year = t.year),
                        t.hasOwnProperty("month") && (this.month = t.month),
                        t.hasOwnProperty("day") && (this.day = t.day),
                        t.hasOwnProperty("hour") && (this.hour = t.hour),
                        t.hasOwnProperty("min") && (this.min = t.min),
                        t.hasOwnProperty("timezone") && (this.timezone = t.timezone)
                    }
                }, {
                    key: "_getScheduleString",
                    value: function() {
                        return this.scheduledDateTimeString ? this.scheduledDateTimeString + " " + this.timezone : "number" == typeof this.year && 4 === this.year.toString().length && "number" == typeof this.month && this.month >= 1 && this.month <= 12 && "number" == typeof this.day && this.day >= 1 && this.day <= 31 && "number" == typeof this.hour && this.hour >= 0 && this.hour <= 24 && "number" == typeof this.min && this.min >= 0 && this.min <= 60 && "string" == typeof this.timezone && this.timezone.length > 0 ? this.year.toString() + "-" + ("0" + this.month.toString()).substr(-2) + "-" + ("0" + this.day.toString()).substr(-2) + " " + ("0" + this.hour.toString()).substr(-2) + ":" + ("0" + this.min.toString()).substr(-2) + " " + this.timezone : null
                    }
                }, {
                    key: "setSchedule",
                    value: function(t, n, r, i, s, a) {
                        "number" == typeof t && 4 === t.toString().length && "number" == typeof n && n >= 1 && n <= 12 && "number" == typeof r && r >= 1 && r <= 31 && "number" == typeof i && i >= 0 && i <= 24 && "number" == typeof s && s >= 0 && s <= 60 && "string" == typeof a && a.length > 0 && (this.scheduledDateTimeString = t.toString() + "-" + ("0" + n.toString()).substr(-2) + "-" + ("0" + r.toString()).substr(-2) + " " + ("0" + i.toString()).substr(-2) + ":" + ("0" + s.toString()).substr(-2),
                        this.timezone = a)
                    }
                }]),
                r
            }(rh)
              , rG = S(function t() {
                b(this, t),
                this.channelCustomTypesFilter = [],
                this.superChannelFilter = n6.SuperChannelFilter.ALL
            })
              , rB = function(t) {
                A(r, t);
                var n = O(r);
                function r() {
                    return b(this, r),
                    n.call(this)
                }
                return S(r)
            }(rG)
              , rV = function(t) {
                A(r, t);
                var n = O(r);
                function r() {
                    return b(this, r),
                    n.call(this)
                }
                return S(r)
            }(rG)
              , rq = function() {
                function t() {
                    b(this, t),
                    this.channelUrl = null,
                    this.channelType = null,
                    this.messageId = 0,
                    this.includeMetaArray = !1,
                    this.includeReactions = !1,
                    this.includeParentMessageText = null,
                    this.includeThreadInfo = !1,
                    this.includeParentMessageInfo = null
                }
                return S(t, [{
                    key: "_validate",
                    value: function() {
                        var t = Y.get(this._iid).BaseChannel;
                        return "string" == typeof this.channelUrl && "string" == typeof this.channelType && [t.CHANNEL_TYPE_BASE, t.CHANNEL_TYPE_OPEN, t.CHANNEL_TYPE_GROUP].includes(this.channelType) && "number" == typeof this.messageId && "boolean" == typeof this.includeMetaArray && "boolean" == typeof this.includeReactions && "boolean" == typeof this.includeThreadInfo && (null === this.includeParentMessageText || "boolean" == typeof this.includeParentMessageText) && (null === this.includeParentMessageInfo || "boolean" == typeof this.includeParentMessageInfo)
                    }
                }]),
                t
            }()
              , rz = function() {
                function t() {
                    b(this, t);
                    var n = Y.get(this._iid).BaseChannel;
                    this.prevResultSize = 0,
                    this.nextResultSize = 0,
                    this.isInclusive = !1,
                    this.reverse = !1,
                    this.messageType = n.MessageTypeFilter.ALL,
                    this.customType = null,
                    this.customTypes = [],
                    this.senderUserIds = null,
                    this.includeMetaArray = !1,
                    this.includeReaction = null,
                    this.includeReactions = null,
                    this.includeReplies = null,
                    this.includeParentMessageText = null,
                    this.includeThreadInfo = !1,
                    this.replyType = null,
                    this.includeParentMessageInfo = null,
                    this.showSubchannelMessagesOnly = !1
                }
                return S(t, [{
                    key: "_validate",
                    value: function() {
                        var t = Y.get(this._iid)
                          , n = t.BaseChannel
                          , r = t.BaseMessage;
                        return "number" == typeof this.prevResultSize && "number" == typeof this.nextResultSize && "boolean" == typeof this.isInclusive && "boolean" == typeof this.reverse && "string" == typeof this.messageType && Object.values(n.MessageTypeFilter).includes(this.messageType) && ("string" == typeof this.customType || null === this.customType) && Array.isArray(this.customTypes) && this.customTypes.every(function(t) {
                            return "string" == typeof t || null === t
                        }) && (Array.isArray(this.senderUserIds) && this.senderUserIds.every(function(t) {
                            return "string" == typeof t
                        }) || null === this.senderUserIds) && "boolean" == typeof this.includeMetaArray && (null === this.includeReaction || "boolean" == typeof this.includeReaction) && (null === this.includeReactions || "boolean" == typeof this.includeReactions) && "boolean" == typeof this.includeThreadInfo && (null === this.includeReplies || "boolean" == typeof this.includeReplies) && (null === this.replyType || "string" == typeof this.replyType && Object.values(r.ReplyType).includes(this.replyType)) && (null === this.includeParentMessageText || "boolean" == typeof this.includeParentMessageText) && (null === this.includeParentMessageInfo || "boolean" == typeof this.includeParentMessageInfo) && "boolean" == typeof this.showSubchannelMessagesOnly
                    }
                }, {
                    key: "belongsTo",
                    value: function(t) {
                        var n = Y.get(this._iid)
                          , r = n.BaseChannel
                          , i = n.UserMessageParams
                          , s = n.FileMessageParams
                          , a = n.BaseMessage;
                        if (this.messageType !== r.MessageTypeFilter.ALL && (t instanceof i && this.messageType !== r.MessageTypeFilter.USER || t instanceof s && this.messageType !== r.MessageTypeFilter.FILE) || Array.isArray(this.customTypes) && this.customTypes.length > 0 && !this.customTypes.includes(t.customType) || "string" == typeof this.customType && this.customType !== t.customType)
                            return !1;
                        if (Array.isArray(this.senderUserIds) && this.senderUserIds.length > 0) {
                            var o = id.getInstance(t._iid);
                            if (!o || !o.currentUser || !this.senderUserIds.includes(o.currentUser.userId))
                                return !1
                        }
                        if ("string" == typeof this.replyType && t.parentMessageId) {
                            if (this.replyType === a.ReplyType.NONE || this.replyType === a.ReplyType.ONLY_REPLY_TO_CHANNEL && !t.isReplyToChannel)
                                return !1
                        } else if (!1 === this.includeReplies && t.parentMessageId)
                            return !1;
                        return !0
                    }
                }]),
                t
            }()
              , rK = function() {
                function t() {
                    b(this, t);
                    var n = Y.get(this._iid).BaseChannel;
                    this.prevResultSize = 0,
                    this.nextResultSize = 0,
                    this.isInclusive = !1,
                    this.reverse = !1,
                    this.messageType = n.MessageTypeFilter.ALL,
                    this.customType = null,
                    this.customTypes = [],
                    this.senderUserIds = null,
                    this.includeMetaArray = !1,
                    this.includeReaction = null,
                    this.includeReactions = null,
                    this.includeParentMessageText = null,
                    this.includeParentMessageInfo = null
                }
                return S(t, [{
                    key: "_validate",
                    value: function() {
                        var t = Y.get(this._iid).BaseChannel;
                        return "number" == typeof this.prevResultSize && "number" == typeof this.nextResultSize && "boolean" == typeof this.isInclusive && "boolean" == typeof this.reverse && "string" == typeof this.messageType && Object.values(t.MessageTypeFilter).includes(this.messageType) && ("string" == typeof this.customType || null === this.customType) && Array.isArray(this.customTypes) && this.customTypes.every(function(t) {
                            return "string" == typeof t || null === t
                        }) && (Array.isArray(this.senderUserIds) && this.senderUserIds.every(function(t) {
                            return "string" == typeof t
                        }) || null === this.senderUserIds) && "boolean" == typeof this.includeMetaArray && (null === this.includeReaction || "boolean" == typeof this.includeReaction) && (null === this.includeReactions || "boolean" == typeof this.includeReactions) && (null === this.includeParentMessageText || "boolean" == typeof this.includeParentMessageText) && (null === this.includeParentMessageInfo || "boolean" == typeof this.includeParentMessageInfo)
                    }
                }]),
                t
            }()
              , rW = function() {
                function t() {
                    b(this, t),
                    this.includeMetaArray = !1,
                    this.includeReaction = null,
                    this.includeReactions = null,
                    this.includeReplies = null,
                    this.includeParentMessageText = null,
                    this.includeThreadInfo = !1,
                    this.replyType = null,
                    this.includeParentMessageInfo = null
                }
                return S(t, [{
                    key: "_validate",
                    value: function() {
                        return "boolean" == typeof this.includeMetaArray && (null === this.includeReaction || "boolean" == typeof this.includeReaction) && (null === this.includeReactions || "boolean" == typeof this.includeReactions) && "boolean" == typeof this.includeThreadInfo && (null === this.includeReplies || "boolean" == typeof this.includeReplies) && (null === this.replyType || "string" == typeof this.replyType && Object.values(BaseMessage.ReplyType).includes(this.replyType)) && (null === this.includeParentMessageText || "boolean" == typeof this.includeParentMessageText) && (null === this.includeParentMessageInfo || "boolean" == typeof this.includeParentMessageInfo)
                    }
                }]),
                t
            }()
              , rY = function() {
                function t() {
                    b(this, t),
                    this.customTypes = [],
                    this.includeEmpty = !1,
                    this.includeFrozen = !0
                }
                return S(t, [{
                    key: "_validate",
                    value: function() {
                        return (Array.isArray(this.customTypes) && this.customTypes.every(function(t) {
                            return "string" == typeof t
                        }) || null === this.customTypes) && ("boolean" == typeof this.includeEmpty || null === this.includeEmpty) && "boolean" == typeof this.includeFrozen
                    }
                }]),
                t
            }()
              , rQ = function() {
                this.onReconnectStarted = function() {}
                ,
                this.onReconnectSucceeded = function() {}
                ,
                this.onReconnectFailed = function() {}
            }
              , rJ = function() {
                this.onFriendsDiscovered = function() {}
                ,
                this.onTotalUnreadMessageCountUpdated = function() {}
            }
              , rZ = S(function t() {
                b(this, t),
                this.onMessageReceived = function(t, n) {}
                ,
                this.onMessageUpdated = function(t, n) {}
                ,
                this.onMessageDeleted = function(t, n) {}
                ,
                this.onReadReceiptUpdated = function(t) {}
                ,
                this.onReactionUpdated = function(t, n) {}
                ,
                this.onDeliveryReceiptUpdated = function(t) {}
                ,
                this.onTypingStatusUpdated = function(t) {}
                ,
                this.onUserJoined = function(t, n) {}
                ,
                this.onUserLeft = function(t, n) {}
                ,
                this.onOperatorUpdated = function(t, n) {}
                ,
                this.onUserEntered = function(t, n) {}
                ,
                this.onUserExited = function(t, n) {}
                ,
                this.onUserMuted = function(t, n) {}
                ,
                this.onUserUnmuted = function(t, n) {}
                ,
                this.onUserBanned = function(t, n) {}
                ,
                this.onUserUnbanned = function(t, n) {}
                ,
                this.onChannelFrozen = function(t) {}
                ,
                this.onChannelUnfrozen = function(t) {}
                ,
                this.onChannelChanged = function(t) {}
                ,
                this.onChannelDeleted = function(t, n) {}
                ,
                this.onUserReceivedInvitation = function(t, n, r) {}
                ,
                this.onUserDeclinedInvitation = function(t, n, r) {}
                ,
                this.onMetaDataCreated = function(t, n) {}
                ,
                this.onMetaDataUpdated = function(t, n) {}
                ,
                this.onMetaDataDeleted = function(t, n) {}
                ,
                this.onMetaCountersCreated = function(t, n) {}
                ,
                this.onMetaCountersUpdated = function(t, n) {}
                ,
                this.onMetaCountersDeleted = function(t, n) {}
                ,
                this.onChannelHidden = function(t) {}
                ,
                this.onMentionReceived = function(t, n) {}
                ,
                this.onThreadInfoUpdated = function(t, n) {}
                ,
                this.onChannelMemberCountChanged = function(t) {}
                ,
                this.onChannelParticipantCountChanged = function(t) {}
            })
              , r$ = S(function t(n) {
                if (b(this, t),
                n) {
                    var r = Y.get(this._iid)
                      , i = r.User
                      , s = r.BaseChannel;
                    this.reader = new i(n.user),
                    this.timestamp = parseInt(n.ts),
                    this.channelUrl = n.hasOwnProperty("channel_url") ? String(n.channel_url) : "",
                    this.channelType = n.hasOwnProperty("channel_type") ? String(n.channel_type) : s.CHANNEL_TYPE_GROUP
                }
            })
              , rX = function() {
                function t(t) {
                    this.replyCount = 0,
                    this.mostRepliedUsers = [],
                    this.lastRepliedAt = 0,
                    this.updatedAt = 0,
                    t && this._update(t)
                }
                return t.objectify = function(t) {
                    var n = Y.get(this._iid).User
                      , r = t.replyCount
                      , i = t.mostRepliedUsers
                      , s = void 0 === i ? [] : i
                      , a = t.lastRepliedAt
                      , o = t.updatedAt
                      , l = {};
                    return l.reply_count = void 0 === r ? 0 : r,
                    Array.isArray(s) && s.every(function(t) {
                        return t instanceof n
                    }) && (l.most_replies = s.map(function(t) {
                        return n.objectify(t)
                    })),
                    l.last_replied_at = void 0 === a ? 0 : a,
                    l.updated_at = void 0 === o ? 0 : o,
                    l
                }
                ,
                t.build = function(t, n, r, i) {
                    return this.objectify({
                        replyCount: t,
                        mostRepliedUsers: n,
                        lastRepliedAt: r,
                        updatedAt: i
                    })
                }
                ,
                t.prototype._update = function(t) {
                    var n = Y.get(this._iid).User;
                    t.hasOwnProperty("reply_count") && (this.replyCount = parseInt(t.reply_count)),
                    t.hasOwnProperty("most_replies") && Array.isArray(t.most_replies) && t.most_replies.every(function(t) {
                        return "object" == typeof t
                    }) && (this.mostRepliedUsers = t.most_replies.map(function(t) {
                        return new n(t)
                    })),
                    t.hasOwnProperty("last_replied_at") && (this.lastRepliedAt = parseInt(t.last_replied_at)),
                    t.hasOwnProperty("updated_at") && (this.updatedAt = parseInt(t.updated_at))
                }
                ,
                t
            }()
              , r0 = function() {
                function t(t) {
                    this.title = null,
                    this.url = null,
                    this.description = null,
                    this.defaultImage = null,
                    t && this._update(t)
                }
                return t.objectify = function(t) {
                    var n = Y.get(this._iid).OGImage
                      , r = t.title
                      , i = t.url
                      , s = t.description
                      , a = t.defaultImage
                      , o = void 0 === a ? null : a
                      , l = {};
                    return l["og:title"] = void 0 === r ? null : r,
                    l["og:url"] = void 0 === i ? null : i,
                    l["og:description"] = void 0 === s ? null : s,
                    o && (l["og:image"] = n.objectify(o)),
                    l
                }
                ,
                t.prototype._update = function(t) {
                    var n = Y.get(this._iid).OGImage;
                    t.hasOwnProperty("og:title") && (this.title = t["og:title"]),
                    t.hasOwnProperty("og:url") && (this.url = t["og:url"]),
                    t.hasOwnProperty("og:description") && (this.description = t["og:description"]),
                    t.hasOwnProperty("og:image") && (this.defaultImage = new n(t["og:image"]))
                }
                ,
                t
            }()
              , r1 = function() {
                function t(t) {
                    this.url = null,
                    this.secureUrl = null,
                    this.type = null,
                    this.width = 0,
                    this.height = 0,
                    this.alt = null,
                    t && this._update(t)
                }
                return t.objectify = function(t) {
                    var n = t.url
                      , r = t.secureUrl
                      , i = t.type
                      , s = t.width
                      , a = t.height
                      , o = t.alt
                      , l = {};
                    return l.url = void 0 === n ? null : n,
                    l.secure_url = void 0 === r ? null : r,
                    l.type = void 0 === i ? null : i,
                    l.width = void 0 === s ? 0 : s,
                    l.height = void 0 === a ? 0 : a,
                    l.alt = void 0 === o ? null : o,
                    l
                }
                ,
                t.prototype._update = function(t) {
                    t.hasOwnProperty("url") && (this.url = t.url),
                    t.hasOwnProperty("secure_url") && (this.secureUrl = t.secure_url),
                    t.hasOwnProperty("type") && (this.type = t.type),
                    t.hasOwnProperty("width") && (this.width = parseInt(t.width)),
                    t.hasOwnProperty("height") && (this.height = parseInt(t.height)),
                    t.hasOwnProperty("alt") && (this.alt = t.alt)
                }
                ,
                t
            }()
              , r2 = function() {
                function t(t) {
                    this.type = null,
                    this.vendor = null,
                    this.detail = {},
                    t && this._update(t)
                }
                return t.objectify = function(t) {
                    var n = t.type
                      , r = t.vendor
                      , i = t.detail
                      , s = {};
                    return s.type = void 0 === n ? "" : n,
                    s.vendor = void 0 === r ? "" : r,
                    s.detail = void 0 === i ? {} : i,
                    s
                }
                ,
                t.prototype._update = function(t) {
                    this.type = t.hasOwnProperty("type") ? t.type : "",
                    this.vendor = t.hasOwnProperty("vendor") ? t.vendor : "",
                    t.hasOwnProperty("detail") && "object" == typeof t.detail && !Array.isArray(t.detail) && (this.detail = t.detail)
                }
                ,
                t
            }()
              , r3 = function() {
                function t(n) {
                    b(this, t),
                    this.restrictionType = null,
                    this.description = null,
                    this.endAt = -1,
                    n && this._update(n)
                }
                return S(t, [{
                    key: "_update",
                    value: function(t) {
                        t.hasOwnProperty("restriction_type") && (this.restrictionType = t.restriction_type),
                        t.hasOwnProperty("description") ? this.description = t.description : t.hasOwnProperty("muted_description") && (this.description = t.muted_description),
                        t.hasOwnProperty("end_at") ? this.endAt = parseInt(t.end_at) : t.hasOwnProperty("muted_end_at") && (this.endAt = parseInt(t.muted_end_at))
                    }
                }], [{
                    key: "objectify",
                    value: function(t) {
                        var n = t.restrictionType
                          , r = t.description
                          , i = t.endAt
                          , s = {};
                        return s.restriction_type = void 0 === n ? null : n,
                        s.description = void 0 === r ? null : r,
                        s.end_at = void 0 === i ? -1 : i,
                        s
                    }
                }]),
                t
            }()
              , r4 = function() {
                function t() {
                    var n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
                    b(this, t),
                    this.isLoading = !1,
                    this.hasNext = !0,
                    this.limit = 20,
                    this.userIds = n,
                    this.metaDataKey = "",
                    this.metaDataValues = [],
                    this._token = ""
                }
                return S(t, [{
                    key: "next",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            "number" == typeof n.limit && n.limit > 0 && Array.isArray(n.userIds) && "string" == typeof n.metaDataKey && Array.isArray(n.metaDataValues) && !!n.metaDataKey == n.metaDataValues.length > 0 ? n.isLoading ? t(new z("Query in progress.",z.QUERY_IN_PROGRESS), null) : n.hasNext ? (n.isLoading = !0,
                            x.get(n._iid).container.apiClient.loadUserList(v(v({}, n), {}, {
                                userIdsFilter: n.userIds,
                                metaDataKeyFilter: n.metaDataKey,
                                metaDataValuesFilter: n.metaDataValues,
                                token: n._token
                            }), function(r, i) {
                                var s = null;
                                if (!r) {
                                    var a = Y.get(n._iid).User
                                      , o = String(i.next);
                                    n._token = o,
                                    n.hasNext = !!o,
                                    s = i.users.map(function(t) {
                                        return new a(t)
                                    })
                                }
                                n.isLoading = !1,
                                t(r, s)
                            })) : t(null, []) : t(eI.error, null)
                        }, t)
                    }
                }]),
                t
            }()
              , r5 = new WeakMap
              , r6 = function() {
                function t(n) {
                    b(this, t),
                    this.isLoading = !1,
                    r5.set(this, n)
                }
                return S(t, [{
                    key: "prev",
                    value: function(t, n, r, i) {
                        var s = arguments
                          , a = this;
                        return eg(this._iid, function(i) {
                            var o, l = Y.get(a._iid).BaseChannel, u = k(eI.parse(s, [new eI({
                                type: "number"
                            }), new eI({
                                type: "number"
                            }), new eI({
                                type: "boolean"
                            }), new eI({
                                type: "function"
                            })]), 5);
                            if (o = u[0],
                            t = u[1],
                            n = u[2],
                            r = u[3],
                            i = u[4],
                            o)
                                i(o, null);
                            else if (a.isLoading)
                                i(new z("Query in progress.",z.QUERY_IN_PROGRESS), null);
                            else {
                                a.isLoading = !0;
                                var c = r5.get(a);
                                x.get(a._iid).container.apiClient.getMessageList({
                                    channelUrl: c.url,
                                    channelType: c.channelType,
                                    token: t,
                                    tokenType: "timestamp",
                                    isInclusive: !1,
                                    prevResultSize: n,
                                    nextResultSize: 0,
                                    shouldReverse: r,
                                    messageType: "",
                                    customType: ""
                                }).then(function(t) {
                                    var n = t.messages.map(function(t) {
                                        return l.buildMessage(t, c)
                                    });
                                    a.isLoading = !1,
                                    i(null, n)
                                }).catch(function(t) {
                                    a.isLoading = !1,
                                    i(t, null)
                                })
                            }
                        }, i)
                    }
                }, {
                    key: "next",
                    value: function(t, n, r, i) {
                        var s = arguments
                          , a = this;
                        return eg(this._iid, function(i) {
                            var o, l = Y.get(a._iid).BaseChannel, u = k(eI.parse(s, [new eI({
                                type: "number"
                            }), new eI({
                                type: "number"
                            }), new eI({
                                type: "boolean"
                            }), new eI({
                                type: "function"
                            })]), 5);
                            if (o = u[0],
                            t = u[1],
                            n = u[2],
                            r = u[3],
                            i = u[4],
                            o)
                                i(o, null);
                            else if (a.isLoading)
                                i(new z("Query in progress.",z.QUERY_IN_PROGRESS), null);
                            else {
                                a.isLoading = !0;
                                var c = r5.get(a);
                                x.get(a._iid).container.apiClient.getMessageList({
                                    channelUrl: c.url,
                                    channelType: c.channelType,
                                    token: t,
                                    tokenType: "timestamp",
                                    isInclusive: !1,
                                    prevResultSize: 0,
                                    nextResultSize: n,
                                    shouldReverse: r,
                                    messageType: "",
                                    customType: ""
                                }).then(function(t) {
                                    var n = t.messages.map(function(t) {
                                        return l.buildMessage(t, c)
                                    });
                                    a.isLoading = !1,
                                    i(null, n)
                                }).catch(function(t) {
                                    a.isLoading = !1,
                                    i(t, null)
                                })
                            }
                        }, i)
                    }
                }, {
                    key: "load",
                    value: function(t, n, r, i, s) {
                        var a = arguments
                          , o = this;
                        return eg(this._iid, function(s) {
                            var l, u = Y.get(o._iid).BaseChannel, c = k(eI.parse(a, [new eI({
                                type: "number"
                            }), new eI({
                                type: "number"
                            }), new eI({
                                type: "number"
                            }), new eI({
                                type: "boolean"
                            }), new eI({
                                type: "callback"
                            })]), 6);
                            if (l = c[0],
                            t = c[1],
                            n = c[2],
                            r = c[3],
                            i = c[4],
                            s = c[5],
                            l)
                                s(l, null);
                            else if (o.isLoading)
                                s(new z("Query in progress.",z.QUERY_IN_PROGRESS), null);
                            else {
                                o.isLoading = !0;
                                var d = r5.get(o);
                                x.get(o._iid).container.apiClient.getMessageList({
                                    channelUrl: d.url,
                                    channelType: d.channelType,
                                    token: t,
                                    tokenType: "timestamp",
                                    isInclusive: !1,
                                    prevResultSize: n,
                                    nextResultSize: r,
                                    shouldReverse: i,
                                    messageType: "",
                                    customType: ""
                                }).then(function(t) {
                                    var n = t.messages.map(function(t) {
                                        return u.buildMessage(t, d)
                                    });
                                    o.isLoading = !1,
                                    s(null, n)
                                }).catch(function(t) {
                                    o.isLoading = !1,
                                    s(t, null)
                                })
                            }
                        }, s)
                    }
                }]),
                t
            }()
              , r8 = function() {
                function t(n) {
                    var r = this;
                    b(this, t),
                    this.state = 0,
                    this._value = null,
                    this._reason = null;
                    var i = function(t) {
                        0 === r.state && (r.state = 2,
                        r._reason = t)
                    };
                    if ("function" != typeof n)
                        throw "Promise resolver ".concat(n, " is not a function");
                    try {
                        n(function(t) {
                            0 === r.state && (r.state = 1,
                            r._value = t)
                        }, i)
                    } catch (s) {
                        i(s)
                    }
                }
                return S(t, [{
                    key: "length",
                    get: function() {
                        return 1
                    }
                }, {
                    key: "then",
                    value: function(n, r) {
                        var i = this
                          , s = this;
                        switch (this.state) {
                        case 0:
                            setTimeout(function() {
                                return i.then(n, r)
                            }, 2);
                            break;
                        case 1:
                            n && "function" == typeof n && (s = n(this._value));
                            break;
                        case 2:
                            r && "function" == typeof r && (s = r(this._reason))
                        }
                        return s instanceof t ? s : this
                    }
                }, {
                    key: "catch",
                    value: function(n) {
                        var r = this
                          , i = this;
                        switch (this.state) {
                        case 0:
                            setTimeout(function() {
                                return r.catch(n)
                            }, 2);
                            break;
                        case 1:
                            break;
                        case 2:
                            i = n(this._reason)
                        }
                        return i instanceof t ? i : this
                    }
                }, {
                    key: "finally",
                    value: function(n) {
                        var r = this
                          , i = this;
                        switch (this.state) {
                        case 0:
                            setTimeout(function() {
                                return r.finally(n)
                            }, 2);
                            break;
                        case 1:
                        case 2:
                            i = n()
                        }
                        return i instanceof t ? i : this
                    }
                }], [{
                    key: "all",
                    value: function(n) {
                        return new t(function(r, i) {
                            if (Array.isArray(n) || "string" == typeof n) {
                                if (n.length > 0) {
                                    for (var s = [], a = 0; a < n.length; a++)
                                        n[a]instanceof t ? s.push(n[a]) : s.push(t.resolve(n[a]));
                                    var o = Array(s.length).fill(null)
                                      , l = s.length
                                      , u = function(t, n, s) {
                                        n ? i(n) : (l--,
                                        o[t] = s,
                                        l <= 0 && r(o))
                                    };
                                    s.forEach(function(t, n) {
                                        t.then(function(t) {
                                            u(n, null, t)
                                        }).catch(function(t) {
                                            u(n, t, null)
                                        })
                                    })
                                } else
                                    r([])
                            } else
                                i(Error("Uncaught (in promise) TypeError: ".concat(E(n), " ").concat(n, " is not iterable")))
                        }
                        )
                    }
                }, {
                    key: "resolve",
                    value: function(n) {
                        return new t(function(r, i) {
                            n instanceof t ? n.then(function(n) {
                                return t.resolve(n)
                            }).catch(function(t) {
                                return i(t)
                            }) : r(n)
                        }
                        )
                    }
                }, {
                    key: "reject",
                    value: function(n) {
                        return new t(function(t, r) {
                            r(n)
                        }
                        )
                    }
                }]),
                t
            }()
              , r7 = function() {
                "undefined" != typeof Promise && Promise.prototype.finally || ("undefined" != typeof window ? window.Promise = r8 : void 0 !== r.g ? r.g.Promise = r8 : "undefined" != typeof self ? self.Promise = r8 : "undefined" != typeof globalThis && (globalThis.Promise = r8)),
                Object.values || (Object.values = function(t) {
                    return Object.keys(t).map(function(n) {
                        return t[n]
                    })
                }
                ),
                Number.MAX_SAFE_INTEGER || Object.defineProperty(Number, "MAX_SAFE_INTEGER", {
                    value: 9007199254740991
                })
            }
              , r9 = "collection@semaphore_holders_for:"
              , ie = "collection@semaphore_resolvers_for:"
              , it = "collection@semaphore_chain_process_state_for:"
              , ir = new Map
              , ii = new Map
              , is = new Map
              , ia = function() {
                function t(n) {
                    var r = n.key
                      , i = n.concurrentCallLimit
                      , s = n.backOffDelay
                      , a = this;
                    this._holdersKey = t.createSemaphoreHoldersKey(r),
                    this._resolversKey = t.createSemaphoreResolversKey(r),
                    this._chainProcessStateKey = t.createChainProcessStateKey(r),
                    this._numLocks = void 0 === i ? 2 : i,
                    this._backOffDelay = void 0 === s ? 0 : s,
                    this._localAcquiredKeys = [],
                    this._localResolversData = [],
                    eo() ? (ir[this._holdersKey] || (ir[this._holdersKey] = []),
                    ii[this._resolversKey] || (ii[this._resolversKey] = [])) : (window.addEventListener("storage", function(t) {
                        return G(a, void 0, void 0, function() {
                            var n, r;
                            return B(this, function(i) {
                                if (this._localResolversData.length > 0 && this.numLocksAvailable > 0 && !this._isProcessChainAcquireRunning() && this._hasHighestPriorityResolver())
                                    switch (t.key) {
                                    case this._holdersKey:
                                        if (n = JSON.parse(t.oldValue),
                                        r = JSON.parse(t.newValue),
                                        !n || !r || r.length >= n.length)
                                            break;
                                        this._processChainResolve();
                                        break;
                                    case this._chainProcessStateKey:
                                        if (JSON.parse(t.newValue))
                                            break;
                                        this._processChainResolve()
                                    }
                                return [2]
                            })
                        })
                    }),
                    window.addEventListener("beforeunload", function() {
                        var t = a._getLocalResolversData()
                          , n = a._localResolversData.map(function(t) {
                            return t.key
                        })
                          , r = t.filter(function(t) {
                            return 0 > n.indexOf(t.key)
                        });
                        r.length > 0 ? window.localStorage.setItem(a._resolversKey, JSON.stringify(r)) : window.localStorage.removeItem(a._resolversKey),
                        a._localAcquiredKeys.forEach(function(t) {
                            return a.release(t)
                        })
                    }))
                }
                return t.createSemaphoreHoldersKey = function(t) {
                    return r9 + t
                }
                ,
                t.createSemaphoreResolversKey = function(t) {
                    return ie + t
                }
                ,
                t.createChainProcessStateKey = function(t) {
                    return it + t
                }
                ,
                t.removeAllSemaphoreKeys = function() {
                    if ("undefined" != typeof document && "undefined" != typeof navigator && "undefined" != typeof localStorage) {
                        for (var t = [], n = 0; n < localStorage.length; n++) {
                            var r = localStorage.key(n);
                            (r.startsWith(r9) || r.startsWith(ie) || r.startsWith(it)) && t.push(r)
                        }
                        for (n = 0; n < t.length; n++)
                            localStorage.removeItem(t[n])
                    }
                }
                ,
                Object.defineProperty(t.prototype, "numLocks", {
                    get: function() {
                        return this._numLocks
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "backOffDelay", {
                    get: function() {
                        return this._backOffDelay
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "numLocksAvailable", {
                    get: function() {
                        if (eo())
                            return this.numLocks - ir[this._holdersKey].length;
                        var t = this._getLocalHoldersData();
                        return this.numLocks - t.length
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                Object.defineProperty(t.prototype, "waitCount", {
                    get: function() {
                        return eo() ? ii[this._resolversKey].length : this._getLocalResolversData().length
                    },
                    enumerable: !1,
                    configurable: !0
                }),
                t.prototype._hasHighestPriorityResolver = function() {
                    var t = this._getLocalResolversData();
                    return t.length > 0 && this._localResolversData.map(function(t) {
                        return t.key
                    }).indexOf(t[0].key) >= 0
                }
                ,
                t.prototype._isProcessChainAcquireRunning = function() {
                    if (eo())
                        return is[this._chainProcessStateKey];
                    var t = window.localStorage[this._chainProcessStateKey];
                    return void 0 !== t && JSON.parse(t)
                }
                ,
                t.prototype._setProcessChainAcquireRunning = function(t) {
                    eo() ? is[this._chainProcessStateKey] = t : t ? window.localStorage.setItem(this._chainProcessStateKey, JSON.stringify(t)) : window.localStorage.removeItem(this._chainProcessStateKey)
                }
                ,
                t.prototype._processChainResolve = function() {
                    return G(this, void 0, void 0, function() {
                        var t;
                        return B(this, function(n) {
                            switch (n.label) {
                            case 0:
                                return this.waitCount > 0 && this.numLocksAvailable > 0 && !this._isProcessChainAcquireRunning() ? (this._setProcessChainAcquireRunning(!0),
                                this._tryResolve() ? [4, eD(this._backOffDelay)] : [3, 2]) : [3, 3];
                            case 1:
                                n.sent(),
                                n.label = 2;
                            case 2:
                                this._setProcessChainAcquireRunning(!1),
                                eo() ? this._processChainResolve() : (t = new StorageEvent("storage",{
                                    key: this._chainProcessStateKey,
                                    oldValue: JSON.stringify(!0),
                                    newValue: JSON.stringify(!1)
                                }),
                                dispatchEvent(t)),
                                n.label = 3;
                            case 3:
                                return [2]
                            }
                        })
                    })
                }
                ,
                t.prototype.acquire = function(t) {
                    return void 0 === t && (t = tA.BACKGROUND_SYNC_CLOSE),
                    G(this, void 0, void 0, function() {
                        var n, r = this;
                        return B(this, function(i) {
                            return eo() ? [2, new Promise(function(n) {
                                var i = {
                                    key: ex(),
                                    resolver: function(t) {
                                        return n(t)
                                    },
                                    priority: t
                                };
                                switch (t) {
                                case tA.USER_CALL:
                                case tA.FILL:
                                case tA.BACKGROUND_SYNC_OPEN:
                                    for (var s = ii[r._resolversKey], a = -1, o = 0; o < s.length && a < 0; o++)
                                        t > s[o].priority && (a = o);
                                    if (a >= 0) {
                                        ii[r._resolversKey].splice(a, 0, i);
                                        break
                                    }
                                case tA.BACKGROUND_SYNC_CLOSE:
                                    ii[r._resolversKey].push(i)
                                }
                                r._processChainResolve()
                            }
                            )] : (n = this._getLocalResolversData(),
                            [2, new Promise(function(i) {
                                var s = ex()
                                  , a = {
                                    key: s,
                                    priority: t
                                }
                                  , o = {
                                    key: s,
                                    resolver: function(t) {
                                        return i(t)
                                    },
                                    priority: t
                                };
                                switch (t) {
                                case tA.USER_CALL:
                                case tA.FILL:
                                case tA.BACKGROUND_SYNC_OPEN:
                                    for (var l = -1, u = 0; u < n.length && l < 0; u++)
                                        t > n[u].priority && (l = u);
                                    if (l >= 0) {
                                        n.splice(l, 0, a),
                                        window.localStorage.setItem(r._resolversKey, JSON.stringify(n)),
                                        r._localResolversData.splice(l, 0, o);
                                        break
                                    }
                                case tA.BACKGROUND_SYNC_CLOSE:
                                    n.push(a),
                                    window.localStorage.setItem(r._resolversKey, JSON.stringify(n)),
                                    r._localResolversData.push(o)
                                }
                                r._processChainResolve()
                            }
                            )])
                        })
                    })
                }
                ,
                t.prototype.release = function(t) {
                    if (eo()) {
                        if ((n = ir[this._holdersKey].indexOf(t)) >= 0)
                            return ir[this._holdersKey].splice(n, 1),
                            this._processChainResolve(),
                            !0
                    } else {
                        var n, r = JSON.parse(window.localStorage[this._holdersKey]), i = V([], r, !0);
                        if ((n = r.indexOf(t)) >= 0) {
                            r.splice(n, 1),
                            r.length > 0 ? window.localStorage.setItem(this._holdersKey, JSON.stringify(r)) : window.localStorage.removeItem(this._holdersKey),
                            this._localAcquiredKeys.splice(this._localAcquiredKeys.indexOf(t), 1);
                            var s = new StorageEvent("storage",{
                                key: this._holdersKey,
                                oldValue: JSON.stringify(i),
                                newValue: JSON.stringify(r)
                            });
                            return dispatchEvent(s),
                            !0
                        }
                    }
                    return !1
                }
                ,
                t.prototype._tryResolve = function() {
                    if (eo()) {
                        if (ir[this._holdersKey].length < this.numLocks) {
                            var t = ex();
                            return ir[this._holdersKey] = V(V([], ir[this._holdersKey], !0), [t], !1),
                            (r = ii[this._resolversKey].shift()).resolver(t),
                            !0
                        }
                    } else {
                        var n = this._getLocalHoldersData();
                        if (n.length < this.numLocks) {
                            t = ex();
                            var r = this._localResolversData.shift()
                              , i = this._getLocalResolversData()
                              , s = i.map(function(t) {
                                return t.key
                            }).indexOf(r.key);
                            i.splice(s, 1),
                            i.length > 0 ? window.localStorage.setItem(this._resolversKey, JSON.stringify(i)) : window.localStorage.removeItem(this._resolversKey),
                            window.localStorage.setItem(this._holdersKey, JSON.stringify(V(V([], n, !0), [t], !1))),
                            this._localAcquiredKeys.push(t);
                            var a = new StorageEvent("storage",{
                                key: this._holdersKey,
                                oldValue: JSON.stringify(V([], n, !0)),
                                newValue: JSON.stringify(V(V([], n, !0), [t], !1))
                            });
                            return dispatchEvent(a),
                            (0,
                            r.resolver)(t),
                            !0
                        }
                    }
                    return !1
                }
                ,
                t.prototype._getLocalHoldersData = function() {
                    var t = window.localStorage[this._holdersKey];
                    return void 0 !== t ? JSON.parse(t) : []
                }
                ,
                t.prototype._getLocalResolversData = function() {
                    var t = window.localStorage[this._resolversKey];
                    return void 0 !== t ? JSON.parse(t) : []
                }
                ,
                t
            }()
              , io = null
              , il = {}
              , iu = !1
              , ic = null
              , id = function() {
                function t() {
                    var n = this
                      , r = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    b(this, t),
                    r7();
                    var i = !1;
                    if ((r.newInstance || !io || io && r.appId !== io.getApplicationId() && io.getConnectionState() === io.ConnectionState.CLOSED) && (i = !0,
                    io = this),
                    i) {
                        try {
                            if (!r.hasOwnProperty("appId"))
                                return ei.warn("Must be set appId."),
                                io = null,
                                null
                        } catch (s) {
                            return ei.warn("Must be set appId."),
                            io = null,
                            null
                        }
                        var a = nZ.create();
                        Object.defineProperty(this, "_iid", {
                            get: function() {
                                return a
                            }
                        }),
                        il[a] = this,
                        this.customApiHost = null,
                        this.customWsHost = null,
                        this.connecting = !1,
                        this.reconnecting = !1,
                        this.isReconnectingOnError = !1,
                        this.connectionCallbacks = [],
                        this.ConnectionManager = new eO(this),
                        this.GCMPushToken = "",
                        this.APNSPushToken = "",
                        this.PUSH_TEMPLATE_DEFAULT = "default",
                        this.PUSH_TEMPLATE_ALTERNATIVE = "alternative",
                        this.currentUser = null,
                        this.isSessionOpened = !1,
                        this.globalTimer,
                        this.loginTimer,
                        this.reconnectTimer,
                        this.loginHandler = null,
                        this.onLoginTimerCancel,
                        this.onReconnectTimerCancel,
                        this.BaseChannel = {
                            MessageTypeFilter: tP.MessageTypeFilter
                        },
                        this.GroupChannelFilter = n$,
                        this.MessageFilter = te,
                        this.GroupChannelCollection = {
                            GroupChannelOrder: eB
                        },
                        this.MessageCollection = {
                            MessageCollectionInitPolicy: to
                        },
                        this.CollectionEventSource = ev,
                        this._currentUserId = null;
                        var o = {
                            User: tg,
                            Member: n8,
                            RestrictedUser: n9,
                            GroupChannel: n6,
                            OpenChannel: ra,
                            UserMessage: rp,
                            FileMessage: rm,
                            AdminMessage: ry,
                            GroupChannelListQuery: rA,
                            MemberListQuery: rN,
                            GroupChannelParams: rF,
                            OpenChannelParams: rH,
                            BaseMessageParams: rd,
                            UserMessageParams: rh,
                            FileMessageParams: rg,
                            ScheduledUserMessageParams: rj,
                            GroupChannelTotalUnreadMessageCountParams: rB,
                            GroupChannelTotalUnreadChannelCountParams: rV,
                            MessageRetrievalParams: rq,
                            MessageListParams: rz,
                            ThreadedMessageListParams: rK,
                            MessageChangeLogsParams: rW,
                            GroupChannelChangeLogsParams: rY,
                            MessageMetaArray: ru,
                            UserEventHandler: rJ,
                            SessionHandler: ew,
                            ChannelHandler: rZ,
                            ConnectionHandler: rQ,
                            AppleCriticalAlertOptions: rl
                        }
                          , l = new Y(this._iid,v(v({}, o), {
                            SessionManager: ek,
                            BaseChannel: tP,
                            BaseMessage: tp,
                            UserListQuery: r4,
                            ApplicationUserListQuery: rE,
                            BannedUserListQuery: rb,
                            BlockedUserListQuery: rC,
                            FriendListQuery: rS,
                            MutedUserListQuery: rT,
                            OpenChannelListQuery: rI,
                            OperatorListQuery: rw,
                            ParticipantListQuery: rU,
                            MessageListQuery: r6,
                            PreviousMessageListQuery: rD,
                            MessageSearchQuery: rM,
                            PublicGroupChannelListQuery: rx,
                            ScheduledUserMessage: r_,
                            ThreadInfo: rX,
                            ThreadInfoUpdateEvent: rv,
                            OGMetaData: r0,
                            OGImage: r1,
                            Plugin: r2,
                            Command: eM,
                            Sender: n7,
                            ReadStatus: r$,
                            Reaction: rf,
                            ReactionEvent: tu,
                            Emoji: rn,
                            EmojiCategory: rt,
                            EmojiContainer: re,
                            RestrictionInfo: r3,
                            FileMessageQueue: tj
                        }));
                        this.BaseMessage = {
                            ReplyType: tp.ReplyType,
                            getMessage: l.BaseMessage.getMessage.bind(l.BaseMessage)
                        },
                        Object.keys(l).forEach(function(t) {
                            o[t] && (n[t] = l[t])
                        });
                        var u = {
                            encrypt: function(t) {
                                return t
                            },
                            decrypt: function(t) {
                                return t
                            }
                        };
                        x.create(a, {
                            appId: r.appId,
                            pinger: new ea(this),
                            apiClient: new em(this),
                            wsAdapter: new eT(this),
                            commandHandler: new tx(this),
                            onlineDetector: new eU(this),
                            ackStateMap: {},
                            subscribedUnreadMessageCount: {
                                all: 0,
                                custom_types: {},
                                ts: 0
                            },
                            maxUnreadCountOfSuperGroupChannel: L.DEFAULT_MAX_UNREAD_COUNT_OF_SUPER_GROUP_CHANNEL,
                            nestdb: null,
                            currentUserId: null,
                            localCacheEnabled: "boolean" == typeof r.localCacheEnabled && r.localCacheEnabled,
                            localCacheLock: new es,
                            debugCache: !1,
                            encryption: u,
                            store: new nD({
                                encryption: u
                            }),
                            preference: null,
                            auth: new K,
                            appInfo: null,
                            pingInterval: 15e3,
                            pongTimeout: 5e3,
                            connectedAt: 0,
                            extensions: {},
                            supportedExtensionKeys: ["sb_uikit", "sb_syncmanager", "device-os-platform"],
                            getUserAgentWithExtensions: function(t) {
                                var n = eo() ? "reactnative" : "JS"
                                  , r = t.sb_syncmanager ? "s".concat(t.sb_syncmanager) : ""
                                  , i = t.sb_uikit ? "u".concat(t.sb_uikit) : ""
                                  , s = t["device-os-platform"] ? "o".concat(t["device-os-platform"]) : "";
                                return "".concat(n, "/c").concat(L.SDK_VERSION, "/").concat(r, "/").concat(i, "/").concat(s)
                            },
                            sessionManager: new l.SessionManager(this),
                            stateChangeEnabled: !0,
                            isInBackground: !1,
                            closedByGoingBackground: !1,
                            isErrorFirstInCallback: !1,
                            autoResendQueue: [],
                            isProcessingAutoResend: !1
                        }),
                        this.userEventHandlers = {},
                        this.channelHandlers = {},
                        this.connectionHandlers = {},
                        this.Options = {
                            _useMemberAsMessageSender: !0,
                            get UseMemberAsMessageSender() {
                                return this._useMemberAsMessageSender
                            },
                            set UseMemberAsMessageSender(e) {
                                "boolean" == typeof e && (this._useMemberAsMessageSender = e)
                            },
                            get useMemberAsMessageSender() {
                                return this._useMemberAsMessageSender
                            },
                            set useMemberAsMessageSender(e) {
                                "boolean" == typeof e && (this._useMemberAsMessageSender = e)
                            },
                            _typingIndicatorThrottle: 1e3,
                            get typingIndicatorThrottle() {
                                return this._typingIndicatorThrottle
                            },
                            set typingIndicatorThrottle(e) {
                                "number" == typeof e && e >= 1e3 && e <= 9e3 && (this._typingIndicatorThrottle = e)
                            },
                            _websocketResponseTimeout: 1e4,
                            get websocketResponseTimeout() {
                                return this._websocketResponseTimeout
                            },
                            set websocketResponseTimeout(e) {
                                "number" == typeof e && e >= 5e3 && e <= 3e5 && (this._websocketResponseTimeout = e)
                            }
                        },
                        eb.of(a).addObserver({
                            onConnect: function() {
                                n.isCacheEnabled && !n.getIsProcessingAutoResend() && (0 === n.getAutoResendQueue().length ? tk._processAutoResendRegisteredPendingMessages(n).then(function() {
                                    tk._processNextAutoResend(n)
                                }) : tk._processNextAutoResend(n))
                            },
                            onDisconnect: function() {}
                        })
                    }
                    return io
                }
                return S(t, [{
                    key: "ConnectionState",
                    get: function() {
                        return {
                            CONNECTING: "CONNECTING",
                            OPEN: "OPEN",
                            CLOSED: "CLOSED"
                        }
                    }
                }, {
                    key: "MessageRequestState",
                    get: function() {
                        return {
                            NONE: "none",
                            PENDING: "pending",
                            FAILED: "failed",
                            SUCCEEDED: "succeeded"
                        }
                    }
                }, {
                    key: "MessageSendingStatus",
                    get: function() {
                        return {
                            NONE: "none",
                            PENDING: "pending",
                            FAILED: "failed",
                            CANCELED: "canceled",
                            SUCCEEDED: "succeeded"
                        }
                    }
                }, {
                    key: "pushTokenRegistrationState",
                    get: function() {
                        return {
                            SUCCESS: "success",
                            PENDING: "pending",
                            ERROR: "error"
                        }
                    }
                }, {
                    key: "PushTriggerOption",
                    get: function() {
                        return {
                            ALL: "all",
                            MENTION_ONLY: "mention_only",
                            OFF: "off"
                        }
                    }
                }, {
                    key: "appInfo",
                    get: function() {
                        return x.get(this._iid).container.appInfo
                    }
                }, {
                    key: "isCacheEnabled",
                    get: function() {
                        return x.get(this._iid).container.localCacheEnabled
                    }
                }, {
                    key: "ekey",
                    get: function() {
                        var t = x.get(this._iid).container.auth;
                        return t ? t.eKey : ""
                    }
                }, {
                    key: "getApplicationId",
                    value: function() {
                        return x.get(this._iid).get("appId")
                    }
                }, {
                    key: "getCurrentUserId",
                    value: function() {
                        return this.currentUser ? this.currentUser.userId : null
                    }
                }, {
                    key: "getDebugMode",
                    value: function() {
                        return iu
                    }
                }, {
                    key: "setDebugMode",
                    value: function(t) {
                        iu = t,
                        ei.mode = t ? ei.Mode.DEBUG : ei.Mode.PRODUCTION
                    }
                }, {
                    key: "getErrorFirstCallback",
                    value: function() {
                        return x.get(this._iid).container.isErrorFirstInCallback
                    }
                }, {
                    key: "setErrorFirstCallback",
                    value: function(t) {
                        "boolean" == typeof t && x.get(this._iid).set("isErrorFirstInCallback", t)
                    }
                }, {
                    key: "getAutoResendQueue",
                    value: function() {
                        return x.get(this._iid).container.autoResendQueue
                    }
                }, {
                    key: "getIsProcessingAutoResend",
                    value: function() {
                        return x.get(this._iid).container.isProcessingAutoResend
                    }
                }, {
                    key: "setIsProcessingAutoResend",
                    value: function(t) {
                        x.get(this._iid).set("isProcessingAutoResend", t)
                    }
                }, {
                    key: "getCurrentApiHost",
                    value: function() {
                        return this.customApiHost ? this.customApiHost : "https://api.sendbird.com"
                    }
                }, {
                    key: "clearCurrentApiHost",
                    value: function() {
                        this.customApiHost = null
                    }
                }, {
                    key: "getCurrentWsHost",
                    value: function() {
                        return this.customWsHost ? this.customWsHost : "wss://ws.sendbird.com"
                    }
                }, {
                    key: "clearCurrentWsHost",
                    value: function() {
                        this.customWsHost = null
                    }
                }, {
                    key: "getConnectionState",
                    value: function() {
                        try {
                            var t = x.get(this._iid).container.wsAdapter;
                            return this.connecting || this.reconnecting ? this.ConnectionState.CONNECTING : t.client ? this.connecting || this.reconnecting ? this.ConnectionState.CONNECTING : this.isSessionOpened ? t.client.getConnectionState() : this.ConnectionState.CLOSED : this.ConnectionState.CLOSED
                        } catch (n) {
                            return this.ConnectionState.CLOSED
                        }
                    }
                }, {
                    key: "getPendingGCMToken",
                    value: function() {
                        return this.GCMPushToken
                    }
                }, {
                    key: "getPendingAPNSToken",
                    value: function() {
                        return this.APNSPushToken
                    }
                }, {
                    key: "hasLoggedIn",
                    value: function() {
                        var t = x.get(this._iid);
                        return this.currentUser && t.get("auth").hasSession()
                    }
                }, {
                    key: "getLastConnectedAt",
                    value: function() {
                        var t = x.get(this._iid);
                        return this.getConnectionState() === this.ConnectionState.OPEN && this.currentUser ? t.get("connectedAt") : 0
                    }
                }, {
                    key: "setOnlineListener",
                    value: function(t) {
                        x.get(this._iid).container.onlineDetector.setOnlineListener(t)
                    }
                }, {
                    key: "setOfflineListener",
                    value: function(t) {
                        x.get(this._iid).container.onlineDetector.setOfflineListener(t)
                    }
                }, {
                    key: "getMemoryStoreForDebugging",
                    value: function() {
                        var t = x.get(this._iid);
                        return t.container.debugCache && t.container.store instanceof nP ? t.container.store : null
                    }
                }, {
                    key: "useMemoryAsDatabaseForDebugging",
                    value: function() {
                        var t = x.get(this._iid);
                        t.container.debugCache = !0,
                        t.container.store = new nP
                    }
                }, {
                    key: "useAsyncStorageAsDatabase",
                    value: function(t) {
                        var n = x.get(this._iid);
                        n.container.store = new nx({
                            AsyncStorage: t,
                            encryption: n.container.encryption
                        })
                    }
                }, {
                    key: "useMMKVAsDatabase",
                    value: function(t) {
                        var n = x.get(this._iid);
                        n.container.store = new nF({
                            MMKV: t,
                            encryption: n.container.encryption
                        })
                    }
                }, {
                    key: "initializeDatabase",
                    value: function(t, n) {
                        var r = this
                          , i = x.get(this._iid)
                          , s = i.container
                          , a = s.appId
                          , o = s.nestdb
                          , l = s.store
                          , u = s.localCacheEnabled;
                        return eg(this._iid, function(n) {
                            if (u) {
                                if (o)
                                    n(null);
                                else {
                                    var s = i.container.nestdb = new nJ({
                                        name: "sendbird=".concat(a, "-").concat(t, ".db"),
                                        version: 1,
                                        store: l
                                    });
                                    s.on("upgrade", function(t, n) {
                                        0 === t ? s.commitSchema([{
                                            collectionName: "GroupChannel",
                                            keyName: "url",
                                            index: [e1.NAME_ALPHABETICAL, e1.CHRONOLOGICAL, e1.LATEST_LAST_MESSAGE]
                                        }, {
                                            collectionName: "SucceededMessage",
                                            keyName: "messageId",
                                            index: [e2.LATEST, e2.CHILD_MESSAGE_FIRST]
                                        }, {
                                            collectionName: "UnsentMessage",
                                            keyName: "reqId",
                                            index: [e2.LATEST_UNSENT, e2.CHILD_MESSAGE_FIRST]
                                        }]).then(function() {
                                            return n()
                                        }).catch(function(t) {
                                            throw t
                                        }) : n()
                                    }),
                                    s.on("error", function(t) {
                                        t ? t.code === tB.STORE_NOT_AVAILABLE || t.code === tB.STORE_NOT_AVAILABLE_IN_PRIVATE_BROWSING ? n(null) : (ei.error("Database initialize failed with an error: ", t),
                                        n(t)) : n(null)
                                    }),
                                    s.on("success", function() {
                                        i.container.currentUserId = t,
                                        new e9({
                                            iid: r._iid,
                                            collection: s.collection("GroupChannel")
                                        }),
                                        new tl({
                                            iid: r._iid,
                                            collections: {
                                                succeeded: s.collection("SucceededMessage"),
                                                unsent: s.collection("UnsentMessage")
                                            }
                                        }),
                                        ei.debug("Database initialize succeeded."),
                                        n(null)
                                    }),
                                    s.open()
                                }
                            } else
                                i.container.currentUserId = t,
                                new e9({
                                    iid: r._iid,
                                    collection: null
                                }),
                                new tl({
                                    iid: r._iid,
                                    collections: {
                                        succeeded: null,
                                        unsent: null
                                    }
                                }),
                                n(null)
                        }, n)
                    }
                }, {
                    key: "clearCachedData",
                    value: function() {
                        var t = x.get(this._iid)
                          , n = t.container
                          , r = n.localCacheEnabled
                          , i = n.nestdb;
                        return new Promise(function(n, s) {
                            r && i ? (i.close(),
                            i.reset().then(function() {
                                ei.debug("Database clear succeeded."),
                                t.container.nestdb = null,
                                n()
                            }).catch(function(t) {
                                ei.error("Database clear failed with an error: ", t),
                                s(t)
                            })) : n()
                        }
                        )
                    }
                }, {
                    key: "connect",
                    value: function(t, n, r, i, s) {
                        var a = this
                          , o = x.get(this._iid)
                          , l = o.container
                          , u = l.wsAdapter
                          , c = l.onlineDetector
                          , d = l.localCacheEnabled;
                        ia.removeAllSemaphoreKeys(),
                        c && c.start();
                        var h = null
                          , f = eI.parse(arguments, [new eI({
                            type: "string",
                            constraint: function(t) {
                                return t.length > 0
                            }
                        }), new eI({
                            type: "string",
                            nullable: !0,
                            ignoreIf: function(t) {
                                return 1 === t.length || 3 === t.length
                            }
                        }), new eI({
                            type: "string",
                            nullable: !0,
                            ignoreIf: function(t) {
                                return 1 === t.length || 2 === t.length
                            }
                        }), new eI({
                            type: "string",
                            nullable: !0,
                            ignoreIf: function(t) {
                                return 1 === t.length || 2 === t.length
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , p = k(f, 6);
                        return h = p[0],
                        t = p[1],
                        n = p[2],
                        r = p[3],
                        i = p[4],
                        s = p[5],
                        (r || i) && ei.debug("Please note that apiHost and wsHost are for internal use only."),
                        eg(this._iid, function(s) {
                            if (h)
                                s(h, null);
                            else if (a.customApiHost = r,
                            a.customWsHost = i,
                            a.connecting = !0,
                            a.reconnecting = !1,
                            a.isReconnectingOnError = !1,
                            a.reconnectTimer && (clearTimeout(a.reconnectTimer),
                            a.reconnectTimer = null,
                            a.onReconnectTimerCancel = null),
                            a.getConnectionState() === a.ConnectionState.OPEN && a.currentUser && a.currentUser.userId === t)
                                a.connecting = !1,
                                s(null, a.currentUser);
                            else if (d && (a._currentUserId = t),
                            a.connectionCallbacks.push(s),
                            1 === a.connectionCallbacks.length) {
                                u.disconnect({
                                    clearSession: !0,
                                    err: null
                                }, null);
                                var l = o.container
                                  , c = l.nestdb
                                  , f = l.localCacheLock;
                                c ? u.connect(t, n).then(function() {
                                    if (d)
                                        return tk._processNonAutoResendRegisteredPendingMessages(a)
                                }) : f.lock(function(r) {
                                    a.initializeDatabase(t).then(function() {
                                        r(),
                                        u.connect(t, n)
                                    }).then(function() {
                                        if (d)
                                            return tk._processNonAutoResendRegisteredPendingMessages(a)
                                    }).catch(function(t) {
                                        o.container.localCacheEnabled = !1,
                                        r(),
                                        s(t, null)
                                    })
                                })
                            }
                        }, s)
                    }
                }, {
                    key: "reconnect",
                    value: function() {
                        var t = this
                          , n = x.get(this._iid).container
                          , r = n.wsAdapter
                          , i = n.auth
                          , s = n.localCacheLock;
                        if (i.sessionKey && this.currentUser) {
                            var a = !0;
                            return r.reconnectCount > 0 && (a = !1),
                            s.lock(function(n) {
                                r.disconnect({
                                    clearSession: !1,
                                    err: new z("Connection has been canceled.",z.CONNECTION_CANCELED)
                                }, null),
                                r.reconnectCount = 0,
                                r.reconnect(t.currentUser.userId, a),
                                n()
                            }),
                            !0
                        }
                        return !1
                    }
                }, {
                    key: "disconnect",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            var r = x.get(n._iid).container
                              , i = r.localCacheLock
                              , s = r.wsAdapter
                              , a = r.onlineDetector;
                            a && a.stop(),
                            i.lock(function(r) {
                                s.disconnect({
                                    clearSession: !0,
                                    err: new z("Connection has been canceled.",z.CONNECTION_CANCELED)
                                }, function() {
                                    n.clearCachedData().finally(function() {
                                        r(),
                                        t(null)
                                    })
                                })
                            })
                        }, t)
                    }
                }, {
                    key: "setBackgroundState",
                    value: function() {
                        var t = x.get(this._iid)
                          , n = t.container
                          , r = n.wsAdapter
                          , i = n.stateChangeEnabled;
                        !n.isInBackground && i && (t.set("isInBackground", !0),
                        this.getConnectionState() !== this.ConnectionState.CLOSED ? (t.set("closedByGoingBackground", !0),
                        r.disconnect({
                            clearSession: !1,
                            err: new z("Websocket connection failed as the app goes background.",z.WEBSOCKET_CONNECTION_FAILED)
                        }, null),
                        eb.of(this._iid).invokeDisconnect()) : t.set("closedByGoingBackground", !1))
                    }
                }, {
                    key: "isInBackground",
                    get: function() {
                        return x.get(this._iid).container.isInBackground
                    }
                }, {
                    key: "setForegroundState",
                    value: function() {
                        var t = x.get(this._iid)
                          , n = t.container
                          , r = n.wsAdapter
                          , i = n.stateChangeEnabled
                          , s = n.isInBackground
                          , a = n.closedByGoingBackground;
                        s && i && (t.set("isInBackground", !1),
                        a && this.currentUser && r.reconnect(this.currentUser.userId, !0))
                    }
                }, {
                    key: "enableStateChange",
                    value: function() {
                        x.get(this._iid).set("enableStateChange", !0)
                    }
                }, {
                    key: "disableStateChange",
                    value: function() {
                        x.get(this._iid).set("enableStateChange", !1)
                    }
                }, {
                    key: "addExtension",
                    value: function(t, n) {
                        var r = x.get(this._iid).container
                          , i = r.extensions;
                        r.supportedExtensionKeys.indexOf(t) > -1 && (i[t] = n)
                    }
                }, {
                    key: "createUserListQuery",
                    value: function(t) {
                        return new (Y.get(this._iid)).UserListQuery(t)
                    }
                }, {
                    key: "createApplicationUserListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).ApplicationUserListQuery
                    }
                }, {
                    key: "createBlockedUserListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).BlockedUserListQuery
                    }
                }, {
                    key: "createFriendListQuery",
                    value: function() {
                        return new (Y.get(this._iid)).FriendListQuery
                    }
                }, {
                    key: "createMessageSearchQuery",
                    value: function(t, n) {
                        return new (Y.get(this._iid)).MessageSearchQuery(t,n)
                    }
                }, {
                    key: "sendCommand",
                    value: function(t, n) {
                        var r = this;
                        return eg(this._iid, function(n) {
                            r.ConnectionManager.ready(function(i, s) {
                                if (i)
                                    n(i, null);
                                else {
                                    var a = x.get(r._iid).container
                                      , o = a.wsAdapter
                                      , l = a.ackStateMap;
                                    if (null == o || null == o.client || o.client.getConnectionState() !== r.ConnectionState.OPEN || r.getConnectionState() !== r.ConnectionState.OPEN)
                                        return void n(new z("Connection is not valid. Please reconnect.",z.WEBSOCKET_CONNECTION_CLOSED), null);
                                    if (t.isAckRequired) {
                                        var u = t.requestId
                                          , c = {
                                            handler: n,
                                            timer: setTimeout(function() {
                                                n(new z("Command received no ack.",z.ACK_TIMEOUT), null),
                                                delete l[u]
                                            }, r.Options.websocketResponseTimeout)
                                        };
                                        l[u] = c,
                                        o.client.send(t, function(t) {
                                            t && (clearTimeout(c.timer),
                                            n(t, null))
                                        })
                                    } else
                                        o.client.send(t, n)
                                }
                            }, !1)
                        }, n).catch(function(t) {
                            ei.debug(t)
                        })
                    }
                }, {
                    key: "setSessionHandler",
                    value: function(t) {
                        x.get(this._iid).container.sessionManager.setHandler(t)
                    }
                }, {
                    key: "addUserEventHandler",
                    value: function(t, n) {
                        n instanceof Y.get(this._iid).UserEventHandler && (this.userEventHandlers[t] = n)
                    }
                }, {
                    key: "removeUserEventHandler",
                    value: function(t) {
                        delete this.userEventHandlers[t]
                    }
                }, {
                    key: "removeAllUserEventHandler",
                    value: function() {
                        this.userEventHandlers = {}
                    }
                }, {
                    key: "addChannelHandler",
                    value: function(t, n) {
                        n instanceof Y.get(this._iid).ChannelHandler && (this.channelHandlers[t] = n)
                    }
                }, {
                    key: "removeChannelHandler",
                    value: function(t) {
                        delete this.channelHandlers[t]
                    }
                }, {
                    key: "removeAllChannelHandlers",
                    value: function() {
                        this.channelHandlers = {}
                    }
                }, {
                    key: "addConnectionHandler",
                    value: function(t, n) {
                        n instanceof Y.get(this._iid).ConnectionHandler && (this.connectionHandlers[t] = n)
                    }
                }, {
                    key: "removeConnectionHandler",
                    value: function(t) {
                        delete this.connectionHandlers[t]
                    }
                }, {
                    key: "removeAllConnectionHandlers",
                    value: function() {
                        this.connectionHandlers = {}
                    }
                }, {
                    key: "updateCurrentUserInfo",
                    value: function(t, n, r) {
                        var i = this
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: "string",
                            nullable: !0
                        }), new eI({
                            type: "string",
                            nullable: !0
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        return s = o[0],
                        t = o[1],
                        n = o[2],
                        r = o[3],
                        eg(this._iid, function(r) {
                            if (s)
                                r(s, null);
                            else {
                                var a = x.get(i._iid);
                                a.container.apiClient.updateCurrentUserInfo({
                                    nickname: t,
                                    profileUrl: n
                                }, function(s, o) {
                                    var l = null;
                                    s || (i.currentUser && (t && (i.currentUser.nickname = t),
                                    n && (i.currentUser.plainProfileUrl = n,
                                    Object.defineProperty(i.currentUser, "profileUrl", {
                                        value: i.currentUser.requireAuth ? "".concat(i.currentUser.plainProfileUrl, "?auth=").concat(a.container.auth.eKey) : i.currentUser.plainProfileUrl,
                                        configurable: !0,
                                        writable: !1
                                    }))),
                                    l = i.currentUser),
                                    r(s, l)
                                })
                            }
                        }, r)
                    }
                }, {
                    key: "updateCurrentUserInfoWithProfileImage",
                    value: function(t, n, r) {
                        var i = this
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: "string",
                            nullable: !0
                        }), new eI({
                            type: "file",
                            nullable: !0
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        return s = o[0],
                        t = o[1],
                        n = o[2],
                        r = o[3],
                        eg(this._iid, function(r) {
                            if (s)
                                r(s, null);
                            else {
                                var a = x.get(i._iid);
                                a.container.apiClient.updateCurrentUserInfo({
                                    nickname: t,
                                    profileImage: n
                                }, function(n, s) {
                                    var o = null;
                                    n || (i.currentUser && (t && (i.currentUser.nickname = t),
                                    s.profile_url && (i.currentUser.plainProfileUrl = s.profile_url,
                                    Object.defineProperty(i.currentUser, "profileUrl", {
                                        value: i.currentUser.requireAuth ? "".concat(i.currentUser.plainProfileUrl, "?auth=").concat(a.container.auth.eKey) : i.currentUser.plainProfileUrl,
                                        configurable: !0,
                                        writable: !1
                                    }))),
                                    o = i.currentUser),
                                    r(n, o)
                                })
                            }
                        }, r)
                    }
                }, {
                    key: "updateCurrentUserInfoWithPreferredLanguages",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return t.every(function(t) {
                                    return "string" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.updateCurrentUserInfo({
                                preferredLanguages: t
                            }, function(i, s) {
                                var a = null;
                                i || (r.currentUser && t && (r.currentUser._preferredLanguages = t),
                                a = r.currentUser),
                                n(i, a)
                            })
                        }, n)
                    }
                }, {
                    key: "registerGCMPushTokenForCurrentUser",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string",
                            constraint: function(t) {
                                return t.length > 0
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, r.pushTokenRegistrationState.ERROR) : r.currentUser ? x.get(r._iid).container.apiClient.registerGCMPushToken({
                                token: t
                            }, function(t, i) {
                                var s = r.pushTokenRegistrationState.ERROR;
                                t || (r.GCMPushToken = "",
                                s = r.pushTokenRegistrationState.SUCCESS),
                                n(t, s)
                            }) : (r.GCMPushToken = t,
                            n(null, r.pushTokenRegistrationState.PENDING))
                        }, n)
                    }
                }, {
                    key: "unregisterGCMPushTokenForCurrentUser",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string",
                            constraint: function(t) {
                                return t.length > 0
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : r.currentUser ? x.get(r._iid).container.apiClient.unregisterGCMPushToken({
                                token: t
                            }, function(t, r) {
                                n(t, null)
                            }) : (r.GCMPushToken = t,
                            n(null, r.pushTokenRegistrationState.PENDING))
                        }, n)
                    }
                }, {
                    key: "unregisterGCMPushTokenAllForCurrentUser",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.unregisterAllGCMPushTokens({}, function(n, r) {
                                t(n, null)
                            })
                        }, t)
                    }
                }, {
                    key: "registerAPNSPushTokenForCurrentUser",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string",
                            constraint: function(t) {
                                return t.length > 0
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, r.pushTokenRegistrationState.ERROR) : r.currentUser ? x.get(r._iid).container.apiClient.registerAPNSPushToken({
                                token: t
                            }, function(t, i) {
                                var s = r.pushTokenRegistrationState.ERROR;
                                t || (r.APNSPushToken = "",
                                s = r.pushTokenRegistrationState.SUCCESS),
                                n(t, s)
                            }) : (r.APNSPushToken = t,
                            n(null, r.pushTokenRegistrationState.PENDING))
                        }, n)
                    }
                }, {
                    key: "unregisterAPNSPushTokenForCurrentUser",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string",
                            constraint: function(t) {
                                return t.length > 0
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : r.currentUser ? x.get(r._iid).container.apiClient.unregisterAPNSPushToken({
                                token: t
                            }, function(t, r) {
                                n(t, null)
                            }) : (r.APNSPushToken = t,
                            n(null, r.pushTokenRegistrationState.PENDING))
                        }, n)
                    }
                }, {
                    key: "unregisterAPNSPushTokenAllForCurrentUser",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.unregisterAllAPNSPushTokens({}, function(n, r) {
                                t(n, null)
                            })
                        }, t)
                    }
                }, {
                    key: "unregisterPushTokenAllForCurrentUser",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.unregisterAllPushTokens({}, function(n, r) {
                                t(n, null)
                            })
                        }, t)
                    }
                }, {
                    key: "getMyGroupChannelChangeLogsByToken",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = null
                          , o = eI.parse(arguments, [new eI({
                            type: "string",
                            nullable: !0
                        }), new eI({
                            type: "array",
                            optional: !0,
                            nullable: !0,
                            defaultValue: null
                        }), new eI({
                            type: "boolean",
                            nullable: !0,
                            optional: !0,
                            defaultValue: null
                        }), new eI({
                            type: "callback"
                        })])
                          , l = k(o, 5);
                        a = l[0],
                        t = l[1],
                        n = l[2],
                        r = l[3],
                        i = l[4];
                        var u = Y.get(this._iid).GroupChannelChangeLogsParams
                          , c = null;
                        if (a) {
                            var d = eI.parse(arguments, [new eI({
                                type: "string",
                                nullable: !0
                            }), new eI({
                                type: u,
                                constraint: function(t) {
                                    return t._validate()
                                }
                            }), new eI({
                                type: "callback"
                            })])
                              , h = k(d, 4);
                            a = h[0],
                            t = h[1],
                            c = h[2],
                            i = h[3]
                        } else
                            (c = new u).customTypes = n,
                            c.includeEmpty = r,
                            c.includeFrozen = !0;
                        return eg(this._iid, function(n) {
                            a ? n(a, null) : x.get(s._iid).container.apiClient.getMyGroupChannelChangeLogs(v({
                                ts: null,
                                token: t
                            }, c)).then(function(t) {
                                var r = Y.get(s._iid).GroupChannel;
                                n(null, {
                                    updatedChannels: t.updated.map(function(t) {
                                        return new r(t)
                                    }),
                                    deletedChannelUrls: t.deleted,
                                    hasMore: t.has_more,
                                    token: t.next
                                })
                            }).catch(function(t) {
                                n(t, null)
                            })
                        }, i)
                    }
                }, {
                    key: "getMyGroupChannelChangeLogsByTimestamp",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = null
                          , o = eI.parse(arguments, [new eI({
                            type: "number",
                            constraint: function(t) {
                                return t >= 0
                            }
                        }), new eI({
                            type: "array",
                            optional: !0,
                            nullable: !0,
                            defaultValue: null
                        }), new eI({
                            type: "boolean",
                            nullable: !0,
                            optional: !0,
                            defaultValue: null
                        }), new eI({
                            type: "callback"
                        })])
                          , l = k(o, 5);
                        a = l[0],
                        t = l[1],
                        n = l[2],
                        r = l[3],
                        i = l[4];
                        var u = Y.get(this._iid).GroupChannelChangeLogsParams
                          , c = null;
                        if (a) {
                            var d = eI.parse(arguments, [new eI({
                                type: "number",
                                constraint: function(t) {
                                    return t >= 0
                                }
                            }), new eI({
                                type: u,
                                constraint: function(t) {
                                    return t._validate()
                                }
                            }), new eI({
                                type: "callback"
                            })])
                              , h = k(d, 4);
                            a = h[0],
                            t = h[1],
                            c = h[2],
                            i = h[3]
                        } else
                            (c = new u).customTypes = n,
                            c.includeEmpty = r,
                            c.includeFrozen = !0;
                        return eg(this._iid, function(n) {
                            a ? n(a, null) : x.get(s._iid).container.apiClient.getMyGroupChannelChangeLogs(v({
                                ts: t,
                                token: null
                            }, c)).then(function(t) {
                                var r = Y.get(s._iid).GroupChannel;
                                n(null, {
                                    updatedChannels: t.updated.map(function(t) {
                                        return new r(t)
                                    }),
                                    deletedChannelUrls: t.deleted,
                                    hasMore: t.has_more,
                                    token: t.next
                                })
                            }).catch(function(t) {
                                n(t, null)
                            })
                        }, i)
                    }
                }, {
                    key: "getChannelInvitationPreference",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.getChannelInvitationPreference({}, function(n, r) {
                                var i = null;
                                n || (i = {
                                    autoAccept: r.auto_accept
                                }),
                                t(n, i)
                            })
                        }, t)
                    }
                }, {
                    key: "setChannelInvitationPreference",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "boolean"
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.setChannelInvitationPreference({
                                isAutoAccept: t
                            }, function(t, r) {
                                var i = null;
                                t || (i = {
                                    autoAccept: r.auto_accept
                                }),
                                n(t, i)
                            })
                        }, n)
                    }
                }, {
                    key: "getDoNotDisturb",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.getDoNotDisturb({}, function(n, r) {
                                var i = null;
                                n || (i = {
                                    doNotDisturbOn: r.do_not_disturb,
                                    startHour: r.start_hour,
                                    startMin: r.start_min,
                                    endHour: r.end_hour,
                                    endMin: r.end_min,
                                    timezone: r.timezone
                                }),
                                t(n, i)
                            })
                        }, t)
                    }
                }, {
                    key: "setDoNotDisturb",
                    value: function(t, n, r, i, s, a, o) {
                        var l = this
                          , u = null
                          , c = eI.parse(arguments, [new eI({
                            type: "boolean"
                        }), new eI({
                            type: "number",
                            constraint: function(t) {
                                return 0 <= t && t <= 23
                            }
                        }), new eI({
                            type: "number",
                            constraint: function(t) {
                                return 0 <= t && t <= 59
                            }
                        }), new eI({
                            type: "number",
                            constraint: function(t) {
                                return 0 <= t && t <= 23
                            }
                        }), new eI({
                            type: "number",
                            constraint: function(t) {
                                return 0 <= t && t <= 59
                            }
                        }), new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , d = k(c, 8);
                        return u = d[0],
                        t = d[1],
                        n = d[2],
                        r = d[3],
                        i = d[4],
                        s = d[5],
                        a = d[6],
                        o = d[7],
                        eg(this._iid, function(o) {
                            u ? o(u, null) : x.get(l._iid).container.apiClient.setDoNotDisturb({
                                doNotDisturbOn: t,
                                startHour: n,
                                startMin: r,
                                endHour: i,
                                endMin: s,
                                timezone: a
                            }, function(t, n) {
                                var r = null;
                                t || (r = {
                                    doNotDisturbOn: n.do_not_disturb,
                                    startHour: n.start_hour,
                                    startMin: n.start_min,
                                    endHour: n.end_hour,
                                    endMin: n.end_min,
                                    timezone: n.timezone
                                }),
                                o(t, r)
                            })
                        }, o)
                    }
                }, {
                    key: "getSnoozePeriod",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.getSnoozePeriod({}, function(n, r) {
                                var i = null;
                                n || (i = {
                                    isSnoozeOn: r.snooze_enabled,
                                    startTs: r.snooze_start_ts,
                                    endTs: r.snooze_end_ts
                                }),
                                t(n, i)
                            })
                        }, t)
                    }
                }, {
                    key: "setSnoozePeriod",
                    value: function(t, n, r, i) {
                        var s = this
                          , a = null
                          , o = eI.parse(arguments, [new eI({
                            type: "boolean"
                        }), new eI({
                            type: "number",
                            constraint: function(t) {
                                return t > 0
                            }
                        }), new eI({
                            type: "number",
                            constraint: function(t) {
                                return t > 0
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , l = k(o, 5);
                        return a = l[0],
                        t = l[1],
                        n = l[2],
                        r = l[3],
                        i = l[4],
                        eg(this._iid, function(i) {
                            a ? i(a, null) : x.get(s._iid).container.apiClient.setSnoozePeriod({
                                snoozeOn: t,
                                startTs: n,
                                endTs: r
                            }, function(t, n) {
                                var r = null;
                                t || (r = {
                                    isSnoozeOn: n.snooze_enabled,
                                    startTs: n.snooze_start_ts,
                                    endTs: n.snooze_end_ts
                                }),
                                i(t, r)
                            })
                        }, i)
                    }
                }, {
                    key: "blockUser",
                    value: function(t, n) {
                        var r = null
                          , i = eI.parse(arguments, [new eI({
                            type: "object",
                            constraint: function(t) {
                                return t && t.hasOwnProperty("userId")
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , s = k(i, 3);
                        return r = s[0],
                        t = s[1],
                        n = s[2],
                        r ? eg(this._iid, function(t) {
                            t(r, null)
                        }, n) : this.blockUserWithUserId(t.userId, n)
                    }
                }, {
                    key: "blockUserWithUserId",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string",
                            constraint: function(t) {
                                return t && (!r.currentUser || t !== r.currentUser.userId)
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.blockUser({
                                blockedUserId: t
                            }, function(t, r) {
                                var i = null;
                                t || (i = new tg(r)),
                                n(t, i)
                            })
                        }, n)
                    }
                }, {
                    key: "unblockUser",
                    value: function(t, n) {
                        var r = null
                          , i = eI.parse(arguments, [new eI({
                            type: "object",
                            constraint: function(t) {
                                return t && t.hasOwnProperty("userId")
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , s = k(i, 3);
                        return r = s[0],
                        t = s[1],
                        n = s[2],
                        r ? eg(this._iid, function(t) {
                            t(r, null)
                        }, n) : this.unblockUserWithUserId(t.userId, n)
                    }
                }, {
                    key: "unblockUserWithUserId",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string",
                            constraint: function(t) {
                                return t && (!r.currentUser || t !== r.currentUser.userId)
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.unblockUser({
                                unblockedUserId: t
                            }, function(t, r) {
                                n(t, null)
                            })
                        }, n)
                    }
                }, {
                    key: "getPushTriggerOption",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.getPushTriggerOption({}, function(n, r) {
                                t(n, r ? r.push_trigger_option : null)
                            })
                        }, t)
                    }
                }, {
                    key: "setPushTriggerOption",
                    value: function(t, n) {
                        var r = this;
                        return eg(this._iid, function(n) {
                            Object.keys(r.PushTriggerOption).map(function(t) {
                                return r.PushTriggerOption[t]
                            }).indexOf(t) > -1 ? x.get(r._iid).container.apiClient.setPushTriggerOption({
                                pushTriggerOption: t
                            }, function(t, r) {
                                n(t, r ? r.push_trigger_option : null)
                            }) : n(eI.error, null)
                        }, n)
                    }
                }, {
                    key: "getGroupChannelCount",
                    value: function(t, n) {
                        var r = this
                          , i = Y.get(this._iid).GroupChannel
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: i.MemberStateFilter,
                            optional: !0,
                            defaultValue: i.MemberStateFilter.ALL
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 3);
                        return s = o[0],
                        t = o[1],
                        n = o[2],
                        eg(this._iid, function(n) {
                            s ? n(s, null) : x.get(r._iid).container.apiClient.getGroupChannelCount({
                                memberStateFilter: t
                            }, function(t, r) {
                                var i = null;
                                t || (i = parseInt(r.group_channel_count)),
                                n(t, i)
                            })
                        }, n)
                    }
                }, {
                    key: "getTotalUnreadChannelCount",
                    value: function(t, n) {
                        var r = this
                          , i = Y.get(this._iid)
                          , s = i.GroupChannel
                          , a = i.GroupChannelTotalUnreadChannelCountParams
                          , o = null
                          , l = eI.parse(arguments, [new eI({
                            type: "object",
                            optional: !0,
                            defaultValue: null,
                            constraint: function(t) {
                                return t instanceof a
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , u = k(l, 3);
                        return o = u[0],
                        t = u[1],
                        n = u[2],
                        eg(this._iid, function(n) {
                            if (o)
                                n(o, null);
                            else {
                                var i = null
                                  , a = s.SuperChannelFilter.ALL;
                                t && (i = t.channelCustomTypesFilter,
                                a = t.superChannelFilter),
                                x.get(r._iid).container.apiClient.getTotalUnreadChannelCount({
                                    customTypesFilter: i,
                                    superChannelFilter: a
                                }, function(t, r) {
                                    var i = null;
                                    t || (i = parseInt(r.unread_count)),
                                    n(t, i)
                                })
                            }
                        }, n)
                    }
                }, {
                    key: "getTotalUnreadMessageCount",
                    value: function(t, n) {
                        var r = this
                          , i = Y.get(this._iid)
                          , s = i.GroupChannel
                          , a = i.GroupChannelTotalUnreadMessageCountParams
                          , o = null
                          , l = eI.parse(arguments, [new eI({
                            type: "object",
                            optional: !0,
                            defaultValue: null,
                            constraint: function(t) {
                                return Array.isArray(t) && t.every(function(t) {
                                    return "string" == typeof t
                                }) || t instanceof a
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , u = k(l, 3);
                        return o = u[0],
                        t = u[1],
                        n = u[2],
                        eg(this._iid, function(n) {
                            if (o)
                                n(o, null);
                            else {
                                var i = s.SuperChannelFilter.ALL;
                                if (t instanceof a) {
                                    var l = t;
                                    t = l.channelCustomTypesFilter,
                                    i = l.superChannelFilter
                                }
                                x.get(r._iid).container.apiClient.getTotalUnreadMessageCount({
                                    customTypesFilter: t,
                                    superChannelFilter: i
                                }, function(t, r) {
                                    var i = null;
                                    t || (i = parseInt(r.unread_count)),
                                    n(t, i)
                                })
                            }
                        }, n)
                    }
                }, {
                    key: "getUnreadItemCount",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return t.length > 0 && t.every(function(t) {
                                    return Object.keys(n6.UnreadItemKey).map(function(t) {
                                        return n6.UnreadItemKey[t]
                                    }).indexOf(t) > -1
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            if (i)
                                n(i, null);
                            else {
                                var s = t.filter(function(n, r) {
                                    return t.indexOf(n) === r
                                });
                                x.get(r._iid).container.apiClient.getUnreadItemCount({
                                    keys: s
                                }, function(t, r) {
                                    n(t, r)
                                })
                            }
                        }, n)
                    }
                }, {
                    key: "getSubscribedTotalUnreadMessageCount",
                    value: function() {
                        var t = x.get(this._iid).container.subscribedUnreadMessageCount;
                        return t.all >= 0 ? t.all : 0
                    }
                }, {
                    key: "getSubscribedCustomTypeTotalUnreadMessageCount",
                    value: function() {
                        var t = x.get(this._iid).container.subscribedUnreadMessageCount;
                        if (Object.keys(t.custom_types).length > 0) {
                            var n = 0;
                            return Object.keys(t.custom_types).forEach(function(r) {
                                n += t.custom_types[r]
                            }),
                            n
                        }
                        return 0
                    }
                }, {
                    key: "getSubscribedCustomTypeUnreadMessageCount",
                    value: function(t) {
                        if (t && "string" == typeof t) {
                            var n = x.get(this._iid).container.subscribedUnreadMessageCount;
                            return n.custom_types.hasOwnProperty(t) ? n.custom_types[t] : 0
                        }
                        return 0
                    }
                }, {
                    key: "getMyPushTokensByToken",
                    value: function(t, n, r) {
                        var i = this
                          , s = null
                          , a = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "string",
                            constraint: function(t) {
                                return ["gcm", "apns", "apns_voip"].indexOf(t) > -1
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , o = k(a, 4);
                        return s = o[0],
                        t = o[1],
                        n = o[2],
                        r = o[3],
                        eg(this._iid, function(r) {
                            s ? r(s, null) : x.get(i._iid).container.apiClient.getPushTokens({
                                ts: null,
                                token: t,
                                type: n
                            }, function(t, n) {
                                if (t)
                                    r(t, null);
                                else {
                                    var i = n.type;
                                    r(null, {
                                        deviceTokens: n.device_tokens,
                                        type: i ? i.toLowerCase() : "unknown",
                                        hasMore: n.has_more,
                                        token: n.token
                                    })
                                }
                            })
                        }, r)
                    }
                }, {
                    key: "getPushTemplate",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            x.get(n._iid).container.apiClient.getPushTemplate({}, function(n, r) {
                                var i = null;
                                n || (i = r.name.toString()),
                                t(n, i)
                            })
                        }, t)
                    }
                }, {
                    key: "setPushTemplate",
                    value: function(t, n) {
                        var r = this;
                        return eg(this._iid, function(n) {
                            [r.PUSH_TEMPLATE_DEFAULT, r.PUSH_TEMPLATE_ALTERNATIVE].indexOf(t) > -1 ? x.get(r._iid).container.apiClient.setPushTemplate({
                                templateName: t
                            }, function(t, r) {
                                var i = null;
                                t || (i = r.name.toString()),
                                n(t, i)
                            }) : n(eI.error, null)
                        }, n)
                    }
                }, {
                    key: "markAsReadAll",
                    value: function(t) {
                        var n = this;
                        return eg(this._iid, function(t) {
                            var r = Y.get(n._iid).GroupChannel
                              , i = (new Date).getTime();
                            i - r.markAsReadAllLastSentAt < 1e3 ? t(new z("MarkAsRead rate limit exceeded.",z.MARK_AS_READ_RATE_LIMIT_EXCEEDED), null) : (r.markAsReadAllLastSentAt = i,
                            x.get(n._iid).container.apiClient.markAsReadAll({
                                channelUrls: null
                            }, function(s, a) {
                                s || Object.keys(r.cachedChannels).forEach(function(t) {
                                    n.currentUser && r.cachedChannels[t].updateReadReceipt(n.currentUser.userId, i),
                                    r.cachedChannels[t]._setGroupChannelUnreadCount(0, 0)
                                }),
                                t(s, null)
                            }))
                        }, t)
                    }
                }, {
                    key: "markAsReadWithChannelUrls",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return t.every(function(t) {
                                    return "string" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            if (i)
                                n(i, null);
                            else {
                                var s = (new Date).getTime();
                                x.get(r._iid).container.apiClient.markAsReadAll({
                                    channelUrls: t
                                }, function(i, a) {
                                    i || t.forEach(function(t) {
                                        n6.cachedChannels[t] && (r.currentUser && n6.cachedChannels[t].updateReadReceipt(r.currentUser.userId, s),
                                        n6.cachedChannels[t]._setGroupChannelUnreadCount(0, 0))
                                    }),
                                    n(i, null)
                                })
                            }
                        }, n)
                    }
                }, {
                    key: "markAsDelivered",
                    value: function(t) {
                        "string" == typeof t && Y.get(this._iid).GroupChannel.getChannel(t, L.INTERNAL_CALL).then(function(t) {
                            return t.markAsDelivered()
                        }).catch(function(t) {
                            return ei.debug(t)
                        })
                    }
                }, {
                    key: "getFriendChangeLogsByToken",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string",
                            optional: !0,
                            defaultValue: null
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.getFriendChangeLogsByToken({
                                token: t
                            }, function(t, i) {
                                var s = null;
                                if (!t) {
                                    var a = Y.get(r._iid).User;
                                    s = {
                                        updatedUsers: i.updated.map(function(t) {
                                            return new a(t)
                                        }),
                                        deletedUserIds: i.deleted,
                                        hasMore: i.has_more,
                                        token: i.next
                                    }
                                }
                                n(t, s)
                            })
                        }, n)
                    }
                }, {
                    key: "uploadFriendDiscoveries",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return t.every(function(t) {
                                    return t.hasOwnProperty("friendDiscoveryKey")
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.uploadFriendDiscoveries({
                                discoveries: t
                            }, function(t, r) {
                                n(t, r)
                            })
                        }, n)
                    }
                }, {
                    key: "deleteFriendDiscovery",
                    value: function(t, n) {
                        var r = null
                          , i = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , s = k(i, 3);
                        return r = s[0],
                        t = s[1],
                        n = s[2],
                        r ? eg(this._iid, function(t) {
                            t(r, null)
                        }, n) : this.deleteFriendDiscoveries([t], n)
                    }
                }, {
                    key: "deleteFriendDiscoveries",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return t.every(function(t) {
                                    return "string" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.deleteFriendDiscoveries({
                                discoveryKeys: t
                            }, function(t, r) {
                                n(t, r)
                            })
                        }, n)
                    }
                }, {
                    key: "addFriends",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return t.every(function(t) {
                                    return "string" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.addFriends({
                                userIds: t
                            }, function(t, i) {
                                var s = null;
                                if (!t) {
                                    var a = Y.get(r._iid).User;
                                    s = i.users.map(function(t) {
                                        return new a(t)
                                    })
                                }
                                n(t, s)
                            })
                        }, n)
                    }
                }, {
                    key: "deleteFriend",
                    value: function(t, n) {
                        var r = null
                          , i = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , s = k(i, 3);
                        return r = s[0],
                        t = s[1],
                        n = s[2],
                        r ? eg(this._iid, function(t) {
                            t(r, null)
                        }, n) : this.deleteFriends([t], n)
                    }
                }, {
                    key: "deleteFriends",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "array",
                            constraint: function(t) {
                                return t.every(function(t) {
                                    return "string" == typeof t
                                })
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.deleteFriends({
                                userIds: t
                            }, function(t, r) {
                                n(t, r)
                            })
                        }, n)
                    }
                }, {
                    key: "getAllEmoji",
                    value: function(t) {
                        var n = this
                          , r = null
                          , i = eI.parse(arguments, [new eI({
                            type: "callback"
                        })])
                          , s = k(i, 2);
                        return r = s[0],
                        t = s[1],
                        eg(this._iid, function(t) {
                            r ? t(r, null) : x.get(n._iid).container.apiClient.getAllEmoji(function(r, i) {
                                r ? t(r, null) : t(null, new (Y.get(n._iid)).EmojiContainer(i))
                            })
                        }, t)
                    }
                }, {
                    key: "getEmojiCategory",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "number",
                            constraint: function(t) {
                                return t >= 0
                            }
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.getEmojiCategory({
                                categoryId: t
                            }, function(t, i) {
                                t ? n(t, null) : n(null, new (Y.get(r._iid)).EmojiCategory(i))
                            })
                        }, n)
                    }
                }, {
                    key: "getEmoji",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "string"
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.getEmoji({
                                emojiKey: t
                            }, function(t, i) {
                                t ? n(t, null) : n(null, new (Y.get(r._iid)).Emoji(i))
                            })
                        }, n)
                    }
                }, {
                    key: "getAllowFriendDiscovery",
                    value: function(t) {
                        var n = this
                          , r = null
                          , i = eI.parse(arguments, [new eI({
                            type: "callback"
                        })])
                          , s = k(i, 2);
                        return r = s[0],
                        t = s[1],
                        eg(this._iid, function(t) {
                            r ? t(r, null) : x.get(n._iid).container.apiClient.getAllowFriendDiscovery(function(n, r) {
                                var i = r.allow_friend_discovery;
                                n ? t(n, null) : t(null, i)
                            })
                        }, t)
                    }
                }, {
                    key: "setAllowFriendDiscovery",
                    value: function(t, n) {
                        var r = this
                          , i = null
                          , s = eI.parse(arguments, [new eI({
                            type: "boolean"
                        }), new eI({
                            type: "callback"
                        })])
                          , a = k(s, 3);
                        return i = a[0],
                        t = a[1],
                        n = a[2],
                        eg(this._iid, function(n) {
                            i ? n(i, null) : x.get(r._iid).container.apiClient.setAllowFriendDiscovery({
                                allowFriendDiscovery: t
                            }, function(r, i) {
                                r ? n(r, null) : n(null, t)
                            })
                        }, n)
                    }
                }, {
                    key: "clearCachedMessages",
                    value: function(t) {
                        var n = this
                          , r = tl.of(this._iid);
                        if (r) {
                            var i = x.get(this._iid).container.store;
                            return Promise.all(t.map(function(t) {
                                return new Promise(function(s, a) {
                                    r.clearByChannelUrl(t).then(function() {
                                        var r = t_(n._currentUserId, t);
                                        return i.remove(r)
                                    }).then(function() {
                                        var r = tb(n._currentUserId, t);
                                        return i.remove(r)
                                    }).then(function() {
                                        s()
                                    }).catch(function(t) {
                                        a(t)
                                    })
                                }
                                )
                            }))
                        }
                        return Promise.resolve([])
                    }
                }, {
                    key: "_getCurrentUserDataKey",
                    value: function() {
                        return "sendbird:".concat(this._currentUserId, "@currentUserData")
                    }
                }, {
                    key: "_populateVaultFromCurrentUserData",
                    value: function(t) {
                        var n = x.get(this._iid)
                          , r = n.container.auth
                          , i = Y.get(this._iid).User
                          , s = t.currentUser
                          , a = t.maxUnreadCountOfSuperGroupChannel
                          , o = t.profileImageEncryption
                          , l = t.sessionKey
                          , u = t.eKey
                          , c = t.appInfo
                          , d = t.connectedAt
                          , h = t.firstConnectedAt
                          , f = t.concurrentCallLimit
                          , p = t.backOffDelay;
                        s && (this.currentUser = i.buildFromSerializedData(s)),
                        a && n.set("maxUnreadCountOfSuperGroupChannel", a),
                        o && n.set("profileImageEncryption", o),
                        r ? (l && (r.sessionKey = l),
                        u && (r.ekey = u)) : ei.debug("Auth should have been created when populating current user data."),
                        c && n.set("appInfo", new eP(c)),
                        d && n.set("connectedAt", d),
                        h && n.set("firstConnectedAt", h),
                        f && n.set("concurrentCallLimit", f),
                        p && n.set("backOffDelay", p)
                    }
                }], [{
                    key: "version",
                    get: function() {
                        return L.SDK_VERSION
                    }
                }, {
                    key: "LogLevel",
                    get: function() {
                        return ei.supportedLogLevels
                    }
                }, {
                    key: "getInstance",
                    value: function(t) {
                        return t ? il[t] : io
                    }
                }, {
                    key: "getLogLevel",
                    value: function() {
                        return ei.logLevel
                    }
                }, {
                    key: "setLogLevel",
                    value: function(t) {
                        var n = Object.values(ei.supportedLogLevels);
                        if (n.includes(t))
                            ei.logLevel = t;
                        else {
                            ei.logLevel = ei.defaultLogLevel;
                            var r = n.map(function(t) {
                                return "'".concat(t, "'")
                            }).join(", ");
                            ei.warn("`logLevel` parameter should be one of", "".concat(r, ","), "not `'".concat(t, "'`."), "Set to default log level", "`".concat(ei.defaultLogLevel, "`."))
                        }
                    }
                }, {
                    key: "getAppVersion",
                    value: function() {
                        return ic
                    }
                }, {
                    key: "setAppVersion",
                    value: function(t) {
                        "string" == typeof t && eo() && (ic = t)
                    }
                }]),
                t
            }();
            return id
        }(r(6518), r(6230), r(7026))
    },
    6518: function(t, n, r) {
        t.exports = r(6328)
    },
    8629: function(t, n, r) {
        "use strict";
        var i = r(1355)
          , s = r(5412)
          , a = r(7446)
          , o = r(5266)
          , l = r(5689)
          , u = r(4452)
          , c = r(6891)
          , d = r(7507)
          , h = r(2125)
          , f = r(2811)
          , p = r(7430);
        t.exports = function(t) {
            return new Promise(function(n, r) {
                var g, m = t.data, y = t.headers, _ = t.responseType;
                function v() {
                    t.cancelToken && t.cancelToken.unsubscribe(g),
                    t.signal && t.signal.removeEventListener("abort", g)
                }
                i.isFormData(m) && i.isStandardBrowserEnv() && delete y["Content-Type"];
                var E = new XMLHttpRequest;
                if (t.auth) {
                    var b = t.auth.username || ""
                      , C = t.auth.password ? unescape(encodeURIComponent(t.auth.password)) : "";
                    y.Authorization = "Basic " + btoa(b + ":" + C)
                }
                var S = l(t.baseURL, t.url);
                function A() {
                    if (E) {
                        var i = "getAllResponseHeaders"in E ? u(E.getAllResponseHeaders()) : null;
                        s(function(t) {
                            n(t),
                            v()
                        }, function(t) {
                            r(t),
                            v()
                        }, {
                            data: _ && "text" !== _ && "json" !== _ ? E.response : E.responseText,
                            status: E.status,
                            statusText: E.statusText,
                            headers: i,
                            config: t,
                            request: E
                        }),
                        E = null
                    }
                }
                if (E.open(t.method.toUpperCase(), o(S, t.params, t.paramsSerializer), !0),
                E.timeout = t.timeout,
                "onloadend"in E ? E.onloadend = A : E.onreadystatechange = function() {
                    E && 4 === E.readyState && (0 !== E.status || E.responseURL && 0 === E.responseURL.indexOf("file:")) && setTimeout(A)
                }
                ,
                E.onabort = function() {
                    E && (r(new h("Request aborted",h.ECONNABORTED,t,E)),
                    E = null)
                }
                ,
                E.onerror = function() {
                    r(new h("Network Error",h.ERR_NETWORK,t,E,E)),
                    E = null
                }
                ,
                E.ontimeout = function() {
                    var n = t.timeout ? "timeout of " + t.timeout + "ms exceeded" : "timeout exceeded"
                      , i = t.transitional || d;
                    t.timeoutErrorMessage && (n = t.timeoutErrorMessage),
                    r(new h(n,i.clarifyTimeoutError ? h.ETIMEDOUT : h.ECONNABORTED,t,E)),
                    E = null
                }
                ,
                i.isStandardBrowserEnv()) {
                    var N = (t.withCredentials || c(S)) && t.xsrfCookieName ? a.read(t.xsrfCookieName) : void 0;
                    N && (y[t.xsrfHeaderName] = N)
                }
                "setRequestHeader"in E && i.forEach(y, function(t, n) {
                    void 0 === m && "content-type" === n.toLowerCase() ? delete y[n] : E.setRequestHeader(n, t)
                }),
                i.isUndefined(t.withCredentials) || (E.withCredentials = !!t.withCredentials),
                _ && "json" !== _ && (E.responseType = t.responseType),
                "function" == typeof t.onDownloadProgress && E.addEventListener("progress", t.onDownloadProgress),
                "function" == typeof t.onUploadProgress && E.upload && E.upload.addEventListener("progress", t.onUploadProgress),
                (t.cancelToken || t.signal) && (g = function(t) {
                    E && (r(!t || t && t.type ? new f : t),
                    E.abort(),
                    E = null)
                }
                ,
                t.cancelToken && t.cancelToken.subscribe(g),
                t.signal && (t.signal.aborted ? g() : t.signal.addEventListener("abort", g))),
                m || (m = null);
                var T = p(S);
                if (T && -1 === ["http", "https", "file"].indexOf(T)) {
                    r(new h("Unsupported protocol " + T + ":",h.ERR_BAD_REQUEST,t));
                    return
                }
                E.send(m)
            }
            )
        }
    },
    6328: function(t, n, r) {
        "use strict";
        var i = r(1355)
          , s = r(1982)
          , a = r(9787)
          , o = r(4006)
          , l = function t(n) {
            var r = new a(n)
              , l = s(a.prototype.request, r);
            return i.extend(l, a.prototype, r),
            i.extend(l, r),
            l.create = function(r) {
                return t(o(n, r))
            }
            ,
            l
        }(r(7945));
        l.Axios = a,
        l.CanceledError = r(2811),
        l.CancelToken = r(2516),
        l.isCancel = r(7194),
        l.VERSION = r(8060).version,
        l.toFormData = r(274),
        l.AxiosError = r(2125),
        l.Cancel = l.CanceledError,
        l.all = function(t) {
            return Promise.all(t)
        }
        ,
        l.spread = r(5082),
        l.isAxiosError = r(9777),
        t.exports = l,
        t.exports.default = l
    },
    2516: function(t, n, r) {
        "use strict";
        var i = r(2811);
        function s(t) {
            if ("function" != typeof t)
                throw TypeError("executor must be a function.");
            this.promise = new Promise(function(t) {
                n = t
            }
            );
            var n, r = this;
            this.promise.then(function(t) {
                if (r._listeners) {
                    var n, i = r._listeners.length;
                    for (n = 0; n < i; n++)
                        r._listeners[n](t);
                    r._listeners = null
                }
            }),
            this.promise.then = function(t) {
                var n, i = new Promise(function(t) {
                    r.subscribe(t),
                    n = t
                }
                ).then(t);
                return i.cancel = function() {
                    r.unsubscribe(n)
                }
                ,
                i
            }
            ,
            t(function(t) {
                r.reason || (r.reason = new i(t),
                n(r.reason))
            })
        }
        s.prototype.throwIfRequested = function() {
            if (this.reason)
                throw this.reason
        }
        ,
        s.prototype.subscribe = function(t) {
            if (this.reason) {
                t(this.reason);
                return
            }
            this._listeners ? this._listeners.push(t) : this._listeners = [t]
        }
        ,
        s.prototype.unsubscribe = function(t) {
            if (this._listeners) {
                var n = this._listeners.indexOf(t);
                -1 !== n && this._listeners.splice(n, 1)
            }
        }
        ,
        s.source = function() {
            var t;
            return {
                token: new s(function(n) {
                    t = n
                }
                ),
                cancel: t
            }
        }
        ,
        t.exports = s
    },
    2811: function(t, n, r) {
        "use strict";
        var i = r(2125);
        function s(t) {
            i.call(this, null == t ? "canceled" : t, i.ERR_CANCELED),
            this.name = "CanceledError"
        }
        r(1355).inherits(s, i, {
            __CANCEL__: !0
        }),
        t.exports = s
    },
    7194: function(t) {
        "use strict";
        t.exports = function(t) {
            return !!(t && t.__CANCEL__)
        }
    },
    9787: function(t, n, r) {
        "use strict";
        var i = r(1355)
          , s = r(5266)
          , a = r(7205)
          , o = r(2090)
          , l = r(4006)
          , u = r(5689)
          , c = r(1333)
          , d = c.validators;
        function h(t) {
            this.defaults = t,
            this.interceptors = {
                request: new a,
                response: new a
            }
        }
        h.prototype.request = function(t, n) {
            "string" == typeof t ? (n = n || {}).url = t : n = t || {},
            (n = l(this.defaults, n)).method ? n.method = n.method.toLowerCase() : this.defaults.method ? n.method = this.defaults.method.toLowerCase() : n.method = "get";
            var r, i = n.transitional;
            void 0 !== i && c.assertOptions(i, {
                silentJSONParsing: d.transitional(d.boolean),
                forcedJSONParsing: d.transitional(d.boolean),
                clarifyTimeoutError: d.transitional(d.boolean)
            }, !1);
            var s = []
              , a = !0;
            this.interceptors.request.forEach(function(t) {
                ("function" != typeof t.runWhen || !1 !== t.runWhen(n)) && (a = a && t.synchronous,
                s.unshift(t.fulfilled, t.rejected))
            });
            var u = [];
            if (this.interceptors.response.forEach(function(t) {
                u.push(t.fulfilled, t.rejected)
            }),
            !a) {
                var h = [o, void 0];
                for (Array.prototype.unshift.apply(h, s),
                h = h.concat(u),
                r = Promise.resolve(n); h.length; )
                    r = r.then(h.shift(), h.shift());
                return r
            }
            for (var f = n; s.length; ) {
                var p = s.shift()
                  , g = s.shift();
                try {
                    f = p(f)
                } catch (m) {
                    g(m);
                    break
                }
            }
            try {
                r = o(f)
            } catch (y) {
                return Promise.reject(y)
            }
            for (; u.length; )
                r = r.then(u.shift(), u.shift());
            return r
        }
        ,
        h.prototype.getUri = function(t) {
            return s(u((t = l(this.defaults, t)).baseURL, t.url), t.params, t.paramsSerializer)
        }
        ,
        i.forEach(["delete", "get", "head", "options"], function(t) {
            h.prototype[t] = function(n, r) {
                return this.request(l(r || {}, {
                    method: t,
                    url: n,
                    data: (r || {}).data
                }))
            }
        }),
        i.forEach(["post", "put", "patch"], function(t) {
            function n(n) {
                return function(r, i, s) {
                    return this.request(l(s || {}, {
                        method: t,
                        headers: n ? {
                            "Content-Type": "multipart/form-data"
                        } : {},
                        url: r,
                        data: i
                    }))
                }
            }
            h.prototype[t] = n(),
            h.prototype[t + "Form"] = n(!0)
        }),
        t.exports = h
    },
    2125: function(t, n, r) {
        "use strict";
        var i = r(1355);
        function s(t, n, r, i, s) {
            Error.call(this),
            this.message = t,
            this.name = "AxiosError",
            n && (this.code = n),
            r && (this.config = r),
            i && (this.request = i),
            s && (this.response = s)
        }
        i.inherits(s, Error, {
            toJSON: function() {
                return {
                    message: this.message,
                    name: this.name,
                    description: this.description,
                    number: this.number,
                    fileName: this.fileName,
                    lineNumber: this.lineNumber,
                    columnNumber: this.columnNumber,
                    stack: this.stack,
                    config: this.config,
                    code: this.code,
                    status: this.response && this.response.status ? this.response.status : null
                }
            }
        });
        var a = s.prototype
          , o = {};
        ["ERR_BAD_OPTION_VALUE", "ERR_BAD_OPTION", "ECONNABORTED", "ETIMEDOUT", "ERR_NETWORK", "ERR_FR_TOO_MANY_REDIRECTS", "ERR_DEPRECATED", "ERR_BAD_RESPONSE", "ERR_BAD_REQUEST", "ERR_CANCELED"].forEach(function(t) {
            o[t] = {
                value: t
            }
        }),
        Object.defineProperties(s, o),
        Object.defineProperty(a, "isAxiosError", {
            value: !0
        }),
        s.from = function(t, n, r, o, l, u) {
            var c = Object.create(a);
            return i.toFlatObject(t, c, function(t) {
                return t !== Error.prototype
            }),
            s.call(c, t.message, n, r, o, l),
            c.name = t.name,
            u && Object.assign(c, u),
            c
        }
        ,
        t.exports = s
    },
    7205: function(t, n, r) {
        "use strict";
        var i = r(1355);
        function s() {
            this.handlers = []
        }
        s.prototype.use = function(t, n, r) {
            return this.handlers.push({
                fulfilled: t,
                rejected: n,
                synchronous: !!r && r.synchronous,
                runWhen: r ? r.runWhen : null
            }),
            this.handlers.length - 1
        }
        ,
        s.prototype.eject = function(t) {
            this.handlers[t] && (this.handlers[t] = null)
        }
        ,
        s.prototype.forEach = function(t) {
            i.forEach(this.handlers, function(n) {
                null !== n && t(n)
            })
        }
        ,
        t.exports = s
    },
    5689: function(t, n, r) {
        "use strict";
        var i = r(6828)
          , s = r(8415);
        t.exports = function(t, n) {
            return t && !i(n) ? s(t, n) : n
        }
    },
    2090: function(t, n, r) {
        "use strict";
        var i = r(1355)
          , s = r(8676)
          , a = r(7194)
          , o = r(7945)
          , l = r(2811);
        function u(t) {
            if (t.cancelToken && t.cancelToken.throwIfRequested(),
            t.signal && t.signal.aborted)
                throw new l
        }
        t.exports = function(t) {
            return u(t),
            t.headers = t.headers || {},
            t.data = s.call(t, t.data, t.headers, t.transformRequest),
            t.headers = i.merge(t.headers.common || {}, t.headers[t.method] || {}, t.headers),
            i.forEach(["delete", "get", "head", "post", "put", "patch", "common"], function(n) {
                delete t.headers[n]
            }),
            (t.adapter || o.adapter)(t).then(function(n) {
                return u(t),
                n.data = s.call(t, n.data, n.headers, t.transformResponse),
                n
            }, function(n) {
                return !a(n) && (u(t),
                n && n.response && (n.response.data = s.call(t, n.response.data, n.response.headers, t.transformResponse))),
                Promise.reject(n)
            })
        }
    },
    4006: function(t, n, r) {
        "use strict";
        var i = r(1355);
        t.exports = function(t, n) {
            n = n || {};
            var r = {};
            function s(t, n) {
                return i.isPlainObject(t) && i.isPlainObject(n) ? i.merge(t, n) : i.isPlainObject(n) ? i.merge({}, n) : i.isArray(n) ? n.slice() : n
            }
            function a(r) {
                return i.isUndefined(n[r]) ? i.isUndefined(t[r]) ? void 0 : s(void 0, t[r]) : s(t[r], n[r])
            }
            function o(t) {
                if (!i.isUndefined(n[t]))
                    return s(void 0, n[t])
            }
            function l(r) {
                return i.isUndefined(n[r]) ? i.isUndefined(t[r]) ? void 0 : s(void 0, t[r]) : s(void 0, n[r])
            }
            function u(r) {
                return r in n ? s(t[r], n[r]) : r in t ? s(void 0, t[r]) : void 0
            }
            var c = {
                url: o,
                method: o,
                data: o,
                baseURL: l,
                transformRequest: l,
                transformResponse: l,
                paramsSerializer: l,
                timeout: l,
                timeoutMessage: l,
                withCredentials: l,
                adapter: l,
                responseType: l,
                xsrfCookieName: l,
                xsrfHeaderName: l,
                onUploadProgress: l,
                onDownloadProgress: l,
                decompress: l,
                maxContentLength: l,
                maxBodyLength: l,
                beforeRedirect: l,
                transport: l,
                httpAgent: l,
                httpsAgent: l,
                cancelToken: l,
                socketPath: l,
                responseEncoding: l,
                validateStatus: u
            };
            return i.forEach(Object.keys(t).concat(Object.keys(n)), function(t) {
                var n = c[t] || a
                  , s = n(t);
                i.isUndefined(s) && n !== u || (r[t] = s)
            }),
            r
        }
    },
    5412: function(t, n, r) {
        "use strict";
        var i = r(2125);
        t.exports = function(t, n, r) {
            var s = r.config.validateStatus;
            !r.status || !s || s(r.status) ? t(r) : n(new i("Request failed with status code " + r.status,[i.ERR_BAD_REQUEST, i.ERR_BAD_RESPONSE][Math.floor(r.status / 100) - 4],r.config,r.request,r))
        }
    },
    8676: function(t, n, r) {
        "use strict";
        var i = r(1355)
          , s = r(7945);
        t.exports = function(t, n, r) {
            var a = this || s;
            return i.forEach(r, function(r) {
                t = r.call(a, t, n)
            }),
            t
        }
    },
    7945: function(t, n, r) {
        "use strict";
        var i, s = r(3454), a = r(1355), o = r(7315), l = r(2125), u = r(7507), c = r(274), d = {
            "Content-Type": "application/x-www-form-urlencoded"
        };
        function h(t, n) {
            !a.isUndefined(t) && a.isUndefined(t["Content-Type"]) && (t["Content-Type"] = n)
        }
        var f = {
            transitional: u,
            adapter: ("undefined" != typeof XMLHttpRequest ? i = r(8629) : void 0 !== s && "[object process]" === Object.prototype.toString.call(s) && (i = r(8629)),
            i),
            transformRequest: [function(t, n) {
                if (o(n, "Accept"),
                o(n, "Content-Type"),
                a.isFormData(t) || a.isArrayBuffer(t) || a.isBuffer(t) || a.isStream(t) || a.isFile(t) || a.isBlob(t))
                    return t;
                if (a.isArrayBufferView(t))
                    return t.buffer;
                if (a.isURLSearchParams(t))
                    return h(n, "application/x-www-form-urlencoded;charset=utf-8"),
                    t.toString();
                var r, i = a.isObject(t), s = n && n["Content-Type"];
                if ((r = a.isFileList(t)) || i && "multipart/form-data" === s) {
                    var l = this.env && this.env.FormData;
                    return c(r ? {
                        "files[]": t
                    } : t, l && new l)
                }
                return i || "application/json" === s ? (h(n, "application/json"),
                function(t, n, r) {
                    if (a.isString(t))
                        try {
                            return (0,
                            JSON.parse)(t),
                            a.trim(t)
                        } catch (i) {
                            if ("SyntaxError" !== i.name)
                                throw i
                        }
                    return (0,
                    JSON.stringify)(t)
                }(t)) : t
            }
            ],
            transformResponse: [function(t) {
                var n = this.transitional || f.transitional
                  , r = n && n.silentJSONParsing
                  , i = n && n.forcedJSONParsing
                  , s = !r && "json" === this.responseType;
                if (s || i && a.isString(t) && t.length)
                    try {
                        return JSON.parse(t)
                    } catch (o) {
                        if (s) {
                            if ("SyntaxError" === o.name)
                                throw l.from(o, l.ERR_BAD_RESPONSE, this, null, this.response);
                            throw o
                        }
                    }
                return t
            }
            ],
            timeout: 0,
            xsrfCookieName: "XSRF-TOKEN",
            xsrfHeaderName: "X-XSRF-TOKEN",
            maxContentLength: -1,
            maxBodyLength: -1,
            env: {
                FormData: r(2548)
            },
            validateStatus: function(t) {
                return t >= 200 && t < 300
            },
            headers: {
                common: {
                    Accept: "application/json, text/plain, */*"
                }
            }
        };
        a.forEach(["delete", "get", "head"], function(t) {
            f.headers[t] = {}
        }),
        a.forEach(["post", "put", "patch"], function(t) {
            f.headers[t] = a.merge(d)
        }),
        t.exports = f
    },
    7507: function(t) {
        "use strict";
        t.exports = {
            silentJSONParsing: !0,
            forcedJSONParsing: !0,
            clarifyTimeoutError: !1
        }
    },
    8060: function(t) {
        t.exports = {
            version: "0.27.2"
        }
    },
    1982: function(t) {
        "use strict";
        t.exports = function(t, n) {
            return function() {
                for (var r = Array(arguments.length), i = 0; i < r.length; i++)
                    r[i] = arguments[i];
                return t.apply(n, r)
            }
        }
    },
    5266: function(t, n, r) {
        "use strict";
        var i = r(1355);
        function s(t) {
            return encodeURIComponent(t).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]")
        }
        t.exports = function(t, n, r) {
            if (!n)
                return t;
            if (r)
                a = r(n);
            else if (i.isURLSearchParams(n))
                a = n.toString();
            else {
                var a, o = [];
                i.forEach(n, function(t, n) {
                    null != t && (i.isArray(t) ? n += "[]" : t = [t],
                    i.forEach(t, function(t) {
                        i.isDate(t) ? t = t.toISOString() : i.isObject(t) && (t = JSON.stringify(t)),
                        o.push(s(n) + "=" + s(t))
                    }))
                }),
                a = o.join("&")
            }
            if (a) {
                var l = t.indexOf("#");
                -1 !== l && (t = t.slice(0, l)),
                t += (-1 === t.indexOf("?") ? "?" : "&") + a
            }
            return t
        }
    },
    8415: function(t) {
        "use strict";
        t.exports = function(t, n) {
            return n ? t.replace(/\/+$/, "") + "/" + n.replace(/^\/+/, "") : t
        }
    },
    7446: function(t, n, r) {
        "use strict";
        var i = r(1355);
        t.exports = i.isStandardBrowserEnv() ? {
            write: function(t, n, r, s, a, o) {
                var l = [];
                l.push(t + "=" + encodeURIComponent(n)),
                i.isNumber(r) && l.push("expires=" + new Date(r).toGMTString()),
                i.isString(s) && l.push("path=" + s),
                i.isString(a) && l.push("domain=" + a),
                !0 === o && l.push("secure"),
                document.cookie = l.join("; ")
            },
            read: function(t) {
                var n = document.cookie.match(RegExp("(^|;\\s*)(" + t + ")=([^;]*)"));
                return n ? decodeURIComponent(n[3]) : null
            },
            remove: function(t) {
                this.write(t, "", Date.now() - 864e5)
            }
        } : {
            write: function() {},
            read: function() {
                return null
            },
            remove: function() {}
        }
    },
    6828: function(t) {
        "use strict";
        t.exports = function(t) {
            return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)
        }
    },
    9777: function(t, n, r) {
        "use strict";
        var i = r(1355);
        t.exports = function(t) {
            return i.isObject(t) && !0 === t.isAxiosError
        }
    },
    6891: function(t, n, r) {
        "use strict";
        var i = r(1355);
        t.exports = i.isStandardBrowserEnv() ? function() {
            var t, n = /(msie|trident)/i.test(navigator.userAgent), r = document.createElement("a");
            function s(t) {
                var i = t;
                return n && (r.setAttribute("href", i),
                i = r.href),
                r.setAttribute("href", i),
                {
                    href: r.href,
                    protocol: r.protocol ? r.protocol.replace(/:$/, "") : "",
                    host: r.host,
                    search: r.search ? r.search.replace(/^\?/, "") : "",
                    hash: r.hash ? r.hash.replace(/^#/, "") : "",
                    hostname: r.hostname,
                    port: r.port,
                    pathname: "/" === r.pathname.charAt(0) ? r.pathname : "/" + r.pathname
                }
            }
            return t = s(window.location.href),
            function(n) {
                var r = i.isString(n) ? s(n) : n;
                return r.protocol === t.protocol && r.host === t.host
            }
        }() : function() {
            return !0
        }
    },
    7315: function(t, n, r) {
        "use strict";
        var i = r(1355);
        t.exports = function(t, n) {
            i.forEach(t, function(r, i) {
                i !== n && i.toUpperCase() === n.toUpperCase() && (t[n] = r,
                delete t[i])
            })
        }
    },
    2548: function(t) {
        t.exports = null
    },
    4452: function(t, n, r) {
        "use strict";
        var i = r(1355)
          , s = ["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"];
        t.exports = function(t) {
            var n, r, a, o = {};
            return t && i.forEach(t.split("\n"), function(t) {
                a = t.indexOf(":"),
                n = i.trim(t.substr(0, a)).toLowerCase(),
                r = i.trim(t.substr(a + 1)),
                n && !(o[n] && s.indexOf(n) >= 0) && ("set-cookie" === n ? o[n] = (o[n] ? o[n] : []).concat([r]) : o[n] = o[n] ? o[n] + ", " + r : r)
            }),
            o
        }
    },
    7430: function(t) {
        "use strict";
        t.exports = function(t) {
            var n = /^([-+\w]{1,25})(:?\/\/|:)/.exec(t);
            return n && n[1] || ""
        }
    },
    5082: function(t) {
        "use strict";
        t.exports = function(t) {
            return function(n) {
                return t.apply(null, n)
            }
        }
    },
    274: function(t, n, r) {
        "use strict";
        var i = r(1876).Buffer
          , s = r(1355);
        t.exports = function(t, n) {
            n = n || new FormData;
            var r = [];
            function a(t) {
                return null === t ? "" : s.isDate(t) ? t.toISOString() : s.isArrayBuffer(t) || s.isTypedArray(t) ? "function" == typeof Blob ? new Blob([t]) : i.from(t) : t
            }
            return !function t(i, o) {
                if (s.isPlainObject(i) || s.isArray(i)) {
                    if (-1 !== r.indexOf(i))
                        throw Error("Circular reference detected in " + o);
                    r.push(i),
                    s.forEach(i, function(r, i) {
                        if (!s.isUndefined(r)) {
                            var l, u = o ? o + "." + i : i;
                            if (r && !o && "object" == typeof r) {
                                if (s.endsWith(i, "{}"))
                                    r = JSON.stringify(r);
                                else if (s.endsWith(i, "[]") && (l = s.toArray(r))) {
                                    l.forEach(function(t) {
                                        s.isUndefined(t) || n.append(u, a(t))
                                    });
                                    return
                                }
                            }
                            t(r, u)
                        }
                    }),
                    r.pop()
                } else
                    n.append(o, a(i))
            }(t),
            n
        }
    },
    1333: function(t, n, r) {
        "use strict";
        var i = r(8060).version
          , s = r(2125)
          , a = {};
        ["object", "boolean", "number", "function", "string", "symbol"].forEach(function(t, n) {
            a[t] = function(r) {
                return typeof r === t || "a" + (n < 1 ? "n " : " ") + t
            }
        });
        var o = {};
        a.transitional = function(t, n, r) {
            function a(t, n) {
                return "[Axios v" + i + "] Transitional option '" + t + "'" + n + (r ? ". " + r : "")
            }
            return function(r, i, l) {
                if (!1 === t)
                    throw new s(a(i, " has been removed" + (n ? " in " + n : "")),s.ERR_DEPRECATED);
                return n && !o[i] && (o[i] = !0,
                console.warn(a(i, " has been deprecated since v" + n + " and will be removed in the near future"))),
                !t || t(r, i, l)
            }
        }
        ,
        t.exports = {
            assertOptions: function(t, n, r) {
                if ("object" != typeof t)
                    throw new s("options must be an object",s.ERR_BAD_OPTION_VALUE);
                for (var i = Object.keys(t), a = i.length; a-- > 0; ) {
                    var o = i[a]
                      , l = n[o];
                    if (l) {
                        var u = t[o]
                          , c = void 0 === u || l(u, o, t);
                        if (!0 !== c)
                            throw new s("option " + o + " must be " + c,s.ERR_BAD_OPTION_VALUE);
                        continue
                    }
                    if (!0 !== r)
                        throw new s("Unknown option " + o,s.ERR_BAD_OPTION)
                }
            },
            validators: a
        }
    },
    1355: function(t, n, r) {
        "use strict";
        var i, s, a = r(1982), o = Object.prototype.toString, l = (i = Object.create(null),
        function(t) {
            var n = o.call(t);
            return i[n] || (i[n] = n.slice(8, -1).toLowerCase())
        }
        );
        function u(t) {
            return t = t.toLowerCase(),
            function(n) {
                return l(n) === t
            }
        }
        function c(t) {
            return Array.isArray(t)
        }
        function d(t) {
            return void 0 === t
        }
        var h = u("ArrayBuffer");
        function f(t) {
            return null !== t && "object" == typeof t
        }
        function p(t) {
            if ("object" !== l(t))
                return !1;
            var n = Object.getPrototypeOf(t);
            return null === n || n === Object.prototype
        }
        var g = u("Date")
          , m = u("File")
          , y = u("Blob")
          , _ = u("FileList");
        function v(t) {
            return "[object Function]" === o.call(t)
        }
        var E = u("URLSearchParams");
        function b(t, n) {
            if (null != t) {
                if ("object" != typeof t && (t = [t]),
                c(t))
                    for (var r = 0, i = t.length; r < i; r++)
                        n.call(null, t[r], r, t);
                else
                    for (var s in t)
                        Object.prototype.hasOwnProperty.call(t, s) && n.call(null, t[s], s, t)
            }
        }
        var C = (s = "undefined" != typeof Uint8Array && Object.getPrototypeOf(Uint8Array),
        function(t) {
            return s && t instanceof s
        }
        );
        t.exports = {
            isArray: c,
            isArrayBuffer: h,
            isBuffer: function(t) {
                return null !== t && !d(t) && null !== t.constructor && !d(t.constructor) && "function" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t)
            },
            isFormData: function(t) {
                var n = "[object FormData]";
                return t && ("function" == typeof FormData && t instanceof FormData || o.call(t) === n || v(t.toString) && t.toString() === n)
            },
            isArrayBufferView: function(t) {
                return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(t) : t && t.buffer && h(t.buffer)
            },
            isString: function(t) {
                return "string" == typeof t
            },
            isNumber: function(t) {
                return "number" == typeof t
            },
            isObject: f,
            isPlainObject: p,
            isUndefined: d,
            isDate: g,
            isFile: m,
            isBlob: y,
            isFunction: v,
            isStream: function(t) {
                return f(t) && v(t.pipe)
            },
            isURLSearchParams: E,
            isStandardBrowserEnv: function() {
                return ("undefined" == typeof navigator || "ReactNative" !== navigator.product && "NativeScript" !== navigator.product && "NS" !== navigator.product) && "undefined" != typeof window && "undefined" != typeof document
            },
            forEach: b,
            merge: function t() {
                var n = {};
                function r(r, i) {
                    p(n[i]) && p(r) ? n[i] = t(n[i], r) : p(r) ? n[i] = t({}, r) : c(r) ? n[i] = r.slice() : n[i] = r
                }
                for (var i = 0, s = arguments.length; i < s; i++)
                    b(arguments[i], r);
                return n
            },
            extend: function(t, n, r) {
                return b(n, function(n, i) {
                    r && "function" == typeof n ? t[i] = a(n, r) : t[i] = n
                }),
                t
            },
            trim: function(t) {
                return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "")
            },
            stripBOM: function(t) {
                return 65279 === t.charCodeAt(0) && (t = t.slice(1)),
                t
            },
            inherits: function(t, n, r, i) {
                t.prototype = Object.create(n.prototype, i),
                t.prototype.constructor = t,
                r && Object.assign(t.prototype, r)
            },
            toFlatObject: function(t, n, r) {
                var i, s, a, o = {};
                n = n || {};
                do {
                    for (s = (i = Object.getOwnPropertyNames(t)).length; s-- > 0; )
                        o[a = i[s]] || (n[a] = t[a],
                        o[a] = !0);
                    t = Object.getPrototypeOf(t)
                } while (t && (!r || r(t, n)) && t !== Object.prototype);
                return n
            },
            kindOf: l,
            kindOfTest: u,
            endsWith: function(t, n, r) {
                t = String(t),
                (void 0 === r || r > t.length) && (r = t.length),
                r -= n.length;
                var i = t.indexOf(n, r);
                return -1 !== i && i === r
            },
            toArray: function(t) {
                if (!t)
                    return null;
                var n = t.length;
                if (d(n))
                    return null;
                for (var r = Array(n); n-- > 0; )
                    r[n] = t[n];
                return r
            },
            isTypedArray: C,
            isFileList: _
        }
    },
    2473: function(t) {
        "use strict";
        t.exports = function() {}
    },
    7026: function(t) {
        "use strict";
        t.exports = function() {
            throw Error("ws does not work in the browser. Browser clients must use the native WebSocket object")
        }
    },
    6154: function(t, n, r) {
        "use strict";
        let i;
        function s(t, n) {
            return function() {
                return t.apply(n, arguments)
            }
        }
        r.d(n, {
            Z: function() {
                return e7
            }
        });
        let {toString: a} = Object.prototype
          , {getPrototypeOf: o} = Object
          , l = (en = Object.create(null),
        t => {
            let n = a.call(t);
            return en[n] || (en[n] = n.slice(8, -1).toLowerCase())
        }
        )
          , u = t => (t = t.toLowerCase(),
        n => l(n) === t)
          , c = t => n => typeof n === t
          , {isArray: d} = Array
          , h = c("undefined")
          , f = u("ArrayBuffer")
          , p = c("string")
          , g = c("function")
          , m = c("number")
          , y = t => null !== t && "object" == typeof t
          , _ = t => {
            if ("object" !== l(t))
                return !1;
            let n = o(t);
            return (null === n || n === Object.prototype || null === Object.getPrototypeOf(n)) && !(Symbol.toStringTag in t) && !(Symbol.iterator in t)
        }
          , v = u("Date")
          , E = u("File")
          , b = u("Blob")
          , C = u("FileList")
          , S = t => y(t) && g(t.pipe)
          , A = t => {
            let n;
            return t && ("function" == typeof FormData && t instanceof FormData || g(t.append) && ("formdata" === (n = l(t)) || "object" === n && g(t.toString) && "[object FormData]" === t.toString()))
        }
          , N = u("URLSearchParams")
          , T = t => t.trim ? t.trim() : t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
        function I(t, n, {allOwnKeys: r=!1}={}) {
            let i, s;
            if (null != t) {
                if ("object" != typeof t && (t = [t]),
                d(t))
                    for (i = 0,
                    s = t.length; i < s; i++)
                        n.call(null, t[i], i, t);
                else {
                    let a;
                    let o = r ? Object.getOwnPropertyNames(t) : Object.keys(t)
                      , l = o.length;
                    for (i = 0; i < l; i++)
                        a = o[i],
                        n.call(null, t[a], a, t)
                }
            }
        }
        function O(t, n) {
            let r;
            n = n.toLowerCase();
            let i = Object.keys(t)
              , s = i.length;
            for (; s-- > 0; )
                if (n === (r = i[s]).toLowerCase())
                    return r;
            return null
        }
        let w = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof self ? self : "undefined" != typeof window ? window : global
          , k = t => !h(t) && t !== w
          , U = (t, n, r, {allOwnKeys: i}={}) => (I(n, (n, i) => {
            r && g(n) ? t[i] = s(n, r) : t[i] = n
        }
        , {
            allOwnKeys: i
        }),
        t)
          , R = t => (65279 === t.charCodeAt(0) && (t = t.slice(1)),
        t)
          , M = (t, n, r, i) => {
            t.prototype = Object.create(n.prototype, i),
            t.prototype.constructor = t,
            Object.defineProperty(t, "super", {
                value: n.prototype
            }),
            r && Object.assign(t.prototype, r)
        }
          , P = (t, n, r, i) => {
            let s, a, l;
            let u = {};
            if (n = n || {},
            null == t)
                return n;
            do {
                for (a = (s = Object.getOwnPropertyNames(t)).length; a-- > 0; )
                    l = s[a],
                    (!i || i(l, t, n)) && !u[l] && (n[l] = t[l],
                    u[l] = !0);
                t = !1 !== r && o(t)
            } while (t && (!r || r(t, n)) && t !== Object.prototype);
            return n
        }
          , L = (t, n, r) => {
            t = String(t),
            (void 0 === r || r > t.length) && (r = t.length),
            r -= n.length;
            let i = t.indexOf(n, r);
            return -1 !== i && i === r
        }
          , D = t => {
            if (!t)
                return null;
            if (d(t))
                return t;
            let n = t.length;
            if (!m(n))
                return null;
            let r = Array(n);
            for (; n-- > 0; )
                r[n] = t[n];
            return r
        }
          , x = (er = "undefined" != typeof Uint8Array && o(Uint8Array),
        t => er && t instanceof er)
          , F = (t, n) => {
            let r;
            let i = t && t[Symbol.iterator]
              , s = i.call(t);
            for (; (r = s.next()) && !r.done; ) {
                let a = r.value;
                n.call(t, a[0], a[1])
            }
        }
          , H = (t, n) => {
            let r;
            let i = [];
            for (; null !== (r = t.exec(n)); )
                i.push(r);
            return i
        }
          , j = u("HTMLFormElement")
          , G = t => t.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function(t, n, r) {
            return n.toUpperCase() + r
        })
          , B = ( ({hasOwnProperty: t}) => (n, r) => t.call(n, r))(Object.prototype)
          , V = u("RegExp")
          , q = (t, n) => {
            let r = Object.getOwnPropertyDescriptors(t)
              , i = {};
            I(r, (r, s) => {
                let a;
                !1 !== (a = n(r, s, t)) && (i[s] = a || r)
            }
            ),
            Object.defineProperties(t, i)
        }
          , z = t => {
            q(t, (n, r) => {
                if (g(t) && -1 !== ["arguments", "caller", "callee"].indexOf(r))
                    return !1;
                let i = t[r];
                if (g(i)) {
                    if (n.enumerable = !1,
                    "writable"in n) {
                        n.writable = !1;
                        return
                    }
                    n.set || (n.set = () => {
                        throw Error("Can not rewrite read-only method '" + r + "'")
                    }
                    )
                }
            }
            )
        }
          , K = (t, n) => {
            let r = {};
            return (t => {
                t.forEach(t => {
                    r[t] = !0
                }
                )
            }
            )(d(t) ? t : String(t).split(n)),
            r
        }
          , W = () => {}
          , Y = (t, n) => Number.isFinite(t = +t) ? t : n
          , Q = "abcdefghijklmnopqrstuvwxyz"
          , J = "0123456789"
          , Z = {
            DIGIT: J,
            ALPHA: Q,
            ALPHA_DIGIT: Q + Q.toUpperCase() + J
        }
          , $ = (t=16, n=Z.ALPHA_DIGIT) => {
            let r = ""
              , {length: i} = n;
            for (; t--; )
                r += n[Math.random() * i | 0];
            return r
        }
          , X = t => {
            let n = Array(10)
              , r = (t, i) => {
                if (y(t)) {
                    if (n.indexOf(t) >= 0)
                        return;
                    if (!("toJSON"in t)) {
                        n[i] = t;
                        let s = d(t) ? [] : {};
                        return I(t, (t, n) => {
                            let a = r(t, i + 1);
                            h(a) || (s[n] = a)
                        }
                        ),
                        n[i] = void 0,
                        s
                    }
                }
                return t
            }
            ;
            return r(t, 0)
        }
          , ee = u("AsyncFunction")
          , et = t => t && (y(t) || g(t)) && g(t.then) && g(t.catch);
        var en, er, ei = {
            isArray: d,
            isArrayBuffer: f,
            isBuffer: function(t) {
                return null !== t && !h(t) && null !== t.constructor && !h(t.constructor) && g(t.constructor.isBuffer) && t.constructor.isBuffer(t)
            },
            isFormData: A,
            isArrayBufferView: function(t) {
                return "undefined" != typeof ArrayBuffer && ArrayBuffer.isView ? ArrayBuffer.isView(t) : t && t.buffer && f(t.buffer)
            },
            isString: p,
            isNumber: m,
            isBoolean: t => !0 === t || !1 === t,
            isObject: y,
            isPlainObject: _,
            isUndefined: h,
            isDate: v,
            isFile: E,
            isBlob: b,
            isRegExp: V,
            isFunction: g,
            isStream: S,
            isURLSearchParams: N,
            isTypedArray: x,
            isFileList: C,
            forEach: I,
            merge: function t() {
                let {caseless: n} = k(this) && this || {}
                  , r = {}
                  , i = (i, s) => {
                    let a = n && O(r, s) || s;
                    _(r[a]) && _(i) ? r[a] = t(r[a], i) : _(i) ? r[a] = t({}, i) : d(i) ? r[a] = i.slice() : r[a] = i
                }
                ;
                for (let s = 0, a = arguments.length; s < a; s++)
                    arguments[s] && I(arguments[s], i);
                return r
            },
            extend: U,
            trim: T,
            stripBOM: R,
            inherits: M,
            toFlatObject: P,
            kindOf: l,
            kindOfTest: u,
            endsWith: L,
            toArray: D,
            forEachEntry: F,
            matchAll: H,
            isHTMLForm: j,
            hasOwnProperty: B,
            hasOwnProp: B,
            reduceDescriptors: q,
            freezeMethods: z,
            toObjectSet: K,
            toCamelCase: G,
            noop: W,
            toFiniteNumber: Y,
            findKey: O,
            global: w,
            isContextDefined: k,
            ALPHABET: Z,
            generateString: $,
            isSpecCompliantForm: function(t) {
                return !!(t && g(t.append) && "FormData" === t[Symbol.toStringTag] && t[Symbol.iterator])
            },
            toJSONObject: X,
            isAsyncFn: ee,
            isThenable: et
        };
        function es(t, n, r, i, s) {
            Error.call(this),
            Error.captureStackTrace ? Error.captureStackTrace(this, this.constructor) : this.stack = Error().stack,
            this.message = t,
            this.name = "AxiosError",
            n && (this.code = n),
            r && (this.config = r),
            i && (this.request = i),
            s && (this.response = s)
        }
        ei.inherits(es, Error, {
            toJSON: function() {
                return {
                    message: this.message,
                    name: this.name,
                    description: this.description,
                    number: this.number,
                    fileName: this.fileName,
                    lineNumber: this.lineNumber,
                    columnNumber: this.columnNumber,
                    stack: this.stack,
                    config: ei.toJSONObject(this.config),
                    code: this.code,
                    status: this.response && this.response.status ? this.response.status : null
                }
            }
        });
        let ea = es.prototype
          , eo = {};
        ["ERR_BAD_OPTION_VALUE", "ERR_BAD_OPTION", "ECONNABORTED", "ETIMEDOUT", "ERR_NETWORK", "ERR_FR_TOO_MANY_REDIRECTS", "ERR_DEPRECATED", "ERR_BAD_RESPONSE", "ERR_BAD_REQUEST", "ERR_CANCELED", "ERR_NOT_SUPPORT", "ERR_INVALID_URL"].forEach(t => {
            eo[t] = {
                value: t
            }
        }
        ),
        Object.defineProperties(es, eo),
        Object.defineProperty(ea, "isAxiosError", {
            value: !0
        }),
        es.from = (t, n, r, i, s, a) => {
            let o = Object.create(ea);
            return ei.toFlatObject(t, o, function(t) {
                return t !== Error.prototype
            }, t => "isAxiosError" !== t),
            es.call(o, t.message, n, r, i, s),
            o.cause = t,
            o.name = t.name,
            a && Object.assign(o, a),
            o
        }
        ;
        var el = r(1876).Buffer;
        function eu(t) {
            return ei.isPlainObject(t) || ei.isArray(t)
        }
        function ec(t) {
            return ei.endsWith(t, "[]") ? t.slice(0, -2) : t
        }
        function ed(t, n, r) {
            return t ? t.concat(n).map(function(t, n) {
                return t = ec(t),
                !r && n ? "[" + t + "]" : t
            }).join(r ? "." : "") : n
        }
        let eh = ei.toFlatObject(ei, {}, null, function(t) {
            return /^is[A-Z]/.test(t)
        });
        var ef = function(t, n, r) {
            if (!ei.isObject(t))
                throw TypeError("target must be an object");
            n = n || new FormData,
            r = ei.toFlatObject(r, {
                metaTokens: !0,
                dots: !1,
                indexes: !1
            }, !1, function(t, n) {
                return !ei.isUndefined(n[t])
            });
            let i = r.metaTokens
              , s = r.visitor || d
              , a = r.dots
              , o = r.indexes
              , l = r.Blob || "undefined" != typeof Blob && Blob
              , u = l && ei.isSpecCompliantForm(n);
            if (!ei.isFunction(s))
                throw TypeError("visitor must be a function");
            function c(t) {
                if (null === t)
                    return "";
                if (ei.isDate(t))
                    return t.toISOString();
                if (!u && ei.isBlob(t))
                    throw new es("Blob is not supported. Use a Buffer instead.");
                return ei.isArrayBuffer(t) || ei.isTypedArray(t) ? u && "function" == typeof Blob ? new Blob([t]) : el.from(t) : t
            }
            function d(t, r, s) {
                let l = t;
                if (t && !s && "object" == typeof t) {
                    if (ei.endsWith(r, "{}"))
                        r = i ? r : r.slice(0, -2),
                        t = JSON.stringify(t);
                    else {
                        var u;
                        if (ei.isArray(t) && (u = t,
                        ei.isArray(u) && !u.some(eu)) || (ei.isFileList(t) || ei.endsWith(r, "[]")) && (l = ei.toArray(t)))
                            return r = ec(r),
                            l.forEach(function(t, i) {
                                ei.isUndefined(t) || null === t || n.append(!0 === o ? ed([r], i, a) : null === o ? r : r + "[]", c(t))
                            }),
                            !1
                    }
                }
                return !!eu(t) || (n.append(ed(s, r, a), c(t)),
                !1)
            }
            let h = []
              , f = Object.assign(eh, {
                defaultVisitor: d,
                convertValue: c,
                isVisitable: eu
            });
            if (!ei.isObject(t))
                throw TypeError("data must be an object");
            return !function t(r, i) {
                if (!ei.isUndefined(r)) {
                    if (-1 !== h.indexOf(r))
                        throw Error("Circular reference detected in " + i.join("."));
                    h.push(r),
                    ei.forEach(r, function(r, a) {
                        let o = !(ei.isUndefined(r) || null === r) && s.call(n, r, ei.isString(a) ? a.trim() : a, i, f);
                        !0 === o && t(r, i ? i.concat(a) : [a])
                    }),
                    h.pop()
                }
            }(t),
            n
        };
        function ep(t) {
            let n = {
                "!": "%21",
                "'": "%27",
                "(": "%28",
                ")": "%29",
                "~": "%7E",
                "%20": "+",
                "%00": "\0"
            };
            return encodeURIComponent(t).replace(/[!'()~]|%20|%00/g, function(t) {
                return n[t]
            })
        }
        function eg(t, n) {
            this._pairs = [],
            t && ef(t, this, n)
        }
        let em = eg.prototype;
        function ey(t) {
            return encodeURIComponent(t).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]")
        }
        function e_(t, n, r) {
            let i;
            if (!n)
                return t;
            let s = r && r.encode || ey
              , a = r && r.serialize;
            if (i = a ? a(n, r) : ei.isURLSearchParams(n) ? n.toString() : new eg(n,r).toString(s)) {
                let o = t.indexOf("#");
                -1 !== o && (t = t.slice(0, o)),
                t += (-1 === t.indexOf("?") ? "?" : "&") + i
            }
            return t
        }
        em.append = function(t, n) {
            this._pairs.push([t, n])
        }
        ,
        em.toString = function(t) {
            let n = t ? function(n) {
                return t.call(this, n, ep)
            }
            : ep;
            return this._pairs.map(function(t) {
                return n(t[0]) + "=" + n(t[1])
            }, "").join("&")
        }
        ;
        var ev = class {
            constructor() {
                this.handlers = []
            }
            use(t, n, r) {
                return this.handlers.push({
                    fulfilled: t,
                    rejected: n,
                    synchronous: !!r && r.synchronous,
                    runWhen: r ? r.runWhen : null
                }),
                this.handlers.length - 1
            }
            eject(t) {
                this.handlers[t] && (this.handlers[t] = null)
            }
            clear() {
                this.handlers && (this.handlers = [])
            }
            forEach(t) {
                ei.forEach(this.handlers, function(n) {
                    null !== n && t(n)
                })
            }
        }
          , eE = {
            silentJSONParsing: !0,
            forcedJSONParsing: !0,
            clarifyTimeoutError: !1
        }
          , eb = "undefined" != typeof URLSearchParams ? URLSearchParams : eg
          , eC = "undefined" != typeof FormData ? FormData : null
          , eS = "undefined" != typeof Blob ? Blob : null;
        let eA = ("undefined" == typeof navigator || "ReactNative" !== (i = navigator.product) && "NativeScript" !== i && "NS" !== i) && "undefined" != typeof window && "undefined" != typeof document
          , eN = "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope && "function" == typeof self.importScripts;
        var eT = {
            isBrowser: !0,
            classes: {
                URLSearchParams: eb,
                FormData: eC,
                Blob: eS
            },
            isStandardBrowserEnv: eA,
            isStandardBrowserWebWorkerEnv: eN,
            protocols: ["http", "https", "file", "blob", "url", "data"]
        }
          , eI = function(t) {
            if (ei.isFormData(t) && ei.isFunction(t.entries)) {
                let n = {};
                return ei.forEachEntry(t, (t, r) => {
                    !function t(n, r, i, s) {
                        let a = n[s++]
                          , o = Number.isFinite(+a)
                          , l = s >= n.length;
                        if (a = !a && ei.isArray(i) ? i.length : a,
                        l)
                            return ei.hasOwnProp(i, a) ? i[a] = [i[a], r] : i[a] = r,
                            !o;
                        i[a] && ei.isObject(i[a]) || (i[a] = []);
                        let u = t(n, r, i[a], s);
                        return u && ei.isArray(i[a]) && (i[a] = function(t) {
                            let n, r;
                            let i = {}
                              , s = Object.keys(t)
                              , a = s.length;
                            for (n = 0; n < a; n++)
                                i[r = s[n]] = t[r];
                            return i
                        }(i[a])),
                        !o
                    }(ei.matchAll(/\w+|\[(\w*)]/g, t).map(t => "[]" === t[0] ? "" : t[1] || t[0]), r, n, 0)
                }
                ),
                n
            }
            return null
        };
        let eO = {
            transitional: eE,
            adapter: eT.isNode ? "http" : "xhr",
            transformRequest: [function(t, n) {
                let r;
                let i = n.getContentType() || ""
                  , s = i.indexOf("application/json") > -1
                  , a = ei.isObject(t);
                a && ei.isHTMLForm(t) && (t = new FormData(t));
                let o = ei.isFormData(t);
                if (o)
                    return s && s ? JSON.stringify(eI(t)) : t;
                if (ei.isArrayBuffer(t) || ei.isBuffer(t) || ei.isStream(t) || ei.isFile(t) || ei.isBlob(t))
                    return t;
                if (ei.isArrayBufferView(t))
                    return t.buffer;
                if (ei.isURLSearchParams(t))
                    return n.setContentType("application/x-www-form-urlencoded;charset=utf-8", !1),
                    t.toString();
                if (a) {
                    if (i.indexOf("application/x-www-form-urlencoded") > -1) {
                        var l, u;
                        return (l = t,
                        u = this.formSerializer,
                        ef(l, new eT.classes.URLSearchParams, Object.assign({
                            visitor: function(t, n, r, i) {
                                return eT.isNode && ei.isBuffer(t) ? (this.append(n, t.toString("base64")),
                                !1) : i.defaultVisitor.apply(this, arguments)
                            }
                        }, u))).toString()
                    }
                    if ((r = ei.isFileList(t)) || i.indexOf("multipart/form-data") > -1) {
                        let c = this.env && this.env.FormData;
                        return ef(r ? {
                            "files[]": t
                        } : t, c && new c, this.formSerializer)
                    }
                }
                return a || s ? (n.setContentType("application/json", !1),
                function(t, n, r) {
                    if (ei.isString(t))
                        try {
                            return (0,
                            JSON.parse)(t),
                            ei.trim(t)
                        } catch (i) {
                            if ("SyntaxError" !== i.name)
                                throw i
                        }
                    return (0,
                    JSON.stringify)(t)
                }(t)) : t
            }
            ],
            transformResponse: [function(t) {
                let n = this.transitional || eO.transitional
                  , r = n && n.forcedJSONParsing
                  , i = "json" === this.responseType;
                if (t && ei.isString(t) && (r && !this.responseType || i)) {
                    let s = n && n.silentJSONParsing;
                    try {
                        return JSON.parse(t)
                    } catch (a) {
                        if (!s && i) {
                            if ("SyntaxError" === a.name)
                                throw es.from(a, es.ERR_BAD_RESPONSE, this, null, this.response);
                            throw a
                        }
                    }
                }
                return t
            }
            ],
            timeout: 0,
            xsrfCookieName: "XSRF-TOKEN",
            xsrfHeaderName: "X-XSRF-TOKEN",
            maxContentLength: -1,
            maxBodyLength: -1,
            env: {
                FormData: eT.classes.FormData,
                Blob: eT.classes.Blob
            },
            validateStatus: function(t) {
                return t >= 200 && t < 300
            },
            headers: {
                common: {
                    Accept: "application/json, text/plain, */*",
                    "Content-Type": void 0
                }
            }
        };
        ei.forEach(["delete", "get", "head", "post", "put", "patch"], t => {
            eO.headers[t] = {}
        }
        );
        let ew = ei.toObjectSet(["age", "authorization", "content-length", "content-type", "etag", "expires", "from", "host", "if-modified-since", "if-unmodified-since", "last-modified", "location", "max-forwards", "proxy-authorization", "referer", "retry-after", "user-agent"]);
        var ek = t => {
            let n, r, i;
            let s = {};
            return t && t.split("\n").forEach(function(t) {
                i = t.indexOf(":"),
                n = t.substring(0, i).trim().toLowerCase(),
                r = t.substring(i + 1).trim(),
                !n || s[n] && ew[n] || ("set-cookie" === n ? s[n] ? s[n].push(r) : s[n] = [r] : s[n] = s[n] ? s[n] + ", " + r : r)
            }),
            s
        }
        ;
        let eU = Symbol("internals");
        function eR(t) {
            return t && String(t).trim().toLowerCase()
        }
        function eM(t) {
            return !1 === t || null == t ? t : ei.isArray(t) ? t.map(eM) : String(t)
        }
        let eP = t => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(t.trim());
        function eL(t, n, r, i, s) {
            if (ei.isFunction(i))
                return i.call(this, n, r);
            if (s && (n = r),
            ei.isString(n)) {
                if (ei.isString(i))
                    return -1 !== n.indexOf(i);
                if (ei.isRegExp(i))
                    return i.test(n)
            }
        }
        class eD {
            constructor(t) {
                t && this.set(t)
            }
            set(t, n, r) {
                let i = this;
                function s(t, n, r) {
                    let s = eR(n);
                    if (!s)
                        throw Error("header name must be a non-empty string");
                    let a = ei.findKey(i, s);
                    a && void 0 !== i[a] && !0 !== r && (void 0 !== r || !1 === i[a]) || (i[a || n] = eM(t))
                }
                let a = (t, n) => ei.forEach(t, (t, r) => s(t, r, n));
                return ei.isPlainObject(t) || t instanceof this.constructor ? a(t, n) : ei.isString(t) && (t = t.trim()) && !eP(t) ? a(ek(t), n) : null != t && s(n, t, r),
                this
            }
            get(t, n) {
                if (t = eR(t)) {
                    let r = ei.findKey(this, t);
                    if (r) {
                        let i = this[r];
                        if (!n)
                            return i;
                        if (!0 === n)
                            return function(t) {
                                let n;
                                let r = Object.create(null)
                                  , i = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
                                for (; n = i.exec(t); )
                                    r[n[1]] = n[2];
                                return r
                            }(i);
                        if (ei.isFunction(n))
                            return n.call(this, i, r);
                        if (ei.isRegExp(n))
                            return n.exec(i);
                        throw TypeError("parser must be boolean|regexp|function")
                    }
                }
            }
            has(t, n) {
                if (t = eR(t)) {
                    let r = ei.findKey(this, t);
                    return !!(r && void 0 !== this[r] && (!n || eL(this, this[r], r, n)))
                }
                return !1
            }
            delete(t, n) {
                let r = this
                  , i = !1;
                function s(t) {
                    if (t = eR(t)) {
                        let s = ei.findKey(r, t);
                        s && (!n || eL(r, r[s], s, n)) && (delete r[s],
                        i = !0)
                    }
                }
                return ei.isArray(t) ? t.forEach(s) : s(t),
                i
            }
            clear(t) {
                let n = Object.keys(this)
                  , r = n.length
                  , i = !1;
                for (; r--; ) {
                    let s = n[r];
                    (!t || eL(this, this[s], s, t, !0)) && (delete this[s],
                    i = !0)
                }
                return i
            }
            normalize(t) {
                let n = this
                  , r = {};
                return ei.forEach(this, (i, s) => {
                    let a = ei.findKey(r, s);
                    if (a) {
                        n[a] = eM(i),
                        delete n[s];
                        return
                    }
                    let o = t ? s.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (t, n, r) => n.toUpperCase() + r) : String(s).trim();
                    o !== s && delete n[s],
                    n[o] = eM(i),
                    r[o] = !0
                }
                ),
                this
            }
            concat(...t) {
                return this.constructor.concat(this, ...t)
            }
            toJSON(t) {
                let n = Object.create(null);
                return ei.forEach(this, (r, i) => {
                    null != r && !1 !== r && (n[i] = t && ei.isArray(r) ? r.join(", ") : r)
                }
                ),
                n
            }
            [Symbol.iterator]() {
                return Object.entries(this.toJSON())[Symbol.iterator]()
            }
            toString() {
                return Object.entries(this.toJSON()).map( ([t,n]) => t + ": " + n).join("\n")
            }
            get[Symbol.toStringTag]() {
                return "AxiosHeaders"
            }
            static from(t) {
                return t instanceof this ? t : new this(t)
            }
            static concat(t, ...n) {
                let r = new this(t);
                return n.forEach(t => r.set(t)),
                r
            }
            static accessor(t) {
                let n = this[eU] = this[eU] = {
                    accessors: {}
                }
                  , r = n.accessors
                  , i = this.prototype;
                function s(t) {
                    let n = eR(t);
                    r[n] || (!function(t, n) {
                        let r = ei.toCamelCase(" " + n);
                        ["get", "set", "has"].forEach(i => {
                            Object.defineProperty(t, i + r, {
                                value: function(t, r, s) {
                                    return this[i].call(this, n, t, r, s)
                                },
                                configurable: !0
                            })
                        }
                        )
                    }(i, t),
                    r[n] = !0)
                }
                return ei.isArray(t) ? t.forEach(s) : s(t),
                this
            }
        }
        function ex(t, n) {
            let r = this || eO
              , i = n || r
              , s = eD.from(i.headers)
              , a = i.data;
            return ei.forEach(t, function(t) {
                a = t.call(r, a, s.normalize(), n ? n.status : void 0)
            }),
            s.normalize(),
            a
        }
        function eF(t) {
            return !!(t && t.__CANCEL__)
        }
        function eH(t, n, r) {
            es.call(this, null == t ? "canceled" : t, es.ERR_CANCELED, n, r),
            this.name = "CanceledError"
        }
        eD.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]),
        ei.reduceDescriptors(eD.prototype, ({value: t}, n) => {
            let r = n[0].toUpperCase() + n.slice(1);
            return {
                get: () => t,
                set(t) {
                    this[r] = t
                }
            }
        }
        ),
        ei.freezeMethods(eD),
        ei.inherits(eH, es, {
            __CANCEL__: !0
        });
        var ej = eT.isStandardBrowserEnv ? {
            write: function(t, n, r, i, s, a) {
                let o = [];
                o.push(t + "=" + encodeURIComponent(n)),
                ei.isNumber(r) && o.push("expires=" + new Date(r).toGMTString()),
                ei.isString(i) && o.push("path=" + i),
                ei.isString(s) && o.push("domain=" + s),
                !0 === a && o.push("secure"),
                document.cookie = o.join("; ")
            },
            read: function(t) {
                let n = document.cookie.match(RegExp("(^|;\\s*)(" + t + ")=([^;]*)"));
                return n ? decodeURIComponent(n[3]) : null
            },
            remove: function(t) {
                this.write(t, "", Date.now() - 864e5)
            }
        } : {
            write: function() {},
            read: function() {
                return null
            },
            remove: function() {}
        };
        function eG(t, n) {
            return t && !/^([a-z][a-z\d+\-.]*:)?\/\//i.test(n) ? n ? t.replace(/\/+$/, "") + "/" + n.replace(/^\/+/, "") : t : n
        }
        var eB = eT.isStandardBrowserEnv ? function() {
            let t;
            let n = /(msie|trident)/i.test(navigator.userAgent)
              , r = document.createElement("a");
            function i(t) {
                let i = t;
                return n && (r.setAttribute("href", i),
                i = r.href),
                r.setAttribute("href", i),
                {
                    href: r.href,
                    protocol: r.protocol ? r.protocol.replace(/:$/, "") : "",
                    host: r.host,
                    search: r.search ? r.search.replace(/^\?/, "") : "",
                    hash: r.hash ? r.hash.replace(/^#/, "") : "",
                    hostname: r.hostname,
                    port: r.port,
                    pathname: "/" === r.pathname.charAt(0) ? r.pathname : "/" + r.pathname
                }
            }
            return t = i(window.location.href),
            function(n) {
                let r = ei.isString(n) ? i(n) : n;
                return r.protocol === t.protocol && r.host === t.host
            }
        }() : function() {
            return !0
        }
          , eV = function(t, n) {
            let r;
            t = t || 10;
            let i = Array(t)
              , s = Array(t)
              , a = 0
              , o = 0;
            return n = void 0 !== n ? n : 1e3,
            function(l) {
                let u = Date.now()
                  , c = s[o];
                r || (r = u),
                i[a] = l,
                s[a] = u;
                let d = o
                  , h = 0;
                for (; d !== a; )
                    h += i[d++],
                    d %= t;
                if ((a = (a + 1) % t) === o && (o = (o + 1) % t),
                u - r < n)
                    return;
                let f = c && u - c;
                return f ? Math.round(1e3 * h / f) : void 0
            }
        };
        function eq(t, n) {
            let r = 0
              , i = eV(50, 250);
            return s => {
                let a = s.loaded
                  , o = s.lengthComputable ? s.total : void 0
                  , l = a - r
                  , u = i(l);
                r = a;
                let c = {
                    loaded: a,
                    total: o,
                    progress: o ? a / o : void 0,
                    bytes: l,
                    rate: u || void 0,
                    estimated: u && o && a <= o ? (o - a) / u : void 0,
                    event: s
                };
                c[n ? "download" : "upload"] = !0,
                t(c)
            }
        }
        let ez = "undefined" != typeof XMLHttpRequest;
        var eK = ez && function(t) {
            return new Promise(function(n, r) {
                let i, s = t.data, a = eD.from(t.headers).normalize(), o = t.responseType;
                function l() {
                    t.cancelToken && t.cancelToken.unsubscribe(i),
                    t.signal && t.signal.removeEventListener("abort", i)
                }
                ei.isFormData(s) && (eT.isStandardBrowserEnv || eT.isStandardBrowserWebWorkerEnv ? a.setContentType(!1) : a.setContentType("multipart/form-data;", !1));
                let u = new XMLHttpRequest;
                if (t.auth) {
                    let c = t.auth.username || ""
                      , d = t.auth.password ? unescape(encodeURIComponent(t.auth.password)) : "";
                    a.set("Authorization", "Basic " + btoa(c + ":" + d))
                }
                let h = eG(t.baseURL, t.url);
                function f() {
                    if (!u)
                        return;
                    let i = eD.from("getAllResponseHeaders"in u && u.getAllResponseHeaders())
                      , s = o && "text" !== o && "json" !== o ? u.response : u.responseText
                      , a = {
                        data: s,
                        status: u.status,
                        statusText: u.statusText,
                        headers: i,
                        config: t,
                        request: u
                    };
                    !function(t, n, r) {
                        let i = r.config.validateStatus;
                        !r.status || !i || i(r.status) ? t(r) : n(new es("Request failed with status code " + r.status,[es.ERR_BAD_REQUEST, es.ERR_BAD_RESPONSE][Math.floor(r.status / 100) - 4],r.config,r.request,r))
                    }(function(t) {
                        n(t),
                        l()
                    }, function(t) {
                        r(t),
                        l()
                    }, a),
                    u = null
                }
                if (u.open(t.method.toUpperCase(), e_(h, t.params, t.paramsSerializer), !0),
                u.timeout = t.timeout,
                "onloadend"in u ? u.onloadend = f : u.onreadystatechange = function() {
                    u && 4 === u.readyState && (0 !== u.status || u.responseURL && 0 === u.responseURL.indexOf("file:")) && setTimeout(f)
                }
                ,
                u.onabort = function() {
                    u && (r(new es("Request aborted",es.ECONNABORTED,t,u)),
                    u = null)
                }
                ,
                u.onerror = function() {
                    r(new es("Network Error",es.ERR_NETWORK,t,u)),
                    u = null
                }
                ,
                u.ontimeout = function() {
                    let n = t.timeout ? "timeout of " + t.timeout + "ms exceeded" : "timeout exceeded"
                      , i = t.transitional || eE;
                    t.timeoutErrorMessage && (n = t.timeoutErrorMessage),
                    r(new es(n,i.clarifyTimeoutError ? es.ETIMEDOUT : es.ECONNABORTED,t,u)),
                    u = null
                }
                ,
                eT.isStandardBrowserEnv) {
                    let p = (t.withCredentials || eB(h)) && t.xsrfCookieName && ej.read(t.xsrfCookieName);
                    p && a.set(t.xsrfHeaderName, p)
                }
                void 0 === s && a.setContentType(null),
                "setRequestHeader"in u && ei.forEach(a.toJSON(), function(t, n) {
                    u.setRequestHeader(n, t)
                }),
                ei.isUndefined(t.withCredentials) || (u.withCredentials = !!t.withCredentials),
                o && "json" !== o && (u.responseType = t.responseType),
                "function" == typeof t.onDownloadProgress && u.addEventListener("progress", eq(t.onDownloadProgress, !0)),
                "function" == typeof t.onUploadProgress && u.upload && u.upload.addEventListener("progress", eq(t.onUploadProgress)),
                (t.cancelToken || t.signal) && (i = n => {
                    u && (r(!n || n.type ? new eH(null,t,u) : n),
                    u.abort(),
                    u = null)
                }
                ,
                t.cancelToken && t.cancelToken.subscribe(i),
                t.signal && (t.signal.aborted ? i() : t.signal.addEventListener("abort", i)));
                let g = function(t) {
                    let n = /^([-+\w]{1,25})(:?\/\/|:)/.exec(t);
                    return n && n[1] || ""
                }(h);
                if (g && -1 === eT.protocols.indexOf(g)) {
                    r(new es("Unsupported protocol " + g + ":",es.ERR_BAD_REQUEST,t));
                    return
                }
                u.send(s || null)
            }
            )
        }
        ;
        let eW = {
            http: null,
            xhr: eK
        };
        ei.forEach(eW, (t, n) => {
            if (t) {
                try {
                    Object.defineProperty(t, "name", {
                        value: n
                    })
                } catch (r) {}
                Object.defineProperty(t, "adapterName", {
                    value: n
                })
            }
        }
        );
        var eY = {
            getAdapter(t) {
                let n, r;
                t = ei.isArray(t) ? t : [t];
                let {length: i} = t;
                for (let s = 0; s < i && (n = t[s],
                !(r = ei.isString(n) ? eW[n.toLowerCase()] : n)); s++)
                    ;
                if (!r) {
                    if (!1 === r)
                        throw new es(`Adapter ${n} is not supported by the environment`,"ERR_NOT_SUPPORT");
                    throw Error(ei.hasOwnProp(eW, n) ? `Adapter '${n}' is not available in the build` : `Unknown adapter '${n}'`)
                }
                if (!ei.isFunction(r))
                    throw TypeError("adapter is not a function");
                return r
            },
            adapters: eW
        };
        function eQ(t) {
            if (t.cancelToken && t.cancelToken.throwIfRequested(),
            t.signal && t.signal.aborted)
                throw new eH(null,t)
        }
        function eJ(t) {
            eQ(t),
            t.headers = eD.from(t.headers),
            t.data = ex.call(t, t.transformRequest),
            -1 !== ["post", "put", "patch"].indexOf(t.method) && t.headers.setContentType("application/x-www-form-urlencoded", !1);
            let n = eY.getAdapter(t.adapter || eO.adapter);
            return n(t).then(function(n) {
                return eQ(t),
                n.data = ex.call(t, t.transformResponse, n),
                n.headers = eD.from(n.headers),
                n
            }, function(n) {
                return !eF(n) && (eQ(t),
                n && n.response && (n.response.data = ex.call(t, t.transformResponse, n.response),
                n.response.headers = eD.from(n.response.headers))),
                Promise.reject(n)
            })
        }
        let eZ = t => t instanceof eD ? t.toJSON() : t;
        function e$(t, n) {
            n = n || {};
            let r = {};
            function i(t, n, r) {
                return ei.isPlainObject(t) && ei.isPlainObject(n) ? ei.merge.call({
                    caseless: r
                }, t, n) : ei.isPlainObject(n) ? ei.merge({}, n) : ei.isArray(n) ? n.slice() : n
            }
            function s(t, n, r) {
                return ei.isUndefined(n) ? ei.isUndefined(t) ? void 0 : i(void 0, t, r) : i(t, n, r)
            }
            function a(t, n) {
                if (!ei.isUndefined(n))
                    return i(void 0, n)
            }
            function o(t, n) {
                return ei.isUndefined(n) ? ei.isUndefined(t) ? void 0 : i(void 0, t) : i(void 0, n)
            }
            function l(r, s, a) {
                return a in n ? i(r, s) : a in t ? i(void 0, r) : void 0
            }
            let u = {
                url: a,
                method: a,
                data: a,
                baseURL: o,
                transformRequest: o,
                transformResponse: o,
                paramsSerializer: o,
                timeout: o,
                timeoutMessage: o,
                withCredentials: o,
                adapter: o,
                responseType: o,
                xsrfCookieName: o,
                xsrfHeaderName: o,
                onUploadProgress: o,
                onDownloadProgress: o,
                decompress: o,
                maxContentLength: o,
                maxBodyLength: o,
                beforeRedirect: o,
                transport: o,
                httpAgent: o,
                httpsAgent: o,
                cancelToken: o,
                socketPath: o,
                responseEncoding: o,
                validateStatus: l,
                headers: (t, n) => s(eZ(t), eZ(n), !0)
            };
            return ei.forEach(Object.keys(Object.assign({}, t, n)), function(i) {
                let a = u[i] || s
                  , o = a(t[i], n[i], i);
                ei.isUndefined(o) && a !== l || (r[i] = o)
            }),
            r
        }
        let eX = "1.5.0"
          , e0 = {};
        ["object", "boolean", "number", "function", "string", "symbol"].forEach( (t, n) => {
            e0[t] = function(r) {
                return typeof r === t || "a" + (n < 1 ? "n " : " ") + t
            }
        }
        );
        let e1 = {};
        e0.transitional = function(t, n, r) {
            function i(t, n) {
                return "[Axios v" + eX + "] Transitional option '" + t + "'" + n + (r ? ". " + r : "")
            }
            return (r, s, a) => {
                if (!1 === t)
                    throw new es(i(s, " has been removed" + (n ? " in " + n : "")),es.ERR_DEPRECATED);
                return n && !e1[s] && (e1[s] = !0,
                console.warn(i(s, " has been deprecated since v" + n + " and will be removed in the near future"))),
                !t || t(r, s, a)
            }
        }
        ;
        var e2 = {
            assertOptions: function(t, n, r) {
                if ("object" != typeof t)
                    throw new es("options must be an object",es.ERR_BAD_OPTION_VALUE);
                let i = Object.keys(t)
                  , s = i.length;
                for (; s-- > 0; ) {
                    let a = i[s]
                      , o = n[a];
                    if (o) {
                        let l = t[a]
                          , u = void 0 === l || o(l, a, t);
                        if (!0 !== u)
                            throw new es("option " + a + " must be " + u,es.ERR_BAD_OPTION_VALUE);
                        continue
                    }
                    if (!0 !== r)
                        throw new es("Unknown option " + a,es.ERR_BAD_OPTION)
                }
            },
            validators: e0
        };
        let e3 = e2.validators;
        class e4 {
            constructor(t) {
                this.defaults = t,
                this.interceptors = {
                    request: new ev,
                    response: new ev
                }
            }
            request(t, n) {
                let r, i;
                "string" == typeof t ? (n = n || {}).url = t : n = t || {},
                n = e$(this.defaults, n);
                let {transitional: s, paramsSerializer: a, headers: o} = n;
                void 0 !== s && e2.assertOptions(s, {
                    silentJSONParsing: e3.transitional(e3.boolean),
                    forcedJSONParsing: e3.transitional(e3.boolean),
                    clarifyTimeoutError: e3.transitional(e3.boolean)
                }, !1),
                null != a && (ei.isFunction(a) ? n.paramsSerializer = {
                    serialize: a
                } : e2.assertOptions(a, {
                    encode: e3.function,
                    serialize: e3.function
                }, !0)),
                n.method = (n.method || this.defaults.method || "get").toLowerCase();
                let l = o && ei.merge(o.common, o[n.method]);
                o && ei.forEach(["delete", "get", "head", "post", "put", "patch", "common"], t => {
                    delete o[t]
                }
                ),
                n.headers = eD.concat(l, o);
                let u = []
                  , c = !0;
                this.interceptors.request.forEach(function(t) {
                    ("function" != typeof t.runWhen || !1 !== t.runWhen(n)) && (c = c && t.synchronous,
                    u.unshift(t.fulfilled, t.rejected))
                });
                let d = [];
                this.interceptors.response.forEach(function(t) {
                    d.push(t.fulfilled, t.rejected)
                });
                let h = 0;
                if (!c) {
                    let f = [eJ.bind(this), void 0];
                    for (f.unshift.apply(f, u),
                    f.push.apply(f, d),
                    i = f.length,
                    r = Promise.resolve(n); h < i; )
                        r = r.then(f[h++], f[h++]);
                    return r
                }
                i = u.length;
                let p = n;
                for (h = 0; h < i; ) {
                    let g = u[h++]
                      , m = u[h++];
                    try {
                        p = g(p)
                    } catch (y) {
                        m.call(this, y);
                        break
                    }
                }
                try {
                    r = eJ.call(this, p)
                } catch (_) {
                    return Promise.reject(_)
                }
                for (h = 0,
                i = d.length; h < i; )
                    r = r.then(d[h++], d[h++]);
                return r
            }
            getUri(t) {
                t = e$(this.defaults, t);
                let n = eG(t.baseURL, t.url);
                return e_(n, t.params, t.paramsSerializer)
            }
        }
        ei.forEach(["delete", "get", "head", "options"], function(t) {
            e4.prototype[t] = function(n, r) {
                return this.request(e$(r || {}, {
                    method: t,
                    url: n,
                    data: (r || {}).data
                }))
            }
        }),
        ei.forEach(["post", "put", "patch"], function(t) {
            function n(n) {
                return function(r, i, s) {
                    return this.request(e$(s || {}, {
                        method: t,
                        headers: n ? {
                            "Content-Type": "multipart/form-data"
                        } : {},
                        url: r,
                        data: i
                    }))
                }
            }
            e4.prototype[t] = n(),
            e4.prototype[t + "Form"] = n(!0)
        });
        class e5 {
            constructor(t) {
                let n;
                if ("function" != typeof t)
                    throw TypeError("executor must be a function.");
                this.promise = new Promise(function(t) {
                    n = t
                }
                );
                let r = this;
                this.promise.then(t => {
                    if (!r._listeners)
                        return;
                    let n = r._listeners.length;
                    for (; n-- > 0; )
                        r._listeners[n](t);
                    r._listeners = null
                }
                ),
                this.promise.then = t => {
                    let n;
                    let i = new Promise(t => {
                        r.subscribe(t),
                        n = t
                    }
                    ).then(t);
                    return i.cancel = function() {
                        r.unsubscribe(n)
                    }
                    ,
                    i
                }
                ,
                t(function(t, i, s) {
                    r.reason || (r.reason = new eH(t,i,s),
                    n(r.reason))
                })
            }
            throwIfRequested() {
                if (this.reason)
                    throw this.reason
            }
            subscribe(t) {
                if (this.reason) {
                    t(this.reason);
                    return
                }
                this._listeners ? this._listeners.push(t) : this._listeners = [t]
            }
            unsubscribe(t) {
                if (!this._listeners)
                    return;
                let n = this._listeners.indexOf(t);
                -1 !== n && this._listeners.splice(n, 1)
            }
            static source() {
                let t;
                let n = new e5(function(n) {
                    t = n
                }
                );
                return {
                    token: n,
                    cancel: t
                }
            }
        }
        let e6 = {
            Continue: 100,
            SwitchingProtocols: 101,
            Processing: 102,
            EarlyHints: 103,
            Ok: 200,
            Created: 201,
            Accepted: 202,
            NonAuthoritativeInformation: 203,
            NoContent: 204,
            ResetContent: 205,
            PartialContent: 206,
            MultiStatus: 207,
            AlreadyReported: 208,
            ImUsed: 226,
            MultipleChoices: 300,
            MovedPermanently: 301,
            Found: 302,
            SeeOther: 303,
            NotModified: 304,
            UseProxy: 305,
            Unused: 306,
            TemporaryRedirect: 307,
            PermanentRedirect: 308,
            BadRequest: 400,
            Unauthorized: 401,
            PaymentRequired: 402,
            Forbidden: 403,
            NotFound: 404,
            MethodNotAllowed: 405,
            NotAcceptable: 406,
            ProxyAuthenticationRequired: 407,
            RequestTimeout: 408,
            Conflict: 409,
            Gone: 410,
            LengthRequired: 411,
            PreconditionFailed: 412,
            PayloadTooLarge: 413,
            UriTooLong: 414,
            UnsupportedMediaType: 415,
            RangeNotSatisfiable: 416,
            ExpectationFailed: 417,
            ImATeapot: 418,
            MisdirectedRequest: 421,
            UnprocessableEntity: 422,
            Locked: 423,
            FailedDependency: 424,
            TooEarly: 425,
            UpgradeRequired: 426,
            PreconditionRequired: 428,
            TooManyRequests: 429,
            RequestHeaderFieldsTooLarge: 431,
            UnavailableForLegalReasons: 451,
            InternalServerError: 500,
            NotImplemented: 501,
            BadGateway: 502,
            ServiceUnavailable: 503,
            GatewayTimeout: 504,
            HttpVersionNotSupported: 505,
            VariantAlsoNegotiates: 506,
            InsufficientStorage: 507,
            LoopDetected: 508,
            NotExtended: 510,
            NetworkAuthenticationRequired: 511
        };
        Object.entries(e6).forEach( ([t,n]) => {
            e6[n] = t
        }
        );
        let e8 = function t(n) {
            let r = new e4(n)
              , i = s(e4.prototype.request, r);
            return ei.extend(i, e4.prototype, r, {
                allOwnKeys: !0
            }),
            ei.extend(i, r, null, {
                allOwnKeys: !0
            }),
            i.create = function(r) {
                return t(e$(n, r))
            }
            ,
            i
        }(eO);
        e8.Axios = e4,
        e8.CanceledError = eH,
        e8.CancelToken = e5,
        e8.isCancel = eF,
        e8.VERSION = eX,
        e8.toFormData = ef,
        e8.AxiosError = es,
        e8.Cancel = e8.CanceledError,
        e8.all = function(t) {
            return Promise.all(t)
        }
        ,
        e8.spread = function(t) {
            return function(n) {
                return t.apply(null, n)
            }
        }
        ,
        e8.isAxiosError = function(t) {
            return ei.isObject(t) && !0 === t.isAxiosError
        }
        ,
        e8.mergeConfig = e$,
        e8.AxiosHeaders = eD,
        e8.formToJSON = t => eI(ei.isHTMLForm(t) ? new FormData(t) : t),
        e8.getAdapter = eY.getAdapter,
        e8.HttpStatusCode = e6,
        e8.default = e8;
        var e7 = e8
    },
    2920: function(t, n, r) {
        "use strict";
        r.d(n, {
            Ix: function() {
                return S
            },
            Am: function() {
                return U
            }
        });
        var i = r(7294)
          , s = function() {
            for (var t, n, r = 0, i = ""; r < arguments.length; )
                (t = arguments[r++]) && (n = function t(n) {
                    var r, i, s = "";
                    if ("string" == typeof n || "number" == typeof n)
                        s += n;
                    else if ("object" == typeof n) {
                        if (Array.isArray(n))
                            for (r = 0; r < n.length; r++)
                                n[r] && (i = t(n[r])) && (s && (s += " "),
                                s += i);
                        else
                            for (r in n)
                                n[r] && (s && (s += " "),
                                s += r)
                    }
                    return s
                }(t)) && (i && (i += " "),
                i += n);
            return i
        };
        let a = t => "number" == typeof t && !isNaN(t)
          , o = t => "string" == typeof t
          , l = t => "function" == typeof t
          , u = t => o(t) || l(t) ? t : null
          , c = t => (0,
        i.isValidElement)(t) || o(t) || l(t) || a(t);
        function d(t) {
            let {enter: n, exit: r, appendPosition: s=!1, collapse: a=!0, collapseDuration: o=300} = t;
            return function(t) {
                let {children: l, position: u, preventExitTransition: c, done: d, nodeRef: h, isIn: f} = t
                  , p = s ? `${n}--${u}` : n
                  , g = s ? `${r}--${u}` : r
                  , m = (0,
                i.useRef)(0);
                return (0,
                i.useLayoutEffect)( () => {
                    let t = h.current
                      , n = p.split(" ")
                      , r = i => {
                        i.target === h.current && (t.dispatchEvent(new Event("d")),
                        t.removeEventListener("animationend", r),
                        t.removeEventListener("animationcancel", r),
                        0 === m.current && "animationcancel" !== i.type && t.classList.remove(...n))
                    }
                    ;
                    t.classList.add(...n),
                    t.addEventListener("animationend", r),
                    t.addEventListener("animationcancel", r)
                }
                , []),
                (0,
                i.useEffect)( () => {
                    let t = h.current
                      , n = () => {
                        t.removeEventListener("animationend", n),
                        a ? function(t, n, r) {
                            void 0 === r && (r = 300);
                            let {scrollHeight: i, style: s} = t;
                            requestAnimationFrame( () => {
                                s.minHeight = "initial",
                                s.height = i + "px",
                                s.transition = `all ${r}ms`,
                                requestAnimationFrame( () => {
                                    s.height = "0",
                                    s.padding = "0",
                                    s.margin = "0",
                                    setTimeout(n, r)
                                }
                                )
                            }
                            )
                        }(t, d, o) : d()
                    }
                    ;
                    f || (c ? n() : (m.current = 1,
                    t.className += ` ${g}`,
                    t.addEventListener("animationend", n)))
                }
                , [f]),
                i.createElement(i.Fragment, null, l)
            }
        }
        function h(t, n) {
            return null != t ? {
                content: t.content,
                containerId: t.props.containerId,
                id: t.props.toastId,
                theme: t.props.theme,
                type: t.props.type,
                data: t.props.data || {},
                isLoading: t.props.isLoading,
                icon: t.props.icon,
                status: n
            } : {}
        }
        let f = {
            list: new Map,
            emitQueue: new Map,
            on(t, n) {
                return this.list.has(t) || this.list.set(t, []),
                this.list.get(t).push(n),
                this
            },
            off(t, n) {
                if (n) {
                    let r = this.list.get(t).filter(t => t !== n);
                    return this.list.set(t, r),
                    this
                }
                return this.list.delete(t),
                this
            },
            cancelEmit(t) {
                let n = this.emitQueue.get(t);
                return n && (n.forEach(clearTimeout),
                this.emitQueue.delete(t)),
                this
            },
            emit(t) {
                this.list.has(t) && this.list.get(t).forEach(n => {
                    let r = setTimeout( () => {
                        n(...[].slice.call(arguments, 1))
                    }
                    , 0);
                    this.emitQueue.has(t) || this.emitQueue.set(t, []),
                    this.emitQueue.get(t).push(r)
                }
                )
            }
        }
          , p = t => {
            let {theme: n, type: r, ...s} = t;
            return i.createElement("svg", {
                viewBox: "0 0 24 24",
                width: "100%",
                height: "100%",
                fill: "colored" === n ? "currentColor" : `var(--toastify-icon-color-${r})`,
                ...s
            })
        }
          , g = {
            info: function(t) {
                return i.createElement(p, {
                    ...t
                }, i.createElement("path", {
                    d: "M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z"
                }))
            },
            warning: function(t) {
                return i.createElement(p, {
                    ...t
                }, i.createElement("path", {
                    d: "M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z"
                }))
            },
            success: function(t) {
                return i.createElement(p, {
                    ...t
                }, i.createElement("path", {
                    d: "M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z"
                }))
            },
            error: function(t) {
                return i.createElement(p, {
                    ...t
                }, i.createElement("path", {
                    d: "M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z"
                }))
            },
            spinner: function() {
                return i.createElement("div", {
                    className: "Toastify__spinner"
                })
            }
        };
        function m(t) {
            return t.targetTouches && t.targetTouches.length >= 1 ? t.targetTouches[0].clientX : t.clientX
        }
        function y(t) {
            return t.targetTouches && t.targetTouches.length >= 1 ? t.targetTouches[0].clientY : t.clientY
        }
        function _(t) {
            let {closeToast: n, theme: r, ariaLabel: s="close"} = t;
            return i.createElement("button", {
                className: `Toastify__close-button Toastify__close-button--${r}`,
                type: "button",
                onClick(t) {
                    t.stopPropagation(),
                    n(t)
                },
                "aria-label": s
            }, i.createElement("svg", {
                "aria-hidden": "true",
                viewBox: "0 0 14 16"
            }, i.createElement("path", {
                fillRule: "evenodd",
                d: "M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z"
            })))
        }
        function v(t) {
            let {delay: n, isRunning: r, closeToast: a, type: o="default", hide: u, className: c, style: d, controlledProgress: h, progress: f, rtl: p, isIn: g, theme: m} = t
              , y = u || h && 0 === f
              , _ = {
                ...d,
                animationDuration: `${n}ms`,
                animationPlayState: r ? "running" : "paused",
                opacity: y ? 0 : 1
            };
            h && (_.transform = `scaleX(${f})`);
            let v = s("Toastify__progress-bar", h ? "Toastify__progress-bar--controlled" : "Toastify__progress-bar--animated", `Toastify__progress-bar-theme--${m}`, `Toastify__progress-bar--${o}`, {
                "Toastify__progress-bar--rtl": p
            })
              , E = l(c) ? c({
                rtl: p,
                type: o,
                defaultClassName: v
            }) : s(v, c);
            return i.createElement("div", {
                role: "progressbar",
                "aria-hidden": y ? "true" : "false",
                "aria-label": "notification timer",
                className: E,
                style: _,
                [h && f >= 1 ? "onTransitionEnd" : "onAnimationEnd"]: h && f < 1 ? null : () => {
                    g && a()
                }
            })
        }
        let E = t => {
            let {isRunning: n, preventExitTransition: r, toastRef: a, eventHandlers: o} = function(t) {
                let[n,r] = (0,
                i.useState)(!1)
                  , [s,a] = (0,
                i.useState)(!1)
                  , o = (0,
                i.useRef)(null)
                  , u = (0,
                i.useRef)({
                    start: 0,
                    x: 0,
                    y: 0,
                    delta: 0,
                    removalDistance: 0,
                    canCloseOnClick: !0,
                    canDrag: !1,
                    boundingRect: null,
                    didMove: !1
                }).current
                  , c = (0,
                i.useRef)(t)
                  , {autoClose: d, pauseOnHover: h, closeToast: f, onClick: p, closeOnClick: g} = t;
                function _(n) {
                    if (t.draggable) {
                        "touchstart" === n.nativeEvent.type && n.nativeEvent.preventDefault(),
                        u.didMove = !1,
                        document.addEventListener("mousemove", C),
                        document.addEventListener("mouseup", S),
                        document.addEventListener("touchmove", C),
                        document.addEventListener("touchend", S);
                        let r = o.current;
                        u.canCloseOnClick = !0,
                        u.canDrag = !0,
                        u.boundingRect = r.getBoundingClientRect(),
                        r.style.transition = "",
                        u.x = m(n.nativeEvent),
                        u.y = y(n.nativeEvent),
                        "x" === t.draggableDirection ? (u.start = u.x,
                        u.removalDistance = r.offsetWidth * (t.draggablePercent / 100)) : (u.start = u.y,
                        u.removalDistance = r.offsetHeight * (80 === t.draggablePercent ? 1.5 * t.draggablePercent : t.draggablePercent / 100))
                    }
                }
                function v(n) {
                    if (u.boundingRect) {
                        let {top: r, bottom: i, left: s, right: a} = u.boundingRect;
                        "touchend" !== n.nativeEvent.type && t.pauseOnHover && u.x >= s && u.x <= a && u.y >= r && u.y <= i ? b() : E()
                    }
                }
                function E() {
                    r(!0)
                }
                function b() {
                    r(!1)
                }
                function C(r) {
                    let i = o.current;
                    u.canDrag && i && (u.didMove = !0,
                    n && b(),
                    u.x = m(r),
                    u.y = y(r),
                    u.delta = "x" === t.draggableDirection ? u.x - u.start : u.y - u.start,
                    u.start !== u.x && (u.canCloseOnClick = !1),
                    i.style.transform = `translate${t.draggableDirection}(${u.delta}px)`,
                    i.style.opacity = "" + (1 - Math.abs(u.delta / u.removalDistance)))
                }
                function S() {
                    document.removeEventListener("mousemove", C),
                    document.removeEventListener("mouseup", S),
                    document.removeEventListener("touchmove", C),
                    document.removeEventListener("touchend", S);
                    let n = o.current;
                    if (u.canDrag && u.didMove && n) {
                        if (u.canDrag = !1,
                        Math.abs(u.delta) > u.removalDistance)
                            return a(!0),
                            void t.closeToast();
                        n.style.transition = "transform 0.2s, opacity 0.2s",
                        n.style.transform = `translate${t.draggableDirection}(0)`,
                        n.style.opacity = "1"
                    }
                }
                (0,
                i.useEffect)( () => {
                    c.current = t
                }
                ),
                (0,
                i.useEffect)( () => (o.current && o.current.addEventListener("d", E, {
                    once: !0
                }),
                l(t.onOpen) && t.onOpen((0,
                i.isValidElement)(t.children) && t.children.props),
                () => {
                    let t = c.current;
                    l(t.onClose) && t.onClose((0,
                    i.isValidElement)(t.children) && t.children.props)
                }
                ), []),
                (0,
                i.useEffect)( () => (t.pauseOnFocusLoss && (document.hasFocus() || b(),
                window.addEventListener("focus", E),
                window.addEventListener("blur", b)),
                () => {
                    t.pauseOnFocusLoss && (window.removeEventListener("focus", E),
                    window.removeEventListener("blur", b))
                }
                ), [t.pauseOnFocusLoss]);
                let A = {
                    onMouseDown: _,
                    onTouchStart: _,
                    onMouseUp: v,
                    onTouchEnd: v
                };
                return d && h && (A.onMouseEnter = b,
                A.onMouseLeave = E),
                g && (A.onClick = t => {
                    p && p(t),
                    u.canCloseOnClick && f()
                }
                ),
                {
                    playToast: E,
                    pauseToast: b,
                    isRunning: n,
                    preventExitTransition: s,
                    toastRef: o,
                    eventHandlers: A
                }
            }(t)
              , {closeButton: u, children: c, autoClose: d, onClick: h, type: f, hideProgressBar: p, closeToast: g, transition: E, position: b, className: C, style: S, bodyClassName: A, bodyStyle: N, progressClassName: T, progressStyle: I, updateId: O, role: w, progress: k, rtl: U, toastId: R, deleteToast: M, isIn: P, isLoading: L, iconOut: D, closeOnClick: x, theme: F} = t
              , H = s("Toastify__toast", `Toastify__toast-theme--${F}`, `Toastify__toast--${f}`, {
                "Toastify__toast--rtl": U
            }, {
                "Toastify__toast--close-on-click": x
            })
              , j = l(C) ? C({
                rtl: U,
                position: b,
                type: f,
                defaultClassName: H
            }) : s(H, C)
              , G = !!k || !d
              , B = {
                closeToast: g,
                type: f,
                theme: F
            }
              , V = null;
            return !1 === u || (V = l(u) ? u(B) : (0,
            i.isValidElement)(u) ? (0,
            i.cloneElement)(u, B) : _(B)),
            i.createElement(E, {
                isIn: P,
                done: M,
                position: b,
                preventExitTransition: r,
                nodeRef: a
            }, i.createElement("div", {
                id: R,
                onClick: h,
                className: j,
                ...o,
                style: S,
                ref: a
            }, i.createElement("div", {
                ...P && {
                    role: w
                },
                className: l(A) ? A({
                    type: f
                }) : s("Toastify__toast-body", A),
                style: N
            }, null != D && i.createElement("div", {
                className: s("Toastify__toast-icon", {
                    "Toastify--animate-icon Toastify__zoom-enter": !L
                })
            }, D), i.createElement("div", null, c)), V, i.createElement(v, {
                ...O && !G ? {
                    key: `pb-${O}`
                } : {},
                rtl: U,
                theme: F,
                delay: d,
                isRunning: n,
                isIn: P,
                closeToast: g,
                hide: p,
                type: f,
                style: I,
                className: T,
                controlledProgress: G,
                progress: k || 0
            })))
        }
          , b = function(t, n) {
            return void 0 === n && (n = !1),
            {
                enter: `Toastify--animate Toastify__${t}-enter`,
                exit: `Toastify--animate Toastify__${t}-exit`,
                appendPosition: n
            }
        }
          , C = d(b("bounce", !0))
          , S = (d(b("slide", !0)),
        d(b("zoom")),
        d(b("flip")),
        (0,
        i.forwardRef)( (t, n) => {
            let {getToastToRender: r, containerRef: d, isToastActive: p} = function(t) {
                let[,n] = (0,
                i.useReducer)(t => t + 1, 0)
                  , [r,s] = (0,
                i.useState)([])
                  , d = (0,
                i.useRef)(null)
                  , p = (0,
                i.useRef)(new Map).current
                  , m = t => -1 !== r.indexOf(t)
                  , y = (0,
                i.useRef)({
                    toastKey: 1,
                    displayedToast: 0,
                    count: 0,
                    queue: [],
                    props: t,
                    containerId: null,
                    isToastActive: m,
                    getToast: t => p.get(t)
                }).current;
                function _(t) {
                    let {containerId: n} = t
                      , {limit: r} = y.props;
                    !r || n && y.containerId !== n || (y.count -= y.queue.length,
                    y.queue = [])
                }
                function v(t) {
                    s(n => null == t ? [] : n.filter(n => n !== t))
                }
                function E() {
                    let {toastContent: t, toastProps: n, staleId: r} = y.queue.shift();
                    C(t, n, r)
                }
                function b(t, r) {
                    var s, m;
                    let {delay: _, staleId: b, ...S} = r;
                    if (!c(t) || !d.current || y.props.enableMultiContainer && S.containerId !== y.props.containerId || p.has(S.toastId) && null == S.updateId)
                        return;
                    let {toastId: A, updateId: N, data: T} = S
                      , {props: I} = y
                      , O = () => v(A)
                      , w = null == N;
                    w && y.count++;
                    let k = {
                        ...I,
                        style: I.toastStyle,
                        key: y.toastKey++,
                        ...Object.fromEntries(Object.entries(S).filter(t => {
                            let[n,r] = t;
                            return null != r
                        }
                        )),
                        toastId: A,
                        updateId: N,
                        data: T,
                        closeToast: O,
                        isIn: !1,
                        className: u(S.className || I.toastClassName),
                        bodyClassName: u(S.bodyClassName || I.bodyClassName),
                        progressClassName: u(S.progressClassName || I.progressClassName),
                        autoClose: !S.isLoading && (s = S.autoClose,
                        m = I.autoClose,
                        !1 === s || a(s) && s > 0 ? s : m),
                        deleteToast() {
                            let t = h(p.get(A), "removed");
                            p.delete(A),
                            f.emit(4, t);
                            let r = y.queue.length;
                            if (y.count = null == A ? y.count - y.displayedToast : y.count - 1,
                            y.count < 0 && (y.count = 0),
                            r > 0) {
                                let i = null == A ? y.props.limit : 1;
                                if (1 === r || 1 === i)
                                    y.displayedToast++,
                                    E();
                                else {
                                    let s = i > r ? r : i;
                                    y.displayedToast = s;
                                    for (let a = 0; a < s; a++)
                                        E()
                                }
                            } else
                                n()
                        }
                    };
                    k.iconOut = function(t) {
                        let {theme: n, type: r, isLoading: s, icon: u} = t
                          , c = null
                          , d = {
                            theme: n,
                            type: r
                        };
                        return !1 === u || (l(u) ? c = u(d) : (0,
                        i.isValidElement)(u) ? c = (0,
                        i.cloneElement)(u, d) : o(u) || a(u) ? c = u : s ? c = g.spinner() : r in g && (c = g[r](d))),
                        c
                    }(k),
                    l(S.onOpen) && (k.onOpen = S.onOpen),
                    l(S.onClose) && (k.onClose = S.onClose),
                    k.closeButton = I.closeButton,
                    !1 === S.closeButton || c(S.closeButton) ? k.closeButton = S.closeButton : !0 === S.closeButton && (k.closeButton = !c(I.closeButton) || I.closeButton);
                    let U = t;
                    (0,
                    i.isValidElement)(t) && !o(t.type) ? U = (0,
                    i.cloneElement)(t, {
                        closeToast: O,
                        toastProps: k,
                        data: T
                    }) : l(t) && (U = t({
                        closeToast: O,
                        toastProps: k,
                        data: T
                    })),
                    I.limit && I.limit > 0 && y.count > I.limit && w ? y.queue.push({
                        toastContent: U,
                        toastProps: k,
                        staleId: b
                    }) : a(_) ? setTimeout( () => {
                        C(U, k, b)
                    }
                    , _) : C(U, k, b)
                }
                function C(t, n, r) {
                    let {toastId: i} = n;
                    r && p.delete(r);
                    let a = {
                        content: t,
                        props: n
                    };
                    p.set(i, a),
                    s(t => [...t, i].filter(t => t !== r)),
                    f.emit(4, h(a, null == a.props.updateId ? "added" : "updated"))
                }
                return (0,
                i.useEffect)( () => (y.containerId = t.containerId,
                f.cancelEmit(3).on(0, b).on(1, t => d.current && v(t)).on(5, _).emit(2, y),
                () => {
                    p.clear(),
                    f.emit(3, y)
                }
                ), []),
                (0,
                i.useEffect)( () => {
                    y.props = t,
                    y.isToastActive = m,
                    y.displayedToast = r.length
                }
                ),
                {
                    getToastToRender: function(n) {
                        let r = new Map
                          , i = Array.from(p.values());
                        return t.newestOnTop && i.reverse(),
                        i.forEach(t => {
                            let {position: n} = t.props;
                            r.has(n) || r.set(n, []),
                            r.get(n).push(t)
                        }
                        ),
                        Array.from(r, t => n(t[0], t[1]))
                    },
                    containerRef: d,
                    isToastActive: m
                }
            }(t)
              , {className: m, style: y, rtl: _, containerId: v} = t;
            return (0,
            i.useEffect)( () => {
                n && (n.current = d.current)
            }
            , []),
            i.createElement("div", {
                ref: d,
                className: "Toastify",
                id: v
            }, r( (t, n) => {
                let r = n.length ? {
                    ...y
                } : {
                    ...y,
                    pointerEvents: "none"
                };
                return i.createElement("div", {
                    className: function(t) {
                        let n = s("Toastify__toast-container", `Toastify__toast-container--${t}`, {
                            "Toastify__toast-container--rtl": _
                        });
                        return l(m) ? m({
                            position: t,
                            rtl: _,
                            defaultClassName: n
                        }) : s(n, u(m))
                    }(t),
                    style: r,
                    key: `container-${t}`
                }, n.map( (t, r) => {
                    let {content: s, props: a} = t;
                    return i.createElement(E, {
                        ...a,
                        isIn: p(a.toastId),
                        style: {
                            ...a.style,
                            "--nth": r + 1,
                            "--len": n.length
                        },
                        key: `toast-${a.key}`
                    }, s)
                }
                ))
            }
            ))
        }
        ));
        S.displayName = "ToastContainer",
        S.defaultProps = {
            position: "top-right",
            transition: C,
            autoClose: 5e3,
            closeButton: _,
            pauseOnHover: !0,
            pauseOnFocusLoss: !0,
            closeOnClick: !0,
            draggable: !0,
            draggablePercent: 80,
            draggableDirection: "x",
            role: "alert",
            theme: "light"
        };
        let A, N = new Map, T = [], I = 1;
        function O(t, n) {
            return N.size > 0 ? f.emit(0, t, n) : T.push({
                content: t,
                options: n
            }),
            n.toastId
        }
        function w(t, n) {
            return {
                ...n,
                type: n && n.type || t,
                toastId: n && (o(n.toastId) || a(n.toastId)) ? n.toastId : "" + I++
            }
        }
        function k(t) {
            return (n, r) => O(n, w(t, r))
        }
        function U(t, n) {
            return O(t, w("default", n))
        }
        U.loading = (t, n) => O(t, w("default", {
            isLoading: !0,
            autoClose: !1,
            closeOnClick: !1,
            closeButton: !1,
            draggable: !1,
            ...n
        })),
        U.promise = function(t, n, r) {
            let i, {pending: s, error: a, success: u} = n;
            s && (i = o(s) ? U.loading(s, r) : U.loading(s.render, {
                ...r,
                ...s
            }));
            let c = {
                isLoading: null,
                autoClose: null,
                closeOnClick: null,
                closeButton: null,
                draggable: null
            }
              , d = (t, n, s) => {
                if (null == n)
                    return void U.dismiss(i);
                let a = {
                    type: t,
                    ...c,
                    ...r,
                    data: s
                }
                  , l = o(n) ? {
                    render: n
                } : n;
                return i ? U.update(i, {
                    ...a,
                    ...l
                }) : U(l.render, {
                    ...a,
                    ...l
                }),
                s
            }
              , h = l(t) ? t() : t;
            return h.then(t => d("success", u, t)).catch(t => d("error", a, t)),
            h
        }
        ,
        U.success = k("success"),
        U.info = k("info"),
        U.error = k("error"),
        U.warning = k("warning"),
        U.warn = U.warning,
        U.dark = (t, n) => O(t, w("default", {
            theme: "dark",
            ...n
        })),
        U.dismiss = t => {
            N.size > 0 ? f.emit(1, t) : T = T.filter(n => null != t && n.options.toastId !== t)
        }
        ,
        U.clearWaitingQueue = function(t) {
            return void 0 === t && (t = {}),
            f.emit(5, t)
        }
        ,
        U.isActive = t => {
            let n = !1;
            return N.forEach(r => {
                r.isToastActive && r.isToastActive(t) && (n = !0)
            }
            ),
            n
        }
        ,
        U.update = function(t, n) {
            void 0 === n && (n = {}),
            setTimeout( () => {
                let r = function(t, n) {
                    let {containerId: r} = n
                      , i = N.get(r || A);
                    return i && i.getToast(t)
                }(t, n);
                if (r) {
                    let {props: i, content: s} = r
                      , a = {
                        delay: 100,
                        ...i,
                        ...n,
                        toastId: n.toastId || t,
                        updateId: "" + I++
                    };
                    a.toastId !== t && (a.staleId = t);
                    let o = a.render || s;
                    delete a.render,
                    O(o, a)
                }
            }
            , 0)
        }
        ,
        U.done = t => {
            U.update(t, {
                progress: 1
            })
        }
        ,
        U.onChange = t => (f.on(4, t),
        () => {
            f.off(4, t)
        }
        ),
        U.POSITION = {
            TOP_LEFT: "top-left",
            TOP_RIGHT: "top-right",
            TOP_CENTER: "top-center",
            BOTTOM_LEFT: "bottom-left",
            BOTTOM_RIGHT: "bottom-right",
            BOTTOM_CENTER: "bottom-center"
        },
        U.TYPE = {
            INFO: "info",
            SUCCESS: "success",
            WARNING: "warning",
            ERROR: "error",
            DEFAULT: "default"
        },
        f.on(2, t => {
            A = t.containerId || t,
            N.set(A, t),
            T.forEach(t => {
                f.emit(0, t.content, t.options)
            }
            ),
            T = []
        }
        ).on(3, t => {
            N.delete(t.containerId || t),
            0 === N.size && f.off(0).off(1).off(5)
        }
        )
    },
    7851: function(t, n, r) {
        "use strict";
        r.d(n, {
            m: function() {
                return P
            }
        });
        var i = /^\[(.+)\]$/;
        function s(t, n) {
            var r = t;
            return n.split("-").forEach(function(t) {
                r.nextPart.has(t) || r.nextPart.set(t, {
                    nextPart: new Map,
                    validators: []
                }),
                r = r.nextPart.get(t)
            }),
            r
        }
        var a = /\s+/;
        function o() {
            for (var t, n, r = 0, i = ""; r < arguments.length; )
                (t = arguments[r++]) && (n = function t(n) {
                    if ("string" == typeof n)
                        return n;
                    for (var r, i = "", s = 0; s < n.length; s++)
                        n[s] && (r = t(n[s])) && (i && (i += " "),
                        i += r);
                    return i
                }(t)) && (i && (i += " "),
                i += n);
            return i
        }
        function l(t) {
            var n = function(n) {
                return n[t] || []
            };
            return n.isThemeGetter = !0,
            n
        }
        var u = /^\[(?:([a-z-]+):)?(.+)\]$/i
          , c = /^\d+\/\d+$/
          , d = new Set(["px", "full", "screen"])
          , h = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/
          , f = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/
          , p = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
        function g(t) {
            return b(t) || d.has(t) || c.test(t) || m(t)
        }
        function m(t) {
            return O(t, "length", w)
        }
        function y(t) {
            return O(t, "size", k)
        }
        function _(t) {
            return O(t, "position", k)
        }
        function v(t) {
            return O(t, "url", U)
        }
        function E(t) {
            return O(t, "number", b)
        }
        function b(t) {
            return !Number.isNaN(Number(t))
        }
        function C(t) {
            return t.endsWith("%") && b(t.slice(0, -1))
        }
        function S(t) {
            return R(t) || O(t, "number", R)
        }
        function A(t) {
            return u.test(t)
        }
        function N() {
            return !0
        }
        function T(t) {
            return h.test(t)
        }
        function I(t) {
            return O(t, "", M)
        }
        function O(t, n, r) {
            var i = u.exec(t);
            return !!i && (i[1] ? i[1] === n : r(i[2]))
        }
        function w(t) {
            return f.test(t)
        }
        function k() {
            return !1
        }
        function U(t) {
            return t.startsWith("url(")
        }
        function R(t) {
            return Number.isInteger(Number(t))
        }
        function M(t) {
            return p.test(t)
        }
        var P = function() {
            for (var t, n, r, l = arguments.length, u = Array(l), c = 0; c < l; c++)
                u[c] = arguments[c];
            var d = function(a) {
                var o = u[0];
                return n = (t = function(t) {
                    var n, r, a, o, l, u, c, d, h, f, p;
                    return {
                        cache: function(t) {
                            if (t < 1)
                                return {
                                    get: function() {},
                                    set: function() {}
                                };
                            var n = 0
                              , r = new Map
                              , i = new Map;
                            function s(s, a) {
                                r.set(s, a),
                                ++n > t && (n = 0,
                                i = r,
                                r = new Map)
                            }
                            return {
                                get: function(t) {
                                    var n = r.get(t);
                                    return void 0 !== n ? n : void 0 !== (n = i.get(t)) ? (s(t, n),
                                    n) : void 0
                                },
                                set: function(t, n) {
                                    r.has(t) ? r.set(t, n) : s(t, n)
                                }
                            }
                        }(t.cacheSize),
                        splitModifiers: (r = 1 === (n = t.separator || ":").length,
                        a = n[0],
                        o = n.length,
                        function(t) {
                            for (var i, s = [], l = 0, u = 0, c = 0; c < t.length; c++) {
                                var d = t[c];
                                if (0 === l) {
                                    if (d === a && (r || t.slice(c, c + o) === n)) {
                                        s.push(t.slice(u, c)),
                                        u = c + o;
                                        continue
                                    }
                                    if ("/" === d) {
                                        i = c;
                                        continue
                                    }
                                }
                                "[" === d ? l++ : "]" === d && l--
                            }
                            var h = 0 === s.length ? t : t.substring(u)
                              , f = h.startsWith("!")
                              , p = f ? h.substring(1) : h;
                            return {
                                modifiers: s,
                                hasImportantModifier: f,
                                baseClassName: p,
                                maybePostfixModifierPosition: i && i > u ? i - u : void 0
                            }
                        }
                        ),
                        ...(d = t.theme,
                        h = t.prefix,
                        f = {
                            nextPart: new Map,
                            validators: []
                        },
                        (p = Object.entries(t.classGroups),
                        h ? p.map(function(t) {
                            return [t[0], t[1].map(function(t) {
                                return "string" == typeof t ? h + t : "object" == typeof t ? Object.fromEntries(Object.entries(t).map(function(t) {
                                    return [h + t[0], t[1]]
                                })) : t
                            })]
                        }) : p).forEach(function(t) {
                            var n = t[0];
                            (function t(n, r, i, a) {
                                n.forEach(function(n) {
                                    if ("string" == typeof n) {
                                        ("" === n ? r : s(r, n)).classGroupId = i;
                                        return
                                    }
                                    if ("function" == typeof n) {
                                        if (n.isThemeGetter) {
                                            t(n(a), r, i, a);
                                            return
                                        }
                                        r.validators.push({
                                            validator: n,
                                            classGroupId: i
                                        });
                                        return
                                    }
                                    Object.entries(n).forEach(function(n) {
                                        var o = n[0];
                                        t(n[1], s(r, o), i, a)
                                    })
                                })
                            }
                            )(t[1], f, n, d)
                        }),
                        l = t.conflictingClassGroups,
                        c = void 0 === (u = t.conflictingClassGroupModifiers) ? {} : u,
                        {
                            getClassGroupId: function(t) {
                                var n = t.split("-");
                                return "" === n[0] && 1 !== n.length && n.shift(),
                                function t(n, r) {
                                    if (0 === n.length)
                                        return r.classGroupId;
                                    var i = n[0]
                                      , s = r.nextPart.get(i)
                                      , a = s ? t(n.slice(1), s) : void 0;
                                    if (a)
                                        return a;
                                    if (0 !== r.validators.length) {
                                        var o = n.join("-");
                                        return r.validators.find(function(t) {
                                            return (0,
                                            t.validator)(o)
                                        })?.classGroupId
                                    }
                                }(n, f) || function(t) {
                                    if (i.test(t)) {
                                        var n = i.exec(t)[1]
                                          , r = n?.substring(0, n.indexOf(":"));
                                        if (r)
                                            return "arbitrary.." + r
                                    }
                                }(t)
                            },
                            getConflictingClassGroupIds: function(t, n) {
                                var r = l[t] || [];
                                return n && c[t] ? [].concat(r, c[t]) : r
                            }
                        })
                    }
                }(u.slice(1).reduce(function(t, n) {
                    return n(t)
                }, o()))).cache.get,
                r = t.cache.set,
                d = h,
                h(a)
            };
            function h(i) {
                var s, o, l, u, c = n(i);
                if (c)
                    return c;
                var d = (s = t.splitModifiers,
                o = t.getClassGroupId,
                l = t.getConflictingClassGroupIds,
                u = new Set,
                i.trim().split(a).map(function(t) {
                    var n = s(t)
                      , r = n.modifiers
                      , i = n.hasImportantModifier
                      , a = n.baseClassName
                      , l = n.maybePostfixModifierPosition
                      , u = o(l ? a.substring(0, l) : a)
                      , c = Boolean(l);
                    if (!u) {
                        if (!l || !(u = o(a)))
                            return {
                                isTailwindClass: !1,
                                originalClassName: t
                            };
                        c = !1
                    }
                    var d = (function(t) {
                        if (t.length <= 1)
                            return t;
                        var n = []
                          , r = [];
                        return t.forEach(function(t) {
                            "[" === t[0] ? (n.push.apply(n, r.sort().concat([t])),
                            r = []) : r.push(t)
                        }),
                        n.push.apply(n, r.sort()),
                        n
                    }
                    )(r).join(":");
                    return {
                        isTailwindClass: !0,
                        modifierId: i ? d + "!" : d,
                        classGroupId: u,
                        originalClassName: t,
                        hasPostfixModifier: c
                    }
                }).reverse().filter(function(t) {
                    if (!t.isTailwindClass)
                        return !0;
                    var n = t.modifierId
                      , r = t.classGroupId
                      , i = t.hasPostfixModifier
                      , s = n + r;
                    return !u.has(s) && (u.add(s),
                    l(r, i).forEach(function(t) {
                        return u.add(n + t)
                    }),
                    !0)
                }).reverse().map(function(t) {
                    return t.originalClassName
                }).join(" "));
                return r(i, d),
                d
            }
            return function() {
                return d(o.apply(null, arguments))
            }
        }(function() {
            var t = l("colors")
              , n = l("spacing")
              , r = l("blur")
              , i = l("brightness")
              , s = l("borderColor")
              , a = l("borderRadius")
              , o = l("borderSpacing")
              , u = l("borderWidth")
              , c = l("contrast")
              , d = l("grayscale")
              , h = l("hueRotate")
              , f = l("invert")
              , p = l("gap")
              , O = l("gradientColorStops")
              , w = l("gradientColorStopPositions")
              , k = l("inset")
              , U = l("margin")
              , R = l("opacity")
              , M = l("padding")
              , P = l("saturate")
              , L = l("scale")
              , D = l("sepia")
              , x = l("skew")
              , F = l("space")
              , H = l("translate")
              , j = function() {
                return ["auto", "contain", "none"]
            }
              , G = function() {
                return ["auto", "hidden", "clip", "visible", "scroll"]
            }
              , B = function() {
                return ["auto", A, n]
            }
              , V = function() {
                return [A, n]
            }
              , q = function() {
                return ["", g]
            }
              , z = function() {
                return ["auto", b, A]
            }
              , K = function() {
                return ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"]
            }
              , W = function() {
                return ["solid", "dashed", "dotted", "double", "none"]
            }
              , Y = function() {
                return ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity", "plus-lighter"]
            }
              , Q = function() {
                return ["start", "end", "center", "between", "around", "evenly", "stretch"]
            }
              , J = function() {
                return ["", "0", A]
            }
              , Z = function() {
                return ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"]
            }
              , $ = function() {
                return [b, E]
            }
              , X = function() {
                return [b, A]
            };
            return {
                cacheSize: 500,
                theme: {
                    colors: [N],
                    spacing: [g],
                    blur: ["none", "", T, A],
                    brightness: $(),
                    borderColor: [t],
                    borderRadius: ["none", "", "full", T, A],
                    borderSpacing: V(),
                    borderWidth: q(),
                    contrast: $(),
                    grayscale: J(),
                    hueRotate: X(),
                    invert: J(),
                    gap: V(),
                    gradientColorStops: [t],
                    gradientColorStopPositions: [C, m],
                    inset: B(),
                    margin: B(),
                    opacity: $(),
                    padding: V(),
                    saturate: $(),
                    scale: $(),
                    sepia: J(),
                    skew: X(),
                    space: V(),
                    translate: V()
                },
                classGroups: {
                    aspect: [{
                        aspect: ["auto", "square", "video", A]
                    }],
                    container: ["container"],
                    columns: [{
                        columns: [T]
                    }],
                    "break-after": [{
                        "break-after": Z()
                    }],
                    "break-before": [{
                        "break-before": Z()
                    }],
                    "break-inside": [{
                        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
                    }],
                    "box-decoration": [{
                        "box-decoration": ["slice", "clone"]
                    }],
                    box: [{
                        box: ["border", "content"]
                    }],
                    display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
                    float: [{
                        float: ["right", "left", "none"]
                    }],
                    clear: [{
                        clear: ["left", "right", "both", "none"]
                    }],
                    isolation: ["isolate", "isolation-auto"],
                    "object-fit": [{
                        object: ["contain", "cover", "fill", "none", "scale-down"]
                    }],
                    "object-position": [{
                        object: [].concat(K(), [A])
                    }],
                    overflow: [{
                        overflow: G()
                    }],
                    "overflow-x": [{
                        "overflow-x": G()
                    }],
                    "overflow-y": [{
                        "overflow-y": G()
                    }],
                    overscroll: [{
                        overscroll: j()
                    }],
                    "overscroll-x": [{
                        "overscroll-x": j()
                    }],
                    "overscroll-y": [{
                        "overscroll-y": j()
                    }],
                    position: ["static", "fixed", "absolute", "relative", "sticky"],
                    inset: [{
                        inset: [k]
                    }],
                    "inset-x": [{
                        "inset-x": [k]
                    }],
                    "inset-y": [{
                        "inset-y": [k]
                    }],
                    start: [{
                        start: [k]
                    }],
                    end: [{
                        end: [k]
                    }],
                    top: [{
                        top: [k]
                    }],
                    right: [{
                        right: [k]
                    }],
                    bottom: [{
                        bottom: [k]
                    }],
                    left: [{
                        left: [k]
                    }],
                    visibility: ["visible", "invisible", "collapse"],
                    z: [{
                        z: ["auto", S]
                    }],
                    basis: [{
                        basis: B()
                    }],
                    "flex-direction": [{
                        flex: ["row", "row-reverse", "col", "col-reverse"]
                    }],
                    "flex-wrap": [{
                        flex: ["wrap", "wrap-reverse", "nowrap"]
                    }],
                    flex: [{
                        flex: ["1", "auto", "initial", "none", A]
                    }],
                    grow: [{
                        grow: J()
                    }],
                    shrink: [{
                        shrink: J()
                    }],
                    order: [{
                        order: ["first", "last", "none", S]
                    }],
                    "grid-cols": [{
                        "grid-cols": [N]
                    }],
                    "col-start-end": [{
                        col: ["auto", {
                            span: ["full", S]
                        }, A]
                    }],
                    "col-start": [{
                        "col-start": z()
                    }],
                    "col-end": [{
                        "col-end": z()
                    }],
                    "grid-rows": [{
                        "grid-rows": [N]
                    }],
                    "row-start-end": [{
                        row: ["auto", {
                            span: [S]
                        }, A]
                    }],
                    "row-start": [{
                        "row-start": z()
                    }],
                    "row-end": [{
                        "row-end": z()
                    }],
                    "grid-flow": [{
                        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
                    }],
                    "auto-cols": [{
                        "auto-cols": ["auto", "min", "max", "fr", A]
                    }],
                    "auto-rows": [{
                        "auto-rows": ["auto", "min", "max", "fr", A]
                    }],
                    gap: [{
                        gap: [p]
                    }],
                    "gap-x": [{
                        "gap-x": [p]
                    }],
                    "gap-y": [{
                        "gap-y": [p]
                    }],
                    "justify-content": [{
                        justify: ["normal"].concat(Q())
                    }],
                    "justify-items": [{
                        "justify-items": ["start", "end", "center", "stretch"]
                    }],
                    "justify-self": [{
                        "justify-self": ["auto", "start", "end", "center", "stretch"]
                    }],
                    "align-content": [{
                        content: ["normal"].concat(Q(), ["baseline"])
                    }],
                    "align-items": [{
                        items: ["start", "end", "center", "baseline", "stretch"]
                    }],
                    "align-self": [{
                        self: ["auto", "start", "end", "center", "stretch", "baseline"]
                    }],
                    "place-content": [{
                        "place-content": [].concat(Q(), ["baseline"])
                    }],
                    "place-items": [{
                        "place-items": ["start", "end", "center", "baseline", "stretch"]
                    }],
                    "place-self": [{
                        "place-self": ["auto", "start", "end", "center", "stretch"]
                    }],
                    p: [{
                        p: [M]
                    }],
                    px: [{
                        px: [M]
                    }],
                    py: [{
                        py: [M]
                    }],
                    ps: [{
                        ps: [M]
                    }],
                    pe: [{
                        pe: [M]
                    }],
                    pt: [{
                        pt: [M]
                    }],
                    pr: [{
                        pr: [M]
                    }],
                    pb: [{
                        pb: [M]
                    }],
                    pl: [{
                        pl: [M]
                    }],
                    m: [{
                        m: [U]
                    }],
                    mx: [{
                        mx: [U]
                    }],
                    my: [{
                        my: [U]
                    }],
                    ms: [{
                        ms: [U]
                    }],
                    me: [{
                        me: [U]
                    }],
                    mt: [{
                        mt: [U]
                    }],
                    mr: [{
                        mr: [U]
                    }],
                    mb: [{
                        mb: [U]
                    }],
                    ml: [{
                        ml: [U]
                    }],
                    "space-x": [{
                        "space-x": [F]
                    }],
                    "space-x-reverse": ["space-x-reverse"],
                    "space-y": [{
                        "space-y": [F]
                    }],
                    "space-y-reverse": ["space-y-reverse"],
                    w: [{
                        w: ["auto", "min", "max", "fit", A, n]
                    }],
                    "min-w": [{
                        "min-w": ["min", "max", "fit", A, g]
                    }],
                    "max-w": [{
                        "max-w": ["0", "none", "full", "min", "max", "fit", "prose", {
                            screen: [T]
                        }, T, A]
                    }],
                    h: [{
                        h: [A, n, "auto", "min", "max", "fit"]
                    }],
                    "min-h": [{
                        "min-h": ["min", "max", "fit", A, g]
                    }],
                    "max-h": [{
                        "max-h": [A, n, "min", "max", "fit"]
                    }],
                    "font-size": [{
                        text: ["base", T, m]
                    }],
                    "font-smoothing": ["antialiased", "subpixel-antialiased"],
                    "font-style": ["italic", "not-italic"],
                    "font-weight": [{
                        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", E]
                    }],
                    "font-family": [{
                        font: [N]
                    }],
                    "fvn-normal": ["normal-nums"],
                    "fvn-ordinal": ["ordinal"],
                    "fvn-slashed-zero": ["slashed-zero"],
                    "fvn-figure": ["lining-nums", "oldstyle-nums"],
                    "fvn-spacing": ["proportional-nums", "tabular-nums"],
                    "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
                    tracking: [{
                        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", A]
                    }],
                    "line-clamp": [{
                        "line-clamp": ["none", b, E]
                    }],
                    leading: [{
                        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", A, g]
                    }],
                    "list-image": [{
                        "list-image": ["none", A]
                    }],
                    "list-style-type": [{
                        list: ["none", "disc", "decimal", A]
                    }],
                    "list-style-position": [{
                        list: ["inside", "outside"]
                    }],
                    "placeholder-color": [{
                        placeholder: [t]
                    }],
                    "placeholder-opacity": [{
                        "placeholder-opacity": [R]
                    }],
                    "text-alignment": [{
                        text: ["left", "center", "right", "justify", "start", "end"]
                    }],
                    "text-color": [{
                        text: [t]
                    }],
                    "text-opacity": [{
                        "text-opacity": [R]
                    }],
                    "text-decoration": ["underline", "overline", "line-through", "no-underline"],
                    "text-decoration-style": [{
                        decoration: [].concat(W(), ["wavy"])
                    }],
                    "text-decoration-thickness": [{
                        decoration: ["auto", "from-font", g]
                    }],
                    "underline-offset": [{
                        "underline-offset": ["auto", A, g]
                    }],
                    "text-decoration-color": [{
                        decoration: [t]
                    }],
                    "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
                    "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
                    indent: [{
                        indent: V()
                    }],
                    "vertical-align": [{
                        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", A]
                    }],
                    whitespace: [{
                        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
                    }],
                    break: [{
                        break: ["normal", "words", "all", "keep"]
                    }],
                    hyphens: [{
                        hyphens: ["none", "manual", "auto"]
                    }],
                    content: [{
                        content: ["none", A]
                    }],
                    "bg-attachment": [{
                        bg: ["fixed", "local", "scroll"]
                    }],
                    "bg-clip": [{
                        "bg-clip": ["border", "padding", "content", "text"]
                    }],
                    "bg-opacity": [{
                        "bg-opacity": [R]
                    }],
                    "bg-origin": [{
                        "bg-origin": ["border", "padding", "content"]
                    }],
                    "bg-position": [{
                        bg: [].concat(K(), [_])
                    }],
                    "bg-repeat": [{
                        bg: ["no-repeat", {
                            repeat: ["", "x", "y", "round", "space"]
                        }]
                    }],
                    "bg-size": [{
                        bg: ["auto", "cover", "contain", y]
                    }],
                    "bg-image": [{
                        bg: ["none", {
                            "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
                        }, v]
                    }],
                    "bg-color": [{
                        bg: [t]
                    }],
                    "gradient-from-pos": [{
                        from: [w]
                    }],
                    "gradient-via-pos": [{
                        via: [w]
                    }],
                    "gradient-to-pos": [{
                        to: [w]
                    }],
                    "gradient-from": [{
                        from: [O]
                    }],
                    "gradient-via": [{
                        via: [O]
                    }],
                    "gradient-to": [{
                        to: [O]
                    }],
                    rounded: [{
                        rounded: [a]
                    }],
                    "rounded-s": [{
                        "rounded-s": [a]
                    }],
                    "rounded-e": [{
                        "rounded-e": [a]
                    }],
                    "rounded-t": [{
                        "rounded-t": [a]
                    }],
                    "rounded-r": [{
                        "rounded-r": [a]
                    }],
                    "rounded-b": [{
                        "rounded-b": [a]
                    }],
                    "rounded-l": [{
                        "rounded-l": [a]
                    }],
                    "rounded-ss": [{
                        "rounded-ss": [a]
                    }],
                    "rounded-se": [{
                        "rounded-se": [a]
                    }],
                    "rounded-ee": [{
                        "rounded-ee": [a]
                    }],
                    "rounded-es": [{
                        "rounded-es": [a]
                    }],
                    "rounded-tl": [{
                        "rounded-tl": [a]
                    }],
                    "rounded-tr": [{
                        "rounded-tr": [a]
                    }],
                    "rounded-br": [{
                        "rounded-br": [a]
                    }],
                    "rounded-bl": [{
                        "rounded-bl": [a]
                    }],
                    "border-w": [{
                        border: [u]
                    }],
                    "border-w-x": [{
                        "border-x": [u]
                    }],
                    "border-w-y": [{
                        "border-y": [u]
                    }],
                    "border-w-s": [{
                        "border-s": [u]
                    }],
                    "border-w-e": [{
                        "border-e": [u]
                    }],
                    "border-w-t": [{
                        "border-t": [u]
                    }],
                    "border-w-r": [{
                        "border-r": [u]
                    }],
                    "border-w-b": [{
                        "border-b": [u]
                    }],
                    "border-w-l": [{
                        "border-l": [u]
                    }],
                    "border-opacity": [{
                        "border-opacity": [R]
                    }],
                    "border-style": [{
                        border: [].concat(W(), ["hidden"])
                    }],
                    "divide-x": [{
                        "divide-x": [u]
                    }],
                    "divide-x-reverse": ["divide-x-reverse"],
                    "divide-y": [{
                        "divide-y": [u]
                    }],
                    "divide-y-reverse": ["divide-y-reverse"],
                    "divide-opacity": [{
                        "divide-opacity": [R]
                    }],
                    "divide-style": [{
                        divide: W()
                    }],
                    "border-color": [{
                        border: [s]
                    }],
                    "border-color-x": [{
                        "border-x": [s]
                    }],
                    "border-color-y": [{
                        "border-y": [s]
                    }],
                    "border-color-t": [{
                        "border-t": [s]
                    }],
                    "border-color-r": [{
                        "border-r": [s]
                    }],
                    "border-color-b": [{
                        "border-b": [s]
                    }],
                    "border-color-l": [{
                        "border-l": [s]
                    }],
                    "divide-color": [{
                        divide: [s]
                    }],
                    "outline-style": [{
                        outline: [""].concat(W())
                    }],
                    "outline-offset": [{
                        "outline-offset": [A, g]
                    }],
                    "outline-w": [{
                        outline: [g]
                    }],
                    "outline-color": [{
                        outline: [t]
                    }],
                    "ring-w": [{
                        ring: q()
                    }],
                    "ring-w-inset": ["ring-inset"],
                    "ring-color": [{
                        ring: [t]
                    }],
                    "ring-opacity": [{
                        "ring-opacity": [R]
                    }],
                    "ring-offset-w": [{
                        "ring-offset": [g]
                    }],
                    "ring-offset-color": [{
                        "ring-offset": [t]
                    }],
                    shadow: [{
                        shadow: ["", "inner", "none", T, I]
                    }],
                    "shadow-color": [{
                        shadow: [N]
                    }],
                    opacity: [{
                        opacity: [R]
                    }],
                    "mix-blend": [{
                        "mix-blend": Y()
                    }],
                    "bg-blend": [{
                        "bg-blend": Y()
                    }],
                    filter: [{
                        filter: ["", "none"]
                    }],
                    blur: [{
                        blur: [r]
                    }],
                    brightness: [{
                        brightness: [i]
                    }],
                    contrast: [{
                        contrast: [c]
                    }],
                    "drop-shadow": [{
                        "drop-shadow": ["", "none", T, A]
                    }],
                    grayscale: [{
                        grayscale: [d]
                    }],
                    "hue-rotate": [{
                        "hue-rotate": [h]
                    }],
                    invert: [{
                        invert: [f]
                    }],
                    saturate: [{
                        saturate: [P]
                    }],
                    sepia: [{
                        sepia: [D]
                    }],
                    "backdrop-filter": [{
                        "backdrop-filter": ["", "none"]
                    }],
                    "backdrop-blur": [{
                        "backdrop-blur": [r]
                    }],
                    "backdrop-brightness": [{
                        "backdrop-brightness": [i]
                    }],
                    "backdrop-contrast": [{
                        "backdrop-contrast": [c]
                    }],
                    "backdrop-grayscale": [{
                        "backdrop-grayscale": [d]
                    }],
                    "backdrop-hue-rotate": [{
                        "backdrop-hue-rotate": [h]
                    }],
                    "backdrop-invert": [{
                        "backdrop-invert": [f]
                    }],
                    "backdrop-opacity": [{
                        "backdrop-opacity": [R]
                    }],
                    "backdrop-saturate": [{
                        "backdrop-saturate": [P]
                    }],
                    "backdrop-sepia": [{
                        "backdrop-sepia": [D]
                    }],
                    "border-collapse": [{
                        border: ["collapse", "separate"]
                    }],
                    "border-spacing": [{
                        "border-spacing": [o]
                    }],
                    "border-spacing-x": [{
                        "border-spacing-x": [o]
                    }],
                    "border-spacing-y": [{
                        "border-spacing-y": [o]
                    }],
                    "table-layout": [{
                        table: ["auto", "fixed"]
                    }],
                    caption: [{
                        caption: ["top", "bottom"]
                    }],
                    transition: [{
                        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", A]
                    }],
                    duration: [{
                        duration: X()
                    }],
                    ease: [{
                        ease: ["linear", "in", "out", "in-out", A]
                    }],
                    delay: [{
                        delay: X()
                    }],
                    animate: [{
                        animate: ["none", "spin", "ping", "pulse", "bounce", A]
                    }],
                    transform: [{
                        transform: ["", "gpu", "none"]
                    }],
                    scale: [{
                        scale: [L]
                    }],
                    "scale-x": [{
                        "scale-x": [L]
                    }],
                    "scale-y": [{
                        "scale-y": [L]
                    }],
                    rotate: [{
                        rotate: [S, A]
                    }],
                    "translate-x": [{
                        "translate-x": [H]
                    }],
                    "translate-y": [{
                        "translate-y": [H]
                    }],
                    "skew-x": [{
                        "skew-x": [x]
                    }],
                    "skew-y": [{
                        "skew-y": [x]
                    }],
                    "transform-origin": [{
                        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", A]
                    }],
                    accent: [{
                        accent: ["auto", t]
                    }],
                    appearance: ["appearance-none"],
                    cursor: [{
                        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", A]
                    }],
                    "caret-color": [{
                        caret: [t]
                    }],
                    "pointer-events": [{
                        "pointer-events": ["none", "auto"]
                    }],
                    resize: [{
                        resize: ["none", "y", "x", ""]
                    }],
                    "scroll-behavior": [{
                        scroll: ["auto", "smooth"]
                    }],
                    "scroll-m": [{
                        "scroll-m": V()
                    }],
                    "scroll-mx": [{
                        "scroll-mx": V()
                    }],
                    "scroll-my": [{
                        "scroll-my": V()
                    }],
                    "scroll-ms": [{
                        "scroll-ms": V()
                    }],
                    "scroll-me": [{
                        "scroll-me": V()
                    }],
                    "scroll-mt": [{
                        "scroll-mt": V()
                    }],
                    "scroll-mr": [{
                        "scroll-mr": V()
                    }],
                    "scroll-mb": [{
                        "scroll-mb": V()
                    }],
                    "scroll-ml": [{
                        "scroll-ml": V()
                    }],
                    "scroll-p": [{
                        "scroll-p": V()
                    }],
                    "scroll-px": [{
                        "scroll-px": V()
                    }],
                    "scroll-py": [{
                        "scroll-py": V()
                    }],
                    "scroll-ps": [{
                        "scroll-ps": V()
                    }],
                    "scroll-pe": [{
                        "scroll-pe": V()
                    }],
                    "scroll-pt": [{
                        "scroll-pt": V()
                    }],
                    "scroll-pr": [{
                        "scroll-pr": V()
                    }],
                    "scroll-pb": [{
                        "scroll-pb": V()
                    }],
                    "scroll-pl": [{
                        "scroll-pl": V()
                    }],
                    "snap-align": [{
                        snap: ["start", "end", "center", "align-none"]
                    }],
                    "snap-stop": [{
                        snap: ["normal", "always"]
                    }],
                    "snap-type": [{
                        snap: ["none", "x", "y", "both"]
                    }],
                    "snap-strictness": [{
                        snap: ["mandatory", "proximity"]
                    }],
                    touch: [{
                        touch: ["auto", "none", "pinch-zoom", "manipulation", {
                            pan: ["x", "left", "right", "y", "up", "down"]
                        }]
                    }],
                    select: [{
                        select: ["none", "text", "all", "auto"]
                    }],
                    "will-change": [{
                        "will-change": ["auto", "scroll", "contents", "transform", A]
                    }],
                    fill: [{
                        fill: [t, "none"]
                    }],
                    "stroke-w": [{
                        stroke: [g, E]
                    }],
                    stroke: [{
                        stroke: [t, "none"]
                    }],
                    sr: ["sr-only", "not-sr-only"]
                },
                conflictingClassGroups: {
                    overflow: ["overflow-x", "overflow-y"],
                    overscroll: ["overscroll-x", "overscroll-y"],
                    inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
                    "inset-x": ["right", "left"],
                    "inset-y": ["top", "bottom"],
                    flex: ["basis", "grow", "shrink"],
                    gap: ["gap-x", "gap-y"],
                    p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
                    px: ["pr", "pl"],
                    py: ["pt", "pb"],
                    m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
                    mx: ["mr", "ml"],
                    my: ["mt", "mb"],
                    "font-size": ["leading"],
                    "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
                    "fvn-ordinal": ["fvn-normal"],
                    "fvn-slashed-zero": ["fvn-normal"],
                    "fvn-figure": ["fvn-normal"],
                    "fvn-spacing": ["fvn-normal"],
                    "fvn-fraction": ["fvn-normal"],
                    rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
                    "rounded-s": ["rounded-ss", "rounded-es"],
                    "rounded-e": ["rounded-se", "rounded-ee"],
                    "rounded-t": ["rounded-tl", "rounded-tr"],
                    "rounded-r": ["rounded-tr", "rounded-br"],
                    "rounded-b": ["rounded-br", "rounded-bl"],
                    "rounded-l": ["rounded-tl", "rounded-bl"],
                    "border-spacing": ["border-spacing-x", "border-spacing-y"],
                    "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
                    "border-w-x": ["border-w-r", "border-w-l"],
                    "border-w-y": ["border-w-t", "border-w-b"],
                    "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
                    "border-color-x": ["border-color-r", "border-color-l"],
                    "border-color-y": ["border-color-t", "border-color-b"],
                    "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
                    "scroll-mx": ["scroll-mr", "scroll-ml"],
                    "scroll-my": ["scroll-mt", "scroll-mb"],
                    "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
                    "scroll-px": ["scroll-pr", "scroll-pl"],
                    "scroll-py": ["scroll-pt", "scroll-pb"]
                },
                conflictingClassGroupModifiers: {
                    "font-size": ["leading"]
                }
            }
        })
    }
}, function(t) {
    var n = function(n) {
        return t(t.s = n)
    };
    t.O(0, [774, 179], function() {
        return n(6840),
        n(880)
    }),
    _N_E = t.O()
}
]);
